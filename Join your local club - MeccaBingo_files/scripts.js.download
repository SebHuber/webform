if ("undefined" == typeof jQuery) throw new Error("Bootstrap's JavaScript requires jQuery"); + function(a) {
    "use strict";

    function b() {
        var a = document.createElement("bootstrap"),
            b = {
                WebkitTransition: "webkitTransitionEnd",
                MozTransition: "transitionend",
                OTransition: "oTransitionEnd otransitionend",
                transition: "transitionend"
            };
        for (var c in b)
            if (void 0 !== a.style[c]) return {
                end: b[c]
            };
        return !1
    }
    a.fn.emulateTransitionEnd = function(b) {
        var c = !1,
            d = this;
        a(this).one(a.support.transition.end, function() {
            c = !0
        });
        var e = function() {
            c || a(d).trigger(a.support.transition.end)
        };
        return setTimeout(e, b), this
    }, a(function() {
        a.support.transition = b()
    })
}(jQuery), + function(a) {
    "use strict";
    var b = '[data-dismiss="alert"]',
        c = function(c) {
            a(c).on("click", b, this.close)
        };
    c.prototype.close = function(b) {
        function c() {
            f.trigger("closed.bs.alert").remove()
        }
        var d = a(this),
            e = d.attr("data-target");
        e || (e = d.attr("href"), e = e && e.replace(/.*(?=#[^\s]*$)/, ""));
        var f = a(e);
        b && b.preventDefault(), f.length || (f = d.hasClass("alert") ? d : d.parent()), f.trigger(b = a.Event("close.bs.alert")), b.isDefaultPrevented() || (f.removeClass("in"), a.support.transition && f.hasClass("fade") ? f.one(a.support.transition.end, c).emulateTransitionEnd(150) : c())
    };
    var d = a.fn.alert;
    a.fn.alert = function(b) {
        return this.each(function() {
            var d = a(this),
                e = d.data("bs.alert");
            e || d.data("bs.alert", e = new c(this)), "string" == typeof b && e[b].call(d)
        })
    }, a.fn.alert.Constructor = c, a.fn.alert.noConflict = function() {
        return a.fn.alert = d, this
    }, a(document).on("click.bs.alert.data-api", b, c.prototype.close)
}(jQuery), + function(a) {
    "use strict";
    var b = function(c, d) {
        this.$element = a(c), this.options = a.extend({}, b.DEFAULTS, d), this.isLoading = !1
    };
    b.DEFAULTS = {
        loadingText: "loading..."
    }, b.prototype.setState = function(b) {
        var c = "disabled",
            d = this.$element,
            e = d.is("input") ? "val" : "html",
            f = d.data();
        b += "Text", f.resetText || d.data("resetText", d[e]()), d[e](f[b] || this.options[b]), setTimeout(a.proxy(function() {
            "loadingText" == b ? (this.isLoading = !0, d.addClass(c).attr(c, c)) : this.isLoading && (this.isLoading = !1, d.removeClass(c).removeAttr(c))
        }, this), 0)
    }, b.prototype.toggle = function() {
        var a = !0,
            b = this.$element.closest('[data-toggle="buttons"]');
        if (b.length) {
            var c = this.$element.find("input");
            "radio" == c.prop("type") && (c.prop("checked") && this.$element.hasClass("active") ? a = !1 : b.find(".active").removeClass("active")), a && c.prop("checked", !this.$element.hasClass("active")).trigger("change")
        }
        a && this.$element.toggleClass("active")
    };
    var c = a.fn.button;
    a.fn.button = function(c) {
        return this.each(function() {
            var d = a(this),
                e = d.data("bs.button"),
                f = "object" == typeof c && c;
            e || d.data("bs.button", e = new b(this, f)), "toggle" == c ? e.toggle() : c && e.setState(c)
        })
    }, a.fn.button.Constructor = b, a.fn.button.noConflict = function() {
        return a.fn.button = c, this
    }, a(document).on("click.bs.button.data-api", "[data-toggle^=button]", function(b) {
        var c = a(b.target);
        c.hasClass("btn") || (c = c.closest(".btn")), c.button("toggle"), b.preventDefault()
    })
}(jQuery), + function(a) {
    "use strict";
    var b = function(b, c) {
        this.$element = a(b), this.$indicators = this.$element.find(".carousel-indicators"), this.options = c, this.paused = this.sliding = this.interval = this.$active = this.$items = null, "hover" == this.options.pause && this.$element.on("mouseenter", a.proxy(this.pause, this)).on("mouseleave", a.proxy(this.cycle, this))
    };
    b.DEFAULTS = {
        interval: 5e3,
        pause: "hover",
        wrap: !0
    }, b.prototype.cycle = function(b) {
        return b || (this.paused = !1), this.interval && clearInterval(this.interval), this.options.interval && !this.paused && (this.interval = setInterval(a.proxy(this.next, this), this.options.interval)), this
    }, b.prototype.getActiveIndex = function() {
        return this.$active = this.$element.find(".item.active"), this.$items = this.$active.parent().children(), this.$items.index(this.$active)
    }, b.prototype.to = function(b) {
        var c = this,
            d = this.getActiveIndex();
        return b > this.$items.length - 1 || 0 > b ? void 0 : this.sliding ? this.$element.one("slid.bs.carousel", function() {
            c.to(b)
        }) : d == b ? this.pause().cycle() : this.slide(b > d ? "next" : "prev", a(this.$items[b]))
    }, b.prototype.pause = function(b) {
        return b || (this.paused = !0), this.$element.find(".next, .prev").length && a.support.transition && (this.$element.trigger(a.support.transition.end), this.cycle(!0)), this.interval = clearInterval(this.interval), this
    }, b.prototype.next = function() {
        return this.sliding ? void 0 : this.slide("next")
    }, b.prototype.prev = function() {
        return this.sliding ? void 0 : this.slide("prev")
    }, b.prototype.slide = function(b, c) {
        var d = this.$element.find(".item.active"),
            e = c || d[b](),
            f = this.interval,
            g = "next" == b ? "left" : "right",
            h = "next" == b ? "first" : "last",
            i = this;
        if (!e.length) {
            if (!this.options.wrap) return;
            e = this.$element.find(".item")[h]()
        }
        if (e.hasClass("active")) return this.sliding = !1;
        var j = a.Event("slide.bs.carousel", {
            relatedTarget: e[0],
            direction: g
        });
        return this.$element.trigger(j), j.isDefaultPrevented() ? void 0 : (this.sliding = !0, f && this.pause(), this.$indicators.length && (this.$indicators.find(".active").removeClass("active"), this.$element.one("slid.bs.carousel", function() {
            var b = a(i.$indicators.children()[i.getActiveIndex()]);
            b && b.addClass("active")
        })), a.support.transition && this.$element.hasClass("slide") ? (e.addClass(b), e[0].offsetWidth, d.addClass(g), e.addClass(g), d.one(a.support.transition.end, function() {
            e.removeClass([b, g].join(" ")).addClass("active"), d.removeClass(["active", g].join(" ")), i.sliding = !1, setTimeout(function() {
                i.$element.trigger("slid.bs.carousel")
            }, 0)
        }).emulateTransitionEnd(1e3 * d.css("transition-duration").slice(0, -1))) : (d.removeClass("active"), e.addClass("active"), this.sliding = !1, this.$element.trigger("slid.bs.carousel")), f && this.cycle(), this)
    };
    var c = a.fn.carousel;
    a.fn.carousel = function(c) {
        return this.each(function() {
            var d = a(this),
                e = d.data("bs.carousel"),
                f = a.extend({}, b.DEFAULTS, d.data(), "object" == typeof c && c),
                g = "string" == typeof c ? c : f.slide;
            e || d.data("bs.carousel", e = new b(this, f)), "number" == typeof c ? e.to(c) : g ? e[g]() : f.interval && e.pause().cycle()
        })
    }, a.fn.carousel.Constructor = b, a.fn.carousel.noConflict = function() {
        return a.fn.carousel = c, this
    }, a(document).on("click.bs.carousel.data-api", "[data-slide], [data-slide-to]", function(b) {
        var c, d = a(this),
            e = a(d.attr("data-target") || (c = d.attr("href")) && c.replace(/.*(?=#[^\s]+$)/, "")),
            f = a.extend({}, e.data(), d.data()),
            g = d.attr("data-slide-to");
        g && (f.interval = !1), e.carousel(f), (g = d.attr("data-slide-to")) && e.data("bs.carousel").to(g), b.preventDefault()
    }), a(window).on("load", function() {
        a('[data-ride="carousel"]').each(function() {
            var b = a(this);
            b.carousel(b.data())
        })
    })
}(jQuery), + function(a) {
    "use strict";
    var b = function(c, d) {
        this.$element = a(c), this.options = a.extend({}, b.DEFAULTS, d), this.transitioning = null, this.options.parent && (this.$parent = a(this.options.parent)), this.options.toggle && this.toggle()
    };
    b.DEFAULTS = {
        toggle: !0
    }, b.prototype.dimension = function() {
        var a = this.$element.hasClass("width");
        return a ? "width" : "height"
    }, b.prototype.show = function() {
        if (!this.transitioning && !this.$element.hasClass("in")) {
            var b = a.Event("show.bs.collapse");
            if (this.$element.trigger(b), !b.isDefaultPrevented()) {
                var c = this.$parent && this.$parent.find("> .panel > .in");
                if (c && c.length) {
                    var d = c.data("bs.collapse");
                    if (d && d.transitioning) return;
                    c.collapse("hide"), d || c.data("bs.collapse", null)
                }
                var e = this.dimension();
                this.$element.removeClass("collapse").addClass("collapsing")[e](0), this.transitioning = 1;
                var f = function() {
                    this.$element.removeClass("collapsing").addClass("collapse in")[e]("auto"), this.transitioning = 0, this.$element.trigger("shown.bs.collapse")
                };
                if (!a.support.transition) return f.call(this);
                var g = a.camelCase(["scroll", e].join("-"));
                this.$element.one(a.support.transition.end, a.proxy(f, this)).emulateTransitionEnd(350)[e](this.$element[0][g])
            }
        }
    }, b.prototype.hide = function() {
        if (!this.transitioning && this.$element.hasClass("in")) {
            var b = a.Event("hide.bs.collapse");
            if (this.$element.trigger(b), !b.isDefaultPrevented()) {
                var c = this.dimension();
                this.$element[c](this.$element[c]())[0].offsetHeight, this.$element.addClass("collapsing").removeClass("collapse").removeClass("in"), this.transitioning = 1;
                var d = function() {
                    this.transitioning = 0, this.$element.trigger("hidden.bs.collapse").removeClass("collapsing").addClass("collapse")
                };
                return a.support.transition ? void this.$element[c](0).one(a.support.transition.end, a.proxy(d, this)).emulateTransitionEnd(350) : d.call(this)
            }
        }
    }, b.prototype.toggle = function() {
        this[this.$element.hasClass("in") ? "hide" : "show"]()
    };
    var c = a.fn.collapse;
    a.fn.collapse = function(c) {
        return this.each(function() {
            var d = a(this),
                e = d.data("bs.collapse"),
                f = a.extend({}, b.DEFAULTS, d.data(), "object" == typeof c && c);
            !e && f.toggle && "show" == c && (c = !c), e || d.data("bs.collapse", e = new b(this, f)), "string" == typeof c && e[c]()
        })
    }, a.fn.collapse.Constructor = b, a.fn.collapse.noConflict = function() {
        return a.fn.collapse = c, this
    }, a(document).on("click.bs.collapse.data-api", "[data-toggle=collapse]", function(b) {
        var c, d = a(this),
            e = d.attr("data-target") || b.preventDefault() || (c = d.attr("href")) && c.replace(/.*(?=#[^\s]+$)/, ""),
            f = a(e),
            g = f.data("bs.collapse"),
            h = g ? "toggle" : d.data(),
            i = d.attr("data-parent"),
            j = i && a(i);
        g && g.transitioning || (j && j.find('[data-toggle=collapse][data-parent="' + i + '"]').not(d).addClass("collapsed"), d[f.hasClass("in") ? "addClass" : "removeClass"]("collapsed")), f.collapse(h)
    })
}(jQuery), + function(a) {
    "use strict";

    function b(b) {
        a(d).remove(), a(e).each(function() {
            var d = c(a(this)),
                e = {
                    relatedTarget: this
                };
            d.hasClass("open") && (d.trigger(b = a.Event("hide.bs.dropdown", e)), b.isDefaultPrevented() || d.removeClass("open").trigger("hidden.bs.dropdown", e))
        })
    }

    function c(b) {
        var c = b.attr("data-target");
        c || (c = b.attr("href"), c = c && /#[A-Za-z]/.test(c) && c.replace(/.*(?=#[^\s]*$)/, ""));
        var d = c && a(c);
        return d && d.length ? d : b.parent()
    }
    var d = ".dropdown-backdrop",
        e = "[data-toggle=dropdown]",
        f = function(b) {
            a(b).on("click.bs.dropdown", this.toggle)
        };
    f.prototype.toggle = function(d) {
        var e = a(this);
        if (!e.is(".disabled, :disabled")) {
            var f = c(e),
                g = f.hasClass("open");
            if (b(), !g) {
                "ontouchstart" in document.documentElement && !f.closest(".navbar-nav").length && a('<div class="dropdown-backdrop"/>').insertAfter(a(this)).on("click", b);
                var h = {
                    relatedTarget: this
                };
                if (f.trigger(d = a.Event("show.bs.dropdown", h)), d.isDefaultPrevented()) return;
                f.toggleClass("open").trigger("shown.bs.dropdown", h), e.focus()
            }
            return !1
        }
    }, f.prototype.keydown = function(b) {
        if (/(38|40|27)/.test(b.keyCode)) {
            var d = a(this);
            if (b.preventDefault(), b.stopPropagation(), !d.is(".disabled, :disabled")) {
                var f = c(d),
                    g = f.hasClass("open");
                if (!g || g && 27 == b.keyCode) return 27 == b.which && f.find(e).focus(), d.click();
                var h = " li:not(.divider):visible a",
                    i = f.find("[role=menu]" + h + ", [role=listbox]" + h);
                if (i.length) {
                    var j = i.index(i.filter(":focus"));
                    38 == b.keyCode && j > 0 && j--, 40 == b.keyCode && j < i.length - 1 && j++, ~j || (j = 0), i.eq(j).focus()
                }
            }
        }
    };
    var g = a.fn.dropdown;
    a.fn.dropdown = function(b) {
        return this.each(function() {
            var c = a(this),
                d = c.data("bs.dropdown");
            d || c.data("bs.dropdown", d = new f(this)), "string" == typeof b && d[b].call(c)
        })
    }, a.fn.dropdown.Constructor = f, a.fn.dropdown.noConflict = function() {
        return a.fn.dropdown = g, this
    }, a(document).on("click.bs.dropdown.data-api", b).on("click.bs.dropdown.data-api", ".dropdown form", function(a) {
        a.stopPropagation()
    }).on("click.bs.dropdown.data-api", e, f.prototype.toggle).on("keydown.bs.dropdown.data-api", e + ", [role=menu], [role=listbox]", f.prototype.keydown)
}(jQuery), + function(a) {
    "use strict";
    var b = function(b, c) {
        this.options = c, this.$element = a(b), this.$backdrop = this.isShown = null, this.options.remote && this.$element.find(".modal-content").load(this.options.remote, a.proxy(function() {
            this.$element.trigger("loaded.bs.modal")
        }, this))
    };
    b.DEFAULTS = {
        backdrop: !0,
        keyboard: !0,
        show: !0
    }, b.prototype.toggle = function(a) {
        return this[this.isShown ? "hide" : "show"](a)
    }, b.prototype.show = function(b) {
        var c = this,
            d = a.Event("show.bs.modal", {
                relatedTarget: b
            });
        this.$element.trigger(d), this.isShown || d.isDefaultPrevented() || (this.isShown = !0, this.escape(), this.$element.on("click.dismiss.bs.modal", '[data-dismiss="modal"]', a.proxy(this.hide, this)), this.backdrop(function() {
            var d = a.support.transition && c.$element.hasClass("fade");
            c.$element.parent().length || c.$element.appendTo(document.body), c.$element.show().scrollTop(0), d && c.$element[0].offsetWidth, c.$element.addClass("in").attr("aria-hidden", !1), c.enforceFocus();
            var e = a.Event("shown.bs.modal", {
                relatedTarget: b
            });
            d ? c.$element.find(".modal-dialog").one(a.support.transition.end, function() {
                c.$element.focus().trigger(e)
            }).emulateTransitionEnd(300) : c.$element.focus().trigger(e)
        }))
    }, b.prototype.hide = function(b) {
        b && b.preventDefault(), b = a.Event("hide.bs.modal"), this.$element.trigger(b), this.isShown && !b.isDefaultPrevented() && (this.isShown = !1, this.escape(), a(document).off("focusin.bs.modal"), this.$element.removeClass("in").attr("aria-hidden", !0).off("click.dismiss.bs.modal"), a.support.transition && this.$element.hasClass("fade") ? this.$element.one(a.support.transition.end, a.proxy(this.hideModal, this)).emulateTransitionEnd(300) : this.hideModal())
    }, b.prototype.enforceFocus = function() {
        a(document).off("focusin.bs.modal").on("focusin.bs.modal", a.proxy(function(a) {
            this.$element[0] === a.target || this.$element.has(a.target).length || this.$element.focus()
        }, this))
    }, b.prototype.escape = function() {
        this.isShown && this.options.keyboard ? this.$element.on("keyup.dismiss.bs.modal", a.proxy(function(a) {
            27 == a.which && this.hide()
        }, this)) : this.isShown || this.$element.off("keyup.dismiss.bs.modal")
    }, b.prototype.hideModal = function() {
        var a = this;
        this.$element.hide(), this.backdrop(function() {
            a.removeBackdrop(), a.$element.trigger("hidden.bs.modal")
        })
    }, b.prototype.removeBackdrop = function() {
        this.$backdrop && this.$backdrop.remove(), this.$backdrop = null
    }, b.prototype.backdrop = function(b) {
        var c = this.$element.hasClass("fade") ? "fade" : "";
        if (this.isShown && this.options.backdrop) {
            var d = a.support.transition && c;
            if (this.$backdrop = a('<div class="modal-backdrop ' + c + '" />').appendTo(document.body), this.$element.on("click.dismiss.bs.modal", a.proxy(function(a) {
                    a.target === a.currentTarget && ("static" == this.options.backdrop ? this.$element[0].focus.call(this.$element[0]) : this.hide.call(this))
                }, this)), d && this.$backdrop[0].offsetWidth, this.$backdrop.addClass("in"), !b) return;
            d ? this.$backdrop.one(a.support.transition.end, b).emulateTransitionEnd(150) : b()
        } else !this.isShown && this.$backdrop ? (this.$backdrop.removeClass("in"), a.support.transition && this.$element.hasClass("fade") ? this.$backdrop.one(a.support.transition.end, b).emulateTransitionEnd(150) : b()) : b && b()
    };
    var c = a.fn.modal;
    a.fn.modal = function(c, d) {
        return this.each(function() {
            var e = a(this),
                f = e.data("bs.modal"),
                g = a.extend({}, b.DEFAULTS, e.data(), "object" == typeof c && c);
            f || e.data("bs.modal", f = new b(this, g)), "string" == typeof c ? f[c](d) : g.show && f.show(d)
        })
    }, a.fn.modal.Constructor = b, a.fn.modal.noConflict = function() {
        return a.fn.modal = c, this
    }, a(document).on("click.bs.modal.data-api", '[data-toggle="modal"]', function(b) {
        var c = a(this),
            d = c.attr("href"),
            e = a(c.attr("data-target") || d && d.replace(/.*(?=#[^\s]+$)/, "")),
            f = e.data("bs.modal") ? "toggle" : a.extend({
                remote: !/#/.test(d) && d
            }, e.data(), c.data());
        c.is("a") && b.preventDefault(), e.modal(f, this).one("hide", function() {
            c.is(":visible") && c.focus()
        })
    }), a(document).on("show.bs.modal", ".modal", function() {
        a(document.body).addClass("modal-open")
    }).on("hidden.bs.modal", ".modal", function() {
        a(document.body).removeClass("modal-open")
    })
}(jQuery), + function(a) {
    "use strict";
    var b = function(a, b) {
        this.type = this.options = this.enabled = this.timeout = this.hoverState = this.$element = null, this.init("tooltip", a, b)
    };
    b.DEFAULTS = {
        animation: !0,
        placement: "top",
        selector: !1,
        template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
        trigger: "hover focus",
        title: "",
        delay: 0,
        html: !1,
        container: !1
    }, b.prototype.init = function(b, c, d) {
        this.enabled = !0, this.type = b, this.$element = a(c), this.options = this.getOptions(d);
        for (var e = this.options.trigger.split(" "), f = e.length; f--;) {
            var g = e[f];
            if ("click" == g) this.$element.on("click." + this.type, this.options.selector, a.proxy(this.toggle, this));
            else if ("manual" != g) {
                var h = "hover" == g ? "mouseenter" : "focusin",
                    i = "hover" == g ? "mouseleave" : "focusout";
                this.$element.on(h + "." + this.type, this.options.selector, a.proxy(this.enter, this)), this.$element.on(i + "." + this.type, this.options.selector, a.proxy(this.leave, this))
            }
        }
        this.options.selector ? this._options = a.extend({}, this.options, {
            trigger: "manual",
            selector: ""
        }) : this.fixTitle()
    }, b.prototype.getDefaults = function() {
        return b.DEFAULTS
    }, b.prototype.getOptions = function(b) {
        return b = a.extend({}, this.getDefaults(), this.$element.data(), b), b.delay && "number" == typeof b.delay && (b.delay = {
            show: b.delay,
            hide: b.delay
        }), b
    }, b.prototype.getDelegateOptions = function() {
        var b = {},
            c = this.getDefaults();
        return this._options && a.each(this._options, function(a, d) {
            c[a] != d && (b[a] = d)
        }), b
    }, b.prototype.enter = function(b) {
        var c = b instanceof this.constructor ? b : a(b.currentTarget)[this.type](this.getDelegateOptions()).data("bs." + this.type);
        return clearTimeout(c.timeout), c.hoverState = "in", c.options.delay && c.options.delay.show ? void(c.timeout = setTimeout(function() {
            "in" == c.hoverState && c.show()
        }, c.options.delay.show)) : c.show()
    }, b.prototype.leave = function(b) {
        var c = b instanceof this.constructor ? b : a(b.currentTarget)[this.type](this.getDelegateOptions()).data("bs." + this.type);
        return clearTimeout(c.timeout), c.hoverState = "out", c.options.delay && c.options.delay.hide ? void(c.timeout = setTimeout(function() {
            "out" == c.hoverState && c.hide()
        }, c.options.delay.hide)) : c.hide()
    }, b.prototype.show = function() {
        var b = a.Event("show.bs." + this.type);
        if (this.hasContent() && this.enabled) {
            if (this.$element.trigger(b), b.isDefaultPrevented()) return;
            var c = this,
                d = this.tip();
            this.setContent(), this.options.animation && d.addClass("fade");
            var e = "function" == typeof this.options.placement ? this.options.placement.call(this, d[0], this.$element[0]) : this.options.placement,
                f = /\s?auto?\s?/i,
                g = f.test(e);
            g && (e = e.replace(f, "") || "top"), d.detach().css({
                top: 0,
                left: 0,
                display: "block"
            }).addClass(e), this.options.container ? d.appendTo(this.options.container) : d.insertAfter(this.$element);
            var h = this.getPosition(),
                i = d[0].offsetWidth,
                j = d[0].offsetHeight;
            if (g) {
                var k = this.$element.parent(),
                    l = e,
                    m = document.documentElement.scrollTop || document.body.scrollTop,
                    n = "body" == this.options.container ? window.innerWidth : k.outerWidth(),
                    o = "body" == this.options.container ? window.innerHeight : k.outerHeight(),
                    p = "body" == this.options.container ? 0 : k.offset().left;
                e = "bottom" == e && h.top + h.height + j - m > o ? "top" : "top" == e && h.top - m - j < 0 ? "bottom" : "right" == e && h.right + i > n ? "left" : "left" == e && h.left - i < p ? "right" : e, d.removeClass(l).addClass(e)
            }
            var q = this.getCalculatedOffset(e, h, i, j);
            this.applyPlacement(q, e), this.hoverState = null;
            var r = function() {
                c.$element.trigger("shown.bs." + c.type)
            };
            a.support.transition && this.$tip.hasClass("fade") ? d.one(a.support.transition.end, r).emulateTransitionEnd(150) : r()
        }
    }, b.prototype.applyPlacement = function(b, c) {
        var d, e = this.tip(),
            f = e[0].offsetWidth,
            g = e[0].offsetHeight,
            h = parseInt(e.css("margin-top"), 10),
            i = parseInt(e.css("margin-left"), 10);
        isNaN(h) && (h = 0), isNaN(i) && (i = 0), b.top = b.top + h, b.left = b.left + i, a.offset.setOffset(e[0], a.extend({
            using: function(a) {
                e.css({
                    top: Math.round(a.top),
                    left: Math.round(a.left)
                })
            }
        }, b), 0), e.addClass("in");
        var j = e[0].offsetWidth,
            k = e[0].offsetHeight;
        if ("top" == c && k != g && (d = !0, b.top = b.top + g - k), /bottom|top/.test(c)) {
            var l = 0;
            b.left < 0 && (l = -2 * b.left, b.left = 0, e.offset(b), j = e[0].offsetWidth, k = e[0].offsetHeight), this.replaceArrow(l - f + j, j, "left")
        } else this.replaceArrow(k - g, k, "top");
        d && e.offset(b)
    }, b.prototype.replaceArrow = function(a, b, c) {
        this.arrow().css(c, a ? 50 * (1 - a / b) + "%" : "")
    }, b.prototype.setContent = function() {
        var a = this.tip(),
            b = this.getTitle();
        a.find(".tooltip-inner")[this.options.html ? "html" : "text"](b), a.removeClass("fade in top bottom left right")
    }, b.prototype.hide = function() {
        function b() {
            "in" != c.hoverState && d.detach(), c.$element.trigger("hidden.bs." + c.type)
        }
        var c = this,
            d = this.tip(),
            e = a.Event("hide.bs." + this.type);
        return this.$element.trigger(e), e.isDefaultPrevented() ? void 0 : (d.removeClass("in"), a.support.transition && this.$tip.hasClass("fade") ? d.one(a.support.transition.end, b).emulateTransitionEnd(150) : b(), this.hoverState = null, this)
    }, b.prototype.fixTitle = function() {
        var a = this.$element;
        (a.attr("title") || "string" != typeof a.attr("data-original-title")) && a.attr("data-original-title", a.attr("title") || "").attr("title", "")
    }, b.prototype.hasContent = function() {
        return this.getTitle()
    }, b.prototype.getPosition = function() {
        var b = this.$element[0];
        return a.extend({}, "function" == typeof b.getBoundingClientRect ? b.getBoundingClientRect() : {
            width: b.offsetWidth,
            height: b.offsetHeight
        }, this.$element.offset())
    }, b.prototype.getCalculatedOffset = function(a, b, c, d) {
        return "bottom" == a ? {
            top: b.top + b.height,
            left: b.left + b.width / 2 - c / 2
        } : "top" == a ? {
            top: b.top - d,
            left: b.left + b.width / 2 - c / 2
        } : "left" == a ? {
            top: b.top + b.height / 2 - d / 2,
            left: b.left - c
        } : {
            top: b.top + b.height / 2 - d / 2,
            left: b.left + b.width
        }
    }, b.prototype.getTitle = function() {
        var a, b = this.$element,
            c = this.options;
        return a = b.attr("data-original-title") || ("function" == typeof c.title ? c.title.call(b[0]) : c.title)
    }, b.prototype.tip = function() {
        return this.$tip = this.$tip || a(this.options.template)
    }, b.prototype.arrow = function() {
        return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow")
    }, b.prototype.validate = function() {
        this.$element[0].parentNode || (this.hide(), this.$element = null, this.options = null)
    }, b.prototype.enable = function() {
        this.enabled = !0
    }, b.prototype.disable = function() {
        this.enabled = !1
    }, b.prototype.toggleEnabled = function() {
        this.enabled = !this.enabled
    }, b.prototype.toggle = function(b) {
        var c = b ? a(b.currentTarget)[this.type](this.getDelegateOptions()).data("bs." + this.type) : this;
        c.tip().hasClass("in") ? c.leave(c) : c.enter(c)
    }, b.prototype.destroy = function() {
        clearTimeout(this.timeout), this.hide().$element.off("." + this.type).removeData("bs." + this.type)
    };
    var c = a.fn.tooltip;
    a.fn.tooltip = function(c) {
        return this.each(function() {
            var d = a(this),
                e = d.data("bs.tooltip"),
                f = "object" == typeof c && c;
            (e || "destroy" != c) && (e || d.data("bs.tooltip", e = new b(this, f)), "string" == typeof c && e[c]())
        })
    }, a.fn.tooltip.Constructor = b, a.fn.tooltip.noConflict = function() {
        return a.fn.tooltip = c, this
    }
}(jQuery), + function(a) {
    "use strict";
    var b = function(a, b) {
        this.init("popover", a, b)
    };
    if (!a.fn.tooltip) throw new Error("Popover requires tooltip.js");
    b.DEFAULTS = a.extend({}, a.fn.tooltip.Constructor.DEFAULTS, {
        placement: "right",
        trigger: "click",
        content: "",
        template: '<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
    }), b.prototype = a.extend({}, a.fn.tooltip.Constructor.prototype), b.prototype.constructor = b, b.prototype.getDefaults = function() {
        return b.DEFAULTS
    }, b.prototype.setContent = function() {
        var a = this.tip(),
            b = this.getTitle(),
            c = this.getContent();
        a.find(".popover-title")[this.options.html ? "html" : "text"](b), a.find(".popover-content")[this.options.html ? "string" == typeof c ? "html" : "append" : "text"](c), a.removeClass("fade top bottom left right in"), a.find(".popover-title").html() || a.find(".popover-title").hide()
    }, b.prototype.hasContent = function() {
        return this.getTitle() || this.getContent()
    }, b.prototype.getContent = function() {
        var a = this.$element,
            b = this.options;
        return a.attr("data-content") || ("function" == typeof b.content ? b.content.call(a[0]) : b.content)
    }, b.prototype.arrow = function() {
        return this.$arrow = this.$arrow || this.tip().find(".arrow")
    }, b.prototype.tip = function() {
        return this.$tip || (this.$tip = a(this.options.template)), this.$tip
    };
    var c = a.fn.popover;
    a.fn.popover = function(c) {
        return this.each(function() {
            var d = a(this),
                e = d.data("bs.popover"),
                f = "object" == typeof c && c;
            (e || "destroy" != c) && (e || d.data("bs.popover", e = new b(this, f)), "string" == typeof c && e[c]())
        })
    }, a.fn.popover.Constructor = b, a.fn.popover.noConflict = function() {
        return a.fn.popover = c, this
    }
}(jQuery), + function(a) {
    "use strict";

    function b(c, d) {
        var e, f = a.proxy(this.process, this);
        this.$element = a(a(c).is("body") ? window : c), this.$body = a("body"), this.$scrollElement = this.$element.on("scroll.bs.scroll-spy.data-api", f), this.options = a.extend({}, b.DEFAULTS, d), this.selector = (this.options.target || (e = a(c).attr("href")) && e.replace(/.*(?=#[^\s]+$)/, "") || "") + " .nav li > a", this.offsets = a([]), this.targets = a([]), this.activeTarget = null, this.refresh(), this.process()
    }
    b.DEFAULTS = {
        offset: 10
    }, b.prototype.refresh = function() {
        var b = this.$element[0] == window ? "offset" : "position";
        this.offsets = a([]), this.targets = a([]); {
            var c = this;
            this.$body.find(this.selector).map(function() {
                var d = a(this),
                    e = d.data("target") || d.attr("href"),
                    f = /^#./.test(e) && a(e);
                return f && f.length && f.is(":visible") && [
                    [f[b]().top + (!a.isWindow(c.$scrollElement.get(0)) && c.$scrollElement.scrollTop()), e]
                ] || null
            }).sort(function(a, b) {
                return a[0] - b[0]
            }).each(function() {
                c.offsets.push(this[0]), c.targets.push(this[1])
            })
        }
    }, b.prototype.process = function() {
        var a, b = this.$scrollElement.scrollTop() + this.options.offset,
            c = this.$scrollElement[0].scrollHeight || this.$body[0].scrollHeight,
            d = c - this.$scrollElement.height(),
            e = this.offsets,
            f = this.targets,
            g = this.activeTarget;
        if (b >= d) return g != (a = f.last()[0]) && this.activate(a);
        if (g && b <= e[0]) return g != (a = f[0]) && this.activate(a);
        for (a = e.length; a--;) g != f[a] && b >= e[a] && (!e[a + 1] || b <= e[a + 1]) && this.activate(f[a])
    }, b.prototype.activate = function(b) {
        this.activeTarget = b, a(this.selector).parentsUntil(this.options.target, ".active").removeClass("active");
        var c = this.selector + '[data-target="' + b + '"],' + this.selector + '[href="' + b + '"]',
            d = a(c).parents("li").addClass("active");
        d.parent(".dropdown-menu").length && (d = d.closest("li.dropdown").addClass("active")), d.trigger("activate.bs.scrollspy")
    };
    var c = a.fn.scrollspy;
    a.fn.scrollspy = function(c) {
        return this.each(function() {
            var d = a(this),
                e = d.data("bs.scrollspy"),
                f = "object" == typeof c && c;
            e || d.data("bs.scrollspy", e = new b(this, f)), "string" == typeof c && e[c]()
        })
    }, a.fn.scrollspy.Constructor = b, a.fn.scrollspy.noConflict = function() {
        return a.fn.scrollspy = c, this
    }, a(window).on("load", function() {
        a('[data-spy="scroll"]').each(function() {
            var b = a(this);
            b.scrollspy(b.data())
        })
    })
}(jQuery), + function(a) {
    "use strict";
    var b = function(b) {
        this.element = a(b)
    };
    b.prototype.show = function() {
        var b = this.element,
            c = b.closest("ul:not(.dropdown-menu)"),
            d = b.data("target");
        if (d || (d = b.attr("href"), d = d && d.replace(/.*(?=#[^\s]*$)/, "")), !b.parent("li").hasClass("active")) {
            var e = c.find(".active:last a")[0],
                f = a.Event("show.bs.tab", {
                    relatedTarget: e
                });
            if (b.trigger(f), !f.isDefaultPrevented()) {
                var g = a(d);
                this.activate(b.parent("li"), c), this.activate(g, g.parent(), function() {
                    b.trigger({
                        type: "shown.bs.tab",
                        relatedTarget: e
                    })
                })
            }
        }
    }, b.prototype.activate = function(b, c, d) {
        function e() {
            f.removeClass("active").find("> .dropdown-menu > .active").removeClass("active"), b.addClass("active"), g ? (b[0].offsetWidth, b.addClass("in")) : b.removeClass("fade"), b.parent(".dropdown-menu") && b.closest("li.dropdown").addClass("active"), d && d()
        }
        var f = c.find("> .active"),
            g = d && a.support.transition && f.hasClass("fade");
        g ? f.one(a.support.transition.end, e).emulateTransitionEnd(150) : e(), f.removeClass("in")
    };
    var c = a.fn.tab;
    a.fn.tab = function(c) {
        return this.each(function() {
            var d = a(this),
                e = d.data("bs.tab");
            e || d.data("bs.tab", e = new b(this)), "string" == typeof c && e[c]()
        })
    }, a.fn.tab.Constructor = b, a.fn.tab.noConflict = function() {
        return a.fn.tab = c, this
    }, a(document).on("click.bs.tab.data-api", '[data-toggle="tab"], [data-toggle="pill"]', function(b) {
        b.preventDefault(), a(this).tab("show")
    })
}(jQuery), + function(a) {
    "use strict";
    var b = function(c, d) {
        this.options = a.extend({}, b.DEFAULTS, d), this.$window = a(window).on("scroll.bs.affix.data-api", a.proxy(this.checkPosition, this)).on("click.bs.affix.data-api", a.proxy(this.checkPositionWithEventLoop, this)), this.$element = a(c), this.affixed = this.unpin = this.pinnedOffset = null, this.checkPosition()
    };
    b.RESET = "affix affix-top affix-bottom", b.DEFAULTS = {
        offset: 0
    }, b.prototype.getPinnedOffset = function() {
        if (this.pinnedOffset) return this.pinnedOffset;
        this.$element.removeClass(b.RESET).addClass("affix");
        var a = this.$window.scrollTop(),
            c = this.$element.offset();
        return this.pinnedOffset = c.top - a
    }, b.prototype.checkPositionWithEventLoop = function() {
        setTimeout(a.proxy(this.checkPosition, this), 1)
    }, b.prototype.checkPosition = function() {
        if (this.$element.is(":visible")) {
            var c = a(document).height(),
                d = this.$window.scrollTop(),
                e = this.$element.offset(),
                f = this.options.offset,
                g = f.top,
                h = f.bottom;
            "top" == this.affixed && (e.top += d), "object" != typeof f && (h = g = f), "function" == typeof g && (g = f.top(this.$element)), "function" == typeof h && (h = f.bottom(this.$element));
            var i = null != this.unpin && d + this.unpin <= e.top ? !1 : null != h && e.top + this.$element.height() >= c - h ? "bottom" : null != g && g >= d ? "top" : !1;
            if (this.affixed !== i) {
                this.unpin && this.$element.css("top", "");
                var j = "affix" + (i ? "-" + i : ""),
                    k = a.Event(j + ".bs.affix");
                this.$element.trigger(k), k.isDefaultPrevented() || (this.affixed = i, this.unpin = "bottom" == i ? this.getPinnedOffset() : null, this.$element.removeClass(b.RESET).addClass(j).trigger(a.Event(j.replace("affix", "affixed"))), "bottom" == i && this.$element.offset({
                    top: c - h - this.$element.height()
                }))
            }
        }
    };
    var c = a.fn.affix;
    a.fn.affix = function(c) {
        return this.each(function() {
            var d = a(this),
                e = d.data("bs.affix"),
                f = "object" == typeof c && c;
            e || d.data("bs.affix", e = new b(this, f)), "string" == typeof c && e[c]()
        })
    }, a.fn.affix.Constructor = b, a.fn.affix.noConflict = function() {
        return a.fn.affix = c, this
    }, a(window).on("load", function() {
        a('[data-spy="affix"]').each(function() {
            var b = a(this),
                c = b.data();
            c.offset = c.offset || {}, c.offsetBottom && (c.offset.bottom = c.offsetBottom), c.offsetTop && (c.offset.top = c.offsetTop), b.affix(c)
        })
    })
}(jQuery);
! function(a, b) {
    "use strict";
    "function" == typeof define && define.amd ? define(["jquery"], b) : "object" == typeof exports ? module.exports = b(require("jquery")) : a.bootbox = b(a.jQuery)
}(this, function a(b, c) {
    "use strict";

    function d(a) {
        var b = q[o.locale];
        return b ? b[a] : q.en[a]
    }

    function e(a, c, d) {
        a.stopPropagation(), a.preventDefault();
        var e = b.isFunction(d) && d(a) === !1;
        e || c.modal("hide")
    }

    function f(a) {
        var b, c = 0;
        for (b in a) c++;
        return c
    }

    function g(a, c) {
        var d = 0;
        b.each(a, function(a, b) {
            c(a, b, d++)
        })
    }

    function h(a) {
        var c, d;
        if ("object" != typeof a) throw new Error("Please supply an object of options");
        if (!a.message) throw new Error("Please specify a message");
        return a = b.extend({}, o, a), a.buttons || (a.buttons = {}), a.backdrop = a.backdrop ? "static" : !1, c = a.buttons, d = f(c), g(c, function(a, e, f) {
            if (b.isFunction(e) && (e = c[a] = {
                    callback: e
                }), "object" !== b.type(e)) throw new Error("button with key " + a + " must be an object");
            e.label || (e.label = a), e.className || (e.className = 2 >= d && f === d - 1 ? "btn-primary" : "btn-default")
        }), a
    }

    function i(a, b) {
        var c = a.length,
            d = {};
        if (1 > c || c > 2) throw new Error("Invalid argument length");
        return 2 === c || "string" == typeof a[0] ? (d[b[0]] = a[0], d[b[1]] = a[1]) : d = a[0], d
    }

    function j(a, c, d) {
        return b.extend(!0, {}, a, i(c, d))
    }

    function k(a, b, c, d) {
        var e = {
            className: "bootbox-" + a,
            buttons: l.apply(null, b)
        };
        return m(j(e, d, c), b)
    }

    function l() {
        for (var a = {}, b = 0, c = arguments.length; c > b; b++) {
            var e = arguments[b],
                f = e.toLowerCase(),
                g = e.toUpperCase();
            a[f] = {
                label: d(g)
            }
        }
        return a
    }

    function m(a, b) {
        var d = {};
        return g(b, function(a, b) {
            d[b] = !0
        }), g(a.buttons, function(a) {
            if (d[a] === c) throw new Error("button key " + a + " is not allowed (options are " + b.join("\n") + ")")
        }), a
    }
    var n = {
            dialog: "<div class='bootbox modal' tabindex='-1' role='dialog'><div class='modal-dialog'><div class='modal-content'><div class='modal-body'><div class='bootbox-body'></div></div></div></div></div>",
            header: "<div class='modal-header'><h4 class='modal-title'></h4></div>",
            footer: "<div class='modal-footer'></div>",
            closeButton: "<button type='button' class='bootbox-close-button close' data-dismiss='modal' aria-hidden='true'>&times;</button>",
            form: "<form class='bootbox-form'></form>",
            inputs: {
                text: "<input class='bootbox-input bootbox-input-text form-control' autocomplete=off type=text />",
                textarea: "<textarea class='bootbox-input bootbox-input-textarea form-control'></textarea>",
                email: "<input class='bootbox-input bootbox-input-email form-control' autocomplete='off' type='email' />",
                select: "<select class='bootbox-input bootbox-input-select form-control'></select>",
                checkbox: "<div class='checkbox'><label><input class='bootbox-input bootbox-input-checkbox' type='checkbox' /></label></div>",
                date: "<input class='bootbox-input bootbox-input-date form-control' autocomplete=off type='date' />",
                time: "<input class='bootbox-input bootbox-input-time form-control' autocomplete=off type='time' />",
                number: "<input class='bootbox-input bootbox-input-number form-control' autocomplete=off type='number' />",
                password: "<input class='bootbox-input bootbox-input-password form-control' autocomplete='off' type='password' />"
            }
        },
        o = {
            locale: "en",
            backdrop: !0,
            animate: !0,
            className: null,
            closeButton: !0,
            show: !0,
            container: "body"
        },
        p = {};
    p.alert = function() {
        var a;
        if (a = k("alert", ["ok"], ["message", "callback"], arguments), a.callback && !b.isFunction(a.callback)) throw new Error("alert requires callback property to be a function when provided");
        return a.buttons.ok.callback = a.onEscape = function() {
            return b.isFunction(a.callback) ? a.callback() : !0
        }, p.dialog(a)
    }, p.confirm = function() {
        var a;
        if (a = k("confirm", ["cancel", "confirm"], ["message", "callback"], arguments), a.buttons.cancel.callback = a.onEscape = function() {
                return a.callback(!1)
            }, a.buttons.confirm.callback = function() {
                return a.callback(!0)
            }, !b.isFunction(a.callback)) throw new Error("confirm requires a callback");
        return p.dialog(a)
    }, p.prompt = function() {
        var a, d, e, f, h, i, k;
        if (f = b(n.form), d = {
                className: "bootbox-prompt",
                buttons: l("cancel", "confirm"),
                value: "",
                inputType: "text"
            }, a = m(j(d, arguments, ["title", "callback"]), ["cancel", "confirm"]), i = a.show === c ? !0 : a.show, a.message = f, a.buttons.cancel.callback = a.onEscape = function() {
                return a.callback(null)
            }, a.buttons.confirm.callback = function() {
                var c;
                switch (a.inputType) {
                    case "text":
                    case "textarea":
                    case "email":
                    case "select":
                    case "date":
                    case "time":
                    case "number":
                    case "password":
                        c = h.val();
                        break;
                    case "checkbox":
                        var d = h.find("input:checked");
                        c = [], g(d, function(a, d) {
                            c.push(b(d).val())
                        })
                }
                return a.callback(c)
            }, a.show = !1, !a.title) throw new Error("prompt requires a title");
        if (!b.isFunction(a.callback)) throw new Error("prompt requires a callback");
        if (!n.inputs[a.inputType]) throw new Error("invalid prompt type");
        switch (h = b(n.inputs[a.inputType]), a.inputType) {
            case "text":
            case "textarea":
            case "email":
            case "date":
            case "time":
            case "number":
            case "password":
                h.val(a.value);
                break;
            case "select":
                var o = {};
                if (k = a.inputOptions || [], !k.length) throw new Error("prompt with select requires options");
                g(k, function(a, d) {
                    var e = h;
                    if (d.value === c || d.text === c) throw new Error("given options in wrong format");
                    d.group && (o[d.group] || (o[d.group] = b("<optgroup/>").attr("label", d.group)), e = o[d.group]), e.append("<option value='" + d.value + "'>" + d.text + "</option>")
                }), g(o, function(a, b) {
                    h.append(b)
                }), h.val(a.value);
                break;
            case "checkbox":
                var q = b.isArray(a.value) ? a.value : [a.value];
                if (k = a.inputOptions || [], !k.length) throw new Error("prompt with checkbox requires options");
                if (!k[0].value || !k[0].text) throw new Error("given options in wrong format");
                h = b("<div/>"), g(k, function(c, d) {
                    var e = b(n.inputs[a.inputType]);
                    e.find("input").attr("value", d.value), e.find("label").append(d.text), g(q, function(a, b) {
                        b === d.value && e.find("input").prop("checked", !0)
                    }), h.append(e)
                })
        }
        return a.placeholder && h.attr("placeholder", a.placeholder), a.pattern && h.attr("pattern", a.pattern), f.append(h), f.on("submit", function(a) {
            a.preventDefault(), a.stopPropagation(), e.find(".btn-primary").click()
        }), e = p.dialog(a), e.off("shown.bs.modal"), e.on("shown.bs.modal", function() {
            h.focus()
        }), i === !0 && e.modal("show"), e
    }, p.dialog = function(a) {
        a = h(a);
        var c = b(n.dialog),
            d = c.find(".modal-dialog"),
            f = c.find(".modal-body"),
            i = a.buttons,
            j = "",
            k = {
                onEscape: a.onEscape
            };
        if (g(i, function(a, b) {
                j += "<button data-bb-handler='" + a + "' type='button' class='btn " + b.className + "'>" + b.label + "</button>", k[a] = b.callback
            }), f.find(".bootbox-body").html(a.message), a.animate === !0 && c.addClass("fade"), a.className && c.addClass(a.className), "large" === a.size && d.addClass("modal-lg"), "small" === a.size && d.addClass("modal-sm"), a.title && f.before(n.header), a.closeButton) {
            var l = b(n.closeButton);
            a.title ? c.find(".modal-header").prepend(l) : l.css("margin-top", "-10px").prependTo(f)
        }
        return a.title && c.find(".modal-title").html(a.title), j.length && (f.after(n.footer), c.find(".modal-footer").html(j)), c.on("hidden.bs.modal", function(a) {
            a.target === this && c.remove()
        }), c.on("shown.bs.modal", function() {
            c.find(".btn-primary:first").focus()
        }), c.on("escape.close.bb", function(a) {
            k.onEscape && e(a, c, k.onEscape)
        }), c.on("click", ".modal-footer button", function(a) {
            var d = b(this).data("bb-handler");
            e(a, c, k[d])
        }), c.on("click", ".bootbox-close-button", function(a) {
            e(a, c, k.onEscape)
        }), c.on("keyup", function(a) {
            27 === a.which && c.trigger("escape.close.bb")
        }), b(a.container).append(c), c.modal({
            backdrop: a.backdrop,
            keyboard: !1,
            show: !1
        }), a.show && c.modal("show"), c
    }, p.setDefaults = function() {
        var a = {};
        2 === arguments.length ? a[arguments[0]] = arguments[1] : a = arguments[0], b.extend(o, a)
    }, p.hideAll = function() {
        return b(".bootbox").modal("hide"), p
    };
    var q = {
        br: {
            OK: "OK",
            CANCEL: "Cancelar",
            CONFIRM: "Sim"
        },
        cs: {
            OK: "OK",
            CANCEL: "Zrušit",
            CONFIRM: "Potvrdit"
        },
        da: {
            OK: "OK",
            CANCEL: "Annuller",
            CONFIRM: "Accepter"
        },
        de: {
            OK: "OK",
            CANCEL: "Abbrechen",
            CONFIRM: "Akzeptieren"
        },
        el: {
            OK: "Εντάξει",
            CANCEL: "Ακύρωση",
            CONFIRM: "Επιβεβαίωση"
        },
        en: {
            OK: "OK",
            CANCEL: "Cancel",
            CONFIRM: "OK"
        },
        es: {
            OK: "OK",
            CANCEL: "Cancelar",
            CONFIRM: "Aceptar"
        },
        et: {
            OK: "OK",
            CANCEL: "Katkesta",
            CONFIRM: "OK"
        },
        fi: {
            OK: "OK",
            CANCEL: "Peruuta",
            CONFIRM: "OK"
        },
        fr: {
            OK: "OK",
            CANCEL: "Annuler",
            CONFIRM: "D'accord"
        },
        he: {
            OK: "אישור",
            CANCEL: "ביטול",
            CONFIRM: "אישור"
        },
        id: {
            OK: "OK",
            CANCEL: "Batal",
            CONFIRM: "OK"
        },
        it: {
            OK: "OK",
            CANCEL: "Annulla",
            CONFIRM: "Conferma"
        },
        ja: {
            OK: "OK",
            CANCEL: "キャンセル",
            CONFIRM: "確認"
        },
        lt: {
            OK: "Gerai",
            CANCEL: "Atšaukti",
            CONFIRM: "Patvirtinti"
        },
        lv: {
            OK: "Labi",
            CANCEL: "Atcelt",
            CONFIRM: "Apstiprināt"
        },
        nl: {
            OK: "OK",
            CANCEL: "Annuleren",
            CONFIRM: "Accepteren"
        },
        no: {
            OK: "OK",
            CANCEL: "Avbryt",
            CONFIRM: "OK"
        },
        pl: {
            OK: "OK",
            CANCEL: "Anuluj",
            CONFIRM: "Potwierdź"
        },
        pt: {
            OK: "OK",
            CANCEL: "Cancelar",
            CONFIRM: "Confirmar"
        },
        ru: {
            OK: "OK",
            CANCEL: "Отмена",
            CONFIRM: "Применить"
        },
        sv: {
            OK: "OK",
            CANCEL: "Avbryt",
            CONFIRM: "OK"
        },
        tr: {
            OK: "Tamam",
            CANCEL: "İptal",
            CONFIRM: "Onayla"
        },
        zh_CN: {
            OK: "OK",
            CANCEL: "取消",
            CONFIRM: "确认"
        },
        zh_TW: {
            OK: "OK",
            CANCEL: "取消",
            CONFIRM: "確認"
        }
    };
    return p.init = function(c) {
        return a(c || b)
    }, p
});
(function(e, t, r) {
    "use strict";

    function n(r) {
        if (o = t.documentElement, a = t.body, K(), it = this, r = r || {}, ut = r.constants || {}, r.easing)
            for (var n in r.easing) U[n] = r.easing[n];
        yt = r.edgeStrategy || "set", ct = {
            beforerender: r.beforerender,
            render: r.render,
            keyframe: r.keyframe
        }, ft = r.forceHeight !== !1, ft && (Vt = r.scale || 1), mt = r.mobileDeceleration || x, dt = r.smoothScrolling !== !1, gt = r.smoothScrollingDuration || E, vt = {
            targetTop: it.getScrollTop()
        }, Gt = (r.mobileCheck || function() {
            return /Android|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent || navigator.vendor || e.opera)
        })(), Gt ? (st = t.getElementById("skrollr-body"), st && at(), X(), Dt(o, [y, S], [T])) : Dt(o, [y, b], [T]), it.refresh(), St(e, "resize orientationchange", function() {
            var e = o.clientWidth,
                t = o.clientHeight;
            (t !== $t || e !== Mt) && ($t = t, Mt = e, _t = !0)
        });
        var i = Y();
        return function l() {
            Z(), bt = i(l)
        }(), it
    }
    var o, a, i = {
            get: function() {
                return it
            },
            init: function(e) {
                return it || new n(e)
            },
            VERSION: "0.6.26"
        },
        l = Object.prototype.hasOwnProperty,
        s = e.Math,
        c = e.getComputedStyle,
        f = "touchstart",
        u = "touchmove",
        m = "touchcancel",
        p = "touchend",
        d = "skrollable",
        g = d + "-before",
        v = d + "-between",
        h = d + "-after",
        y = "skrollr",
        T = "no-" + y,
        b = y + "-desktop",
        S = y + "-mobile",
        k = "linear",
        w = 1e3,
        x = .004,
        E = 200,
        A = "start",
        F = "end",
        C = "center",
        D = "bottom",
        H = "___skrollable_id",
        I = /^(?:input|textarea|button|select)$/i,
        P = /^\s+|\s+$/g,
        N = /^data(?:-(_\w+))?(?:-?(-?\d*\.?\d+p?))?(?:-?(start|end|top|center|bottom))?(?:-?(top|center|bottom))?$/,
        O = /\s*(@?[\w\-\[\]]+)\s*:\s*(.+?)\s*(?:;|$)/gi,
        V = /^(@?[a-z\-]+)\[(\w+)\]$/,
        z = /-([a-z0-9_])/g,
        q = function(e, t) {
            return t.toUpperCase()
        },
        L = /[\-+]?[\d]*\.?[\d]+/g,
        M = /\{\?\}/g,
        $ = /rgba?\(\s*-?\d+\s*,\s*-?\d+\s*,\s*-?\d+/g,
        _ = /[a-z\-]+-gradient/g,
        B = "",
        G = "",
        K = function() {
            var e = /^(?:O|Moz|webkit|ms)|(?:-(?:o|moz|webkit|ms)-)/;
            if (c) {
                var t = c(a, null);
                for (var n in t)
                    if (B = n.match(e) || +n == n && t[n].match(e)) break;
                if (!B) return B = G = "", r;
                B = B[0], "-" === B.slice(0, 1) ? (G = B, B = {
                    "-webkit-": "webkit",
                    "-moz-": "Moz",
                    "-ms-": "ms",
                    "-o-": "O"
                } [B]) : G = "-" + B.toLowerCase() + "-"
            }
        },
        Y = function() {
            var t = e.requestAnimationFrame || e[B.toLowerCase() + "RequestAnimationFrame"],
                r = Pt();
            return (Gt || !t) && (t = function(t) {
                var n = Pt() - r,
                    o = s.max(0, 1e3 / 60 - n);
                return e.setTimeout(function() {
                    r = Pt(), t()
                }, o)
            }), t
        },
        R = function() {
            var t = e.cancelAnimationFrame || e[B.toLowerCase() + "CancelAnimationFrame"];
            return (Gt || !t) && (t = function(t) {
                return e.clearTimeout(t)
            }), t
        },
        U = {
            begin: function() {
                return 0
            },
            end: function() {
                return 1
            },
            linear: function(e) {
                return e
            },
            quadratic: function(e) {
                return e * e
            },
            cubic: function(e) {
                return e * e * e
            },
            swing: function(e) {
                return -s.cos(e * s.PI) / 2 + .5
            },
            sqrt: function(e) {
                return s.sqrt(e)
            },
            outCubic: function(e) {
                return s.pow(e - 1, 3) + 1
            },
            bounce: function(e) {
                var t;
                if (.5083 >= e) t = 3;
                else if (.8489 >= e) t = 9;
                else if (.96208 >= e) t = 27;
                else {
                    if (!(.99981 >= e)) return 1;
                    t = 91
                }
                return 1 - s.abs(3 * s.cos(1.028 * e * t) / t)
            }
        };
    n.prototype.refresh = function(e) {
        var n, o, a = !1;
        for (e === r ? (a = !0, lt = [], Bt = 0, e = t.getElementsByTagName("*")) : e.length === r && (e = [e]), n = 0, o = e.length; o > n; n++) {
            var i = e[n],
                l = i,
                s = [],
                c = dt,
                f = yt,
                u = !1;
            if (a && H in i && delete i[H], i.attributes) {
                for (var m = 0, p = i.attributes.length; p > m; m++) {
                    var g = i.attributes[m];
                    if ("data-anchor-target" !== g.name)
                        if ("data-smooth-scrolling" !== g.name)
                            if ("data-edge-strategy" !== g.name)
                                if ("data-emit-events" !== g.name) {
                                    var v = g.name.match(N);
                                    if (null !== v) {
                                        var h = {
                                            props: g.value,
                                            element: i,
                                            eventType: g.name.replace(z, q)
                                        };
                                        s.push(h);
                                        var y = v[1];
                                        y && (h.constant = y.substr(1));
                                        var T = v[2];
                                        /p$/.test(T) ? (h.isPercentage = !0, h.offset = (0 | T.slice(0, -1)) / 100) : h.offset = 0 | T;
                                        var b = v[3],
                                            S = v[4] || b;
                                        b && b !== A && b !== F ? (h.mode = "relative", h.anchors = [b, S]) : (h.mode = "absolute", b === F ? h.isEnd = !0 : h.isPercentage || (h.offset = h.offset * Vt))
                                    }
                                } else u = !0;
                    else f = g.value;
                    else c = "off" !== g.value;
                    else if (l = t.querySelector(g.value), null === l) throw 'Unable to find anchor target "' + g.value + '"'
                }
                if (s.length) {
                    var k, w, x;
                    !a && H in i ? (x = i[H], k = lt[x].styleAttr, w = lt[x].classAttr) : (x = i[H] = Bt++, k = i.style.cssText, w = Ct(i)), lt[x] = {
                        element: i,
                        styleAttr: k,
                        classAttr: w,
                        anchorTarget: l,
                        keyFrames: s,
                        smoothScrolling: c,
                        edgeStrategy: f,
                        emitEvents: u,
                        lastFrameIndex: -1
                    }, Dt(i, [d], [])
                }
            }
        }
        for (Et(), n = 0, o = e.length; o > n; n++) {
            var E = lt[e[n][H]];
            E !== r && (J(E), et(E))
        }
        return it
    }, n.prototype.relativeToAbsolute = function(e, t, r) {
        var n = o.clientHeight,
            a = e.getBoundingClientRect(),
            i = a.top,
            l = a.bottom - a.top;
        return t === D ? i -= n : t === C && (i -= n / 2), r === D ? i += l : r === C && (i += l / 2), i += it.getScrollTop(), 0 | i + .5
    }, n.prototype.animateTo = function(e, t) {
        t = t || {};
        var n = Pt(),
            o = it.getScrollTop();
        return pt = {
            startTop: o,
            topDiff: e - o,
            targetTop: e,
            duration: t.duration || w,
            startTime: n,
            endTime: n + (t.duration || w),
            easing: U[t.easing || k],
            done: t.done
        }, pt.topDiff || (pt.done && pt.done.call(it, !1), pt = r), it
    }, n.prototype.stopAnimateTo = function() {
        pt && pt.done && pt.done.call(it, !0), pt = r
    }, n.prototype.isAnimatingTo = function() {
        return !!pt
    }, n.prototype.isMobile = function() {
        return Gt
    }, n.prototype.setScrollTop = function(t, r) {
        return ht = r === !0, Gt ? Kt = s.min(s.max(t, 0), Ot) : e.scrollTo(0, t), it
    }, n.prototype.getScrollTop = function() {
        return Gt ? Kt : e.pageYOffset || o.scrollTop || a.scrollTop || 0
    }, n.prototype.getMaxScrollTop = function() {
        return Ot
    }, n.prototype.on = function(e, t) {
        return ct[e] = t, it
    }, n.prototype.off = function(e) {
        return delete ct[e], it
    }, n.prototype.destroy = function() {
        var e = R();
        e(bt), wt(), Dt(o, [T], [y, b, S]);
        for (var t = 0, n = lt.length; n > t; t++) ot(lt[t].element);
        o.style.overflow = a.style.overflow = "", o.style.height = a.style.height = "", st && i.setStyle(st, "transform", "none"), it = r, st = r, ct = r, ft = r, Ot = 0, Vt = 1, ut = r, mt = r, zt = "down", qt = -1, Mt = 0, $t = 0, _t = !1, pt = r, dt = r, gt = r, vt = r, ht = r, Bt = 0, yt = r, Gt = !1, Kt = 0, Tt = r
    };
    var X = function() {
            var n, i, l, c, d, g, v, h, y, T, b, S;
            St(o, [f, u, m, p].join(" "), function(e) {
                var o = e.changedTouches[0];
                for (c = e.target; 3 === c.nodeType;) c = c.parentNode;
                switch (d = o.clientY, g = o.clientX, T = e.timeStamp, I.test(c.tagName) || e.preventDefault(), e.type) {
                    case f:
                        n && n.blur(), it.stopAnimateTo(), n = c, i = v = d, l = g, y = T;
                        break;
                    case u:
                        I.test(c.tagName) && t.activeElement !== c && e.preventDefault(), h = d - v, S = T - b, it.setScrollTop(Kt - h, !0), v = d, b = T;
                        break;
                    default:
                    case m:
                    case p:
                        var a = i - d,
                            k = l - g,
                            w = k * k + a * a;
                        if (49 > w) {
                            if (!I.test(n.tagName)) {
                                n.focus();
                                var x = t.createEvent("MouseEvents");
                                x.initMouseEvent("click", !0, !0, e.view, 1, o.screenX, o.screenY, o.clientX, o.clientY, e.ctrlKey, e.altKey, e.shiftKey, e.metaKey, 0, null), n.dispatchEvent(x)
                            }
                            return
                        }
                        n = r;
                        var E = h / S;
                        E = s.max(s.min(E, 3), -3);
                        var A = s.abs(E / mt),
                            F = E * A + .5 * mt * A * A,
                            C = it.getScrollTop() - F,
                            D = 0;
                        C > Ot ? (D = (Ot - C) / F, C = Ot) : 0 > C && (D = -C / F, C = 0), A *= 1 - D, it.animateTo(0 | C + .5, {
                            easing: "outCubic",
                            duration: A
                        })
                }
            }), e.scrollTo(0, 0), o.style.overflow = a.style.overflow = "hidden"
        },
        j = function() {
            var e, t, r, n, a, i, l, c, f, u, m, p = o.clientHeight,
                d = At();
            for (c = 0, f = lt.length; f > c; c++)
                for (e = lt[c], t = e.element, r = e.anchorTarget, n = e.keyFrames, a = 0, i = n.length; i > a; a++) l = n[a], u = l.offset, m = d[l.constant] || 0, l.frame = u, l.isPercentage && (u *= p, l.frame = u), "relative" === l.mode && (ot(t), l.frame = it.relativeToAbsolute(r, l.anchors[0], l.anchors[1]) - u, ot(t, !0)), l.frame += m, ft && !l.isEnd && l.frame > Ot && (Ot = l.frame);
            for (Ot = s.max(Ot, Ft()), c = 0, f = lt.length; f > c; c++) {
                for (e = lt[c], n = e.keyFrames, a = 0, i = n.length; i > a; a++) l = n[a], m = d[l.constant] || 0, l.isEnd && (l.frame = Ot - l.offset + m);
                e.keyFrames.sort(Nt)
            }
        },
        W = function(e, t) {
            for (var r = 0, n = lt.length; n > r; r++) {
                var o, a, s = lt[r],
                    c = s.element,
                    f = s.smoothScrolling ? e : t,
                    u = s.keyFrames,
                    m = u.length,
                    p = u[0],
                    y = u[u.length - 1],
                    T = p.frame > f,
                    b = f > y.frame,
                    S = T ? p : y,
                    k = s.emitEvents,
                    w = s.lastFrameIndex;
                if (T || b) {
                    if (T && -1 === s.edge || b && 1 === s.edge) continue;
                    switch (T ? (Dt(c, [g], [h, v]), k && w > -1 && (xt(c, p.eventType, zt), s.lastFrameIndex = -1)) : (Dt(c, [h], [g, v]), k && m > w && (xt(c, y.eventType, zt), s.lastFrameIndex = m)), s.edge = T ? -1 : 1, s.edgeStrategy) {
                        case "reset":
                            ot(c);
                            continue;
                        case "ease":
                            f = S.frame;
                            break;
                        default:
                        case "set":
                            var x = S.props;
                            for (o in x) l.call(x, o) && (a = nt(x[o].value), 0 === o.indexOf("@") ? c.setAttribute(o.substr(1), a) : i.setStyle(c, o, a));
                            continue
                    }
                } else 0 !== s.edge && (Dt(c, [d, v], [g, h]), s.edge = 0);
                for (var E = 0; m - 1 > E; E++)
                    if (f >= u[E].frame && u[E + 1].frame >= f) {
                        var A = u[E],
                            F = u[E + 1];
                        for (o in A.props)
                            if (l.call(A.props, o)) {
                                var C = (f - A.frame) / (F.frame - A.frame);
                                C = A.props[o].easing(C), a = rt(A.props[o].value, F.props[o].value, C), a = nt(a), 0 === o.indexOf("@") ? c.setAttribute(o.substr(1), a) : i.setStyle(c, o, a)
                            } k && w !== E && ("down" === zt ? xt(c, A.eventType, zt) : xt(c, F.eventType, zt), s.lastFrameIndex = E);
                        break
                    }
            }
        },
        Z = function() {
            _t && (_t = !1, Et());
            var e, t, n = it.getScrollTop(),
                o = Pt();
            if (pt) o >= pt.endTime ? (n = pt.targetTop, e = pt.done, pt = r) : (t = pt.easing((o - pt.startTime) / pt.duration), n = 0 | pt.startTop + t * pt.topDiff), it.setScrollTop(n, !0);
            else if (!ht) {
                var a = vt.targetTop - n;
                a && (vt = {
                    startTop: qt,
                    topDiff: n - qt,
                    targetTop: n,
                    startTime: Lt,
                    endTime: Lt + gt
                }), vt.endTime >= o && (t = U.sqrt((o - vt.startTime) / gt), n = 0 | vt.startTop + t * vt.topDiff)
            }
            if (Gt && st && i.setStyle(st, "transform", "translate(0, " + -Kt + "px) " + Tt), ht || qt !== n) {
                zt = n > qt ? "down" : qt > n ? "up" : zt, ht = !1;
                var l = {
                        curTop: n,
                        lastTop: qt,
                        maxTop: Ot,
                        direction: zt
                    },
                    s = ct.beforerender && ct.beforerender.call(it, l);
                s !== !1 && (W(n, it.getScrollTop()), qt = n, ct.render && ct.render.call(it, l)), e && e.call(it, !1)
            }
            Lt = o
        },
        J = function(e) {
            for (var t = 0, r = e.keyFrames.length; r > t; t++) {
                for (var n, o, a, i, l = e.keyFrames[t], s = {}; null !== (i = O.exec(l.props));) a = i[1], o = i[2], n = a.match(V), null !== n ? (a = n[1], n = n[2]) : n = k, o = o.indexOf("!") ? Q(o) : [o.slice(1)], s[a] = {
                    value: o,
                    easing: U[n]
                };
                l.props = s
            }
        },
        Q = function(e) {
            var t = [];
            return $.lastIndex = 0, e = e.replace($, function(e) {
                return e.replace(L, function(e) {
                    return 100 * (e / 255) + "%"
                })
            }), G && (_.lastIndex = 0, e = e.replace(_, function(e) {
                return G + e
            })), e = e.replace(L, function(e) {
                return t.push(+e), "{?}"
            }), t.unshift(e), t
        },
        et = function(e) {
            var t, r, n = {};
            for (t = 0, r = e.keyFrames.length; r > t; t++) tt(e.keyFrames[t], n);
            for (n = {}, t = e.keyFrames.length - 1; t >= 0; t--) tt(e.keyFrames[t], n)
        },
        tt = function(e, t) {
            var r;
            for (r in t) l.call(e.props, r) || (e.props[r] = t[r]);
            for (r in e.props) t[r] = e.props[r]
        },
        rt = function(e, t, r) {
            var n, o = e.length;
            if (o !== t.length) throw "Can't interpolate between \"" + e[0] + '" and "' + t[0] + '"';
            var a = [e[0]];
            for (n = 1; o > n; n++) a[n] = e[n] + (t[n] - e[n]) * r;
            return a
        },
        nt = function(e) {
            var t = 1;
            return M.lastIndex = 0, e[0].replace(M, function() {
                return e[t++]
            })
        },
        ot = function(e, t) {
            e = [].concat(e);
            for (var r, n, o = 0, a = e.length; a > o; o++) n = e[o], r = lt[n[H]], r && (t ? (n.style.cssText = r.dirtyStyleAttr, Dt(n, r.dirtyClassAttr)) : (r.dirtyStyleAttr = n.style.cssText, r.dirtyClassAttr = Ct(n), n.style.cssText = r.styleAttr, Dt(n, r.classAttr)))
        },
        at = function() {
            Tt = "translateZ(0)", i.setStyle(st, "transform", Tt);
            var e = c(st),
                t = e.getPropertyValue("transform"),
                r = e.getPropertyValue(G + "transform"),
                n = t && "none" !== t || r && "none" !== r;
            n || (Tt = "")
        };
    i.setStyle = function(e, t, r) {
        var n = e.style;
        if (t = t.replace(z, q).replace("-", ""), "zIndex" === t) n[t] = isNaN(r) ? r : "" + (0 | r);
        else if ("float" === t) n.styleFloat = n.cssFloat = r;
        else try {
            B && (n[B + t.slice(0, 1).toUpperCase() + t.slice(1)] = r), n[t] = r
        } catch (o) {}
    };
    var it, lt, st, ct, ft, ut, mt, pt, dt, gt, vt, ht, yt, Tt, bt, St = i.addEvent = function(t, r, n) {
            var o = function(t) {
                return t = t || e.event, t.target || (t.target = t.srcElement), t.preventDefault || (t.preventDefault = function() {
                    t.returnValue = !1, t.defaultPrevented = !0
                }), n.call(this, t)
            };
            r = r.split(" ");
            for (var a, i = 0, l = r.length; l > i; i++) a = r[i], t.addEventListener ? t.addEventListener(a, n, !1) : t.attachEvent("on" + a, o), Yt.push({
                element: t,
                name: a,
                listener: n
            })
        },
        kt = i.removeEvent = function(e, t, r) {
            t = t.split(" ");
            for (var n = 0, o = t.length; o > n; n++) e.removeEventListener ? e.removeEventListener(t[n], r, !1) : e.detachEvent("on" + t[n], r)
        },
        wt = function() {
            for (var e, t = 0, r = Yt.length; r > t; t++) e = Yt[t], kt(e.element, e.name, e.listener);
            Yt = []
        },
        xt = function(e, t, r) {
            ct.keyframe && ct.keyframe.call(it, e, t, r)
        },
        Et = function() {
            var e = it.getScrollTop();
            Ot = 0, ft && !Gt && (a.style.height = ""), j(), ft && !Gt && (a.style.height = Ot + o.clientHeight + "px"), Gt ? it.setScrollTop(s.min(it.getScrollTop(), Ot)) : it.setScrollTop(e, !0), ht = !0
        },
        At = function() {
            var e, t, r = o.clientHeight,
                n = {};
            for (e in ut) t = ut[e], "function" == typeof t ? t = t.call(it) : /p$/.test(t) && (t = t.slice(0, -1) / 100 * r), n[e] = t;
            return n
        },
        Ft = function() {
            var e = st && st.offsetHeight || 0,
                t = s.max(e, a.scrollHeight, a.offsetHeight, o.scrollHeight, o.offsetHeight, o.clientHeight);
            return t - o.clientHeight
        },
        Ct = function(t) {
            var r = "className";
            return e.SVGElement && t instanceof e.SVGElement && (t = t[r], r = "baseVal"), t[r]
        },
        Dt = function(t, n, o) {
            var a = "className";
            if (e.SVGElement && t instanceof e.SVGElement && (t = t[a], a = "baseVal"), o === r) return t[a] = n, r;
            for (var i = t[a], l = 0, s = o.length; s > l; l++) i = It(i).replace(It(o[l]), " ");
            i = Ht(i);
            for (var c = 0, f = n.length; f > c; c++) - 1 === It(i).indexOf(It(n[c])) && (i += " " + n[c]);
            t[a] = Ht(i)
        },
        Ht = function(e) {
            return e.replace(P, "")
        },
        It = function(e) {
            return " " + e + " "
        },
        Pt = Date.now || function() {
            return +new Date
        },
        Nt = function(e, t) {
            return e.frame - t.frame
        },
        Ot = 0,
        Vt = 1,
        zt = "down",
        qt = -1,
        Lt = Pt(),
        Mt = 0,
        $t = 0,
        _t = !1,
        Bt = 0,
        Gt = !1,
        Kt = 0,
        Yt = [];
    "function" == typeof define && define.amd ? define([], function() {
        return i
    }) : "undefined" != typeof module && module.exports ? module.exports = i : e.skrollr = i
})(window, document);
! function(a, b) {
    "use strict";

    function c(a) {
        return a && a.toLowerCase ? a.toLowerCase() : a
    }

    function d(a, b) {
        for (var c = 0, d = a.length; d > c; c++)
            if (a[c] == b) return !e;
        return e
    }
    var e = !1,
        f = null,
        g = parseFloat,
        h = Math.min,
        i = /(-?\d+\.?\d*)$/g,
        j = /(\d+\.?\d*)$/g,
        k = [],
        l = [],
        m = function(a) {
            return "string" == typeof a
        },
        n = function(a, b) {
            for (var c, d = a.length, e = d; e--;) c = d - e - 1, b(a[c], c)
        },
        o = Array.prototype.indexOf || function(a) {
            var b = this.length,
                c = Number(arguments[1]) || 0;
            for (c = 0 > c ? Math.ceil(c) : Math.floor(c), 0 > c && (c += b); b > c; c++)
                if (c in this && this[c] === a) return c;
            return -1
        };
    a.tinysort = {
        id: "TinySort",
        version: "1.5.6",
        copyright: "Copyright (c) 2008-2013 Ron Valstar",
        uri: "http://tinysort.sjeiti.com/",
        licensed: {
            MIT: "http://www.opensource.org/licenses/mit-license.php",
            GPL: "http://www.gnu.org/licenses/gpl.html"
        },
        plugin: function() {
            var a = function(a, b) {
                k.push(a), l.push(b)
            };
            return a.indexOf = o, a
        }(),
        defaults: {
            order: "asc",
            attr: f,
            data: f,
            useVal: e,
            place: "start",
            returns: e,
            cases: e,
            forceStrings: e,
            ignoreDashes: e,
            sortFunction: f
        }
    }, a.fn.extend({
        tinysort: function() {
            var p, q, r, s, t = this,
                u = [],
                v = [],
                w = [],
                x = [],
                y = 0,
                z = [],
                A = [],
                B = function(a) {
                    n(k, function(b) {
                        b.call(b, a)
                    })
                },
                C = function(a, b) {
                    return "string" == typeof b && (a.cases || (b = c(b)), b = b.replace(/^\s*(.*?)\s*$/i, "$1")), b
                },
                D = function(a, b) {
                    var c = 0;
                    for (0 !== y && (y = 0); 0 === c && s > y;) {
                        var d = x[y],
                            f = d.oSettings,
                            h = f.ignoreDashes ? j : i;
                        if (B(f), f.sortFunction) c = f.sortFunction(a, b);
                        else if ("rand" == f.order) c = Math.random() < .5 ? 1 : -1;
                        else {
                            var k = e,
                                o = C(f, a.s[y]),
                                p = C(f, b.s[y]);
                            if (!f.forceStrings) {
                                var q = m(o) ? o && o.match(h) : e,
                                    r = m(p) ? p && p.match(h) : e;
                                if (q && r) {
                                    var t = o.substr(0, o.length - q[0].length),
                                        u = p.substr(0, p.length - r[0].length);
                                    t == u && (k = !e, o = g(q[0]), p = g(r[0]))
                                }
                            }
                            c = d.iAsc * (p > o ? -1 : o > p ? 1 : 0)
                        }
                        n(l, function(a) {
                            c = a.call(a, k, o, p, c)
                        }), 0 === c && y++
                    }
                    return c
                };
            for (p = 0, r = arguments.length; r > p; p++) {
                var E = arguments[p];
                m(E) ? z.push(E) - 1 > A.length && (A.length = z.length - 1) : A.push(E) > z.length && (z.length = A.length)
            }
            for (z.length > A.length && (A.length = z.length), s = z.length, 0 === s && (s = z.length = 1, A.push({})), p = 0, r = s; r > p; p++) {
                var F = z[p],
                    G = a.extend({}, a.tinysort.defaults, A[p]),
                    H = !(!F || "" === F),
                    I = H && ":" === F[0];
                x.push({
                    sFind: F,
                    oSettings: G,
                    bFind: H,
                    bAttr: !(G.attr === f || "" === G.attr),
                    bData: G.data !== f,
                    bFilter: I,
                    $Filter: I ? t.filter(F) : t,
                    fnSort: G.sortFunction,
                    iAsc: "asc" == G.order ? 1 : -1
                })
            }
            return t.each(function(c, d) {
                var e, f = a(d),
                    g = f.parent().get(0),
                    h = [];
                for (q = 0; s > q; q++) {
                    var i = x[q],
                        j = i.bFind ? i.bFilter ? i.$Filter.filter(d) : f.find(i.sFind) : f;
                    h.push(i.bData ? j.data(i.oSettings.data) : i.bAttr ? j.attr(i.oSettings.attr) : i.oSettings.useVal ? j.val() : j.text()), e === b && (e = j)
                }
                var k = o.call(w, g);
                0 > k && (k = w.push(g) - 1, v[k] = {
                    s: [],
                    n: []
                }), e.length > 0 ? v[k].s.push({
                    s: h,
                    e: f,
                    n: c
                }) : v[k].n.push({
                    e: f,
                    n: c
                })
            }), n(v, function(a) {
                a.s.sort(D)
            }), n(v, function(a) {
                var b = a.s,
                    c = a.n,
                    f = b.length,
                    g = c.length,
                    i = f + g,
                    j = [],
                    k = i,
                    l = [0, 0];
                switch (G.place) {
                    case "first":
                        n(b, function(a) {
                            k = h(k, a.n)
                        });
                        break;
                    case "org":
                        n(b, function(a) {
                            j.push(a.n)
                        });
                        break;
                    case "end":
                        k = g;
                        break;
                    default:
                        k = 0
                }
                for (p = 0; i > p; p++) {
                    var m = d(j, p) ? !e : p >= k && k + f > p,
                        o = m ? 0 : 1,
                        q = (m ? b : c)[l[o]].e;
                    q.parent().append(q), (m || !G.returns) && u.push(q.get(0)), l[o]++
                }
            }), t.length = 0, Array.prototype.push.apply(t, u), t
        }
    }), a.fn.TinySort = a.fn.Tinysort = a.fn.tsort = a.fn.tinysort
}(jQuery);
(function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof require == "function" && require;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e)
            }, l, l.exports, e, t, n, r)
        }
        return n[o].exports
    }
    var i = typeof require == "function" && require;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s
})({
    1: [function(require, module, exports) {
        var Orchestra = require("orchestra");
        window.Orchestra = Orchestra
    }, {
        orchestra: 44
    }],
    2: [function(require, module, exports) {
        var process = module.exports = {};
        var queue = [];
        var draining = false;
        var currentQueue;
        var queueIndex = -1;

        function cleanUpNextTick() {
            draining = false;
            if (currentQueue.length) {
                queue = currentQueue.concat(queue)
            } else {
                queueIndex = -1
            }
            if (queue.length) {
                drainQueue()
            }
        }

        function drainQueue() {
            if (draining) {
                return
            }
            var timeout = setTimeout(cleanUpNextTick);
            draining = true;
            var len = queue.length;
            while (len) {
                currentQueue = queue;
                queue = [];
                while (++queueIndex < len) {
                    if (currentQueue) {
                        currentQueue[queueIndex].run()
                    }
                }
                queueIndex = -1;
                len = queue.length
            }
            currentQueue = null;
            draining = false;
            clearTimeout(timeout)
        }
        process.nextTick = function(fun) {
            var args = new Array(arguments.length - 1);
            if (arguments.length > 1) {
                for (var i = 1; i < arguments.length; i++) {
                    args[i - 1] = arguments[i]
                }
            }
            queue.push(new Item(fun, args));
            if (queue.length === 1 && !draining) {
                setTimeout(drainQueue, 0)
            }
        };

        function Item(fun, array) {
            this.fun = fun;
            this.array = array
        }
        Item.prototype.run = function() {
            this.fun.apply(null, this.array)
        };
        process.title = "browser";
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = "";
        process.versions = {};

        function noop() {}
        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;
        process.binding = function(name) {
            throw new Error("process.binding is not supported")
        };
        process.cwd = function() {
            return "/"
        };
        process.chdir = function(dir) {
            throw new Error("process.chdir is not supported")
        };
        process.umask = function() {
            return 0
        }
    }, {}],
    3: [function(require, module, exports) {
        (function(global) {
            (function() {
                var undefined;
                var VERSION = "3.10.1";
                var BIND_FLAG = 1,
                    BIND_KEY_FLAG = 2,
                    CURRY_BOUND_FLAG = 4,
                    CURRY_FLAG = 8,
                    CURRY_RIGHT_FLAG = 16,
                    PARTIAL_FLAG = 32,
                    PARTIAL_RIGHT_FLAG = 64,
                    ARY_FLAG = 128,
                    REARG_FLAG = 256;
                var DEFAULT_TRUNC_LENGTH = 30,
                    DEFAULT_TRUNC_OMISSION = "...";
                var HOT_COUNT = 150,
                    HOT_SPAN = 16;
                var LARGE_ARRAY_SIZE = 200;
                var LAZY_FILTER_FLAG = 1,
                    LAZY_MAP_FLAG = 2;
                var FUNC_ERROR_TEXT = "Expected a function";
                var PLACEHOLDER = "__lodash_placeholder__";
                var argsTag = "[object Arguments]",
                    arrayTag = "[object Array]",
                    boolTag = "[object Boolean]",
                    dateTag = "[object Date]",
                    errorTag = "[object Error]",
                    funcTag = "[object Function]",
                    mapTag = "[object Map]",
                    numberTag = "[object Number]",
                    objectTag = "[object Object]",
                    regexpTag = "[object RegExp]",
                    setTag = "[object Set]",
                    stringTag = "[object String]",
                    weakMapTag = "[object WeakMap]";
                var arrayBufferTag = "[object ArrayBuffer]",
                    float32Tag = "[object Float32Array]",
                    float64Tag = "[object Float64Array]",
                    int8Tag = "[object Int8Array]",
                    int16Tag = "[object Int16Array]",
                    int32Tag = "[object Int32Array]",
                    uint8Tag = "[object Uint8Array]",
                    uint8ClampedTag = "[object Uint8ClampedArray]",
                    uint16Tag = "[object Uint16Array]",
                    uint32Tag = "[object Uint32Array]";
                var reEmptyStringLeading = /\b__p \+= '';/g,
                    reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
                    reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
                var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
                    reUnescapedHtml = /[&<>"'`]/g,
                    reHasEscapedHtml = RegExp(reEscapedHtml.source),
                    reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
                var reEscape = /<%-([\s\S]+?)%>/g,
                    reEvaluate = /<%([\s\S]+?)%>/g,
                    reInterpolate = /<%=([\s\S]+?)%>/g;
                var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
                    reIsPlainProp = /^\w*$/,
                    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;
                var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
                    reHasRegExpChars = RegExp(reRegExpChars.source);
                var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;
                var reEscapeChar = /\\(\\)?/g;
                var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
                var reFlags = /\w*$/;
                var reHasHexPrefix = /^0[xX]/;
                var reIsHostCtor = /^\[object .+?Constructor\]$/;
                var reIsUint = /^\d+$/;
                var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;
                var reNoMatch = /($^)/;
                var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
                var reWords = function() {
                    var upper = "[A-Z\\xc0-\\xd6\\xd8-\\xde]",
                        lower = "[a-z\\xdf-\\xf6\\xf8-\\xff]+";
                    return RegExp(upper + "+(?=" + upper + lower + ")|" + upper + "?" + lower + "|" + upper + "+|[0-9]+", "g")
                }();
                var contextProps = ["Array", "ArrayBuffer", "Date", "Error", "Float32Array", "Float64Array", "Function", "Int8Array", "Int16Array", "Int32Array", "Math", "Number", "Object", "RegExp", "Set", "String", "_", "clearTimeout", "isFinite", "parseFloat", "parseInt", "setTimeout", "TypeError", "Uint8Array", "Uint8ClampedArray", "Uint16Array", "Uint32Array", "WeakMap"];
                var templateCounter = -1;
                var typedArrayTags = {};
                typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
                typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
                var cloneableTags = {};
                cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[stringTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
                cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[mapTag] = cloneableTags[setTag] = cloneableTags[weakMapTag] = false;
                var deburredLetters = {
                    "À": "A",
                    "Á": "A",
                    "Â": "A",
                    "Ã": "A",
                    "Ä": "A",
                    "Å": "A",
                    "à": "a",
                    "á": "a",
                    "â": "a",
                    "ã": "a",
                    "ä": "a",
                    "å": "a",
                    "Ç": "C",
                    "ç": "c",
                    "Ð": "D",
                    "ð": "d",
                    "È": "E",
                    "É": "E",
                    "Ê": "E",
                    "Ë": "E",
                    "è": "e",
                    "é": "e",
                    "ê": "e",
                    "ë": "e",
                    "Ì": "I",
                    "Í": "I",
                    "Î": "I",
                    "Ï": "I",
                    "ì": "i",
                    "í": "i",
                    "î": "i",
                    "ï": "i",
                    "Ñ": "N",
                    "ñ": "n",
                    "Ò": "O",
                    "Ó": "O",
                    "Ô": "O",
                    "Õ": "O",
                    "Ö": "O",
                    "Ø": "O",
                    "ò": "o",
                    "ó": "o",
                    "ô": "o",
                    "õ": "o",
                    "ö": "o",
                    "ø": "o",
                    "Ù": "U",
                    "Ú": "U",
                    "Û": "U",
                    "Ü": "U",
                    "ù": "u",
                    "ú": "u",
                    "û": "u",
                    "ü": "u",
                    "Ý": "Y",
                    "ý": "y",
                    "ÿ": "y",
                    "Æ": "Ae",
                    "æ": "ae",
                    "Þ": "Th",
                    "þ": "th",
                    "ß": "ss"
                };
                var htmlEscapes = {
                    "&": "&amp;",
                    "<": "&lt;",
                    ">": "&gt;",
                    '"': "&quot;",
                    "'": "&#39;",
                    "`": "&#96;"
                };
                var htmlUnescapes = {
                    "&amp;": "&",
                    "&lt;": "<",
                    "&gt;": ">",
                    "&quot;": '"',
                    "&#39;": "'",
                    "&#96;": "`"
                };
                var objectTypes = {
                    function: true,
                    object: true
                };
                var regexpEscapes = {
                    0: "x30",
                    1: "x31",
                    2: "x32",
                    3: "x33",
                    4: "x34",
                    5: "x35",
                    6: "x36",
                    7: "x37",
                    8: "x38",
                    9: "x39",
                    A: "x41",
                    B: "x42",
                    C: "x43",
                    D: "x44",
                    E: "x45",
                    F: "x46",
                    a: "x61",
                    b: "x62",
                    c: "x63",
                    d: "x64",
                    e: "x65",
                    f: "x66",
                    n: "x6e",
                    r: "x72",
                    t: "x74",
                    u: "x75",
                    v: "x76",
                    x: "x78"
                };
                var stringEscapes = {
                    "\\": "\\",
                    "'": "'",
                    "\n": "n",
                    "\r": "r",
                    "\u2028": "u2028",
                    "\u2029": "u2029"
                };
                var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;
                var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;
                var freeGlobal = freeExports && freeModule && typeof global == "object" && global && global.Object && global;
                var freeSelf = objectTypes[typeof self] && self && self.Object && self;
                var freeWindow = objectTypes[typeof window] && window && window.Object && window;
                var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;
                var root = freeGlobal || freeWindow !== (this && this.window) && freeWindow || freeSelf || this;

                function baseCompareAscending(value, other) {
                    if (value !== other) {
                        var valIsNull = value === null,
                            valIsUndef = value === undefined,
                            valIsReflexive = value === value;
                        var othIsNull = other === null,
                            othIsUndef = other === undefined,
                            othIsReflexive = other === other;
                        if (value > other && !othIsNull || !valIsReflexive || valIsNull && !othIsUndef && othIsReflexive || valIsUndef && othIsReflexive) {
                            return 1
                        }
                        if (value < other && !valIsNull || !othIsReflexive || othIsNull && !valIsUndef && valIsReflexive || othIsUndef && valIsReflexive) {
                            return -1
                        }
                    }
                    return 0
                }

                function baseFindIndex(array, predicate, fromRight) {
                    var length = array.length,
                        index = fromRight ? length : -1;
                    while (fromRight ? index-- : ++index < length) {
                        if (predicate(array[index], index, array)) {
                            return index
                        }
                    }
                    return -1
                }

                function baseIndexOf(array, value, fromIndex) {
                    if (value !== value) {
                        return indexOfNaN(array, fromIndex)
                    }
                    var index = fromIndex - 1,
                        length = array.length;
                    while (++index < length) {
                        if (array[index] === value) {
                            return index
                        }
                    }
                    return -1
                }

                function baseIsFunction(value) {
                    return typeof value == "function" || false
                }

                function baseToString(value) {
                    return value == null ? "" : value + ""
                }

                function charsLeftIndex(string, chars) {
                    var index = -1,
                        length = string.length;
                    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
                    return index
                }

                function charsRightIndex(string, chars) {
                    var index = string.length;
                    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
                    return index
                }

                function compareAscending(object, other) {
                    return baseCompareAscending(object.criteria, other.criteria) || object.index - other.index
                }

                function compareMultiple(object, other, orders) {
                    var index = -1,
                        objCriteria = object.criteria,
                        othCriteria = other.criteria,
                        length = objCriteria.length,
                        ordersLength = orders.length;
                    while (++index < length) {
                        var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
                        if (result) {
                            if (index >= ordersLength) {
                                return result
                            }
                            var order = orders[index];
                            return result * (order === "asc" || order === true ? 1 : -1)
                        }
                    }
                    return object.index - other.index
                }

                function deburrLetter(letter) {
                    return deburredLetters[letter]
                }

                function escapeHtmlChar(chr) {
                    return htmlEscapes[chr]
                }

                function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
                    if (leadingChar) {
                        chr = regexpEscapes[chr]
                    } else if (whitespaceChar) {
                        chr = stringEscapes[chr]
                    }
                    return "\\" + chr
                }

                function escapeStringChar(chr) {
                    return "\\" + stringEscapes[chr]
                }

                function indexOfNaN(array, fromIndex, fromRight) {
                    var length = array.length,
                        index = fromIndex + (fromRight ? 0 : -1);
                    while (fromRight ? index-- : ++index < length) {
                        var other = array[index];
                        if (other !== other) {
                            return index
                        }
                    }
                    return -1
                }

                function isObjectLike(value) {
                    return !!value && typeof value == "object"
                }

                function isSpace(charCode) {
                    return charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160 || charCode == 5760 || charCode == 6158 || charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)
                }

                function replaceHolders(array, placeholder) {
                    var index = -1,
                        length = array.length,
                        resIndex = -1,
                        result = [];
                    while (++index < length) {
                        if (array[index] === placeholder) {
                            array[index] = PLACEHOLDER;
                            result[++resIndex] = index
                        }
                    }
                    return result
                }

                function sortedUniq(array, iteratee) {
                    var seen, index = -1,
                        length = array.length,
                        resIndex = -1,
                        result = [];
                    while (++index < length) {
                        var value = array[index],
                            computed = iteratee ? iteratee(value, index, array) : value;
                        if (!index || seen !== computed) {
                            seen = computed;
                            result[++resIndex] = value
                        }
                    }
                    return result
                }

                function trimmedLeftIndex(string) {
                    var index = -1,
                        length = string.length;
                    while (++index < length && isSpace(string.charCodeAt(index))) {}
                    return index
                }

                function trimmedRightIndex(string) {
                    var index = string.length;
                    while (index-- && isSpace(string.charCodeAt(index))) {}
                    return index
                }

                function unescapeHtmlChar(chr) {
                    return htmlUnescapes[chr]
                }

                function runInContext(context) {
                    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;
                    var Array = context.Array,
                        Date = context.Date,
                        Error = context.Error,
                        Function = context.Function,
                        Math = context.Math,
                        Number = context.Number,
                        Object = context.Object,
                        RegExp = context.RegExp,
                        String = context.String,
                        TypeError = context.TypeError;
                    var arrayProto = Array.prototype,
                        objectProto = Object.prototype,
                        stringProto = String.prototype;
                    var fnToString = Function.prototype.toString;
                    var hasOwnProperty = objectProto.hasOwnProperty;
                    var idCounter = 0;
                    var objToString = objectProto.toString;
                    var oldDash = root._;
                    var reIsNative = RegExp("^" + fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
                    var ArrayBuffer = context.ArrayBuffer,
                        clearTimeout = context.clearTimeout,
                        parseFloat = context.parseFloat,
                        pow = Math.pow,
                        propertyIsEnumerable = objectProto.propertyIsEnumerable,
                        Set = getNative(context, "Set"),
                        setTimeout = context.setTimeout,
                        splice = arrayProto.splice,
                        Uint8Array = context.Uint8Array,
                        WeakMap = getNative(context, "WeakMap");
                    var nativeCeil = Math.ceil,
                        nativeCreate = getNative(Object, "create"),
                        nativeFloor = Math.floor,
                        nativeIsArray = getNative(Array, "isArray"),
                        nativeIsFinite = context.isFinite,
                        nativeKeys = getNative(Object, "keys"),
                        nativeMax = Math.max,
                        nativeMin = Math.min,
                        nativeNow = getNative(Date, "now"),
                        nativeParseInt = context.parseInt,
                        nativeRandom = Math.random;
                    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
                        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
                    var MAX_ARRAY_LENGTH = 4294967295,
                        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
                        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
                    var MAX_SAFE_INTEGER = 9007199254740991;
                    var metaMap = WeakMap && new WeakMap;
                    var realNames = {};

                    function lodash(value) {
                        if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
                            if (value instanceof LodashWrapper) {
                                return value
                            }
                            if (hasOwnProperty.call(value, "__chain__") && hasOwnProperty.call(value, "__wrapped__")) {
                                return wrapperClone(value)
                            }
                        }
                        return new LodashWrapper(value)
                    }

                    function baseLodash() {}

                    function LodashWrapper(value, chainAll, actions) {
                        this.__wrapped__ = value;
                        this.__actions__ = actions || [];
                        this.__chain__ = !!chainAll
                    }
                    var support = lodash.support = {};
                    lodash.templateSettings = {
                        escape: reEscape,
                        evaluate: reEvaluate,
                        interpolate: reInterpolate,
                        variable: "",
                        imports: {
                            _: lodash
                        }
                    };

                    function LazyWrapper(value) {
                        this.__wrapped__ = value;
                        this.__actions__ = [];
                        this.__dir__ = 1;
                        this.__filtered__ = false;
                        this.__iteratees__ = [];
                        this.__takeCount__ = POSITIVE_INFINITY;
                        this.__views__ = []
                    }

                    function lazyClone() {
                        var result = new LazyWrapper(this.__wrapped__);
                        result.__actions__ = arrayCopy(this.__actions__);
                        result.__dir__ = this.__dir__;
                        result.__filtered__ = this.__filtered__;
                        result.__iteratees__ = arrayCopy(this.__iteratees__);
                        result.__takeCount__ = this.__takeCount__;
                        result.__views__ = arrayCopy(this.__views__);
                        return result
                    }

                    function lazyReverse() {
                        if (this.__filtered__) {
                            var result = new LazyWrapper(this);
                            result.__dir__ = -1;
                            result.__filtered__ = true
                        } else {
                            result = this.clone();
                            result.__dir__ *= -1
                        }
                        return result
                    }

                    function lazyValue() {
                        var array = this.__wrapped__.value(),
                            dir = this.__dir__,
                            isArr = isArray(array),
                            isRight = dir < 0,
                            arrLength = isArr ? array.length : 0,
                            view = getView(0, arrLength, this.__views__),
                            start = view.start,
                            end = view.end,
                            length = end - start,
                            index = isRight ? end : start - 1,
                            iteratees = this.__iteratees__,
                            iterLength = iteratees.length,
                            resIndex = 0,
                            takeCount = nativeMin(length, this.__takeCount__);
                        if (!isArr || arrLength < LARGE_ARRAY_SIZE || arrLength == length && takeCount == length) {
                            return baseWrapperValue(isRight && isArr ? array.reverse() : array, this.__actions__)
                        }
                        var result = [];
                        outer: while (length-- && resIndex < takeCount) {
                            index += dir;
                            var iterIndex = -1,
                                value = array[index];
                            while (++iterIndex < iterLength) {
                                var data = iteratees[iterIndex],
                                    iteratee = data.iteratee,
                                    type = data.type,
                                    computed = iteratee(value);
                                if (type == LAZY_MAP_FLAG) {
                                    value = computed
                                } else if (!computed) {
                                    if (type == LAZY_FILTER_FLAG) {
                                        continue outer
                                    } else {
                                        break outer
                                    }
                                }
                            }
                            result[resIndex++] = value
                        }
                        return result
                    }

                    function MapCache() {
                        this.__data__ = {}
                    }

                    function mapDelete(key) {
                        return this.has(key) && delete this.__data__[key]
                    }

                    function mapGet(key) {
                        return key == "__proto__" ? undefined : this.__data__[key]
                    }

                    function mapHas(key) {
                        return key != "__proto__" && hasOwnProperty.call(this.__data__, key)
                    }

                    function mapSet(key, value) {
                        if (key != "__proto__") {
                            this.__data__[key] = value
                        }
                        return this
                    }

                    function SetCache(values) {
                        var length = values ? values.length : 0;
                        this.data = {
                            hash: nativeCreate(null),
                            set: new Set
                        };
                        while (length--) {
                            this.push(values[length])
                        }
                    }

                    function cacheIndexOf(cache, value) {
                        var data = cache.data,
                            result = typeof value == "string" || isObject(value) ? data.set.has(value) : data.hash[value];
                        return result ? 0 : -1
                    }

                    function cachePush(value) {
                        var data = this.data;
                        if (typeof value == "string" || isObject(value)) {
                            data.set.add(value)
                        } else {
                            data.hash[value] = true
                        }
                    }

                    function arrayConcat(array, other) {
                        var index = -1,
                            length = array.length,
                            othIndex = -1,
                            othLength = other.length,
                            result = Array(length + othLength);
                        while (++index < length) {
                            result[index] = array[index]
                        }
                        while (++othIndex < othLength) {
                            result[index++] = other[othIndex]
                        }
                        return result
                    }

                    function arrayCopy(source, array) {
                        var index = -1,
                            length = source.length;
                        array || (array = Array(length));
                        while (++index < length) {
                            array[index] = source[index]
                        }
                        return array
                    }

                    function arrayEach(array, iteratee) {
                        var index = -1,
                            length = array.length;
                        while (++index < length) {
                            if (iteratee(array[index], index, array) === false) {
                                break
                            }
                        }
                        return array
                    }

                    function arrayEachRight(array, iteratee) {
                        var length = array.length;
                        while (length--) {
                            if (iteratee(array[length], length, array) === false) {
                                break
                            }
                        }
                        return array
                    }

                    function arrayEvery(array, predicate) {
                        var index = -1,
                            length = array.length;
                        while (++index < length) {
                            if (!predicate(array[index], index, array)) {
                                return false
                            }
                        }
                        return true
                    }

                    function arrayExtremum(array, iteratee, comparator, exValue) {
                        var index = -1,
                            length = array.length,
                            computed = exValue,
                            result = computed;
                        while (++index < length) {
                            var value = array[index],
                                current = +iteratee(value);
                            if (comparator(current, computed)) {
                                computed = current;
                                result = value
                            }
                        }
                        return result
                    }

                    function arrayFilter(array, predicate) {
                        var index = -1,
                            length = array.length,
                            resIndex = -1,
                            result = [];
                        while (++index < length) {
                            var value = array[index];
                            if (predicate(value, index, array)) {
                                result[++resIndex] = value
                            }
                        }
                        return result
                    }

                    function arrayMap(array, iteratee) {
                        var index = -1,
                            length = array.length,
                            result = Array(length);
                        while (++index < length) {
                            result[index] = iteratee(array[index], index, array)
                        }
                        return result
                    }

                    function arrayPush(array, values) {
                        var index = -1,
                            length = values.length,
                            offset = array.length;
                        while (++index < length) {
                            array[offset + index] = values[index]
                        }
                        return array
                    }

                    function arrayReduce(array, iteratee, accumulator, initFromArray) {
                        var index = -1,
                            length = array.length;
                        if (initFromArray && length) {
                            accumulator = array[++index]
                        }
                        while (++index < length) {
                            accumulator = iteratee(accumulator, array[index], index, array)
                        }
                        return accumulator
                    }

                    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
                        var length = array.length;
                        if (initFromArray && length) {
                            accumulator = array[--length]
                        }
                        while (length--) {
                            accumulator = iteratee(accumulator, array[length], length, array)
                        }
                        return accumulator
                    }

                    function arraySome(array, predicate) {
                        var index = -1,
                            length = array.length;
                        while (++index < length) {
                            if (predicate(array[index], index, array)) {
                                return true
                            }
                        }
                        return false
                    }

                    function arraySum(array, iteratee) {
                        var length = array.length,
                            result = 0;
                        while (length--) {
                            result += +iteratee(array[length]) || 0
                        }
                        return result
                    }

                    function assignDefaults(objectValue, sourceValue) {
                        return objectValue === undefined ? sourceValue : objectValue
                    }

                    function assignOwnDefaults(objectValue, sourceValue, key, object) {
                        return objectValue === undefined || !hasOwnProperty.call(object, key) ? sourceValue : objectValue
                    }

                    function assignWith(object, source, customizer) {
                        var index = -1,
                            props = keys(source),
                            length = props.length;
                        while (++index < length) {
                            var key = props[index],
                                value = object[key],
                                result = customizer(value, source[key], key, object, source);
                            if ((result === result ? result !== value : value === value) || value === undefined && !(key in object)) {
                                object[key] = result
                            }
                        }
                        return object
                    }

                    function baseAssign(object, source) {
                        return source == null ? object : baseCopy(source, keys(source), object)
                    }

                    function baseAt(collection, props) {
                        var index = -1,
                            isNil = collection == null,
                            isArr = !isNil && isArrayLike(collection),
                            length = isArr ? collection.length : 0,
                            propsLength = props.length,
                            result = Array(propsLength);
                        while (++index < propsLength) {
                            var key = props[index];
                            if (isArr) {
                                result[index] = isIndex(key, length) ? collection[key] : undefined
                            } else {
                                result[index] = isNil ? undefined : collection[key]
                            }
                        }
                        return result
                    }

                    function baseCopy(source, props, object) {
                        object || (object = {});
                        var index = -1,
                            length = props.length;
                        while (++index < length) {
                            var key = props[index];
                            object[key] = source[key]
                        }
                        return object
                    }

                    function baseCallback(func, thisArg, argCount) {
                        var type = typeof func;
                        if (type == "function") {
                            return thisArg === undefined ? func : bindCallback(func, thisArg, argCount)
                        }
                        if (func == null) {
                            return identity
                        }
                        if (type == "object") {
                            return baseMatches(func)
                        }
                        return thisArg === undefined ? property(func) : baseMatchesProperty(func, thisArg)
                    }

                    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
                        var result;
                        if (customizer) {
                            result = object ? customizer(value, key, object) : customizer(value)
                        }
                        if (result !== undefined) {
                            return result
                        }
                        if (!isObject(value)) {
                            return value
                        }
                        var isArr = isArray(value);
                        if (isArr) {
                            result = initCloneArray(value);
                            if (!isDeep) {
                                return arrayCopy(value, result)
                            }
                        } else {
                            var tag = objToString.call(value),
                                isFunc = tag == funcTag;
                            if (tag == objectTag || tag == argsTag || isFunc && !object) {
                                result = initCloneObject(isFunc ? {} : value);
                                if (!isDeep) {
                                    return baseAssign(result, value)
                                }
                            } else {
                                return cloneableTags[tag] ? initCloneByTag(value, tag, isDeep) : object ? value : {}
                            }
                        }
                        stackA || (stackA = []);
                        stackB || (stackB = []);
                        var length = stackA.length;
                        while (length--) {
                            if (stackA[length] == value) {
                                return stackB[length]
                            }
                        }
                        stackA.push(value);
                        stackB.push(result);
                        (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
                            result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB)
                        });
                        return result
                    }
                    var baseCreate = function() {
                        function object() {}
                        return function(prototype) {
                            if (isObject(prototype)) {
                                object.prototype = prototype;
                                var result = new object;
                                object.prototype = undefined
                            }
                            return result || {}
                        }
                    }();

                    function baseDelay(func, wait, args) {
                        if (typeof func != "function") {
                            throw new TypeError(FUNC_ERROR_TEXT)
                        }
                        return setTimeout(function() {
                            func.apply(undefined, args)
                        }, wait)
                    }

                    function baseDifference(array, values) {
                        var length = array ? array.length : 0,
                            result = [];
                        if (!length) {
                            return result
                        }
                        var index = -1,
                            indexOf = getIndexOf(),
                            isCommon = indexOf == baseIndexOf,
                            cache = isCommon && values.length >= LARGE_ARRAY_SIZE ? createCache(values) : null,
                            valuesLength = values.length;
                        if (cache) {
                            indexOf = cacheIndexOf;
                            isCommon = false;
                            values = cache
                        }
                        outer: while (++index < length) {
                            var value = array[index];
                            if (isCommon && value === value) {
                                var valuesIndex = valuesLength;
                                while (valuesIndex--) {
                                    if (values[valuesIndex] === value) {
                                        continue outer
                                    }
                                }
                                result.push(value)
                            } else if (indexOf(values, value, 0) < 0) {
                                result.push(value)
                            }
                        }
                        return result
                    }
                    var baseEach = createBaseEach(baseForOwn);
                    var baseEachRight = createBaseEach(baseForOwnRight, true);

                    function baseEvery(collection, predicate) {
                        var result = true;
                        baseEach(collection, function(value, index, collection) {
                            result = !!predicate(value, index, collection);
                            return result
                        });
                        return result
                    }

                    function baseExtremum(collection, iteratee, comparator, exValue) {
                        var computed = exValue,
                            result = computed;
                        baseEach(collection, function(value, index, collection) {
                            var current = +iteratee(value, index, collection);
                            if (comparator(current, computed) || current === exValue && current === result) {
                                computed = current;
                                result = value
                            }
                        });
                        return result
                    }

                    function baseFill(array, value, start, end) {
                        var length = array.length;
                        start = start == null ? 0 : +start || 0;
                        if (start < 0) {
                            start = -start > length ? 0 : length + start
                        }
                        end = end === undefined || end > length ? length : +end || 0;
                        if (end < 0) {
                            end += length
                        }
                        length = start > end ? 0 : end >>> 0;
                        start >>>= 0;
                        while (start < length) {
                            array[start++] = value
                        }
                        return array
                    }

                    function baseFilter(collection, predicate) {
                        var result = [];
                        baseEach(collection, function(value, index, collection) {
                            if (predicate(value, index, collection)) {
                                result.push(value)
                            }
                        });
                        return result
                    }

                    function baseFind(collection, predicate, eachFunc, retKey) {
                        var result;
                        eachFunc(collection, function(value, key, collection) {
                            if (predicate(value, key, collection)) {
                                result = retKey ? key : value;
                                return false
                            }
                        });
                        return result
                    }

                    function baseFlatten(array, isDeep, isStrict, result) {
                        result || (result = []);
                        var index = -1,
                            length = array.length;
                        while (++index < length) {
                            var value = array[index];
                            if (isObjectLike(value) && isArrayLike(value) && (isStrict || isArray(value) || isArguments(value))) {
                                if (isDeep) {
                                    baseFlatten(value, isDeep, isStrict, result)
                                } else {
                                    arrayPush(result, value)
                                }
                            } else if (!isStrict) {
                                result[result.length] = value
                            }
                        }
                        return result
                    }
                    var baseFor = createBaseFor();
                    var baseForRight = createBaseFor(true);

                    function baseForIn(object, iteratee) {
                        return baseFor(object, iteratee, keysIn)
                    }

                    function baseForOwn(object, iteratee) {
                        return baseFor(object, iteratee, keys)
                    }

                    function baseForOwnRight(object, iteratee) {
                        return baseForRight(object, iteratee, keys)
                    }

                    function baseFunctions(object, props) {
                        var index = -1,
                            length = props.length,
                            resIndex = -1,
                            result = [];
                        while (++index < length) {
                            var key = props[index];
                            if (isFunction(object[key])) {
                                result[++resIndex] = key
                            }
                        }
                        return result
                    }

                    function baseGet(object, path, pathKey) {
                        if (object == null) {
                            return
                        }
                        if (pathKey !== undefined && pathKey in toObject(object)) {
                            path = [pathKey]
                        }
                        var index = 0,
                            length = path.length;
                        while (object != null && index < length) {
                            object = object[path[index++]]
                        }
                        return index && index == length ? object : undefined
                    }

                    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
                        if (value === other) {
                            return true
                        }
                        if (value == null || other == null || !isObject(value) && !isObjectLike(other)) {
                            return value !== value && other !== other
                        }
                        return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB)
                    }

                    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
                        var objIsArr = isArray(object),
                            othIsArr = isArray(other),
                            objTag = arrayTag,
                            othTag = arrayTag;
                        if (!objIsArr) {
                            objTag = objToString.call(object);
                            if (objTag == argsTag) {
                                objTag = objectTag
                            } else if (objTag != objectTag) {
                                objIsArr = isTypedArray(object)
                            }
                        }
                        if (!othIsArr) {
                            othTag = objToString.call(other);
                            if (othTag == argsTag) {
                                othTag = objectTag
                            } else if (othTag != objectTag) {
                                othIsArr = isTypedArray(other)
                            }
                        }
                        var objIsObj = objTag == objectTag,
                            othIsObj = othTag == objectTag,
                            isSameTag = objTag == othTag;
                        if (isSameTag && !(objIsArr || objIsObj)) {
                            return equalByTag(object, other, objTag)
                        }
                        if (!isLoose) {
                            var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"),
                                othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
                            if (objIsWrapped || othIsWrapped) {
                                return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB)
                            }
                        }
                        if (!isSameTag) {
                            return false
                        }
                        stackA || (stackA = []);
                        stackB || (stackB = []);
                        var length = stackA.length;
                        while (length--) {
                            if (stackA[length] == object) {
                                return stackB[length] == other
                            }
                        }
                        stackA.push(object);
                        stackB.push(other);
                        var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);
                        stackA.pop();
                        stackB.pop();
                        return result
                    }

                    function baseIsMatch(object, matchData, customizer) {
                        var index = matchData.length,
                            length = index,
                            noCustomizer = !customizer;
                        if (object == null) {
                            return !length
                        }
                        object = toObject(object);
                        while (index--) {
                            var data = matchData[index];
                            if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
                                return false
                            }
                        }
                        while (++index < length) {
                            data = matchData[index];
                            var key = data[0],
                                objValue = object[key],
                                srcValue = data[1];
                            if (noCustomizer && data[2]) {
                                if (objValue === undefined && !(key in object)) {
                                    return false
                                }
                            } else {
                                var result = customizer ? customizer(objValue, srcValue, key) : undefined;
                                if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
                                    return false
                                }
                            }
                        }
                        return true
                    }

                    function baseMap(collection, iteratee) {
                        var index = -1,
                            result = isArrayLike(collection) ? Array(collection.length) : [];
                        baseEach(collection, function(value, key, collection) {
                            result[++index] = iteratee(value, key, collection)
                        });
                        return result
                    }

                    function baseMatches(source) {
                        var matchData = getMatchData(source);
                        if (matchData.length == 1 && matchData[0][2]) {
                            var key = matchData[0][0],
                                value = matchData[0][1];
                            return function(object) {
                                if (object == null) {
                                    return false
                                }
                                return object[key] === value && (value !== undefined || key in toObject(object))
                            }
                        }
                        return function(object) {
                            return baseIsMatch(object, matchData)
                        }
                    }

                    function baseMatchesProperty(path, srcValue) {
                        var isArr = isArray(path),
                            isCommon = isKey(path) && isStrictComparable(srcValue),
                            pathKey = path + "";
                        path = toPath(path);
                        return function(object) {
                            if (object == null) {
                                return false
                            }
                            var key = pathKey;
                            object = toObject(object);
                            if ((isArr || !isCommon) && !(key in object)) {
                                object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
                                if (object == null) {
                                    return false
                                }
                                key = last(path);
                                object = toObject(object)
                            }
                            return object[key] === srcValue ? srcValue !== undefined || key in object : baseIsEqual(srcValue, object[key], undefined, true)
                        }
                    }

                    function baseMerge(object, source, customizer, stackA, stackB) {
                        if (!isObject(object)) {
                            return object
                        }
                        var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
                            props = isSrcArr ? undefined : keys(source);
                        arrayEach(props || source, function(srcValue, key) {
                            if (props) {
                                key = srcValue;
                                srcValue = source[key]
                            }
                            if (isObjectLike(srcValue)) {
                                stackA || (stackA = []);
                                stackB || (stackB = []);
                                baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB)
                            } else {
                                var value = object[key],
                                    result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
                                    isCommon = result === undefined;
                                if (isCommon) {
                                    result = srcValue
                                }
                                if ((result !== undefined || isSrcArr && !(key in object)) && (isCommon || (result === result ? result !== value : value === value))) {
                                    object[key] = result
                                }
                            }
                        });
                        return object
                    }

                    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
                        var length = stackA.length,
                            srcValue = source[key];
                        while (length--) {
                            if (stackA[length] == srcValue) {
                                object[key] = stackB[length];
                                return
                            }
                        }
                        var value = object[key],
                            result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
                            isCommon = result === undefined;
                        if (isCommon) {
                            result = srcValue;
                            if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
                                result = isArray(value) ? value : isArrayLike(value) ? arrayCopy(value) : []
                            } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                                result = isArguments(value) ? toPlainObject(value) : isPlainObject(value) ? value : {}
                            } else {
                                isCommon = false
                            }
                        }
                        stackA.push(srcValue);
                        stackB.push(result);
                        if (isCommon) {
                            object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB)
                        } else if (result === result ? result !== value : value === value) {
                            object[key] = result
                        }
                    }

                    function baseProperty(key) {
                        return function(object) {
                            return object == null ? undefined : object[key]
                        }
                    }

                    function basePropertyDeep(path) {
                        var pathKey = path + "";
                        path = toPath(path);
                        return function(object) {
                            return baseGet(object, path, pathKey)
                        }
                    }

                    function basePullAt(array, indexes) {
                        var length = array ? indexes.length : 0;
                        while (length--) {
                            var index = indexes[length];
                            if (index != previous && isIndex(index)) {
                                var previous = index;
                                splice.call(array, index, 1)
                            }
                        }
                        return array
                    }

                    function baseRandom(min, max) {
                        return min + nativeFloor(nativeRandom() * (max - min + 1))
                    }

                    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
                        eachFunc(collection, function(value, index, collection) {
                            accumulator = initFromCollection ? (initFromCollection = false, value) : iteratee(accumulator, value, index, collection)
                        });
                        return accumulator
                    }
                    var baseSetData = !metaMap ? identity : function(func, data) {
                        metaMap.set(func, data);
                        return func
                    };

                    function baseSlice(array, start, end) {
                        var index = -1,
                            length = array.length;
                        start = start == null ? 0 : +start || 0;
                        if (start < 0) {
                            start = -start > length ? 0 : length + start
                        }
                        end = end === undefined || end > length ? length : +end || 0;
                        if (end < 0) {
                            end += length
                        }
                        length = start > end ? 0 : end - start >>> 0;
                        start >>>= 0;
                        var result = Array(length);
                        while (++index < length) {
                            result[index] = array[index + start]
                        }
                        return result
                    }

                    function baseSome(collection, predicate) {
                        var result;
                        baseEach(collection, function(value, index, collection) {
                            result = predicate(value, index, collection);
                            return !result
                        });
                        return !!result
                    }

                    function baseSortBy(array, comparer) {
                        var length = array.length;
                        array.sort(comparer);
                        while (length--) {
                            array[length] = array[length].value
                        }
                        return array
                    }

                    function baseSortByOrder(collection, iteratees, orders) {
                        var callback = getCallback(),
                            index = -1;
                        iteratees = arrayMap(iteratees, function(iteratee) {
                            return callback(iteratee)
                        });
                        var result = baseMap(collection, function(value) {
                            var criteria = arrayMap(iteratees, function(iteratee) {
                                return iteratee(value)
                            });
                            return {
                                criteria: criteria,
                                index: ++index,
                                value: value
                            }
                        });
                        return baseSortBy(result, function(object, other) {
                            return compareMultiple(object, other, orders)
                        })
                    }

                    function baseSum(collection, iteratee) {
                        var result = 0;
                        baseEach(collection, function(value, index, collection) {
                            result += +iteratee(value, index, collection) || 0
                        });
                        return result
                    }

                    function baseUniq(array, iteratee) {
                        var index = -1,
                            indexOf = getIndexOf(),
                            length = array.length,
                            isCommon = indexOf == baseIndexOf,
                            isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
                            seen = isLarge ? createCache() : null,
                            result = [];
                        if (seen) {
                            indexOf = cacheIndexOf;
                            isCommon = false
                        } else {
                            isLarge = false;
                            seen = iteratee ? [] : result
                        }
                        outer: while (++index < length) {
                            var value = array[index],
                                computed = iteratee ? iteratee(value, index, array) : value;
                            if (isCommon && value === value) {
                                var seenIndex = seen.length;
                                while (seenIndex--) {
                                    if (seen[seenIndex] === computed) {
                                        continue outer
                                    }
                                }
                                if (iteratee) {
                                    seen.push(computed)
                                }
                                result.push(value)
                            } else if (indexOf(seen, computed, 0) < 0) {
                                if (iteratee || isLarge) {
                                    seen.push(computed)
                                }
                                result.push(value)
                            }
                        }
                        return result
                    }

                    function baseValues(object, props) {
                        var index = -1,
                            length = props.length,
                            result = Array(length);
                        while (++index < length) {
                            result[index] = object[props[index]]
                        }
                        return result
                    }

                    function baseWhile(array, predicate, isDrop, fromRight) {
                        var length = array.length,
                            index = fromRight ? length : -1;
                        while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
                        return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index)
                    }

                    function baseWrapperValue(value, actions) {
                        var result = value;
                        if (result instanceof LazyWrapper) {
                            result = result.value()
                        }
                        var index = -1,
                            length = actions.length;
                        while (++index < length) {
                            var action = actions[index];
                            result = action.func.apply(action.thisArg, arrayPush([result], action.args))
                        }
                        return result
                    }

                    function binaryIndex(array, value, retHighest) {
                        var low = 0,
                            high = array ? array.length : low;
                        if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
                            while (low < high) {
                                var mid = low + high >>> 1,
                                    computed = array[mid];
                                if ((retHighest ? computed <= value : computed < value) && computed !== null) {
                                    low = mid + 1
                                } else {
                                    high = mid
                                }
                            }
                            return high
                        }
                        return binaryIndexBy(array, value, identity, retHighest)
                    }

                    function binaryIndexBy(array, value, iteratee, retHighest) {
                        value = iteratee(value);
                        var low = 0,
                            high = array ? array.length : 0,
                            valIsNaN = value !== value,
                            valIsNull = value === null,
                            valIsUndef = value === undefined;
                        while (low < high) {
                            var mid = nativeFloor((low + high) / 2),
                                computed = iteratee(array[mid]),
                                isDef = computed !== undefined,
                                isReflexive = computed === computed;
                            if (valIsNaN) {
                                var setLow = isReflexive || retHighest
                            } else if (valIsNull) {
                                setLow = isReflexive && isDef && (retHighest || computed != null)
                            } else if (valIsUndef) {
                                setLow = isReflexive && (retHighest || isDef)
                            } else if (computed == null) {
                                setLow = false
                            } else {
                                setLow = retHighest ? computed <= value : computed < value
                            }
                            if (setLow) {
                                low = mid + 1
                            } else {
                                high = mid
                            }
                        }
                        return nativeMin(high, MAX_ARRAY_INDEX)
                    }

                    function bindCallback(func, thisArg, argCount) {
                        if (typeof func != "function") {
                            return identity
                        }
                        if (thisArg === undefined) {
                            return func
                        }
                        switch (argCount) {
                            case 1:
                                return function(value) {
                                    return func.call(thisArg, value)
                                };
                            case 3:
                                return function(value, index, collection) {
                                    return func.call(thisArg, value, index, collection)
                                };
                            case 4:
                                return function(accumulator, value, index, collection) {
                                    return func.call(thisArg, accumulator, value, index, collection)
                                };
                            case 5:
                                return function(value, other, key, object, source) {
                                    return func.call(thisArg, value, other, key, object, source)
                                }
                        }
                        return function() {
                            return func.apply(thisArg, arguments)
                        }
                    }

                    function bufferClone(buffer) {
                        var result = new ArrayBuffer(buffer.byteLength),
                            view = new Uint8Array(result);
                        view.set(new Uint8Array(buffer));
                        return result
                    }

                    function composeArgs(args, partials, holders) {
                        var holdersLength = holders.length,
                            argsIndex = -1,
                            argsLength = nativeMax(args.length - holdersLength, 0),
                            leftIndex = -1,
                            leftLength = partials.length,
                            result = Array(leftLength + argsLength);
                        while (++leftIndex < leftLength) {
                            result[leftIndex] = partials[leftIndex]
                        }
                        while (++argsIndex < holdersLength) {
                            result[holders[argsIndex]] = args[argsIndex]
                        }
                        while (argsLength--) {
                            result[leftIndex++] = args[argsIndex++]
                        }
                        return result
                    }

                    function composeArgsRight(args, partials, holders) {
                        var holdersIndex = -1,
                            holdersLength = holders.length,
                            argsIndex = -1,
                            argsLength = nativeMax(args.length - holdersLength, 0),
                            rightIndex = -1,
                            rightLength = partials.length,
                            result = Array(argsLength + rightLength);
                        while (++argsIndex < argsLength) {
                            result[argsIndex] = args[argsIndex]
                        }
                        var offset = argsIndex;
                        while (++rightIndex < rightLength) {
                            result[offset + rightIndex] = partials[rightIndex]
                        }
                        while (++holdersIndex < holdersLength) {
                            result[offset + holders[holdersIndex]] = args[argsIndex++]
                        }
                        return result
                    }

                    function createAggregator(setter, initializer) {
                        return function(collection, iteratee, thisArg) {
                            var result = initializer ? initializer() : {};
                            iteratee = getCallback(iteratee, thisArg, 3);
                            if (isArray(collection)) {
                                var index = -1,
                                    length = collection.length;
                                while (++index < length) {
                                    var value = collection[index];
                                    setter(result, value, iteratee(value, index, collection), collection)
                                }
                            } else {
                                baseEach(collection, function(value, key, collection) {
                                    setter(result, value, iteratee(value, key, collection), collection)
                                })
                            }
                            return result
                        }
                    }

                    function createAssigner(assigner) {
                        return restParam(function(object, sources) {
                            var index = -1,
                                length = object == null ? 0 : sources.length,
                                customizer = length > 2 ? sources[length - 2] : undefined,
                                guard = length > 2 ? sources[2] : undefined,
                                thisArg = length > 1 ? sources[length - 1] : undefined;
                            if (typeof customizer == "function") {
                                customizer = bindCallback(customizer, thisArg, 5);
                                length -= 2
                            } else {
                                customizer = typeof thisArg == "function" ? thisArg : undefined;
                                length -= customizer ? 1 : 0
                            }
                            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                                customizer = length < 3 ? undefined : customizer;
                                length = 1
                            }
                            while (++index < length) {
                                var source = sources[index];
                                if (source) {
                                    assigner(object, source, customizer)
                                }
                            }
                            return object
                        })
                    }

                    function createBaseEach(eachFunc, fromRight) {
                        return function(collection, iteratee) {
                            var length = collection ? getLength(collection) : 0;
                            if (!isLength(length)) {
                                return eachFunc(collection, iteratee)
                            }
                            var index = fromRight ? length : -1,
                                iterable = toObject(collection);
                            while (fromRight ? index-- : ++index < length) {
                                if (iteratee(iterable[index], index, iterable) === false) {
                                    break
                                }
                            }
                            return collection
                        }
                    }

                    function createBaseFor(fromRight) {
                        return function(object, iteratee, keysFunc) {
                            var iterable = toObject(object),
                                props = keysFunc(object),
                                length = props.length,
                                index = fromRight ? length : -1;
                            while (fromRight ? index-- : ++index < length) {
                                var key = props[index];
                                if (iteratee(iterable[key], key, iterable) === false) {
                                    break
                                }
                            }
                            return object
                        }
                    }

                    function createBindWrapper(func, thisArg) {
                        var Ctor = createCtorWrapper(func);

                        function wrapper() {
                            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                            return fn.apply(thisArg, arguments)
                        }
                        return wrapper
                    }

                    function createCache(values) {
                        return nativeCreate && Set ? new SetCache(values) : null
                    }

                    function createCompounder(callback) {
                        return function(string) {
                            var index = -1,
                                array = words(deburr(string)),
                                length = array.length,
                                result = "";
                            while (++index < length) {
                                result = callback(result, array[index], index)
                            }
                            return result
                        }
                    }

                    function createCtorWrapper(Ctor) {
                        return function() {
                            var args = arguments;
                            switch (args.length) {
                                case 0:
                                    return new Ctor;
                                case 1:
                                    return new Ctor(args[0]);
                                case 2:
                                    return new Ctor(args[0], args[1]);
                                case 3:
                                    return new Ctor(args[0], args[1], args[2]);
                                case 4:
                                    return new Ctor(args[0], args[1], args[2], args[3]);
                                case 5:
                                    return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                                case 6:
                                    return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                                case 7:
                                    return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6])
                            }
                            var thisBinding = baseCreate(Ctor.prototype),
                                result = Ctor.apply(thisBinding, args);
                            return isObject(result) ? result : thisBinding
                        }
                    }

                    function createCurry(flag) {
                        function curryFunc(func, arity, guard) {
                            if (guard && isIterateeCall(func, arity, guard)) {
                                arity = undefined
                            }
                            var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);
                            result.placeholder = curryFunc.placeholder;
                            return result
                        }
                        return curryFunc
                    }

                    function createDefaults(assigner, customizer) {
                        return restParam(function(args) {
                            var object = args[0];
                            if (object == null) {
                                return object
                            }
                            args.push(customizer);
                            return assigner.apply(undefined, args)
                        })
                    }

                    function createExtremum(comparator, exValue) {
                        return function(collection, iteratee, thisArg) {
                            if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
                                iteratee = undefined
                            }
                            iteratee = getCallback(iteratee, thisArg, 3);
                            if (iteratee.length == 1) {
                                collection = isArray(collection) ? collection : toIterable(collection);
                                var result = arrayExtremum(collection, iteratee, comparator, exValue);
                                if (!(collection.length && result === exValue)) {
                                    return result
                                }
                            }
                            return baseExtremum(collection, iteratee, comparator, exValue)
                        }
                    }

                    function createFind(eachFunc, fromRight) {
                        return function(collection, predicate, thisArg) {
                            predicate = getCallback(predicate, thisArg, 3);
                            if (isArray(collection)) {
                                var index = baseFindIndex(collection, predicate, fromRight);
                                return index > -1 ? collection[index] : undefined
                            }
                            return baseFind(collection, predicate, eachFunc)
                        }
                    }

                    function createFindIndex(fromRight) {
                        return function(array, predicate, thisArg) {
                            if (!(array && array.length)) {
                                return -1
                            }
                            predicate = getCallback(predicate, thisArg, 3);
                            return baseFindIndex(array, predicate, fromRight)
                        }
                    }

                    function createFindKey(objectFunc) {
                        return function(object, predicate, thisArg) {
                            predicate = getCallback(predicate, thisArg, 3);
                            return baseFind(object, predicate, objectFunc, true)
                        }
                    }

                    function createFlow(fromRight) {
                        return function() {
                            var wrapper, length = arguments.length,
                                index = fromRight ? length : -1,
                                leftIndex = 0,
                                funcs = Array(length);
                            while (fromRight ? index-- : ++index < length) {
                                var func = funcs[leftIndex++] = arguments[index];
                                if (typeof func != "function") {
                                    throw new TypeError(FUNC_ERROR_TEXT)
                                }
                                if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == "wrapper") {
                                    wrapper = new LodashWrapper([], true)
                                }
                            }
                            index = wrapper ? -1 : length;
                            while (++index < length) {
                                func = funcs[index];
                                var funcName = getFuncName(func),
                                    data = funcName == "wrapper" ? getData(func) : undefined;
                                if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
                                    wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3])
                                } else {
                                    wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func)
                                }
                            }
                            return function() {
                                var args = arguments,
                                    value = args[0];
                                if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
                                    return wrapper.plant(value).value()
                                }
                                var index = 0,
                                    result = length ? funcs[index].apply(this, args) : value;
                                while (++index < length) {
                                    result = funcs[index].call(this, result)
                                }
                                return result
                            }
                        }
                    }

                    function createForEach(arrayFunc, eachFunc) {
                        return function(collection, iteratee, thisArg) {
                            return typeof iteratee == "function" && thisArg === undefined && isArray(collection) ? arrayFunc(collection, iteratee) : eachFunc(collection, bindCallback(iteratee, thisArg, 3))
                        }
                    }

                    function createForIn(objectFunc) {
                        return function(object, iteratee, thisArg) {
                            if (typeof iteratee != "function" || thisArg !== undefined) {
                                iteratee = bindCallback(iteratee, thisArg, 3)
                            }
                            return objectFunc(object, iteratee, keysIn)
                        }
                    }

                    function createForOwn(objectFunc) {
                        return function(object, iteratee, thisArg) {
                            if (typeof iteratee != "function" || thisArg !== undefined) {
                                iteratee = bindCallback(iteratee, thisArg, 3)
                            }
                            return objectFunc(object, iteratee)
                        }
                    }

                    function createObjectMapper(isMapKeys) {
                        return function(object, iteratee, thisArg) {
                            var result = {};
                            iteratee = getCallback(iteratee, thisArg, 3);
                            baseForOwn(object, function(value, key, object) {
                                var mapped = iteratee(value, key, object);
                                key = isMapKeys ? mapped : key;
                                value = isMapKeys ? value : mapped;
                                result[key] = value
                            });
                            return result
                        }
                    }

                    function createPadDir(fromRight) {
                        return function(string, length, chars) {
                            string = baseToString(string);
                            return (fromRight ? string : "") + createPadding(string, length, chars) + (fromRight ? "" : string)
                        }
                    }

                    function createPartial(flag) {
                        var partialFunc = restParam(function(func, partials) {
                            var holders = replaceHolders(partials, partialFunc.placeholder);
                            return createWrapper(func, flag, undefined, partials, holders)
                        });
                        return partialFunc
                    }

                    function createReduce(arrayFunc, eachFunc) {
                        return function(collection, iteratee, accumulator, thisArg) {
                            var initFromArray = arguments.length < 3;
                            return typeof iteratee == "function" && thisArg === undefined && isArray(collection) ? arrayFunc(collection, iteratee, accumulator, initFromArray) : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc)
                        }
                    }

                    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
                        var isAry = bitmask & ARY_FLAG,
                            isBind = bitmask & BIND_FLAG,
                            isBindKey = bitmask & BIND_KEY_FLAG,
                            isCurry = bitmask & CURRY_FLAG,
                            isCurryBound = bitmask & CURRY_BOUND_FLAG,
                            isCurryRight = bitmask & CURRY_RIGHT_FLAG,
                            Ctor = isBindKey ? undefined : createCtorWrapper(func);

                        function wrapper() {
                            var length = arguments.length,
                                index = length,
                                args = Array(length);
                            while (index--) {
                                args[index] = arguments[index]
                            }
                            if (partials) {
                                args = composeArgs(args, partials, holders)
                            }
                            if (partialsRight) {
                                args = composeArgsRight(args, partialsRight, holdersRight)
                            }
                            if (isCurry || isCurryRight) {
                                var placeholder = wrapper.placeholder,
                                    argsHolders = replaceHolders(args, placeholder);
                                length -= argsHolders.length;
                                if (length < arity) {
                                    var newArgPos = argPos ? arrayCopy(argPos) : undefined,
                                        newArity = nativeMax(arity - length, 0),
                                        newsHolders = isCurry ? argsHolders : undefined,
                                        newHoldersRight = isCurry ? undefined : argsHolders,
                                        newPartials = isCurry ? args : undefined,
                                        newPartialsRight = isCurry ? undefined : args;
                                    bitmask |= isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG;
                                    bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);
                                    if (!isCurryBound) {
                                        bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG)
                                    }
                                    var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
                                        result = createHybridWrapper.apply(undefined, newData);
                                    if (isLaziable(func)) {
                                        setData(result, newData)
                                    }
                                    result.placeholder = placeholder;
                                    return result
                                }
                            }
                            var thisBinding = isBind ? thisArg : this,
                                fn = isBindKey ? thisBinding[func] : func;
                            if (argPos) {
                                args = reorder(args, argPos)
                            }
                            if (isAry && ary < args.length) {
                                args.length = ary
                            }
                            if (this && this !== root && this instanceof wrapper) {
                                fn = Ctor || createCtorWrapper(func)
                            }
                            return fn.apply(thisBinding, args)
                        }
                        return wrapper
                    }

                    function createPadding(string, length, chars) {
                        var strLength = string.length;
                        length = +length;
                        if (strLength >= length || !nativeIsFinite(length)) {
                            return ""
                        }
                        var padLength = length - strLength;
                        chars = chars == null ? " " : chars + "";
                        return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength)
                    }

                    function createPartialWrapper(func, bitmask, thisArg, partials) {
                        var isBind = bitmask & BIND_FLAG,
                            Ctor = createCtorWrapper(func);

                        function wrapper() {
                            var argsIndex = -1,
                                argsLength = arguments.length,
                                leftIndex = -1,
                                leftLength = partials.length,
                                args = Array(leftLength + argsLength);
                            while (++leftIndex < leftLength) {
                                args[leftIndex] = partials[leftIndex]
                            }
                            while (argsLength--) {
                                args[leftIndex++] = arguments[++argsIndex]
                            }
                            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                            return fn.apply(isBind ? thisArg : this, args)
                        }
                        return wrapper
                    }

                    function createRound(methodName) {
                        var func = Math[methodName];
                        return function(number, precision) {
                            precision = precision === undefined ? 0 : +precision || 0;
                            if (precision) {
                                precision = pow(10, precision);
                                return func(number * precision) / precision
                            }
                            return func(number)
                        }
                    }

                    function createSortedIndex(retHighest) {
                        return function(array, value, iteratee, thisArg) {
                            var callback = getCallback(iteratee);
                            return iteratee == null && callback === baseCallback ? binaryIndex(array, value, retHighest) : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest)
                        }
                    }

                    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
                        var isBindKey = bitmask & BIND_KEY_FLAG;
                        if (!isBindKey && typeof func != "function") {
                            throw new TypeError(FUNC_ERROR_TEXT)
                        }
                        var length = partials ? partials.length : 0;
                        if (!length) {
                            bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
                            partials = holders = undefined
                        }
                        length -= holders ? holders.length : 0;
                        if (bitmask & PARTIAL_RIGHT_FLAG) {
                            var partialsRight = partials,
                                holdersRight = holders;
                            partials = holders = undefined
                        }
                        var data = isBindKey ? undefined : getData(func),
                            newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];
                        if (data) {
                            mergeData(newData, data);
                            bitmask = newData[1];
                            arity = newData[9]
                        }
                        newData[9] = arity == null ? isBindKey ? 0 : func.length : nativeMax(arity - length, 0) || 0;
                        if (bitmask == BIND_FLAG) {
                            var result = createBindWrapper(newData[0], newData[2])
                        } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
                            result = createPartialWrapper.apply(undefined, newData)
                        } else {
                            result = createHybridWrapper.apply(undefined, newData)
                        }
                        var setter = data ? baseSetData : setData;
                        return setter(result, newData)
                    }

                    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
                        var index = -1,
                            arrLength = array.length,
                            othLength = other.length;
                        if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
                            return false
                        }
                        while (++index < arrLength) {
                            var arrValue = array[index],
                                othValue = other[index],
                                result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;
                            if (result !== undefined) {
                                if (result) {
                                    continue
                                }
                                return false
                            }
                            if (isLoose) {
                                if (!arraySome(other, function(othValue) {
                                        return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB)
                                    })) {
                                    return false
                                }
                            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
                                return false
                            }
                        }
                        return true
                    }

                    function equalByTag(object, other, tag) {
                        switch (tag) {
                            case boolTag:
                            case dateTag:
                                return +object == +other;
                            case errorTag:
                                return object.name == other.name && object.message == other.message;
                            case numberTag:
                                return object != +object ? other != +other : object == +other;
                            case regexpTag:
                            case stringTag:
                                return object == other + ""
                        }
                        return false
                    }

                    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
                        var objProps = keys(object),
                            objLength = objProps.length,
                            othProps = keys(other),
                            othLength = othProps.length;
                        if (objLength != othLength && !isLoose) {
                            return false
                        }
                        var index = objLength;
                        while (index--) {
                            var key = objProps[index];
                            if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
                                return false
                            }
                        }
                        var skipCtor = isLoose;
                        while (++index < objLength) {
                            key = objProps[index];
                            var objValue = object[key],
                                othValue = other[key],
                                result = customizer ? customizer(isLoose ? othValue : objValue, isLoose ? objValue : othValue, key) : undefined;
                            if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
                                return false
                            }
                            skipCtor || (skipCtor = key == "constructor")
                        }
                        if (!skipCtor) {
                            var objCtor = object.constructor,
                                othCtor = other.constructor;
                            if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
                                return false
                            }
                        }
                        return true
                    }

                    function getCallback(func, thisArg, argCount) {
                        var result = lodash.callback || callback;
                        result = result === callback ? baseCallback : result;
                        return argCount ? result(func, thisArg, argCount) : result
                    }
                    var getData = !metaMap ? noop : function(func) {
                        return metaMap.get(func)
                    };

                    function getFuncName(func) {
                        var result = func.name,
                            array = realNames[result],
                            length = array ? array.length : 0;
                        while (length--) {
                            var data = array[length],
                                otherFunc = data.func;
                            if (otherFunc == null || otherFunc == func) {
                                return data.name
                            }
                        }
                        return result
                    }

                    function getIndexOf(collection, target, fromIndex) {
                        var result = lodash.indexOf || indexOf;
                        result = result === indexOf ? baseIndexOf : result;
                        return collection ? result(collection, target, fromIndex) : result
                    }
                    var getLength = baseProperty("length");

                    function getMatchData(object) {
                        var result = pairs(object),
                            length = result.length;
                        while (length--) {
                            result[length][2] = isStrictComparable(result[length][1])
                        }
                        return result
                    }

                    function getNative(object, key) {
                        var value = object == null ? undefined : object[key];
                        return isNative(value) ? value : undefined
                    }

                    function getView(start, end, transforms) {
                        var index = -1,
                            length = transforms.length;
                        while (++index < length) {
                            var data = transforms[index],
                                size = data.size;
                            switch (data.type) {
                                case "drop":
                                    start += size;
                                    break;
                                case "dropRight":
                                    end -= size;
                                    break;
                                case "take":
                                    end = nativeMin(end, start + size);
                                    break;
                                case "takeRight":
                                    start = nativeMax(start, end - size);
                                    break
                            }
                        }
                        return {
                            start: start,
                            end: end
                        }
                    }

                    function initCloneArray(array) {
                        var length = array.length,
                            result = new array.constructor(length);
                        if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
                            result.index = array.index;
                            result.input = array.input
                        }
                        return result
                    }

                    function initCloneObject(object) {
                        var Ctor = object.constructor;
                        if (!(typeof Ctor == "function" && Ctor instanceof Ctor)) {
                            Ctor = Object
                        }
                        return new Ctor
                    }

                    function initCloneByTag(object, tag, isDeep) {
                        var Ctor = object.constructor;
                        switch (tag) {
                            case arrayBufferTag:
                                return bufferClone(object);
                            case boolTag:
                            case dateTag:
                                return new Ctor(+object);
                            case float32Tag:
                            case float64Tag:
                            case int8Tag:
                            case int16Tag:
                            case int32Tag:
                            case uint8Tag:
                            case uint8ClampedTag:
                            case uint16Tag:
                            case uint32Tag:
                                var buffer = object.buffer;
                                return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);
                            case numberTag:
                            case stringTag:
                                return new Ctor(object);
                            case regexpTag:
                                var result = new Ctor(object.source, reFlags.exec(object));
                                result.lastIndex = object.lastIndex
                        }
                        return result
                    }

                    function invokePath(object, path, args) {
                        if (object != null && !isKey(path, object)) {
                            path = toPath(path);
                            object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
                            path = last(path)
                        }
                        var func = object == null ? object : object[path];
                        return func == null ? undefined : func.apply(object, args)
                    }

                    function isArrayLike(value) {
                        return value != null && isLength(getLength(value))
                    }

                    function isIndex(value, length) {
                        value = typeof value == "number" || reIsUint.test(value) ? +value : -1;
                        length = length == null ? MAX_SAFE_INTEGER : length;
                        return value > -1 && value % 1 == 0 && value < length
                    }

                    function isIterateeCall(value, index, object) {
                        if (!isObject(object)) {
                            return false
                        }
                        var type = typeof index;
                        if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
                            var other = object[index];
                            return value === value ? value === other : other !== other
                        }
                        return false
                    }

                    function isKey(value, object) {
                        var type = typeof value;
                        if (type == "string" && reIsPlainProp.test(value) || type == "number") {
                            return true
                        }
                        if (isArray(value)) {
                            return false
                        }
                        var result = !reIsDeepProp.test(value);
                        return result || object != null && value in toObject(object)
                    }

                    function isLaziable(func) {
                        var funcName = getFuncName(func);
                        if (!(funcName in LazyWrapper.prototype)) {
                            return false
                        }
                        var other = lodash[funcName];
                        if (func === other) {
                            return true
                        }
                        var data = getData(other);
                        return !!data && func === data[0]
                    }

                    function isLength(value) {
                        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER
                    }

                    function isStrictComparable(value) {
                        return value === value && !isObject(value)
                    }

                    function mergeData(data, source) {
                        var bitmask = data[1],
                            srcBitmask = source[1],
                            newBitmask = bitmask | srcBitmask,
                            isCommon = newBitmask < ARY_FLAG;
                        var isCombo = srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG || srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8] || srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG;
                        if (!(isCommon || isCombo)) {
                            return data
                        }
                        if (srcBitmask & BIND_FLAG) {
                            data[2] = source[2];
                            newBitmask |= bitmask & BIND_FLAG ? 0 : CURRY_BOUND_FLAG
                        }
                        var value = source[3];
                        if (value) {
                            var partials = data[3];
                            data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
                            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4])
                        }
                        value = source[5];
                        if (value) {
                            partials = data[5];
                            data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
                            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6])
                        }
                        value = source[7];
                        if (value) {
                            data[7] = arrayCopy(value)
                        }
                        if (srcBitmask & ARY_FLAG) {
                            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8])
                        }
                        if (data[9] == null) {
                            data[9] = source[9]
                        }
                        data[0] = source[0];
                        data[1] = newBitmask;
                        return data
                    }

                    function mergeDefaults(objectValue, sourceValue) {
                        return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults)
                    }

                    function pickByArray(object, props) {
                        object = toObject(object);
                        var index = -1,
                            length = props.length,
                            result = {};
                        while (++index < length) {
                            var key = props[index];
                            if (key in object) {
                                result[key] = object[key]
                            }
                        }
                        return result
                    }

                    function pickByCallback(object, predicate) {
                        var result = {};
                        baseForIn(object, function(value, key, object) {
                            if (predicate(value, key, object)) {
                                result[key] = value
                            }
                        });
                        return result
                    }

                    function reorder(array, indexes) {
                        var arrLength = array.length,
                            length = nativeMin(indexes.length, arrLength),
                            oldArray = arrayCopy(array);
                        while (length--) {
                            var index = indexes[length];
                            array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined
                        }
                        return array
                    }
                    var setData = function() {
                        var count = 0,
                            lastCalled = 0;
                        return function(key, value) {
                            var stamp = now(),
                                remaining = HOT_SPAN - (stamp - lastCalled);
                            lastCalled = stamp;
                            if (remaining > 0) {
                                if (++count >= HOT_COUNT) {
                                    return key
                                }
                            } else {
                                count = 0
                            }
                            return baseSetData(key, value)
                        }
                    }();

                    function shimKeys(object) {
                        var props = keysIn(object),
                            propsLength = props.length,
                            length = propsLength && object.length;
                        var allowIndexes = !!length && isLength(length) && (isArray(object) || isArguments(object));
                        var index = -1,
                            result = [];
                        while (++index < propsLength) {
                            var key = props[index];
                            if (allowIndexes && isIndex(key, length) || hasOwnProperty.call(object, key)) {
                                result.push(key)
                            }
                        }
                        return result
                    }

                    function toIterable(value) {
                        if (value == null) {
                            return []
                        }
                        if (!isArrayLike(value)) {
                            return values(value)
                        }
                        return isObject(value) ? value : Object(value)
                    }

                    function toObject(value) {
                        return isObject(value) ? value : Object(value)
                    }

                    function toPath(value) {
                        if (isArray(value)) {
                            return value
                        }
                        var result = [];
                        baseToString(value).replace(rePropName, function(match, number, quote, string) {
                            result.push(quote ? string.replace(reEscapeChar, "$1") : number || match)
                        });
                        return result
                    }

                    function wrapperClone(wrapper) {
                        return wrapper instanceof LazyWrapper ? wrapper.clone() : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__))
                    }

                    function chunk(array, size, guard) {
                        if (guard ? isIterateeCall(array, size, guard) : size == null) {
                            size = 1
                        } else {
                            size = nativeMax(nativeFloor(size) || 1, 1)
                        }
                        var index = 0,
                            length = array ? array.length : 0,
                            resIndex = -1,
                            result = Array(nativeCeil(length / size));
                        while (index < length) {
                            result[++resIndex] = baseSlice(array, index, index += size)
                        }
                        return result
                    }

                    function compact(array) {
                        var index = -1,
                            length = array ? array.length : 0,
                            resIndex = -1,
                            result = [];
                        while (++index < length) {
                            var value = array[index];
                            if (value) {
                                result[++resIndex] = value
                            }
                        }
                        return result
                    }
                    var difference = restParam(function(array, values) {
                        return isObjectLike(array) && isArrayLike(array) ? baseDifference(array, baseFlatten(values, false, true)) : []
                    });

                    function drop(array, n, guard) {
                        var length = array ? array.length : 0;
                        if (!length) {
                            return []
                        }
                        if (guard ? isIterateeCall(array, n, guard) : n == null) {
                            n = 1
                        }
                        return baseSlice(array, n < 0 ? 0 : n)
                    }

                    function dropRight(array, n, guard) {
                        var length = array ? array.length : 0;
                        if (!length) {
                            return []
                        }
                        if (guard ? isIterateeCall(array, n, guard) : n == null) {
                            n = 1
                        }
                        n = length - (+n || 0);
                        return baseSlice(array, 0, n < 0 ? 0 : n)
                    }

                    function dropRightWhile(array, predicate, thisArg) {
                        return array && array.length ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true) : []
                    }

                    function dropWhile(array, predicate, thisArg) {
                        return array && array.length ? baseWhile(array, getCallback(predicate, thisArg, 3), true) : []
                    }

                    function fill(array, value, start, end) {
                        var length = array ? array.length : 0;
                        if (!length) {
                            return []
                        }
                        if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
                            start = 0;
                            end = length
                        }
                        return baseFill(array, value, start, end)
                    }
                    var findIndex = createFindIndex();
                    var findLastIndex = createFindIndex(true);

                    function first(array) {
                        return array ? array[0] : undefined
                    }

                    function flatten(array, isDeep, guard) {
                        var length = array ? array.length : 0;
                        if (guard && isIterateeCall(array, isDeep, guard)) {
                            isDeep = false
                        }
                        return length ? baseFlatten(array, isDeep) : []
                    }

                    function flattenDeep(array) {
                        var length = array ? array.length : 0;
                        return length ? baseFlatten(array, true) : []
                    }

                    function indexOf(array, value, fromIndex) {
                        var length = array ? array.length : 0;
                        if (!length) {
                            return -1
                        }
                        if (typeof fromIndex == "number") {
                            fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex
                        } else if (fromIndex) {
                            var index = binaryIndex(array, value);
                            if (index < length && (value === value ? value === array[index] : array[index] !== array[index])) {
                                return index
                            }
                            return -1
                        }
                        return baseIndexOf(array, value, fromIndex || 0)
                    }

                    function initial(array) {
                        return dropRight(array, 1)
                    }
                    var intersection = restParam(function(arrays) {
                        var othLength = arrays.length,
                            othIndex = othLength,
                            caches = Array(length),
                            indexOf = getIndexOf(),
                            isCommon = indexOf == baseIndexOf,
                            result = [];
                        while (othIndex--) {
                            var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];
                            caches[othIndex] = isCommon && value.length >= 120 ? createCache(othIndex && value) : null
                        }
                        var array = arrays[0],
                            index = -1,
                            length = array ? array.length : 0,
                            seen = caches[0];
                        outer: while (++index < length) {
                            value = array[index];
                            if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
                                var othIndex = othLength;
                                while (--othIndex) {
                                    var cache = caches[othIndex];
                                    if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {
                                        continue outer
                                    }
                                }
                                if (seen) {
                                    seen.push(value)
                                }
                                result.push(value)
                            }
                        }
                        return result
                    });

                    function last(array) {
                        var length = array ? array.length : 0;
                        return length ? array[length - 1] : undefined
                    }

                    function lastIndexOf(array, value, fromIndex) {
                        var length = array ? array.length : 0;
                        if (!length) {
                            return -1
                        }
                        var index = length;
                        if (typeof fromIndex == "number") {
                            index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1
                        } else if (fromIndex) {
                            index = binaryIndex(array, value, true) - 1;
                            var other = array[index];
                            if (value === value ? value === other : other !== other) {
                                return index
                            }
                            return -1
                        }
                        if (value !== value) {
                            return indexOfNaN(array, index, true)
                        }
                        while (index--) {
                            if (array[index] === value) {
                                return index
                            }
                        }
                        return -1
                    }

                    function pull() {
                        var args = arguments,
                            array = args[0];
                        if (!(array && array.length)) {
                            return array
                        }
                        var index = 0,
                            indexOf = getIndexOf(),
                            length = args.length;
                        while (++index < length) {
                            var fromIndex = 0,
                                value = args[index];
                            while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
                                splice.call(array, fromIndex, 1)
                            }
                        }
                        return array
                    }
                    var pullAt = restParam(function(array, indexes) {
                        indexes = baseFlatten(indexes);
                        var result = baseAt(array, indexes);
                        basePullAt(array, indexes.sort(baseCompareAscending));
                        return result
                    });

                    function remove(array, predicate, thisArg) {
                        var result = [];
                        if (!(array && array.length)) {
                            return result
                        }
                        var index = -1,
                            indexes = [],
                            length = array.length;
                        predicate = getCallback(predicate, thisArg, 3);
                        while (++index < length) {
                            var value = array[index];
                            if (predicate(value, index, array)) {
                                result.push(value);
                                indexes.push(index)
                            }
                        }
                        basePullAt(array, indexes);
                        return result
                    }

                    function rest(array) {
                        return drop(array, 1)
                    }

                    function slice(array, start, end) {
                        var length = array ? array.length : 0;
                        if (!length) {
                            return []
                        }
                        if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
                            start = 0;
                            end = length
                        }
                        return baseSlice(array, start, end)
                    }
                    var sortedIndex = createSortedIndex();
                    var sortedLastIndex = createSortedIndex(true);

                    function take(array, n, guard) {
                        var length = array ? array.length : 0;
                        if (!length) {
                            return []
                        }
                        if (guard ? isIterateeCall(array, n, guard) : n == null) {
                            n = 1
                        }
                        return baseSlice(array, 0, n < 0 ? 0 : n)
                    }

                    function takeRight(array, n, guard) {
                        var length = array ? array.length : 0;
                        if (!length) {
                            return []
                        }
                        if (guard ? isIterateeCall(array, n, guard) : n == null) {
                            n = 1
                        }
                        n = length - (+n || 0);
                        return baseSlice(array, n < 0 ? 0 : n)
                    }

                    function takeRightWhile(array, predicate, thisArg) {
                        return array && array.length ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true) : []
                    }

                    function takeWhile(array, predicate, thisArg) {
                        return array && array.length ? baseWhile(array, getCallback(predicate, thisArg, 3)) : []
                    }
                    var union = restParam(function(arrays) {
                        return baseUniq(baseFlatten(arrays, false, true))
                    });

                    function uniq(array, isSorted, iteratee, thisArg) {
                        var length = array ? array.length : 0;
                        if (!length) {
                            return []
                        }
                        if (isSorted != null && typeof isSorted != "boolean") {
                            thisArg = iteratee;
                            iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
                            isSorted = false
                        }
                        var callback = getCallback();
                        if (!(iteratee == null && callback === baseCallback)) {
                            iteratee = callback(iteratee, thisArg, 3)
                        }
                        return isSorted && getIndexOf() == baseIndexOf ? sortedUniq(array, iteratee) : baseUniq(array, iteratee)
                    }

                    function unzip(array) {
                        if (!(array && array.length)) {
                            return []
                        }
                        var index = -1,
                            length = 0;
                        array = arrayFilter(array, function(group) {
                            if (isArrayLike(group)) {
                                length = nativeMax(group.length, length);
                                return true
                            }
                        });
                        var result = Array(length);
                        while (++index < length) {
                            result[index] = arrayMap(array, baseProperty(index))
                        }
                        return result
                    }

                    function unzipWith(array, iteratee, thisArg) {
                        var length = array ? array.length : 0;
                        if (!length) {
                            return []
                        }
                        var result = unzip(array);
                        if (iteratee == null) {
                            return result
                        }
                        iteratee = bindCallback(iteratee, thisArg, 4);
                        return arrayMap(result, function(group) {
                            return arrayReduce(group, iteratee, undefined, true)
                        })
                    }
                    var without = restParam(function(array, values) {
                        return isArrayLike(array) ? baseDifference(array, values) : []
                    });

                    function xor() {
                        var index = -1,
                            length = arguments.length;
                        while (++index < length) {
                            var array = arguments[index];
                            if (isArrayLike(array)) {
                                var result = result ? arrayPush(baseDifference(result, array), baseDifference(array, result)) : array
                            }
                        }
                        return result ? baseUniq(result) : []
                    }
                    var zip = restParam(unzip);

                    function zipObject(props, values) {
                        var index = -1,
                            length = props ? props.length : 0,
                            result = {};
                        if (length && !values && !isArray(props[0])) {
                            values = []
                        }
                        while (++index < length) {
                            var key = props[index];
                            if (values) {
                                result[key] = values[index]
                            } else if (key) {
                                result[key[0]] = key[1]
                            }
                        }
                        return result
                    }
                    var zipWith = restParam(function(arrays) {
                        var length = arrays.length,
                            iteratee = length > 2 ? arrays[length - 2] : undefined,
                            thisArg = length > 1 ? arrays[length - 1] : undefined;
                        if (length > 2 && typeof iteratee == "function") {
                            length -= 2
                        } else {
                            iteratee = length > 1 && typeof thisArg == "function" ? (--length, thisArg) : undefined;
                            thisArg = undefined
                        }
                        arrays.length = length;
                        return unzipWith(arrays, iteratee, thisArg)
                    });

                    function chain(value) {
                        var result = lodash(value);
                        result.__chain__ = true;
                        return result
                    }

                    function tap(value, interceptor, thisArg) {
                        interceptor.call(thisArg, value);
                        return value
                    }

                    function thru(value, interceptor, thisArg) {
                        return interceptor.call(thisArg, value)
                    }

                    function wrapperChain() {
                        return chain(this)
                    }

                    function wrapperCommit() {
                        return new LodashWrapper(this.value(), this.__chain__)
                    }
                    var wrapperConcat = restParam(function(values) {
                        values = baseFlatten(values);
                        return this.thru(function(array) {
                            return arrayConcat(isArray(array) ? array : [toObject(array)], values)
                        })
                    });

                    function wrapperPlant(value) {
                        var result, parent = this;
                        while (parent instanceof baseLodash) {
                            var clone = wrapperClone(parent);
                            if (result) {
                                previous.__wrapped__ = clone
                            } else {
                                result = clone
                            }
                            var previous = clone;
                            parent = parent.__wrapped__
                        }
                        previous.__wrapped__ = value;
                        return result
                    }

                    function wrapperReverse() {
                        var value = this.__wrapped__;
                        var interceptor = function(value) {
                            return wrapped && wrapped.__dir__ < 0 ? value : value.reverse()
                        };
                        if (value instanceof LazyWrapper) {
                            var wrapped = value;
                            if (this.__actions__.length) {
                                wrapped = new LazyWrapper(this)
                            }
                            wrapped = wrapped.reverse();
                            wrapped.__actions__.push({
                                func: thru,
                                args: [interceptor],
                                thisArg: undefined
                            });
                            return new LodashWrapper(wrapped, this.__chain__)
                        }
                        return this.thru(interceptor)
                    }

                    function wrapperToString() {
                        return this.value() + ""
                    }

                    function wrapperValue() {
                        return baseWrapperValue(this.__wrapped__, this.__actions__)
                    }
                    var at = restParam(function(collection, props) {
                        return baseAt(collection, baseFlatten(props))
                    });
                    var countBy = createAggregator(function(result, value, key) {
                        hasOwnProperty.call(result, key) ? ++result[key] : result[key] = 1
                    });

                    function every(collection, predicate, thisArg) {
                        var func = isArray(collection) ? arrayEvery : baseEvery;
                        if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
                            predicate = undefined
                        }
                        if (typeof predicate != "function" || thisArg !== undefined) {
                            predicate = getCallback(predicate, thisArg, 3)
                        }
                        return func(collection, predicate)
                    }

                    function filter(collection, predicate, thisArg) {
                        var func = isArray(collection) ? arrayFilter : baseFilter;
                        predicate = getCallback(predicate, thisArg, 3);
                        return func(collection, predicate)
                    }
                    var find = createFind(baseEach);
                    var findLast = createFind(baseEachRight, true);

                    function findWhere(collection, source) {
                        return find(collection, baseMatches(source))
                    }
                    var forEach = createForEach(arrayEach, baseEach);
                    var forEachRight = createForEach(arrayEachRight, baseEachRight);
                    var groupBy = createAggregator(function(result, value, key) {
                        if (hasOwnProperty.call(result, key)) {
                            result[key].push(value)
                        } else {
                            result[key] = [value]
                        }
                    });

                    function includes(collection, target, fromIndex, guard) {
                        var length = collection ? getLength(collection) : 0;
                        if (!isLength(length)) {
                            collection = values(collection);
                            length = collection.length
                        }
                        if (typeof fromIndex != "number" || guard && isIterateeCall(target, fromIndex, guard)) {
                            fromIndex = 0
                        } else {
                            fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex || 0
                        }
                        return typeof collection == "string" || !isArray(collection) && isString(collection) ? fromIndex <= length && collection.indexOf(target, fromIndex) > -1 : !!length && getIndexOf(collection, target, fromIndex) > -1
                    }
                    var indexBy = createAggregator(function(result, value, key) {
                        result[key] = value
                    });
                    var invoke = restParam(function(collection, path, args) {
                        var index = -1,
                            isFunc = typeof path == "function",
                            isProp = isKey(path),
                            result = isArrayLike(collection) ? Array(collection.length) : [];
                        baseEach(collection, function(value) {
                            var func = isFunc ? path : isProp && value != null ? value[path] : undefined;
                            result[++index] = func ? func.apply(value, args) : invokePath(value, path, args)
                        });
                        return result
                    });

                    function map(collection, iteratee, thisArg) {
                        var func = isArray(collection) ? arrayMap : baseMap;
                        iteratee = getCallback(iteratee, thisArg, 3);
                        return func(collection, iteratee)
                    }
                    var partition = createAggregator(function(result, value, key) {
                        result[key ? 0 : 1].push(value)
                    }, function() {
                        return [
                            [],
                            []
                        ]
                    });

                    function pluck(collection, path) {
                        return map(collection, property(path))
                    }
                    var reduce = createReduce(arrayReduce, baseEach);
                    var reduceRight = createReduce(arrayReduceRight, baseEachRight);

                    function reject(collection, predicate, thisArg) {
                        var func = isArray(collection) ? arrayFilter : baseFilter;
                        predicate = getCallback(predicate, thisArg, 3);
                        return func(collection, function(value, index, collection) {
                            return !predicate(value, index, collection)
                        })
                    }

                    function sample(collection, n, guard) {
                        if (guard ? isIterateeCall(collection, n, guard) : n == null) {
                            collection = toIterable(collection);
                            var length = collection.length;
                            return length > 0 ? collection[baseRandom(0, length - 1)] : undefined
                        }
                        var index = -1,
                            result = toArray(collection),
                            length = result.length,
                            lastIndex = length - 1;
                        n = nativeMin(n < 0 ? 0 : +n || 0, length);
                        while (++index < n) {
                            var rand = baseRandom(index, lastIndex),
                                value = result[rand];
                            result[rand] = result[index];
                            result[index] = value
                        }
                        result.length = n;
                        return result
                    }

                    function shuffle(collection) {
                        return sample(collection, POSITIVE_INFINITY)
                    }

                    function size(collection) {
                        var length = collection ? getLength(collection) : 0;
                        return isLength(length) ? length : keys(collection).length
                    }

                    function some(collection, predicate, thisArg) {
                        var func = isArray(collection) ? arraySome : baseSome;
                        if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
                            predicate = undefined
                        }
                        if (typeof predicate != "function" || thisArg !== undefined) {
                            predicate = getCallback(predicate, thisArg, 3)
                        }
                        return func(collection, predicate)
                    }

                    function sortBy(collection, iteratee, thisArg) {
                        if (collection == null) {
                            return []
                        }
                        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
                            iteratee = undefined
                        }
                        var index = -1;
                        iteratee = getCallback(iteratee, thisArg, 3);
                        var result = baseMap(collection, function(value, key, collection) {
                            return {
                                criteria: iteratee(value, key, collection),
                                index: ++index,
                                value: value
                            }
                        });
                        return baseSortBy(result, compareAscending)
                    }
                    var sortByAll = restParam(function(collection, iteratees) {
                        if (collection == null) {
                            return []
                        }
                        var guard = iteratees[2];
                        if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {
                            iteratees.length = 1
                        }
                        return baseSortByOrder(collection, baseFlatten(iteratees), [])
                    });

                    function sortByOrder(collection, iteratees, orders, guard) {
                        if (collection == null) {
                            return []
                        }
                        if (guard && isIterateeCall(iteratees, orders, guard)) {
                            orders = undefined
                        }
                        if (!isArray(iteratees)) {
                            iteratees = iteratees == null ? [] : [iteratees]
                        }
                        if (!isArray(orders)) {
                            orders = orders == null ? [] : [orders]
                        }
                        return baseSortByOrder(collection, iteratees, orders)
                    }

                    function where(collection, source) {
                        return filter(collection, baseMatches(source))
                    }
                    var now = nativeNow || function() {
                        return (new Date).getTime()
                    };

                    function after(n, func) {
                        if (typeof func != "function") {
                            if (typeof n == "function") {
                                var temp = n;
                                n = func;
                                func = temp
                            } else {
                                throw new TypeError(FUNC_ERROR_TEXT)
                            }
                        }
                        n = nativeIsFinite(n = +n) ? n : 0;
                        return function() {
                            if (--n < 1) {
                                return func.apply(this, arguments)
                            }
                        }
                    }

                    function ary(func, n, guard) {
                        if (guard && isIterateeCall(func, n, guard)) {
                            n = undefined
                        }
                        n = func && n == null ? func.length : nativeMax(+n || 0, 0);
                        return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n)
                    }

                    function before(n, func) {
                        var result;
                        if (typeof func != "function") {
                            if (typeof n == "function") {
                                var temp = n;
                                n = func;
                                func = temp
                            } else {
                                throw new TypeError(FUNC_ERROR_TEXT)
                            }
                        }
                        return function() {
                            if (--n > 0) {
                                result = func.apply(this, arguments)
                            }
                            if (n <= 1) {
                                func = undefined
                            }
                            return result
                        }
                    }
                    var bind = restParam(function(func, thisArg, partials) {
                        var bitmask = BIND_FLAG;
                        if (partials.length) {
                            var holders = replaceHolders(partials, bind.placeholder);
                            bitmask |= PARTIAL_FLAG
                        }
                        return createWrapper(func, bitmask, thisArg, partials, holders)
                    });
                    var bindAll = restParam(function(object, methodNames) {
                        methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);
                        var index = -1,
                            length = methodNames.length;
                        while (++index < length) {
                            var key = methodNames[index];
                            object[key] = createWrapper(object[key], BIND_FLAG, object)
                        }
                        return object
                    });
                    var bindKey = restParam(function(object, key, partials) {
                        var bitmask = BIND_FLAG | BIND_KEY_FLAG;
                        if (partials.length) {
                            var holders = replaceHolders(partials, bindKey.placeholder);
                            bitmask |= PARTIAL_FLAG
                        }
                        return createWrapper(key, bitmask, object, partials, holders)
                    });
                    var curry = createCurry(CURRY_FLAG);
                    var curryRight = createCurry(CURRY_RIGHT_FLAG);

                    function debounce(func, wait, options) {
                        var args, maxTimeoutId, result, stamp, thisArg, timeoutId, trailingCall, lastCalled = 0,
                            maxWait = false,
                            trailing = true;
                        if (typeof func != "function") {
                            throw new TypeError(FUNC_ERROR_TEXT)
                        }
                        wait = wait < 0 ? 0 : +wait || 0;
                        if (options === true) {
                            var leading = true;
                            trailing = false
                        } else if (isObject(options)) {
                            leading = !!options.leading;
                            maxWait = "maxWait" in options && nativeMax(+options.maxWait || 0, wait);
                            trailing = "trailing" in options ? !!options.trailing : trailing
                        }

                        function cancel() {
                            if (timeoutId) {
                                clearTimeout(timeoutId)
                            }
                            if (maxTimeoutId) {
                                clearTimeout(maxTimeoutId)
                            }
                            lastCalled = 0;
                            maxTimeoutId = timeoutId = trailingCall = undefined
                        }

                        function complete(isCalled, id) {
                            if (id) {
                                clearTimeout(id)
                            }
                            maxTimeoutId = timeoutId = trailingCall = undefined;
                            if (isCalled) {
                                lastCalled = now();
                                result = func.apply(thisArg, args);
                                if (!timeoutId && !maxTimeoutId) {
                                    args = thisArg = undefined
                                }
                            }
                        }

                        function delayed() {
                            var remaining = wait - (now() - stamp);
                            if (remaining <= 0 || remaining > wait) {
                                complete(trailingCall, maxTimeoutId)
                            } else {
                                timeoutId = setTimeout(delayed, remaining)
                            }
                        }

                        function maxDelayed() {
                            complete(trailing, timeoutId)
                        }

                        function debounced() {
                            args = arguments;
                            stamp = now();
                            thisArg = this;
                            trailingCall = trailing && (timeoutId || !leading);
                            if (maxWait === false) {
                                var leadingCall = leading && !timeoutId
                            } else {
                                if (!maxTimeoutId && !leading) {
                                    lastCalled = stamp
                                }
                                var remaining = maxWait - (stamp - lastCalled),
                                    isCalled = remaining <= 0 || remaining > maxWait;
                                if (isCalled) {
                                    if (maxTimeoutId) {
                                        maxTimeoutId = clearTimeout(maxTimeoutId)
                                    }
                                    lastCalled = stamp;
                                    result = func.apply(thisArg, args)
                                } else if (!maxTimeoutId) {
                                    maxTimeoutId = setTimeout(maxDelayed, remaining)
                                }
                            }
                            if (isCalled && timeoutId) {
                                timeoutId = clearTimeout(timeoutId)
                            } else if (!timeoutId && wait !== maxWait) {
                                timeoutId = setTimeout(delayed, wait)
                            }
                            if (leadingCall) {
                                isCalled = true;
                                result = func.apply(thisArg, args)
                            }
                            if (isCalled && !timeoutId && !maxTimeoutId) {
                                args = thisArg = undefined
                            }
                            return result
                        }
                        debounced.cancel = cancel;
                        return debounced
                    }
                    var defer = restParam(function(func, args) {
                        return baseDelay(func, 1, args)
                    });
                    var delay = restParam(function(func, wait, args) {
                        return baseDelay(func, wait, args)
                    });
                    var flow = createFlow();
                    var flowRight = createFlow(true);

                    function memoize(func, resolver) {
                        if (typeof func != "function" || resolver && typeof resolver != "function") {
                            throw new TypeError(FUNC_ERROR_TEXT)
                        }
                        var memoized = function() {
                            var args = arguments,
                                key = resolver ? resolver.apply(this, args) : args[0],
                                cache = memoized.cache;
                            if (cache.has(key)) {
                                return cache.get(key)
                            }
                            var result = func.apply(this, args);
                            memoized.cache = cache.set(key, result);
                            return result
                        };
                        memoized.cache = new memoize.Cache;
                        return memoized
                    }
                    var modArgs = restParam(function(func, transforms) {
                        transforms = baseFlatten(transforms);
                        if (typeof func != "function" || !arrayEvery(transforms, baseIsFunction)) {
                            throw new TypeError(FUNC_ERROR_TEXT)
                        }
                        var length = transforms.length;
                        return restParam(function(args) {
                            var index = nativeMin(args.length, length);
                            while (index--) {
                                args[index] = transforms[index](args[index])
                            }
                            return func.apply(this, args)
                        })
                    });

                    function negate(predicate) {
                        if (typeof predicate != "function") {
                            throw new TypeError(FUNC_ERROR_TEXT)
                        }
                        return function() {
                            return !predicate.apply(this, arguments)
                        }
                    }

                    function once(func) {
                        return before(2, func)
                    }
                    var partial = createPartial(PARTIAL_FLAG);
                    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);
                    var rearg = restParam(function(func, indexes) {
                        return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes))
                    });

                    function restParam(func, start) {
                        if (typeof func != "function") {
                            throw new TypeError(FUNC_ERROR_TEXT)
                        }
                        start = nativeMax(start === undefined ? func.length - 1 : +start || 0, 0);
                        return function() {
                            var args = arguments,
                                index = -1,
                                length = nativeMax(args.length - start, 0),
                                rest = Array(length);
                            while (++index < length) {
                                rest[index] = args[start + index]
                            }
                            switch (start) {
                                case 0:
                                    return func.call(this, rest);
                                case 1:
                                    return func.call(this, args[0], rest);
                                case 2:
                                    return func.call(this, args[0], args[1], rest)
                            }
                            var otherArgs = Array(start + 1);
                            index = -1;
                            while (++index < start) {
                                otherArgs[index] = args[index]
                            }
                            otherArgs[start] = rest;
                            return func.apply(this, otherArgs)
                        }
                    }

                    function spread(func) {
                        if (typeof func != "function") {
                            throw new TypeError(FUNC_ERROR_TEXT)
                        }
                        return function(array) {
                            return func.apply(this, array)
                        }
                    }

                    function throttle(func, wait, options) {
                        var leading = true,
                            trailing = true;
                        if (typeof func != "function") {
                            throw new TypeError(FUNC_ERROR_TEXT)
                        }
                        if (options === false) {
                            leading = false
                        } else if (isObject(options)) {
                            leading = "leading" in options ? !!options.leading : leading;
                            trailing = "trailing" in options ? !!options.trailing : trailing
                        }
                        return debounce(func, wait, {
                            leading: leading,
                            maxWait: +wait,
                            trailing: trailing
                        })
                    }

                    function wrap(value, wrapper) {
                        wrapper = wrapper == null ? identity : wrapper;
                        return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], [])
                    }

                    function clone(value, isDeep, customizer, thisArg) {
                        if (isDeep && typeof isDeep != "boolean" && isIterateeCall(value, isDeep, customizer)) {
                            isDeep = false
                        } else if (typeof isDeep == "function") {
                            thisArg = customizer;
                            customizer = isDeep;
                            isDeep = false
                        }
                        return typeof customizer == "function" ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 1)) : baseClone(value, isDeep)
                    }

                    function cloneDeep(value, customizer, thisArg) {
                        return typeof customizer == "function" ? baseClone(value, true, bindCallback(customizer, thisArg, 1)) : baseClone(value, true)
                    }

                    function gt(value, other) {
                        return value > other
                    }

                    function gte(value, other) {
                        return value >= other
                    }

                    function isArguments(value) {
                        return isObjectLike(value) && isArrayLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee")
                    }
                    var isArray = nativeIsArray || function(value) {
                        return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag
                    };

                    function isBoolean(value) {
                        return value === true || value === false || isObjectLike(value) && objToString.call(value) == boolTag
                    }

                    function isDate(value) {
                        return isObjectLike(value) && objToString.call(value) == dateTag
                    }

                    function isElement(value) {
                        return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value)
                    }

                    function isEmpty(value) {
                        if (value == null) {
                            return true
                        }
                        if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) || isObjectLike(value) && isFunction(value.splice))) {
                            return !value.length
                        }
                        return !keys(value).length
                    }

                    function isEqual(value, other, customizer, thisArg) {
                        customizer = typeof customizer == "function" ? bindCallback(customizer, thisArg, 3) : undefined;
                        var result = customizer ? customizer(value, other) : undefined;
                        return result === undefined ? baseIsEqual(value, other, customizer) : !!result
                    }

                    function isError(value) {
                        return isObjectLike(value) && typeof value.message == "string" && objToString.call(value) == errorTag
                    }

                    function isFinite(value) {
                        return typeof value == "number" && nativeIsFinite(value)
                    }

                    function isFunction(value) {
                        return isObject(value) && objToString.call(value) == funcTag
                    }

                    function isObject(value) {
                        var type = typeof value;
                        return !!value && (type == "object" || type == "function")
                    }

                    function isMatch(object, source, customizer, thisArg) {
                        customizer = typeof customizer == "function" ? bindCallback(customizer, thisArg, 3) : undefined;
                        return baseIsMatch(object, getMatchData(source), customizer)
                    }

                    function isNaN(value) {
                        return isNumber(value) && value != +value
                    }

                    function isNative(value) {
                        if (value == null) {
                            return false
                        }
                        if (isFunction(value)) {
                            return reIsNative.test(fnToString.call(value))
                        }
                        return isObjectLike(value) && reIsHostCtor.test(value)
                    }

                    function isNull(value) {
                        return value === null
                    }

                    function isNumber(value) {
                        return typeof value == "number" || isObjectLike(value) && objToString.call(value) == numberTag
                    }

                    function isPlainObject(value) {
                        var Ctor;
                        if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) || !hasOwnProperty.call(value, "constructor") && (Ctor = value.constructor, typeof Ctor == "function" && !(Ctor instanceof Ctor))) {
                            return false
                        }
                        var result;
                        baseForIn(value, function(subValue, key) {
                            result = key
                        });
                        return result === undefined || hasOwnProperty.call(value, result)
                    }

                    function isRegExp(value) {
                        return isObject(value) && objToString.call(value) == regexpTag
                    }

                    function isString(value) {
                        return typeof value == "string" || isObjectLike(value) && objToString.call(value) == stringTag
                    }

                    function isTypedArray(value) {
                        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)]
                    }

                    function isUndefined(value) {
                        return value === undefined
                    }

                    function lt(value, other) {
                        return value < other
                    }

                    function lte(value, other) {
                        return value <= other
                    }

                    function toArray(value) {
                        var length = value ? getLength(value) : 0;
                        if (!isLength(length)) {
                            return values(value)
                        }
                        if (!length) {
                            return []
                        }
                        return arrayCopy(value)
                    }

                    function toPlainObject(value) {
                        return baseCopy(value, keysIn(value))
                    }
                    var merge = createAssigner(baseMerge);
                    var assign = createAssigner(function(object, source, customizer) {
                        return customizer ? assignWith(object, source, customizer) : baseAssign(object, source)
                    });

                    function create(prototype, properties, guard) {
                        var result = baseCreate(prototype);
                        if (guard && isIterateeCall(prototype, properties, guard)) {
                            properties = undefined
                        }
                        return properties ? baseAssign(result, properties) : result
                    }
                    var defaults = createDefaults(assign, assignDefaults);
                    var defaultsDeep = createDefaults(merge, mergeDefaults);
                    var findKey = createFindKey(baseForOwn);
                    var findLastKey = createFindKey(baseForOwnRight);
                    var forIn = createForIn(baseFor);
                    var forInRight = createForIn(baseForRight);
                    var forOwn = createForOwn(baseForOwn);
                    var forOwnRight = createForOwn(baseForOwnRight);

                    function functions(object) {
                        return baseFunctions(object, keysIn(object))
                    }

                    function get(object, path, defaultValue) {
                        var result = object == null ? undefined : baseGet(object, toPath(path), path + "");
                        return result === undefined ? defaultValue : result
                    }

                    function has(object, path) {
                        if (object == null) {
                            return false
                        }
                        var result = hasOwnProperty.call(object, path);
                        if (!result && !isKey(path)) {
                            path = toPath(path);
                            object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
                            if (object == null) {
                                return false
                            }
                            path = last(path);
                            result = hasOwnProperty.call(object, path)
                        }
                        return result || isLength(object.length) && isIndex(path, object.length) && (isArray(object) || isArguments(object))
                    }

                    function invert(object, multiValue, guard) {
                        if (guard && isIterateeCall(object, multiValue, guard)) {
                            multiValue = undefined
                        }
                        var index = -1,
                            props = keys(object),
                            length = props.length,
                            result = {};
                        while (++index < length) {
                            var key = props[index],
                                value = object[key];
                            if (multiValue) {
                                if (hasOwnProperty.call(result, value)) {
                                    result[value].push(key)
                                } else {
                                    result[value] = [key]
                                }
                            } else {
                                result[value] = key
                            }
                        }
                        return result
                    }
                    var keys = !nativeKeys ? shimKeys : function(object) {
                        var Ctor = object == null ? undefined : object.constructor;
                        if (typeof Ctor == "function" && Ctor.prototype === object || typeof object != "function" && isArrayLike(object)) {
                            return shimKeys(object)
                        }
                        return isObject(object) ? nativeKeys(object) : []
                    };

                    function keysIn(object) {
                        if (object == null) {
                            return []
                        }
                        if (!isObject(object)) {
                            object = Object(object)
                        }
                        var length = object.length;
                        length = length && isLength(length) && (isArray(object) || isArguments(object)) && length || 0;
                        var Ctor = object.constructor,
                            index = -1,
                            isProto = typeof Ctor == "function" && Ctor.prototype === object,
                            result = Array(length),
                            skipIndexes = length > 0;
                        while (++index < length) {
                            result[index] = index + ""
                        }
                        for (var key in object) {
                            if (!(skipIndexes && isIndex(key, length)) && !(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
                                result.push(key)
                            }
                        }
                        return result
                    }
                    var mapKeys = createObjectMapper(true);
                    var mapValues = createObjectMapper();
                    var omit = restParam(function(object, props) {
                        if (object == null) {
                            return {}
                        }
                        if (typeof props[0] != "function") {
                            var props = arrayMap(baseFlatten(props), String);
                            return pickByArray(object, baseDifference(keysIn(object), props))
                        }
                        var predicate = bindCallback(props[0], props[1], 3);
                        return pickByCallback(object, function(value, key, object) {
                            return !predicate(value, key, object)
                        })
                    });

                    function pairs(object) {
                        object = toObject(object);
                        var index = -1,
                            props = keys(object),
                            length = props.length,
                            result = Array(length);
                        while (++index < length) {
                            var key = props[index];
                            result[index] = [key, object[key]]
                        }
                        return result
                    }
                    var pick = restParam(function(object, props) {
                        if (object == null) {
                            return {}
                        }
                        return typeof props[0] == "function" ? pickByCallback(object, bindCallback(props[0], props[1], 3)) : pickByArray(object, baseFlatten(props))
                    });

                    function result(object, path, defaultValue) {
                        var result = object == null ? undefined : object[path];
                        if (result === undefined) {
                            if (object != null && !isKey(path, object)) {
                                path = toPath(path);
                                object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
                                result = object == null ? undefined : object[last(path)]
                            }
                            result = result === undefined ? defaultValue : result
                        }
                        return isFunction(result) ? result.call(object) : result
                    }

                    function set(object, path, value) {
                        if (object == null) {
                            return object
                        }
                        var pathKey = path + "";
                        path = object[pathKey] != null || isKey(path, object) ? [pathKey] : toPath(path);
                        var index = -1,
                            length = path.length,
                            lastIndex = length - 1,
                            nested = object;
                        while (nested != null && ++index < length) {
                            var key = path[index];
                            if (isObject(nested)) {
                                if (index == lastIndex) {
                                    nested[key] = value
                                } else if (nested[key] == null) {
                                    nested[key] = isIndex(path[index + 1]) ? [] : {}
                                }
                            }
                            nested = nested[key]
                        }
                        return object
                    }

                    function transform(object, iteratee, accumulator, thisArg) {
                        var isArr = isArray(object) || isTypedArray(object);
                        iteratee = getCallback(iteratee, thisArg, 4);
                        if (accumulator == null) {
                            if (isArr || isObject(object)) {
                                var Ctor = object.constructor;
                                if (isArr) {
                                    accumulator = isArray(object) ? new Ctor : []
                                } else {
                                    accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined)
                                }
                            } else {
                                accumulator = {}
                            }
                        }(isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
                            return iteratee(accumulator, value, index, object)
                        });
                        return accumulator
                    }

                    function values(object) {
                        return baseValues(object, keys(object))
                    }

                    function valuesIn(object) {
                        return baseValues(object, keysIn(object))
                    }

                    function inRange(value, start, end) {
                        start = +start || 0;
                        if (end === undefined) {
                            end = start;
                            start = 0
                        } else {
                            end = +end || 0
                        }
                        return value >= nativeMin(start, end) && value < nativeMax(start, end)
                    }

                    function random(min, max, floating) {
                        if (floating && isIterateeCall(min, max, floating)) {
                            max = floating = undefined
                        }
                        var noMin = min == null,
                            noMax = max == null;
                        if (floating == null) {
                            if (noMax && typeof min == "boolean") {
                                floating = min;
                                min = 1
                            } else if (typeof max == "boolean") {
                                floating = max;
                                noMax = true
                            }
                        }
                        if (noMin && noMax) {
                            max = 1;
                            noMax = false
                        }
                        min = +min || 0;
                        if (noMax) {
                            max = min;
                            min = 0
                        } else {
                            max = +max || 0
                        }
                        if (floating || min % 1 || max % 1) {
                            var rand = nativeRandom();
                            return nativeMin(min + rand * (max - min + parseFloat("1e-" + ((rand + "").length - 1))), max)
                        }
                        return baseRandom(min, max)
                    }
                    var camelCase = createCompounder(function(result, word, index) {
                        word = word.toLowerCase();
                        return result + (index ? word.charAt(0).toUpperCase() + word.slice(1) : word)
                    });

                    function capitalize(string) {
                        string = baseToString(string);
                        return string && string.charAt(0).toUpperCase() + string.slice(1)
                    }

                    function deburr(string) {
                        string = baseToString(string);
                        return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, "")
                    }

                    function endsWith(string, target, position) {
                        string = baseToString(string);
                        target = target + "";
                        var length = string.length;
                        position = position === undefined ? length : nativeMin(position < 0 ? 0 : +position || 0, length);
                        position -= target.length;
                        return position >= 0 && string.indexOf(target, position) == position
                    }

                    function escape(string) {
                        string = baseToString(string);
                        return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string
                    }

                    function escapeRegExp(string) {
                        string = baseToString(string);
                        return string && reHasRegExpChars.test(string) ? string.replace(reRegExpChars, escapeRegExpChar) : string || "(?:)"
                    }
                    var kebabCase = createCompounder(function(result, word, index) {
                        return result + (index ? "-" : "") + word.toLowerCase()
                    });

                    function pad(string, length, chars) {
                        string = baseToString(string);
                        length = +length;
                        var strLength = string.length;
                        if (strLength >= length || !nativeIsFinite(length)) {
                            return string
                        }
                        var mid = (length - strLength) / 2,
                            leftLength = nativeFloor(mid),
                            rightLength = nativeCeil(mid);
                        chars = createPadding("", rightLength, chars);
                        return chars.slice(0, leftLength) + string + chars
                    }
                    var padLeft = createPadDir();
                    var padRight = createPadDir(true);

                    function parseInt(string, radix, guard) {
                        if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
                            radix = 0
                        } else if (radix) {
                            radix = +radix
                        }
                        string = trim(string);
                        return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10))
                    }

                    function repeat(string, n) {
                        var result = "";
                        string = baseToString(string);
                        n = +n;
                        if (n < 1 || !string || !nativeIsFinite(n)) {
                            return result
                        }
                        do {
                            if (n % 2) {
                                result += string
                            }
                            n = nativeFloor(n / 2);
                            string += string
                        } while (n);
                        return result
                    }
                    var snakeCase = createCompounder(function(result, word, index) {
                        return result + (index ? "_" : "") + word.toLowerCase()
                    });
                    var startCase = createCompounder(function(result, word, index) {
                        return result + (index ? " " : "") + (word.charAt(0).toUpperCase() + word.slice(1))
                    });

                    function startsWith(string, target, position) {
                        string = baseToString(string);
                        position = position == null ? 0 : nativeMin(position < 0 ? 0 : +position || 0, string.length);
                        return string.lastIndexOf(target, position) == position
                    }

                    function template(string, options, otherOptions) {
                        var settings = lodash.templateSettings;
                        if (otherOptions && isIterateeCall(string, options, otherOptions)) {
                            options = otherOptions = undefined
                        }
                        string = baseToString(string);
                        options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);
                        var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
                            importsKeys = keys(imports),
                            importsValues = baseValues(imports, importsKeys);
                        var isEscaping, isEvaluating, index = 0,
                            interpolate = options.interpolate || reNoMatch,
                            source = "__p += '";
                        var reDelimiters = RegExp((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g");
                        var sourceURL = "//# sourceURL=" + ("sourceURL" in options ? options.sourceURL : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
                        string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
                            interpolateValue || (interpolateValue = esTemplateValue);
                            source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
                            if (escapeValue) {
                                isEscaping = true;
                                source += "' +\n__e(" + escapeValue + ") +\n'"
                            }
                            if (evaluateValue) {
                                isEvaluating = true;
                                source += "';\n" + evaluateValue + ";\n__p += '"
                            }
                            if (interpolateValue) {
                                source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'"
                            }
                            index = offset + match.length;
                            return match
                        });
                        source += "';\n";
                        var variable = options.variable;
                        if (!variable) {
                            source = "with (obj) {\n" + source + "\n}\n"
                        }
                        source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
                        source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\n" + "function print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
                        var result = attempt(function() {
                            return Function(importsKeys, sourceURL + "return " + source).apply(undefined, importsValues)
                        });
                        result.source = source;
                        if (isError(result)) {
                            throw result
                        }
                        return result
                    }

                    function trim(string, chars, guard) {
                        var value = string;
                        string = baseToString(string);
                        if (!string) {
                            return string
                        }
                        if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
                            return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1)
                        }
                        chars = chars + "";
                        return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1)
                    }

                    function trimLeft(string, chars, guard) {
                        var value = string;
                        string = baseToString(string);
                        if (!string) {
                            return string
                        }
                        if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
                            return string.slice(trimmedLeftIndex(string))
                        }
                        return string.slice(charsLeftIndex(string, chars + ""))
                    }

                    function trimRight(string, chars, guard) {
                        var value = string;
                        string = baseToString(string);
                        if (!string) {
                            return string
                        }
                        if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
                            return string.slice(0, trimmedRightIndex(string) + 1)
                        }
                        return string.slice(0, charsRightIndex(string, chars + "") + 1)
                    }

                    function trunc(string, options, guard) {
                        if (guard && isIterateeCall(string, options, guard)) {
                            options = undefined
                        }
                        var length = DEFAULT_TRUNC_LENGTH,
                            omission = DEFAULT_TRUNC_OMISSION;
                        if (options != null) {
                            if (isObject(options)) {
                                var separator = "separator" in options ? options.separator : separator;
                                length = "length" in options ? +options.length || 0 : length;
                                omission = "omission" in options ? baseToString(options.omission) : omission
                            } else {
                                length = +options || 0
                            }
                        }
                        string = baseToString(string);
                        if (length >= string.length) {
                            return string
                        }
                        var end = length - omission.length;
                        if (end < 1) {
                            return omission
                        }
                        var result = string.slice(0, end);
                        if (separator == null) {
                            return result + omission
                        }
                        if (isRegExp(separator)) {
                            if (string.slice(end).search(separator)) {
                                var match, newEnd, substring = string.slice(0, end);
                                if (!separator.global) {
                                    separator = RegExp(separator.source, (reFlags.exec(separator) || "") + "g")
                                }
                                separator.lastIndex = 0;
                                while (match = separator.exec(substring)) {
                                    newEnd = match.index
                                }
                                result = result.slice(0, newEnd == null ? end : newEnd)
                            }
                        } else if (string.indexOf(separator, end) != end) {
                            var index = result.lastIndexOf(separator);
                            if (index > -1) {
                                result = result.slice(0, index)
                            }
                        }
                        return result + omission
                    }

                    function unescape(string) {
                        string = baseToString(string);
                        return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string
                    }

                    function words(string, pattern, guard) {
                        if (guard && isIterateeCall(string, pattern, guard)) {
                            pattern = undefined
                        }
                        string = baseToString(string);
                        return string.match(pattern || reWords) || []
                    }
                    var attempt = restParam(function(func, args) {
                        try {
                            return func.apply(undefined, args)
                        } catch (e) {
                            return isError(e) ? e : new Error(e)
                        }
                    });

                    function callback(func, thisArg, guard) {
                        if (guard && isIterateeCall(func, thisArg, guard)) {
                            thisArg = undefined
                        }
                        return isObjectLike(func) ? matches(func) : baseCallback(func, thisArg)
                    }

                    function constant(value) {
                        return function() {
                            return value
                        }
                    }

                    function identity(value) {
                        return value
                    }

                    function matches(source) {
                        return baseMatches(baseClone(source, true))
                    }

                    function matchesProperty(path, srcValue) {
                        return baseMatchesProperty(path, baseClone(srcValue, true))
                    }
                    var method = restParam(function(path, args) {
                        return function(object) {
                            return invokePath(object, path, args)
                        }
                    });
                    var methodOf = restParam(function(object, args) {
                        return function(path) {
                            return invokePath(object, path, args)
                        }
                    });

                    function mixin(object, source, options) {
                        if (options == null) {
                            var isObj = isObject(source),
                                props = isObj ? keys(source) : undefined,
                                methodNames = props && props.length ? baseFunctions(source, props) : undefined;
                            if (!(methodNames ? methodNames.length : isObj)) {
                                methodNames = false;
                                options = source;
                                source = object;
                                object = this
                            }
                        }
                        if (!methodNames) {
                            methodNames = baseFunctions(source, keys(source))
                        }
                        var chain = true,
                            index = -1,
                            isFunc = isFunction(object),
                            length = methodNames.length;
                        if (options === false) {
                            chain = false
                        } else if (isObject(options) && "chain" in options) {
                            chain = options.chain
                        }
                        while (++index < length) {
                            var methodName = methodNames[index],
                                func = source[methodName];
                            object[methodName] = func;
                            if (isFunc) {
                                object.prototype[methodName] = function(func) {
                                    return function() {
                                        var chainAll = this.__chain__;
                                        if (chain || chainAll) {
                                            var result = object(this.__wrapped__),
                                                actions = result.__actions__ = arrayCopy(this.__actions__);
                                            actions.push({
                                                func: func,
                                                args: arguments,
                                                thisArg: object
                                            });
                                            result.__chain__ = chainAll;
                                            return result
                                        }
                                        return func.apply(object, arrayPush([this.value()], arguments))
                                    }
                                }(func)
                            }
                        }
                        return object
                    }

                    function noConflict() {
                        root._ = oldDash;
                        return this
                    }

                    function noop() {}

                    function property(path) {
                        return isKey(path) ? baseProperty(path) : basePropertyDeep(path)
                    }

                    function propertyOf(object) {
                        return function(path) {
                            return baseGet(object, toPath(path), path + "")
                        }
                    }

                    function range(start, end, step) {
                        if (step && isIterateeCall(start, end, step)) {
                            end = step = undefined
                        }
                        start = +start || 0;
                        step = step == null ? 1 : +step || 0;
                        if (end == null) {
                            end = start;
                            start = 0
                        } else {
                            end = +end || 0
                        }
                        var index = -1,
                            length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
                            result = Array(length);
                        while (++index < length) {
                            result[index] = start;
                            start += step
                        }
                        return result
                    }

                    function times(n, iteratee, thisArg) {
                        n = nativeFloor(n);
                        if (n < 1 || !nativeIsFinite(n)) {
                            return []
                        }
                        var index = -1,
                            result = Array(nativeMin(n, MAX_ARRAY_LENGTH));
                        iteratee = bindCallback(iteratee, thisArg, 1);
                        while (++index < n) {
                            if (index < MAX_ARRAY_LENGTH) {
                                result[index] = iteratee(index)
                            } else {
                                iteratee(index)
                            }
                        }
                        return result
                    }

                    function uniqueId(prefix) {
                        var id = ++idCounter;
                        return baseToString(prefix) + id
                    }

                    function add(augend, addend) {
                        return (+augend || 0) + (+addend || 0)
                    }
                    var ceil = createRound("ceil");
                    var floor = createRound("floor");
                    var max = createExtremum(gt, NEGATIVE_INFINITY);
                    var min = createExtremum(lt, POSITIVE_INFINITY);
                    var round = createRound("round");

                    function sum(collection, iteratee, thisArg) {
                        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
                            iteratee = undefined
                        }
                        iteratee = getCallback(iteratee, thisArg, 3);
                        return iteratee.length == 1 ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee) : baseSum(collection, iteratee)
                    }
                    lodash.prototype = baseLodash.prototype;
                    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
                    LodashWrapper.prototype.constructor = LodashWrapper;
                    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
                    LazyWrapper.prototype.constructor = LazyWrapper;
                    MapCache.prototype["delete"] = mapDelete;
                    MapCache.prototype.get = mapGet;
                    MapCache.prototype.has = mapHas;
                    MapCache.prototype.set = mapSet;
                    SetCache.prototype.push = cachePush;
                    memoize.Cache = MapCache;
                    lodash.after = after;
                    lodash.ary = ary;
                    lodash.assign = assign;
                    lodash.at = at;
                    lodash.before = before;
                    lodash.bind = bind;
                    lodash.bindAll = bindAll;
                    lodash.bindKey = bindKey;
                    lodash.callback = callback;
                    lodash.chain = chain;
                    lodash.chunk = chunk;
                    lodash.compact = compact;
                    lodash.constant = constant;
                    lodash.countBy = countBy;
                    lodash.create = create;
                    lodash.curry = curry;
                    lodash.curryRight = curryRight;
                    lodash.debounce = debounce;
                    lodash.defaults = defaults;
                    lodash.defaultsDeep = defaultsDeep;
                    lodash.defer = defer;
                    lodash.delay = delay;
                    lodash.difference = difference;
                    lodash.drop = drop;
                    lodash.dropRight = dropRight;
                    lodash.dropRightWhile = dropRightWhile;
                    lodash.dropWhile = dropWhile;
                    lodash.fill = fill;
                    lodash.filter = filter;
                    lodash.flatten = flatten;
                    lodash.flattenDeep = flattenDeep;
                    lodash.flow = flow;
                    lodash.flowRight = flowRight;
                    lodash.forEach = forEach;
                    lodash.forEachRight = forEachRight;
                    lodash.forIn = forIn;
                    lodash.forInRight = forInRight;
                    lodash.forOwn = forOwn;
                    lodash.forOwnRight = forOwnRight;
                    lodash.functions = functions;
                    lodash.groupBy = groupBy;
                    lodash.indexBy = indexBy;
                    lodash.initial = initial;
                    lodash.intersection = intersection;
                    lodash.invert = invert;
                    lodash.invoke = invoke;
                    lodash.keys = keys;
                    lodash.keysIn = keysIn;
                    lodash.map = map;
                    lodash.mapKeys = mapKeys;
                    lodash.mapValues = mapValues;
                    lodash.matches = matches;
                    lodash.matchesProperty = matchesProperty;
                    lodash.memoize = memoize;
                    lodash.merge = merge;
                    lodash.method = method;
                    lodash.methodOf = methodOf;
                    lodash.mixin = mixin;
                    lodash.modArgs = modArgs;
                    lodash.negate = negate;
                    lodash.omit = omit;
                    lodash.once = once;
                    lodash.pairs = pairs;
                    lodash.partial = partial;
                    lodash.partialRight = partialRight;
                    lodash.partition = partition;
                    lodash.pick = pick;
                    lodash.pluck = pluck;
                    lodash.property = property;
                    lodash.propertyOf = propertyOf;
                    lodash.pull = pull;
                    lodash.pullAt = pullAt;
                    lodash.range = range;
                    lodash.rearg = rearg;
                    lodash.reject = reject;
                    lodash.remove = remove;
                    lodash.rest = rest;
                    lodash.restParam = restParam;
                    lodash.set = set;
                    lodash.shuffle = shuffle;
                    lodash.slice = slice;
                    lodash.sortBy = sortBy;
                    lodash.sortByAll = sortByAll;
                    lodash.sortByOrder = sortByOrder;
                    lodash.spread = spread;
                    lodash.take = take;
                    lodash.takeRight = takeRight;
                    lodash.takeRightWhile = takeRightWhile;
                    lodash.takeWhile = takeWhile;
                    lodash.tap = tap;
                    lodash.throttle = throttle;
                    lodash.thru = thru;
                    lodash.times = times;
                    lodash.toArray = toArray;
                    lodash.toPlainObject = toPlainObject;
                    lodash.transform = transform;
                    lodash.union = union;
                    lodash.uniq = uniq;
                    lodash.unzip = unzip;
                    lodash.unzipWith = unzipWith;
                    lodash.values = values;
                    lodash.valuesIn = valuesIn;
                    lodash.where = where;
                    lodash.without = without;
                    lodash.wrap = wrap;
                    lodash.xor = xor;
                    lodash.zip = zip;
                    lodash.zipObject = zipObject;
                    lodash.zipWith = zipWith;
                    lodash.backflow = flowRight;
                    lodash.collect = map;
                    lodash.compose = flowRight;
                    lodash.each = forEach;
                    lodash.eachRight = forEachRight;
                    lodash.extend = assign;
                    lodash.iteratee = callback;
                    lodash.methods = functions;
                    lodash.object = zipObject;
                    lodash.select = filter;
                    lodash.tail = rest;
                    lodash.unique = uniq;
                    mixin(lodash, lodash);
                    lodash.add = add;
                    lodash.attempt = attempt;
                    lodash.camelCase = camelCase;
                    lodash.capitalize = capitalize;
                    lodash.ceil = ceil;
                    lodash.clone = clone;
                    lodash.cloneDeep = cloneDeep;
                    lodash.deburr = deburr;
                    lodash.endsWith = endsWith;
                    lodash.escape = escape;
                    lodash.escapeRegExp = escapeRegExp;
                    lodash.every = every;
                    lodash.find = find;
                    lodash.findIndex = findIndex;
                    lodash.findKey = findKey;
                    lodash.findLast = findLast;
                    lodash.findLastIndex = findLastIndex;
                    lodash.findLastKey = findLastKey;
                    lodash.findWhere = findWhere;
                    lodash.first = first;
                    lodash.floor = floor;
                    lodash.get = get;
                    lodash.gt = gt;
                    lodash.gte = gte;
                    lodash.has = has;
                    lodash.identity = identity;
                    lodash.includes = includes;
                    lodash.indexOf = indexOf;
                    lodash.inRange = inRange;
                    lodash.isArguments = isArguments;
                    lodash.isArray = isArray;
                    lodash.isBoolean = isBoolean;
                    lodash.isDate = isDate;
                    lodash.isElement = isElement;
                    lodash.isEmpty = isEmpty;
                    lodash.isEqual = isEqual;
                    lodash.isError = isError;
                    lodash.isFinite = isFinite;
                    lodash.isFunction = isFunction;
                    lodash.isMatch = isMatch;
                    lodash.isNaN = isNaN;
                    lodash.isNative = isNative;
                    lodash.isNull = isNull;
                    lodash.isNumber = isNumber;
                    lodash.isObject = isObject;
                    lodash.isPlainObject = isPlainObject;
                    lodash.isRegExp = isRegExp;
                    lodash.isString = isString;
                    lodash.isTypedArray = isTypedArray;
                    lodash.isUndefined = isUndefined;
                    lodash.kebabCase = kebabCase;
                    lodash.last = last;
                    lodash.lastIndexOf = lastIndexOf;
                    lodash.lt = lt;
                    lodash.lte = lte;
                    lodash.max = max;
                    lodash.min = min;
                    lodash.noConflict = noConflict;
                    lodash.noop = noop;
                    lodash.now = now;
                    lodash.pad = pad;
                    lodash.padLeft = padLeft;
                    lodash.padRight = padRight;
                    lodash.parseInt = parseInt;
                    lodash.random = random;
                    lodash.reduce = reduce;
                    lodash.reduceRight = reduceRight;
                    lodash.repeat = repeat;
                    lodash.result = result;
                    lodash.round = round;
                    lodash.runInContext = runInContext;
                    lodash.size = size;
                    lodash.snakeCase = snakeCase;
                    lodash.some = some;
                    lodash.sortedIndex = sortedIndex;
                    lodash.sortedLastIndex = sortedLastIndex;
                    lodash.startCase = startCase;
                    lodash.startsWith = startsWith;
                    lodash.sum = sum;
                    lodash.template = template;
                    lodash.trim = trim;
                    lodash.trimLeft = trimLeft;
                    lodash.trimRight = trimRight;
                    lodash.trunc = trunc;
                    lodash.unescape = unescape;
                    lodash.uniqueId = uniqueId;
                    lodash.words = words;
                    lodash.all = every;
                    lodash.any = some;
                    lodash.contains = includes;
                    lodash.eq = isEqual;
                    lodash.detect = find;
                    lodash.foldl = reduce;
                    lodash.foldr = reduceRight;
                    lodash.head = first;
                    lodash.include = includes;
                    lodash.inject = reduce;
                    mixin(lodash, function() {
                        var source = {};
                        baseForOwn(lodash, function(func, methodName) {
                            if (!lodash.prototype[methodName]) {
                                source[methodName] = func
                            }
                        });
                        return source
                    }(), false);
                    lodash.sample = sample;
                    lodash.prototype.sample = function(n) {
                        if (!this.__chain__ && n == null) {
                            return sample(this.value())
                        }
                        return this.thru(function(value) {
                            return sample(value, n)
                        })
                    };
                    lodash.VERSION = VERSION;
                    arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
                        lodash[methodName].placeholder = lodash
                    });
                    arrayEach(["drop", "take"], function(methodName, index) {
                        LazyWrapper.prototype[methodName] = function(n) {
                            var filtered = this.__filtered__;
                            if (filtered && !index) {
                                return new LazyWrapper(this)
                            }
                            n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);
                            var result = this.clone();
                            if (filtered) {
                                result.__takeCount__ = nativeMin(result.__takeCount__, n)
                            } else {
                                result.__views__.push({
                                    size: n,
                                    type: methodName + (result.__dir__ < 0 ? "Right" : "")
                                })
                            }
                            return result
                        };
                        LazyWrapper.prototype[methodName + "Right"] = function(n) {
                            return this.reverse()[methodName](n).reverse()
                        }
                    });
                    arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
                        var type = index + 1,
                            isFilter = type != LAZY_MAP_FLAG;
                        LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
                            var result = this.clone();
                            result.__iteratees__.push({
                                iteratee: getCallback(iteratee, thisArg, 1),
                                type: type
                            });
                            result.__filtered__ = result.__filtered__ || isFilter;
                            return result
                        }
                    });
                    arrayEach(["first", "last"], function(methodName, index) {
                        var takeName = "take" + (index ? "Right" : "");
                        LazyWrapper.prototype[methodName] = function() {
                            return this[takeName](1).value()[0]
                        }
                    });
                    arrayEach(["initial", "rest"], function(methodName, index) {
                        var dropName = "drop" + (index ? "" : "Right");
                        LazyWrapper.prototype[methodName] = function() {
                            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1)
                        }
                    });
                    arrayEach(["pluck", "where"], function(methodName, index) {
                        var operationName = index ? "filter" : "map",
                            createCallback = index ? baseMatches : property;
                        LazyWrapper.prototype[methodName] = function(value) {
                            return this[operationName](createCallback(value))
                        }
                    });
                    LazyWrapper.prototype.compact = function() {
                        return this.filter(identity)
                    };
                    LazyWrapper.prototype.reject = function(predicate, thisArg) {
                        predicate = getCallback(predicate, thisArg, 1);
                        return this.filter(function(value) {
                            return !predicate(value)
                        })
                    };
                    LazyWrapper.prototype.slice = function(start, end) {
                        start = start == null ? 0 : +start || 0;
                        var result = this;
                        if (result.__filtered__ && (start > 0 || end < 0)) {
                            return new LazyWrapper(result)
                        }
                        if (start < 0) {
                            result = result.takeRight(-start)
                        } else if (start) {
                            result = result.drop(start)
                        }
                        if (end !== undefined) {
                            end = +end || 0;
                            result = end < 0 ? result.dropRight(-end) : result.take(end - start)
                        }
                        return result
                    };
                    LazyWrapper.prototype.takeRightWhile = function(predicate, thisArg) {
                        return this.reverse().takeWhile(predicate, thisArg).reverse()
                    };
                    LazyWrapper.prototype.toArray = function() {
                        return this.take(POSITIVE_INFINITY)
                    };
                    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
                        var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
                            retUnwrapped = /^(?:first|last)$/.test(methodName),
                            lodashFunc = lodash[retUnwrapped ? "take" + (methodName == "last" ? "Right" : "") : methodName];
                        if (!lodashFunc) {
                            return
                        }
                        lodash.prototype[methodName] = function() {
                            var args = retUnwrapped ? [1] : arguments,
                                chainAll = this.__chain__,
                                value = this.__wrapped__,
                                isHybrid = !!this.__actions__.length,
                                isLazy = value instanceof LazyWrapper,
                                iteratee = args[0],
                                useLazy = isLazy || isArray(value);
                            if (useLazy && checkIteratee && typeof iteratee == "function" && iteratee.length != 1) {
                                isLazy = useLazy = false
                            }
                            var interceptor = function(value) {
                                return retUnwrapped && chainAll ? lodashFunc(value, 1)[0] : lodashFunc.apply(undefined, arrayPush([value], args))
                            };
                            var action = {
                                    func: thru,
                                    args: [interceptor],
                                    thisArg: undefined
                                },
                                onlyLazy = isLazy && !isHybrid;
                            if (retUnwrapped && !chainAll) {
                                if (onlyLazy) {
                                    value = value.clone();
                                    value.__actions__.push(action);
                                    return func.call(value)
                                }
                                return lodashFunc.call(undefined, this.value())[0]
                            }
                            if (!retUnwrapped && useLazy) {
                                value = onlyLazy ? value : new LazyWrapper(this);
                                var result = func.apply(value, args);
                                result.__actions__.push(action);
                                return new LodashWrapper(result, chainAll)
                            }
                            return this.thru(interceptor)
                        }
                    });
                    arrayEach(["join", "pop", "push", "replace", "shift", "sort", "splice", "split", "unshift"], function(methodName) {
                        var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
                            chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru",
                            retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);
                        lodash.prototype[methodName] = function() {
                            var args = arguments;
                            if (retUnwrapped && !this.__chain__) {
                                return func.apply(this.value(), args)
                            }
                            return this[chainName](function(value) {
                                return func.apply(value, args)
                            })
                        }
                    });
                    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
                        var lodashFunc = lodash[methodName];
                        if (lodashFunc) {
                            var key = lodashFunc.name,
                                names = realNames[key] || (realNames[key] = []);
                            names.push({
                                name: methodName,
                                func: lodashFunc
                            })
                        }
                    });
                    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{
                        name: "wrapper",
                        func: undefined
                    }];
                    LazyWrapper.prototype.clone = lazyClone;
                    LazyWrapper.prototype.reverse = lazyReverse;
                    LazyWrapper.prototype.value = lazyValue;
                    lodash.prototype.chain = wrapperChain;
                    lodash.prototype.commit = wrapperCommit;
                    lodash.prototype.concat = wrapperConcat;
                    lodash.prototype.plant = wrapperPlant;
                    lodash.prototype.reverse = wrapperReverse;
                    lodash.prototype.toString = wrapperToString;
                    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
                    lodash.prototype.collect = lodash.prototype.map;
                    lodash.prototype.head = lodash.prototype.first;
                    lodash.prototype.select = lodash.prototype.filter;
                    lodash.prototype.tail = lodash.prototype.rest;
                    return lodash
                }
                var _ = runInContext();
                if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
                    root._ = _;
                    define(function() {
                        return _
                    })
                } else if (freeExports && freeModule) {
                    if (moduleExports) {
                        (freeModule.exports = _)._ = _
                    } else {
                        freeExports._ = _
                    }
                } else {
                    root._ = _
                }
            }).call(this)
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {}],
    4: [function(require, module, exports) {
        (function(global, factory) {
            typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory(require("backbone"), require("backbone-metal")) : typeof define === "function" && define.amd ? define(["backbone", "backbone-metal"], factory) : global.Backbone.Routing = factory(global.Backbone, global.Metal)
        })(this, function(Backbone, Metal) {
            "use strict";
            var CancellationError = Metal.Error.extend({
                name: "CancellationError"
            });
            var Route = Metal.Class.extend({
                enter: function enter() {
                    var _this = this;
                    var args = arguments[0] === undefined ? [] : arguments[0];
                    this._isEntering = true;
                    this.trigger.apply(this, ["before:enter before:fetch", this].concat(args));
                    return Promise.resolve().then(function() {
                        if (_this._isCancelled) {
                            return Promise.reject(new CancellationError)
                        }
                        return _this.fetch.apply(_this, args)
                    }).then(function() {
                        return _this.trigger.apply(_this, ["fetch before:render", _this].concat(args))
                    }).then(function() {
                        if (_this._isCancelled) {
                            return Promise.reject(new CancellationError)
                        }
                        return _this.render.apply(_this, args)
                    }).then(function() {
                        _this._isEntering = false;
                        _this.trigger.apply(_this, ["render enter", _this].concat(args))
                    })["catch"](function(err) {
                        _this._isEntering = false;
                        if (err instanceof CancellationError) {
                            _this.trigger("cancel", _this)
                        } else {
                            _this.trigger("error error:enter", _this, err);
                            throw err
                        }
                    })
                },
                exit: function exit() {
                    var _this2 = this;
                    if (this._isEntering) {
                        this.cancel()
                    }
                    this._isExiting = true;
                    this.trigger("before:exit before:destroy", this);
                    return Promise.resolve().then(function() {
                        return _this2.destroy()
                    }).then(function() {
                        _this2._isExiting = false;
                        _this2.trigger("destroy exit", _this2);
                        _this2.stopListening()
                    })["catch"](function(err) {
                        _this2._isExiting = false;
                        _this2.trigger("error error:exit", _this2, err);
                        _this2.stopListening();
                        throw err
                    })
                },
                cancel: function cancel() {
                    var _this3 = this;
                    if (!this._isEntering) {
                        return
                    }
                    this.trigger("before:cancel", this);
                    this._isCancelled = true;
                    return new Promise(function(resolve, reject) {
                        _this3.once("cancel", resolve);
                        _this3.once("enter error", reject)
                    })
                },
                isEntering: function isEntering() {
                    return !!this._isEntering
                },
                isExiting: function isExiting() {
                    return !!this._isExiting
                },
                isCancelled: function isCancelled() {
                    return !!this._isCancelled
                },
                fetch: function fetch() {},
                render: function render() {},
                destroy: function destroy() {}
            });
            var Router = Metal.Class.extend(Backbone.Router.prototype, Backbone.Router).extend({
                constructor: function constructor() {
                    this.listenTo(Backbone.history, "route", this._onHistoryRoute);
                    this._super.apply(this, arguments)
                },
                isActive: function isActive() {
                    return !!this._isActive
                },
                execute: function execute(callback, args) {
                    var _this4 = this;
                    var wasInactive = !this._isActive;
                    if (wasInactive) {
                        this.trigger("before:enter", this)
                    }
                    this.trigger("before:route", this);
                    return Promise.resolve().then(function() {
                        return _this4._execute(callback, args)
                    }).then(function() {
                        _this4.trigger("route", _this4);
                        if (wasInactive) {
                            _this4.trigger("enter", _this4)
                        }
                    })["catch"](function(err) {
                        _this4.trigger("error", _this4, err);
                        Backbone.history.trigger("error", _this4, err);
                        throw err
                    })
                },
                _execute: function _execute(callback, args) {
                    var _this5 = this;
                    return Promise.resolve().then(function() {
                        if (Router._prevRoute instanceof Route) {
                            return Router._prevRoute.exit()
                        }
                    }).then(function() {
                        var route = Router._prevRoute = callback.apply(_this5, args);
                        if (route instanceof Route) {
                            route.router = _this5;
                            return route.enter(args)
                        }
                    })
                },
                _onHistoryRoute: function _onHistoryRoute(router) {
                    this._isActive = router === this
                }
            }, {
                _prevRoute: null
            });
            var backbone_routing = {
                Route: Route,
                Router: Router,
                CancellationError: CancellationError
            };
            return backbone_routing
        })
    }, {
        backbone: 25,
        "backbone-metal": 5
    }],
    5: [function(require, module, exports) {
        (function(global, factory) {
            typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory(require("underscore"), require("backbone")) : typeof define === "function" && define.amd ? define(["underscore", "backbone"], factory) : global.Metal = factory(global._, global.Backbone)
        })(this, function(_, Backbone) {
            "use strict";
            var Metal = Backbone.Metal = {};

            function _wrap(method, superMethod) {
                return function() {
                    var prevSuper = this._super;
                    this._super = superMethod;
                    var ret = method.apply(this, arguments);
                    this._super = prevSuper;
                    return ret
                }
            }
            var CONTAINS_SUPER = /xyz/.test(new Function("xyz")) ? /\b_super\b/ : /.*/;

            function _wrapAll(dest, source) {
                var keys = _.keys(source),
                    length = keys.length,
                    i, name, method, superMethod, hasSuper;
                for (i = 0; i < length; i++) {
                    name = keys[i];
                    method = source[name];
                    superMethod = dest[name];
                    hasSuper = CONTAINS_SUPER.test(method);
                    if (hasSuper && _.isFunction(method) && _.isFunction(superMethod)) {
                        dest[name] = _wrap(method, superMethod)
                    } else {
                        dest[name] = method
                    }
                }
            }
            var Class = Metal.Class = function() {
                var _ref;
                (_ref = this).initialize.apply(_ref, arguments)
            };
            Class.prototype.initialize = _.noop;
            _.extend(Class, {
                extend: function extend(protoProps, staticProps) {
                    var Parent = this;
                    var Child;
                    if (!protoProps || !_.has(protoProps, "constructor")) {
                        Child = function() {
                            Parent.apply(this, arguments)
                        }
                    } else if (CONTAINS_SUPER.test(protoProps.constructor)) {
                        Child = _wrap(protoProps.constructor, Parent.prototype.constructor)
                    } else {
                        Child = protoProps.constructor
                    }
                    _.extend(Child, Parent);
                    if (staticProps) {
                        _wrapAll(Child, staticProps)
                    }
                    var Surrogate = function() {
                        this.constructor = Child
                    };
                    Surrogate.prototype = Parent.prototype;
                    Child.prototype = new Surrogate;
                    if (protoProps) {
                        _wrapAll(Child.prototype, protoProps)
                    }
                    Child.superclass = Parent;
                    Child.__super__ = Parent.prototype;
                    return Child
                },
                mixin: function mixin(protoProps) {
                    _wrapAll(this.prototype, protoProps);
                    return this
                },
                include: function include(staticProps) {
                    _wrapAll(this, staticProps);
                    return this
                },
                isClass: function isClass(value) {
                    return !!value && (value instanceof Class || value.prototype instanceof Class || value === Class)
                }
            });
            var Mixin = Metal.Mixin = function(protoProps) {
                _.extend(this, protoProps)
            };
            Mixin.isMixin = function(value) {
                return !!value && value instanceof Mixin
            };
            var ERROR_PROPS = ["description", "fileName", "lineNumber", "name", "message", "number"];
            var Err = Metal.Error = Class.extend.call(Error, {
                constructor: function constructor(message) {
                    var options = arguments[1] === undefined ? {} : arguments[1];
                    if (_.isObject(message)) {
                        options = message;
                        message = options.message
                    }
                    var error = Error.call(this, message);
                    _.extend(this, _.pick(error, ERROR_PROPS), _.pick(options, ERROR_PROPS));
                    Err.captureStackTrace(this, Err)
                },
                toString: function toString() {
                    return "" + this.name + ": " + this.message
                }
            }, {
                captureStackTrace: function captureStackTrace(target, method) {
                    if (Error.captureStackTrace) {
                        Error.captureStackTrace(target, method)
                    }
                }
            });
            _.extend(Err, Class);
            var deprecate = Metal.deprecate = function(message, test) {
                if (test !== undefined && test) {
                    return
                }
                if (_.isObject(message)) {
                    message = deprecate._format(message.prev, message.next)
                }
                message = message && message.toString();
                if (!deprecate._cache[message]) {
                    deprecate._warn("Deprecation warning: " + message);
                    deprecate._cache[message] = true
                }
            };
            deprecate._format = function(prev, next) {
                return "" + prev + " is going to be removed in the future. Please use " + next + " instead."
            };
            deprecate._warn = typeof console !== "undefined" && (console.warn || console.log) || _.noop;
            deprecate._cache = {};
            var Events = Metal.Events = new Mixin(Backbone.Events);
            Class.mixin(Events);
            return Metal
        })
    }, {
        backbone: 25,
        underscore: 6
    }],
    6: [function(require, module, exports) {
        (function() {
            var root = this;
            var previousUnderscore = root._;
            var ArrayProto = Array.prototype,
                ObjProto = Object.prototype,
                FuncProto = Function.prototype;
            var push = ArrayProto.push,
                slice = ArrayProto.slice,
                toString = ObjProto.toString,
                hasOwnProperty = ObjProto.hasOwnProperty;
            var nativeIsArray = Array.isArray,
                nativeKeys = Object.keys,
                nativeBind = FuncProto.bind,
                nativeCreate = Object.create;
            var Ctor = function() {};
            var _ = function(obj) {
                if (obj instanceof _) return obj;
                if (!(this instanceof _)) return new _(obj);
                this._wrapped = obj
            };
            if (typeof exports !== "undefined") {
                if (typeof module !== "undefined" && module.exports) {
                    exports = module.exports = _
                }
                exports._ = _
            } else {
                root._ = _
            }
            _.VERSION = "1.8.3";
            var optimizeCb = function(func, context, argCount) {
                if (context === void 0) return func;
                switch (argCount == null ? 3 : argCount) {
                    case 1:
                        return function(value) {
                            return func.call(context, value)
                        };
                    case 2:
                        return function(value, other) {
                            return func.call(context, value, other)
                        };
                    case 3:
                        return function(value, index, collection) {
                            return func.call(context, value, index, collection)
                        };
                    case 4:
                        return function(accumulator, value, index, collection) {
                            return func.call(context, accumulator, value, index, collection)
                        }
                }
                return function() {
                    return func.apply(context, arguments)
                }
            };
            var cb = function(value, context, argCount) {
                if (value == null) return _.identity;
                if (_.isFunction(value)) return optimizeCb(value, context, argCount);
                if (_.isObject(value)) return _.matcher(value);
                return _.property(value)
            };
            _.iteratee = function(value, context) {
                return cb(value, context, Infinity)
            };
            var createAssigner = function(keysFunc, undefinedOnly) {
                return function(obj) {
                    var length = arguments.length;
                    if (length < 2 || obj == null) return obj;
                    for (var index = 1; index < length; index++) {
                        var source = arguments[index],
                            keys = keysFunc(source),
                            l = keys.length;
                        for (var i = 0; i < l; i++) {
                            var key = keys[i];
                            if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key]
                        }
                    }
                    return obj
                }
            };
            var baseCreate = function(prototype) {
                if (!_.isObject(prototype)) return {};
                if (nativeCreate) return nativeCreate(prototype);
                Ctor.prototype = prototype;
                var result = new Ctor;
                Ctor.prototype = null;
                return result
            };
            var property = function(key) {
                return function(obj) {
                    return obj == null ? void 0 : obj[key]
                }
            };
            var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
            var getLength = property("length");
            var isArrayLike = function(collection) {
                var length = getLength(collection);
                return typeof length == "number" && length >= 0 && length <= MAX_ARRAY_INDEX
            };
            _.each = _.forEach = function(obj, iteratee, context) {
                iteratee = optimizeCb(iteratee, context);
                var i, length;
                if (isArrayLike(obj)) {
                    for (i = 0, length = obj.length; i < length; i++) {
                        iteratee(obj[i], i, obj)
                    }
                } else {
                    var keys = _.keys(obj);
                    for (i = 0, length = keys.length; i < length; i++) {
                        iteratee(obj[keys[i]], keys[i], obj)
                    }
                }
                return obj
            };
            _.map = _.collect = function(obj, iteratee, context) {
                iteratee = cb(iteratee, context);
                var keys = !isArrayLike(obj) && _.keys(obj),
                    length = (keys || obj).length,
                    results = Array(length);
                for (var index = 0; index < length; index++) {
                    var currentKey = keys ? keys[index] : index;
                    results[index] = iteratee(obj[currentKey], currentKey, obj)
                }
                return results
            };

            function createReduce(dir) {
                function iterator(obj, iteratee, memo, keys, index, length) {
                    for (; index >= 0 && index < length; index += dir) {
                        var currentKey = keys ? keys[index] : index;
                        memo = iteratee(memo, obj[currentKey], currentKey, obj)
                    }
                    return memo
                }
                return function(obj, iteratee, memo, context) {
                    iteratee = optimizeCb(iteratee, context, 4);
                    var keys = !isArrayLike(obj) && _.keys(obj),
                        length = (keys || obj).length,
                        index = dir > 0 ? 0 : length - 1;
                    if (arguments.length < 3) {
                        memo = obj[keys ? keys[index] : index];
                        index += dir
                    }
                    return iterator(obj, iteratee, memo, keys, index, length)
                }
            }
            _.reduce = _.foldl = _.inject = createReduce(1);
            _.reduceRight = _.foldr = createReduce(-1);
            _.find = _.detect = function(obj, predicate, context) {
                var key;
                if (isArrayLike(obj)) {
                    key = _.findIndex(obj, predicate, context)
                } else {
                    key = _.findKey(obj, predicate, context)
                }
                if (key !== void 0 && key !== -1) return obj[key]
            };
            _.filter = _.select = function(obj, predicate, context) {
                var results = [];
                predicate = cb(predicate, context);
                _.each(obj, function(value, index, list) {
                    if (predicate(value, index, list)) results.push(value)
                });
                return results
            };
            _.reject = function(obj, predicate, context) {
                return _.filter(obj, _.negate(cb(predicate)), context)
            };
            _.every = _.all = function(obj, predicate, context) {
                predicate = cb(predicate, context);
                var keys = !isArrayLike(obj) && _.keys(obj),
                    length = (keys || obj).length;
                for (var index = 0; index < length; index++) {
                    var currentKey = keys ? keys[index] : index;
                    if (!predicate(obj[currentKey], currentKey, obj)) return false
                }
                return true
            };
            _.some = _.any = function(obj, predicate, context) {
                predicate = cb(predicate, context);
                var keys = !isArrayLike(obj) && _.keys(obj),
                    length = (keys || obj).length;
                for (var index = 0; index < length; index++) {
                    var currentKey = keys ? keys[index] : index;
                    if (predicate(obj[currentKey], currentKey, obj)) return true
                }
                return false
            };
            _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
                if (!isArrayLike(obj)) obj = _.values(obj);
                if (typeof fromIndex != "number" || guard) fromIndex = 0;
                return _.indexOf(obj, item, fromIndex) >= 0
            };
            _.invoke = function(obj, method) {
                var args = slice.call(arguments, 2);
                var isFunc = _.isFunction(method);
                return _.map(obj, function(value) {
                    var func = isFunc ? method : value[method];
                    return func == null ? func : func.apply(value, args)
                })
            };
            _.pluck = function(obj, key) {
                return _.map(obj, _.property(key))
            };
            _.where = function(obj, attrs) {
                return _.filter(obj, _.matcher(attrs))
            };
            _.findWhere = function(obj, attrs) {
                return _.find(obj, _.matcher(attrs))
            };
            _.max = function(obj, iteratee, context) {
                var result = -Infinity,
                    lastComputed = -Infinity,
                    value, computed;
                if (iteratee == null && obj != null) {
                    obj = isArrayLike(obj) ? obj : _.values(obj);
                    for (var i = 0, length = obj.length; i < length; i++) {
                        value = obj[i];
                        if (value > result) {
                            result = value
                        }
                    }
                } else {
                    iteratee = cb(iteratee, context);
                    _.each(obj, function(value, index, list) {
                        computed = iteratee(value, index, list);
                        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
                            result = value;
                            lastComputed = computed
                        }
                    })
                }
                return result
            };
            _.min = function(obj, iteratee, context) {
                var result = Infinity,
                    lastComputed = Infinity,
                    value, computed;
                if (iteratee == null && obj != null) {
                    obj = isArrayLike(obj) ? obj : _.values(obj);
                    for (var i = 0, length = obj.length; i < length; i++) {
                        value = obj[i];
                        if (value < result) {
                            result = value
                        }
                    }
                } else {
                    iteratee = cb(iteratee, context);
                    _.each(obj, function(value, index, list) {
                        computed = iteratee(value, index, list);
                        if (computed < lastComputed || computed === Infinity && result === Infinity) {
                            result = value;
                            lastComputed = computed
                        }
                    })
                }
                return result
            };
            _.shuffle = function(obj) {
                var set = isArrayLike(obj) ? obj : _.values(obj);
                var length = set.length;
                var shuffled = Array(length);
                for (var index = 0, rand; index < length; index++) {
                    rand = _.random(0, index);
                    if (rand !== index) shuffled[index] = shuffled[rand];
                    shuffled[rand] = set[index]
                }
                return shuffled
            };
            _.sample = function(obj, n, guard) {
                if (n == null || guard) {
                    if (!isArrayLike(obj)) obj = _.values(obj);
                    return obj[_.random(obj.length - 1)]
                }
                return _.shuffle(obj).slice(0, Math.max(0, n))
            };
            _.sortBy = function(obj, iteratee, context) {
                iteratee = cb(iteratee, context);
                return _.pluck(_.map(obj, function(value, index, list) {
                    return {
                        value: value,
                        index: index,
                        criteria: iteratee(value, index, list)
                    }
                }).sort(function(left, right) {
                    var a = left.criteria;
                    var b = right.criteria;
                    if (a !== b) {
                        if (a > b || a === void 0) return 1;
                        if (a < b || b === void 0) return -1
                    }
                    return left.index - right.index
                }), "value")
            };
            var group = function(behavior) {
                return function(obj, iteratee, context) {
                    var result = {};
                    iteratee = cb(iteratee, context);
                    _.each(obj, function(value, index) {
                        var key = iteratee(value, index, obj);
                        behavior(result, value, key)
                    });
                    return result
                }
            };
            _.groupBy = group(function(result, value, key) {
                if (_.has(result, key)) result[key].push(value);
                else result[key] = [value]
            });
            _.indexBy = group(function(result, value, key) {
                result[key] = value
            });
            _.countBy = group(function(result, value, key) {
                if (_.has(result, key)) result[key]++;
                else result[key] = 1
            });
            _.toArray = function(obj) {
                if (!obj) return [];
                if (_.isArray(obj)) return slice.call(obj);
                if (isArrayLike(obj)) return _.map(obj, _.identity);
                return _.values(obj)
            };
            _.size = function(obj) {
                if (obj == null) return 0;
                return isArrayLike(obj) ? obj.length : _.keys(obj).length
            };
            _.partition = function(obj, predicate, context) {
                predicate = cb(predicate, context);
                var pass = [],
                    fail = [];
                _.each(obj, function(value, key, obj) {
                    (predicate(value, key, obj) ? pass : fail).push(value)
                });
                return [pass, fail]
            };
            _.first = _.head = _.take = function(array, n, guard) {
                if (array == null) return void 0;
                if (n == null || guard) return array[0];
                return _.initial(array, array.length - n)
            };
            _.initial = function(array, n, guard) {
                return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)))
            };
            _.last = function(array, n, guard) {
                if (array == null) return void 0;
                if (n == null || guard) return array[array.length - 1];
                return _.rest(array, Math.max(0, array.length - n))
            };
            _.rest = _.tail = _.drop = function(array, n, guard) {
                return slice.call(array, n == null || guard ? 1 : n)
            };
            _.compact = function(array) {
                return _.filter(array, _.identity)
            };
            var flatten = function(input, shallow, strict, startIndex) {
                var output = [],
                    idx = 0;
                for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
                    var value = input[i];
                    if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
                        if (!shallow) value = flatten(value, shallow, strict);
                        var j = 0,
                            len = value.length;
                        output.length += len;
                        while (j < len) {
                            output[idx++] = value[j++]
                        }
                    } else if (!strict) {
                        output[idx++] = value
                    }
                }
                return output
            };
            _.flatten = function(array, shallow) {
                return flatten(array, shallow, false)
            };
            _.without = function(array) {
                return _.difference(array, slice.call(arguments, 1))
            };
            _.uniq = _.unique = function(array, isSorted, iteratee, context) {
                if (!_.isBoolean(isSorted)) {
                    context = iteratee;
                    iteratee = isSorted;
                    isSorted = false
                }
                if (iteratee != null) iteratee = cb(iteratee, context);
                var result = [];
                var seen = [];
                for (var i = 0, length = getLength(array); i < length; i++) {
                    var value = array[i],
                        computed = iteratee ? iteratee(value, i, array) : value;
                    if (isSorted) {
                        if (!i || seen !== computed) result.push(value);
                        seen = computed
                    } else if (iteratee) {
                        if (!_.contains(seen, computed)) {
                            seen.push(computed);
                            result.push(value)
                        }
                    } else if (!_.contains(result, value)) {
                        result.push(value)
                    }
                }
                return result
            };
            _.union = function() {
                return _.uniq(flatten(arguments, true, true))
            };
            _.intersection = function(array) {
                var result = [];
                var argsLength = arguments.length;
                for (var i = 0, length = getLength(array); i < length; i++) {
                    var item = array[i];
                    if (_.contains(result, item)) continue;
                    for (var j = 1; j < argsLength; j++) {
                        if (!_.contains(arguments[j], item)) break
                    }
                    if (j === argsLength) result.push(item)
                }
                return result
            };
            _.difference = function(array) {
                var rest = flatten(arguments, true, true, 1);
                return _.filter(array, function(value) {
                    return !_.contains(rest, value)
                })
            };
            _.zip = function() {
                return _.unzip(arguments)
            };
            _.unzip = function(array) {
                var length = array && _.max(array, getLength).length || 0;
                var result = Array(length);
                for (var index = 0; index < length; index++) {
                    result[index] = _.pluck(array, index)
                }
                return result
            };
            _.object = function(list, values) {
                var result = {};
                for (var i = 0, length = getLength(list); i < length; i++) {
                    if (values) {
                        result[list[i]] = values[i]
                    } else {
                        result[list[i][0]] = list[i][1]
                    }
                }
                return result
            };

            function createPredicateIndexFinder(dir) {
                return function(array, predicate, context) {
                    predicate = cb(predicate, context);
                    var length = getLength(array);
                    var index = dir > 0 ? 0 : length - 1;
                    for (; index >= 0 && index < length; index += dir) {
                        if (predicate(array[index], index, array)) return index
                    }
                    return -1
                }
            }
            _.findIndex = createPredicateIndexFinder(1);
            _.findLastIndex = createPredicateIndexFinder(-1);
            _.sortedIndex = function(array, obj, iteratee, context) {
                iteratee = cb(iteratee, context, 1);
                var value = iteratee(obj);
                var low = 0,
                    high = getLength(array);
                while (low < high) {
                    var mid = Math.floor((low + high) / 2);
                    if (iteratee(array[mid]) < value) low = mid + 1;
                    else high = mid
                }
                return low
            };

            function createIndexFinder(dir, predicateFind, sortedIndex) {
                return function(array, item, idx) {
                    var i = 0,
                        length = getLength(array);
                    if (typeof idx == "number") {
                        if (dir > 0) {
                            i = idx >= 0 ? idx : Math.max(idx + length, i)
                        } else {
                            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1
                        }
                    } else if (sortedIndex && idx && length) {
                        idx = sortedIndex(array, item);
                        return array[idx] === item ? idx : -1
                    }
                    if (item !== item) {
                        idx = predicateFind(slice.call(array, i, length), _.isNaN);
                        return idx >= 0 ? idx + i : -1
                    }
                    for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
                        if (array[idx] === item) return idx
                    }
                    return -1
                }
            }
            _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
            _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);
            _.range = function(start, stop, step) {
                if (stop == null) {
                    stop = start || 0;
                    start = 0
                }
                step = step || 1;
                var length = Math.max(Math.ceil((stop - start) / step), 0);
                var range = Array(length);
                for (var idx = 0; idx < length; idx++, start += step) {
                    range[idx] = start
                }
                return range
            };
            var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
                if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
                var self = baseCreate(sourceFunc.prototype);
                var result = sourceFunc.apply(self, args);
                if (_.isObject(result)) return result;
                return self
            };
            _.bind = function(func, context) {
                if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
                if (!_.isFunction(func)) throw new TypeError("Bind must be called on a function");
                var args = slice.call(arguments, 2);
                var bound = function() {
                    return executeBound(func, bound, context, this, args.concat(slice.call(arguments)))
                };
                return bound
            };
            _.partial = function(func) {
                var boundArgs = slice.call(arguments, 1);
                var bound = function() {
                    var position = 0,
                        length = boundArgs.length;
                    var args = Array(length);
                    for (var i = 0; i < length; i++) {
                        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i]
                    }
                    while (position < arguments.length) args.push(arguments[position++]);
                    return executeBound(func, bound, this, this, args)
                };
                return bound
            };
            _.bindAll = function(obj) {
                var i, length = arguments.length,
                    key;
                if (length <= 1) throw new Error("bindAll must be passed function names");
                for (i = 1; i < length; i++) {
                    key = arguments[i];
                    obj[key] = _.bind(obj[key], obj)
                }
                return obj
            };
            _.memoize = function(func, hasher) {
                var memoize = function(key) {
                    var cache = memoize.cache;
                    var address = "" + (hasher ? hasher.apply(this, arguments) : key);
                    if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
                    return cache[address]
                };
                memoize.cache = {};
                return memoize
            };
            _.delay = function(func, wait) {
                var args = slice.call(arguments, 2);
                return setTimeout(function() {
                    return func.apply(null, args)
                }, wait)
            };
            _.defer = _.partial(_.delay, _, 1);
            _.throttle = function(func, wait, options) {
                var context, args, result;
                var timeout = null;
                var previous = 0;
                if (!options) options = {};
                var later = function() {
                    previous = options.leading === false ? 0 : _.now();
                    timeout = null;
                    result = func.apply(context, args);
                    if (!timeout) context = args = null
                };
                return function() {
                    var now = _.now();
                    if (!previous && options.leading === false) previous = now;
                    var remaining = wait - (now - previous);
                    context = this;
                    args = arguments;
                    if (remaining <= 0 || remaining > wait) {
                        if (timeout) {
                            clearTimeout(timeout);
                            timeout = null
                        }
                        previous = now;
                        result = func.apply(context, args);
                        if (!timeout) context = args = null
                    } else if (!timeout && options.trailing !== false) {
                        timeout = setTimeout(later, remaining)
                    }
                    return result
                }
            };
            _.debounce = function(func, wait, immediate) {
                var timeout, args, context, timestamp, result;
                var later = function() {
                    var last = _.now() - timestamp;
                    if (last < wait && last >= 0) {
                        timeout = setTimeout(later, wait - last)
                    } else {
                        timeout = null;
                        if (!immediate) {
                            result = func.apply(context, args);
                            if (!timeout) context = args = null
                        }
                    }
                };
                return function() {
                    context = this;
                    args = arguments;
                    timestamp = _.now();
                    var callNow = immediate && !timeout;
                    if (!timeout) timeout = setTimeout(later, wait);
                    if (callNow) {
                        result = func.apply(context, args);
                        context = args = null
                    }
                    return result
                }
            };
            _.wrap = function(func, wrapper) {
                return _.partial(wrapper, func)
            };
            _.negate = function(predicate) {
                return function() {
                    return !predicate.apply(this, arguments)
                }
            };
            _.compose = function() {
                var args = arguments;
                var start = args.length - 1;
                return function() {
                    var i = start;
                    var result = args[start].apply(this, arguments);
                    while (i--) result = args[i].call(this, result);
                    return result
                }
            };
            _.after = function(times, func) {
                return function() {
                    if (--times < 1) {
                        return func.apply(this, arguments)
                    }
                }
            };
            _.before = function(times, func) {
                var memo;
                return function() {
                    if (--times > 0) {
                        memo = func.apply(this, arguments)
                    }
                    if (times <= 1) func = null;
                    return memo
                }
            };
            _.once = _.partial(_.before, 2);
            var hasEnumBug = !{
                toString: null
            }.propertyIsEnumerable("toString");
            var nonEnumerableProps = ["valueOf", "isPrototypeOf", "toString", "propertyIsEnumerable", "hasOwnProperty", "toLocaleString"];

            function collectNonEnumProps(obj, keys) {
                var nonEnumIdx = nonEnumerableProps.length;
                var constructor = obj.constructor;
                var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;
                var prop = "constructor";
                if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);
                while (nonEnumIdx--) {
                    prop = nonEnumerableProps[nonEnumIdx];
                    if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
                        keys.push(prop)
                    }
                }
            }
            _.keys = function(obj) {
                if (!_.isObject(obj)) return [];
                if (nativeKeys) return nativeKeys(obj);
                var keys = [];
                for (var key in obj)
                    if (_.has(obj, key)) keys.push(key);
                if (hasEnumBug) collectNonEnumProps(obj, keys);
                return keys
            };
            _.allKeys = function(obj) {
                if (!_.isObject(obj)) return [];
                var keys = [];
                for (var key in obj) keys.push(key);
                if (hasEnumBug) collectNonEnumProps(obj, keys);
                return keys
            };
            _.values = function(obj) {
                var keys = _.keys(obj);
                var length = keys.length;
                var values = Array(length);
                for (var i = 0; i < length; i++) {
                    values[i] = obj[keys[i]]
                }
                return values
            };
            _.mapObject = function(obj, iteratee, context) {
                iteratee = cb(iteratee, context);
                var keys = _.keys(obj),
                    length = keys.length,
                    results = {},
                    currentKey;
                for (var index = 0; index < length; index++) {
                    currentKey = keys[index];
                    results[currentKey] = iteratee(obj[currentKey], currentKey, obj)
                }
                return results
            };
            _.pairs = function(obj) {
                var keys = _.keys(obj);
                var length = keys.length;
                var pairs = Array(length);
                for (var i = 0; i < length; i++) {
                    pairs[i] = [keys[i], obj[keys[i]]]
                }
                return pairs
            };
            _.invert = function(obj) {
                var result = {};
                var keys = _.keys(obj);
                for (var i = 0, length = keys.length; i < length; i++) {
                    result[obj[keys[i]]] = keys[i]
                }
                return result
            };
            _.functions = _.methods = function(obj) {
                var names = [];
                for (var key in obj) {
                    if (_.isFunction(obj[key])) names.push(key)
                }
                return names.sort()
            };
            _.extend = createAssigner(_.allKeys);
            _.extendOwn = _.assign = createAssigner(_.keys);
            _.findKey = function(obj, predicate, context) {
                predicate = cb(predicate, context);
                var keys = _.keys(obj),
                    key;
                for (var i = 0, length = keys.length; i < length; i++) {
                    key = keys[i];
                    if (predicate(obj[key], key, obj)) return key
                }
            };
            _.pick = function(object, oiteratee, context) {
                var result = {},
                    obj = object,
                    iteratee, keys;
                if (obj == null) return result;
                if (_.isFunction(oiteratee)) {
                    keys = _.allKeys(obj);
                    iteratee = optimizeCb(oiteratee, context)
                } else {
                    keys = flatten(arguments, false, false, 1);
                    iteratee = function(value, key, obj) {
                        return key in obj
                    };
                    obj = Object(obj)
                }
                for (var i = 0, length = keys.length; i < length; i++) {
                    var key = keys[i];
                    var value = obj[key];
                    if (iteratee(value, key, obj)) result[key] = value
                }
                return result
            };
            _.omit = function(obj, iteratee, context) {
                if (_.isFunction(iteratee)) {
                    iteratee = _.negate(iteratee)
                } else {
                    var keys = _.map(flatten(arguments, false, false, 1), String);
                    iteratee = function(value, key) {
                        return !_.contains(keys, key)
                    }
                }
                return _.pick(obj, iteratee, context)
            };
            _.defaults = createAssigner(_.allKeys, true);
            _.create = function(prototype, props) {
                var result = baseCreate(prototype);
                if (props) _.extendOwn(result, props);
                return result
            };
            _.clone = function(obj) {
                if (!_.isObject(obj)) return obj;
                return _.isArray(obj) ? obj.slice() : _.extend({}, obj)
            };
            _.tap = function(obj, interceptor) {
                interceptor(obj);
                return obj
            };
            _.isMatch = function(object, attrs) {
                var keys = _.keys(attrs),
                    length = keys.length;
                if (object == null) return !length;
                var obj = Object(object);
                for (var i = 0; i < length; i++) {
                    var key = keys[i];
                    if (attrs[key] !== obj[key] || !(key in obj)) return false
                }
                return true
            };
            var eq = function(a, b, aStack, bStack) {
                if (a === b) return a !== 0 || 1 / a === 1 / b;
                if (a == null || b == null) return a === b;
                if (a instanceof _) a = a._wrapped;
                if (b instanceof _) b = b._wrapped;
                var className = toString.call(a);
                if (className !== toString.call(b)) return false;
                switch (className) {
                    case "[object RegExp]":
                    case "[object String]":
                        return "" + a === "" + b;
                    case "[object Number]":
                        if (+a !== +a) return +b !== +b;
                        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
                    case "[object Date]":
                    case "[object Boolean]":
                        return +a === +b
                }
                var areArrays = className === "[object Array]";
                if (!areArrays) {
                    if (typeof a != "object" || typeof b != "object") return false;
                    var aCtor = a.constructor,
                        bCtor = b.constructor;
                    if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor) && ("constructor" in a && "constructor" in b)) {
                        return false
                    }
                }
                aStack = aStack || [];
                bStack = bStack || [];
                var length = aStack.length;
                while (length--) {
                    if (aStack[length] === a) return bStack[length] === b
                }
                aStack.push(a);
                bStack.push(b);
                if (areArrays) {
                    length = a.length;
                    if (length !== b.length) return false;
                    while (length--) {
                        if (!eq(a[length], b[length], aStack, bStack)) return false
                    }
                } else {
                    var keys = _.keys(a),
                        key;
                    length = keys.length;
                    if (_.keys(b).length !== length) return false;
                    while (length--) {
                        key = keys[length];
                        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false
                    }
                }
                aStack.pop();
                bStack.pop();
                return true
            };
            _.isEqual = function(a, b) {
                return eq(a, b)
            };
            _.isEmpty = function(obj) {
                if (obj == null) return true;
                if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
                return _.keys(obj).length === 0
            };
            _.isElement = function(obj) {
                return !!(obj && obj.nodeType === 1)
            };
            _.isArray = nativeIsArray || function(obj) {
                return toString.call(obj) === "[object Array]"
            };
            _.isObject = function(obj) {
                var type = typeof obj;
                return type === "function" || type === "object" && !!obj
            };
            _.each(["Arguments", "Function", "String", "Number", "Date", "RegExp", "Error"], function(name) {
                _["is" + name] = function(obj) {
                    return toString.call(obj) === "[object " + name + "]"
                }
            });
            if (!_.isArguments(arguments)) {
                _.isArguments = function(obj) {
                    return _.has(obj, "callee")
                }
            }
            if (typeof /./ != "function" && typeof Int8Array != "object") {
                _.isFunction = function(obj) {
                    return typeof obj == "function" || false
                }
            }
            _.isFinite = function(obj) {
                return isFinite(obj) && !isNaN(parseFloat(obj))
            };
            _.isNaN = function(obj) {
                return _.isNumber(obj) && obj !== +obj
            };
            _.isBoolean = function(obj) {
                return obj === true || obj === false || toString.call(obj) === "[object Boolean]"
            };
            _.isNull = function(obj) {
                return obj === null
            };
            _.isUndefined = function(obj) {
                return obj === void 0
            };
            _.has = function(obj, key) {
                return obj != null && hasOwnProperty.call(obj, key)
            };
            _.noConflict = function() {
                root._ = previousUnderscore;
                return this
            };
            _.identity = function(value) {
                return value
            };
            _.constant = function(value) {
                return function() {
                    return value
                }
            };
            _.noop = function() {};
            _.property = property;
            _.propertyOf = function(obj) {
                return obj == null ? function() {} : function(key) {
                    return obj[key]
                }
            };
            _.matcher = _.matches = function(attrs) {
                attrs = _.extendOwn({}, attrs);
                return function(obj) {
                    return _.isMatch(obj, attrs)
                }
            };
            _.times = function(n, iteratee, context) {
                var accum = Array(Math.max(0, n));
                iteratee = optimizeCb(iteratee, context, 1);
                for (var i = 0; i < n; i++) accum[i] = iteratee(i);
                return accum
            };
            _.random = function(min, max) {
                if (max == null) {
                    max = min;
                    min = 0
                }
                return min + Math.floor(Math.random() * (max - min + 1))
            };
            _.now = Date.now || function() {
                return (new Date).getTime()
            };
            var escapeMap = {
                "&": "&amp;",
                "<": "&lt;",
                ">": "&gt;",
                '"': "&quot;",
                "'": "&#x27;",
                "`": "&#x60;"
            };
            var unescapeMap = _.invert(escapeMap);
            var createEscaper = function(map) {
                var escaper = function(match) {
                    return map[match]
                };
                var source = "(?:" + _.keys(map).join("|") + ")";
                var testRegexp = RegExp(source);
                var replaceRegexp = RegExp(source, "g");
                return function(string) {
                    string = string == null ? "" : "" + string;
                    return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string
                }
            };
            _.escape = createEscaper(escapeMap);
            _.unescape = createEscaper(unescapeMap);
            _.result = function(object, property, fallback) {
                var value = object == null ? void 0 : object[property];
                if (value === void 0) {
                    value = fallback
                }
                return _.isFunction(value) ? value.call(object) : value
            };
            var idCounter = 0;
            _.uniqueId = function(prefix) {
                var id = ++idCounter + "";
                return prefix ? prefix + id : id
            };
            _.templateSettings = {
                evaluate: /<%([\s\S]+?)%>/g,
                interpolate: /<%=([\s\S]+?)%>/g,
                escape: /<%-([\s\S]+?)%>/g
            };
            var noMatch = /(.)^/;
            var escapes = {
                "'": "'",
                "\\": "\\",
                "\r": "r",
                "\n": "n",
                "\u2028": "u2028",
                "\u2029": "u2029"
            };
            var escaper = /\\|'|\r|\n|\u2028|\u2029/g;
            var escapeChar = function(match) {
                return "\\" + escapes[match]
            };
            _.template = function(text, settings, oldSettings) {
                if (!settings && oldSettings) settings = oldSettings;
                settings = _.defaults({}, settings, _.templateSettings);
                var matcher = RegExp([(settings.escape || noMatch).source, (settings.interpolate || noMatch).source, (settings.evaluate || noMatch).source].join("|") + "|$", "g");
                var index = 0;
                var source = "__p+='";
                text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
                    source += text.slice(index, offset).replace(escaper, escapeChar);
                    index = offset + match.length;
                    if (escape) {
                        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'"
                    } else if (interpolate) {
                        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'"
                    } else if (evaluate) {
                        source += "';\n" + evaluate + "\n__p+='"
                    }
                    return match
                });
                source += "';\n";
                if (!settings.variable) source = "with(obj||{}){\n" + source + "}\n";
                source = "var __t,__p='',__j=Array.prototype.join," + "print=function(){__p+=__j.call(arguments,'');};\n" + source + "return __p;\n";
                try {
                    var render = new Function(settings.variable || "obj", "_", source)
                } catch (e) {
                    e.source = source;
                    throw e
                }
                var template = function(data) {
                    return render.call(this, data, _)
                };
                var argument = settings.variable || "obj";
                template.source = "function(" + argument + "){\n" + source + "}";
                return template
            };
            _.chain = function(obj) {
                var instance = _(obj);
                instance._chain = true;
                return instance
            };
            var result = function(instance, obj) {
                return instance._chain ? _(obj).chain() : obj
            };
            _.mixin = function(obj) {
                _.each(_.functions(obj), function(name) {
                    var func = _[name] = obj[name];
                    _.prototype[name] = function() {
                        var args = [this._wrapped];
                        push.apply(args, arguments);
                        return result(this, func.apply(_, args))
                    }
                })
            };
            _.mixin(_);
            _.each(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], function(name) {
                var method = ArrayProto[name];
                _.prototype[name] = function() {
                    var obj = this._wrapped;
                    method.apply(obj, arguments);
                    if ((name === "shift" || name === "splice") && obj.length === 0) delete obj[0];
                    return result(this, obj)
                }
            });
            _.each(["concat", "join", "slice"], function(name) {
                var method = ArrayProto[name];
                _.prototype[name] = function() {
                    return result(this, method.apply(this._wrapped, arguments))
                }
            });
            _.prototype.value = function() {
                return this._wrapped
            };
            _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;
            _.prototype.toString = function() {
                return "" + this._wrapped
            };
            if (typeof define === "function" && define.amd) {
                define("underscore", [], function() {
                    return _
                })
            }
        }).call(this)
    }, {}],
    7: [function(require, module, exports) {
        (function(factory) {
            if (typeof require === "function" && typeof module !== "undefined" && module.exports) {
                module.exports = factory(require("underscore"))
            } else if (typeof define === "function") {
                define(["underscore"], factory)
            } else {
                this.Cocktail = factory(_)
            }
        })(function(_) {
            var Cocktail = {};
            Cocktail.mixins = {};
            Cocktail.mixin = function mixin(klass) {
                var mixins = _.chain(arguments).toArray().rest().flatten().value();
                var obj = klass.prototype || klass;
                var collisions = {};
                _.each(mixins, function(mixin) {
                    if (_.isString(mixin)) {
                        mixin = Cocktail.mixins[mixin]
                    }
                    _.each(mixin, function(value, key) {
                        if (_.isFunction(value)) {
                            if (obj[key] === value) return;
                            if (obj[key]) {
                                collisions[key] = collisions.hasOwnProperty(key) ? collisions[key] : [obj[key]];
                                collisions[key].push(value)
                            }
                            obj[key] = value
                        } else if (_.isArray(value)) {
                            obj[key] = _.union(value, obj[key] || [])
                        } else if (_.isObject(value)) {
                            obj[key] = _.extend({}, value, obj[key] || {})
                        } else if (!(key in obj)) {
                            obj[key] = value
                        }
                    })
                });
                _.each(collisions, function(propertyValues, propertyName) {
                    obj[propertyName] = function() {
                        var that = this,
                            args = arguments,
                            returnValue;
                        _.each(propertyValues, function(value) {
                            var returnedValue = _.isFunction(value) ? value.apply(that, args) : value;
                            returnValue = typeof returnedValue === "undefined" ? returnValue : returnedValue
                        });
                        return returnValue
                    }
                });
                return klass
            };
            var originalExtend;
            Cocktail.patch = function patch(Backbone) {
                originalExtend = Backbone.Model.extend;
                var extend = function(protoProps, classProps) {
                    var klass = originalExtend.call(this, protoProps, classProps);
                    var mixins = klass.prototype.mixins;
                    if (mixins && klass.prototype.hasOwnProperty("mixins")) {
                        Cocktail.mixin(klass, mixins)
                    }
                    return klass
                };
                _.each([Backbone.Model, Backbone.Collection, Backbone.Router, Backbone.View], function(klass) {
                    klass.mixin = function mixin() {
                        Cocktail.mixin(this, _.toArray(arguments))
                    };
                    klass.extend = extend
                })
            };
            Cocktail.unpatch = function unpatch(Backbone) {
                _.each([Backbone.Model, Backbone.Collection, Backbone.Router, Backbone.View], function(klass) {
                    klass.mixin = undefined;
                    klass.extend = originalExtend
                })
            };
            return Cocktail
        })
    }, {
        underscore: 8
    }],
    8: [function(require, module, exports) {
        (function() {
            var root = this;
            var previousUnderscore = root._;
            var breaker = {};
            var ArrayProto = Array.prototype,
                ObjProto = Object.prototype,
                FuncProto = Function.prototype;
            var push = ArrayProto.push,
                slice = ArrayProto.slice,
                concat = ArrayProto.concat,
                toString = ObjProto.toString,
                hasOwnProperty = ObjProto.hasOwnProperty;
            var nativeForEach = ArrayProto.forEach,
                nativeMap = ArrayProto.map,
                nativeReduce = ArrayProto.reduce,
                nativeReduceRight = ArrayProto.reduceRight,
                nativeFilter = ArrayProto.filter,
                nativeEvery = ArrayProto.every,
                nativeSome = ArrayProto.some,
                nativeIndexOf = ArrayProto.indexOf,
                nativeLastIndexOf = ArrayProto.lastIndexOf,
                nativeIsArray = Array.isArray,
                nativeKeys = Object.keys,
                nativeBind = FuncProto.bind;
            var _ = function(obj) {
                if (obj instanceof _) return obj;
                if (!(this instanceof _)) return new _(obj);
                this._wrapped = obj
            };
            if (typeof exports !== "undefined") {
                if (typeof module !== "undefined" && module.exports) {
                    exports = module.exports = _
                }
                exports._ = _
            } else {
                root._ = _
            }
            _.VERSION = "1.5.2";
            var each = _.each = _.forEach = function(obj, iterator, context) {
                if (obj == null) return;
                if (nativeForEach && obj.forEach === nativeForEach) {
                    obj.forEach(iterator, context)
                } else if (obj.length === +obj.length) {
                    for (var i = 0, length = obj.length; i < length; i++) {
                        if (iterator.call(context, obj[i], i, obj) === breaker) return
                    }
                } else {
                    var keys = _.keys(obj);
                    for (var i = 0, length = keys.length; i < length; i++) {
                        if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return
                    }
                }
            };
            _.map = _.collect = function(obj, iterator, context) {
                var results = [];
                if (obj == null) return results;
                if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
                each(obj, function(value, index, list) {
                    results.push(iterator.call(context, value, index, list))
                });
                return results
            };
            var reduceError = "Reduce of empty array with no initial value";
            _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
                var initial = arguments.length > 2;
                if (obj == null) obj = [];
                if (nativeReduce && obj.reduce === nativeReduce) {
                    if (context) iterator = _.bind(iterator, context);
                    return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator)
                }
                each(obj, function(value, index, list) {
                    if (!initial) {
                        memo = value;
                        initial = true
                    } else {
                        memo = iterator.call(context, memo, value, index, list)
                    }
                });
                if (!initial) throw new TypeError(reduceError);
                return memo
            };
            _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
                var initial = arguments.length > 2;
                if (obj == null) obj = [];
                if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
                    if (context) iterator = _.bind(iterator, context);
                    return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator)
                }
                var length = obj.length;
                if (length !== +length) {
                    var keys = _.keys(obj);
                    length = keys.length
                }
                each(obj, function(value, index, list) {
                    index = keys ? keys[--length] : --length;
                    if (!initial) {
                        memo = obj[index];
                        initial = true
                    } else {
                        memo = iterator.call(context, memo, obj[index], index, list)
                    }
                });
                if (!initial) throw new TypeError(reduceError);
                return memo
            };
            _.find = _.detect = function(obj, iterator, context) {
                var result;
                any(obj, function(value, index, list) {
                    if (iterator.call(context, value, index, list)) {
                        result = value;
                        return true
                    }
                });
                return result
            };
            _.filter = _.select = function(obj, iterator, context) {
                var results = [];
                if (obj == null) return results;
                if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);
                each(obj, function(value, index, list) {
                    if (iterator.call(context, value, index, list)) results.push(value)
                });
                return results
            };
            _.reject = function(obj, iterator, context) {
                return _.filter(obj, function(value, index, list) {
                    return !iterator.call(context, value, index, list)
                }, context)
            };
            _.every = _.all = function(obj, iterator, context) {
                iterator || (iterator = _.identity);
                var result = true;
                if (obj == null) return result;
                if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);
                each(obj, function(value, index, list) {
                    if (!(result = result && iterator.call(context, value, index, list))) return breaker
                });
                return !!result
            };
            var any = _.some = _.any = function(obj, iterator, context) {
                iterator || (iterator = _.identity);
                var result = false;
                if (obj == null) return result;
                if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);
                each(obj, function(value, index, list) {
                    if (result || (result = iterator.call(context, value, index, list))) return breaker
                });
                return !!result
            };
            _.contains = _.include = function(obj, target) {
                if (obj == null) return false;
                if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
                return any(obj, function(value) {
                    return value === target
                })
            };
            _.invoke = function(obj, method) {
                var args = slice.call(arguments, 2);
                var isFunc = _.isFunction(method);
                return _.map(obj, function(value) {
                    return (isFunc ? method : value[method]).apply(value, args)
                })
            };
            _.pluck = function(obj, key) {
                return _.map(obj, function(value) {
                    return value[key]
                })
            };
            _.where = function(obj, attrs, first) {
                if (_.isEmpty(attrs)) return first ? void 0 : [];
                return _[first ? "find" : "filter"](obj, function(value) {
                    for (var key in attrs) {
                        if (attrs[key] !== value[key]) return false
                    }
                    return true
                })
            };
            _.findWhere = function(obj, attrs) {
                return _.where(obj, attrs, true)
            };
            _.max = function(obj, iterator, context) {
                if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
                    return Math.max.apply(Math, obj)
                }
                if (!iterator && _.isEmpty(obj)) return -Infinity;
                var result = {
                    computed: -Infinity,
                    value: -Infinity
                };
                each(obj, function(value, index, list) {
                    var computed = iterator ? iterator.call(context, value, index, list) : value;
                    computed > result.computed && (result = {
                        value: value,
                        computed: computed
                    })
                });
                return result.value
            };
            _.min = function(obj, iterator, context) {
                if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
                    return Math.min.apply(Math, obj)
                }
                if (!iterator && _.isEmpty(obj)) return Infinity;
                var result = {
                    computed: Infinity,
                    value: Infinity
                };
                each(obj, function(value, index, list) {
                    var computed = iterator ? iterator.call(context, value, index, list) : value;
                    computed < result.computed && (result = {
                        value: value,
                        computed: computed
                    })
                });
                return result.value
            };
            _.shuffle = function(obj) {
                var rand;
                var index = 0;
                var shuffled = [];
                each(obj, function(value) {
                    rand = _.random(index++);
                    shuffled[index - 1] = shuffled[rand];
                    shuffled[rand] = value
                });
                return shuffled
            };
            _.sample = function(obj, n, guard) {
                if (arguments.length < 2 || guard) {
                    return obj[_.random(obj.length - 1)]
                }
                return _.shuffle(obj).slice(0, Math.max(0, n))
            };
            var lookupIterator = function(value) {
                return _.isFunction(value) ? value : function(obj) {
                    return obj[value]
                }
            };
            _.sortBy = function(obj, value, context) {
                var iterator = lookupIterator(value);
                return _.pluck(_.map(obj, function(value, index, list) {
                    return {
                        value: value,
                        index: index,
                        criteria: iterator.call(context, value, index, list)
                    }
                }).sort(function(left, right) {
                    var a = left.criteria;
                    var b = right.criteria;
                    if (a !== b) {
                        if (a > b || a === void 0) return 1;
                        if (a < b || b === void 0) return -1
                    }
                    return left.index - right.index
                }), "value")
            };
            var group = function(behavior) {
                return function(obj, value, context) {
                    var result = {};
                    var iterator = value == null ? _.identity : lookupIterator(value);
                    each(obj, function(value, index) {
                        var key = iterator.call(context, value, index, obj);
                        behavior(result, key, value)
                    });
                    return result
                }
            };
            _.groupBy = group(function(result, key, value) {
                (_.has(result, key) ? result[key] : result[key] = []).push(value)
            });
            _.indexBy = group(function(result, key, value) {
                result[key] = value
            });
            _.countBy = group(function(result, key) {
                _.has(result, key) ? result[key]++ : result[key] = 1
            });
            _.sortedIndex = function(array, obj, iterator, context) {
                iterator = iterator == null ? _.identity : lookupIterator(iterator);
                var value = iterator.call(context, obj);
                var low = 0,
                    high = array.length;
                while (low < high) {
                    var mid = low + high >>> 1;
                    iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid
                }
                return low
            };
            _.toArray = function(obj) {
                if (!obj) return [];
                if (_.isArray(obj)) return slice.call(obj);
                if (obj.length === +obj.length) return _.map(obj, _.identity);
                return _.values(obj)
            };
            _.size = function(obj) {
                if (obj == null) return 0;
                return obj.length === +obj.length ? obj.length : _.keys(obj).length
            };
            _.first = _.head = _.take = function(array, n, guard) {
                if (array == null) return void 0;
                return n == null || guard ? array[0] : slice.call(array, 0, n)
            };
            _.initial = function(array, n, guard) {
                return slice.call(array, 0, array.length - (n == null || guard ? 1 : n))
            };
            _.last = function(array, n, guard) {
                if (array == null) return void 0;
                if (n == null || guard) {
                    return array[array.length - 1]
                } else {
                    return slice.call(array, Math.max(array.length - n, 0))
                }
            };
            _.rest = _.tail = _.drop = function(array, n, guard) {
                return slice.call(array, n == null || guard ? 1 : n)
            };
            _.compact = function(array) {
                return _.filter(array, _.identity)
            };
            var flatten = function(input, shallow, output) {
                if (shallow && _.every(input, _.isArray)) {
                    return concat.apply(output, input)
                }
                each(input, function(value) {
                    if (_.isArray(value) || _.isArguments(value)) {
                        shallow ? push.apply(output, value) : flatten(value, shallow, output)
                    } else {
                        output.push(value)
                    }
                });
                return output
            };
            _.flatten = function(array, shallow) {
                return flatten(array, shallow, [])
            };
            _.without = function(array) {
                return _.difference(array, slice.call(arguments, 1))
            };
            _.uniq = _.unique = function(array, isSorted, iterator, context) {
                if (_.isFunction(isSorted)) {
                    context = iterator;
                    iterator = isSorted;
                    isSorted = false
                }
                var initial = iterator ? _.map(array, iterator, context) : array;
                var results = [];
                var seen = [];
                each(initial, function(value, index) {
                    if (isSorted ? !index || seen[seen.length - 1] !== value : !_.contains(seen, value)) {
                        seen.push(value);
                        results.push(array[index])
                    }
                });
                return results
            };
            _.union = function() {
                return _.uniq(_.flatten(arguments, true))
            };
            _.intersection = function(array) {
                var rest = slice.call(arguments, 1);
                return _.filter(_.uniq(array), function(item) {
                    return _.every(rest, function(other) {
                        return _.indexOf(other, item) >= 0
                    })
                })
            };
            _.difference = function(array) {
                var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
                return _.filter(array, function(value) {
                    return !_.contains(rest, value)
                })
            };
            _.zip = function() {
                var length = _.max(_.pluck(arguments, "length").concat(0));
                var results = new Array(length);
                for (var i = 0; i < length; i++) {
                    results[i] = _.pluck(arguments, "" + i)
                }
                return results
            };
            _.object = function(list, values) {
                if (list == null) return {};
                var result = {};
                for (var i = 0, length = list.length; i < length; i++) {
                    if (values) {
                        result[list[i]] = values[i]
                    } else {
                        result[list[i][0]] = list[i][1]
                    }
                }
                return result
            };
            _.indexOf = function(array, item, isSorted) {
                if (array == null) return -1;
                var i = 0,
                    length = array.length;
                if (isSorted) {
                    if (typeof isSorted == "number") {
                        i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted
                    } else {
                        i = _.sortedIndex(array, item);
                        return array[i] === item ? i : -1
                    }
                }
                if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
                for (; i < length; i++)
                    if (array[i] === item) return i;
                return -1
            };
            _.lastIndexOf = function(array, item, from) {
                if (array == null) return -1;
                var hasIndex = from != null;
                if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
                    return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item)
                }
                var i = hasIndex ? from : array.length;
                while (i--)
                    if (array[i] === item) return i;
                return -1
            };
            _.range = function(start, stop, step) {
                if (arguments.length <= 1) {
                    stop = start || 0;
                    start = 0
                }
                step = arguments[2] || 1;
                var length = Math.max(Math.ceil((stop - start) / step), 0);
                var idx = 0;
                var range = new Array(length);
                while (idx < length) {
                    range[idx++] = start;
                    start += step
                }
                return range
            };
            var ctor = function() {};
            _.bind = function(func, context) {
                var args, bound;
                if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
                if (!_.isFunction(func)) throw new TypeError;
                args = slice.call(arguments, 2);
                return bound = function() {
                    if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
                    ctor.prototype = func.prototype;
                    var self = new ctor;
                    ctor.prototype = null;
                    var result = func.apply(self, args.concat(slice.call(arguments)));
                    if (Object(result) === result) return result;
                    return self
                }
            };
            _.partial = function(func) {
                var args = slice.call(arguments, 1);
                return function() {
                    return func.apply(this, args.concat(slice.call(arguments)))
                }
            };
            _.bindAll = function(obj) {
                var funcs = slice.call(arguments, 1);
                if (funcs.length === 0) throw new Error("bindAll must be passed function names");
                each(funcs, function(f) {
                    obj[f] = _.bind(obj[f], obj)
                });
                return obj
            };
            _.memoize = function(func, hasher) {
                var memo = {};
                hasher || (hasher = _.identity);
                return function() {
                    var key = hasher.apply(this, arguments);
                    return _.has(memo, key) ? memo[key] : memo[key] = func.apply(this, arguments)
                }
            };
            _.delay = function(func, wait) {
                var args = slice.call(arguments, 2);
                return setTimeout(function() {
                    return func.apply(null, args)
                }, wait)
            };
            _.defer = function(func) {
                return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)))
            };
            _.throttle = function(func, wait, options) {
                var context, args, result;
                var timeout = null;
                var previous = 0;
                options || (options = {});
                var later = function() {
                    previous = options.leading === false ? 0 : new Date;
                    timeout = null;
                    result = func.apply(context, args)
                };
                return function() {
                    var now = new Date;
                    if (!previous && options.leading === false) previous = now;
                    var remaining = wait - (now - previous);
                    context = this;
                    args = arguments;
                    if (remaining <= 0) {
                        clearTimeout(timeout);
                        timeout = null;
                        previous = now;
                        result = func.apply(context, args)
                    } else if (!timeout && options.trailing !== false) {
                        timeout = setTimeout(later, remaining)
                    }
                    return result
                }
            };
            _.debounce = function(func, wait, immediate) {
                var timeout, args, context, timestamp, result;
                return function() {
                    context = this;
                    args = arguments;
                    timestamp = new Date;
                    var later = function() {
                        var last = new Date - timestamp;
                        if (last < wait) {
                            timeout = setTimeout(later, wait - last)
                        } else {
                            timeout = null;
                            if (!immediate) result = func.apply(context, args)
                        }
                    };
                    var callNow = immediate && !timeout;
                    if (!timeout) {
                        timeout = setTimeout(later, wait)
                    }
                    if (callNow) result = func.apply(context, args);
                    return result
                }
            };
            _.once = function(func) {
                var ran = false,
                    memo;
                return function() {
                    if (ran) return memo;
                    ran = true;
                    memo = func.apply(this, arguments);
                    func = null;
                    return memo
                }
            };
            _.wrap = function(func, wrapper) {
                return function() {
                    var args = [func];
                    push.apply(args, arguments);
                    return wrapper.apply(this, args)
                }
            };
            _.compose = function() {
                var funcs = arguments;
                return function() {
                    var args = arguments;
                    for (var i = funcs.length - 1; i >= 0; i--) {
                        args = [funcs[i].apply(this, args)]
                    }
                    return args[0]
                }
            };
            _.after = function(times, func) {
                return function() {
                    if (--times < 1) {
                        return func.apply(this, arguments)
                    }
                }
            };
            _.keys = nativeKeys || function(obj) {
                if (obj !== Object(obj)) throw new TypeError("Invalid object");
                var keys = [];
                for (var key in obj)
                    if (_.has(obj, key)) keys.push(key);
                return keys
            };
            _.values = function(obj) {
                var keys = _.keys(obj);
                var length = keys.length;
                var values = new Array(length);
                for (var i = 0; i < length; i++) {
                    values[i] = obj[keys[i]]
                }
                return values
            };
            _.pairs = function(obj) {
                var keys = _.keys(obj);
                var length = keys.length;
                var pairs = new Array(length);
                for (var i = 0; i < length; i++) {
                    pairs[i] = [keys[i], obj[keys[i]]]
                }
                return pairs
            };
            _.invert = function(obj) {
                var result = {};
                var keys = _.keys(obj);
                for (var i = 0, length = keys.length; i < length; i++) {
                    result[obj[keys[i]]] = keys[i]
                }
                return result
            };
            _.functions = _.methods = function(obj) {
                var names = [];
                for (var key in obj) {
                    if (_.isFunction(obj[key])) names.push(key)
                }
                return names.sort()
            };
            _.extend = function(obj) {
                each(slice.call(arguments, 1), function(source) {
                    if (source) {
                        for (var prop in source) {
                            obj[prop] = source[prop]
                        }
                    }
                });
                return obj
            };
            _.pick = function(obj) {
                var copy = {};
                var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
                each(keys, function(key) {
                    if (key in obj) copy[key] = obj[key]
                });
                return copy
            };
            _.omit = function(obj) {
                var copy = {};
                var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
                for (var key in obj) {
                    if (!_.contains(keys, key)) copy[key] = obj[key]
                }
                return copy
            };
            _.defaults = function(obj) {
                each(slice.call(arguments, 1), function(source) {
                    if (source) {
                        for (var prop in source) {
                            if (obj[prop] === void 0) obj[prop] = source[prop]
                        }
                    }
                });
                return obj
            };
            _.clone = function(obj) {
                if (!_.isObject(obj)) return obj;
                return _.isArray(obj) ? obj.slice() : _.extend({}, obj)
            };
            _.tap = function(obj, interceptor) {
                interceptor(obj);
                return obj
            };
            var eq = function(a, b, aStack, bStack) {
                if (a === b) return a !== 0 || 1 / a == 1 / b;
                if (a == null || b == null) return a === b;
                if (a instanceof _) a = a._wrapped;
                if (b instanceof _) b = b._wrapped;
                var className = toString.call(a);
                if (className != toString.call(b)) return false;
                switch (className) {
                    case "[object String]":
                        return a == String(b);
                    case "[object Number]":
                        return a != +a ? b != +b : a == 0 ? 1 / a == 1 / b : a == +b;
                    case "[object Date]":
                    case "[object Boolean]":
                        return +a == +b;
                    case "[object RegExp]":
                        return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase
                }
                if (typeof a != "object" || typeof b != "object") return false;
                var length = aStack.length;
                while (length--) {
                    if (aStack[length] == a) return bStack[length] == b
                }
                var aCtor = a.constructor,
                    bCtor = b.constructor;
                if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor)) {
                    return false
                }
                aStack.push(a);
                bStack.push(b);
                var size = 0,
                    result = true;
                if (className == "[object Array]") {
                    size = a.length;
                    result = size == b.length;
                    if (result) {
                        while (size--) {
                            if (!(result = eq(a[size], b[size], aStack, bStack))) break
                        }
                    }
                } else {
                    for (var key in a) {
                        if (_.has(a, key)) {
                            size++;
                            if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break
                        }
                    }
                    if (result) {
                        for (key in b) {
                            if (_.has(b, key) && !size--) break
                        }
                        result = !size
                    }
                }
                aStack.pop();
                bStack.pop();
                return result
            };
            _.isEqual = function(a, b) {
                return eq(a, b, [], [])
            };
            _.isEmpty = function(obj) {
                if (obj == null) return true;
                if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
                for (var key in obj)
                    if (_.has(obj, key)) return false;
                return true
            };
            _.isElement = function(obj) {
                return !!(obj && obj.nodeType === 1)
            };
            _.isArray = nativeIsArray || function(obj) {
                return toString.call(obj) == "[object Array]"
            };
            _.isObject = function(obj) {
                return obj === Object(obj)
            };
            each(["Arguments", "Function", "String", "Number", "Date", "RegExp"], function(name) {
                _["is" + name] = function(obj) {
                    return toString.call(obj) == "[object " + name + "]"
                }
            });
            if (!_.isArguments(arguments)) {
                _.isArguments = function(obj) {
                    return !!(obj && _.has(obj, "callee"))
                }
            }
            if (typeof /./ !== "function") {
                _.isFunction = function(obj) {
                    return typeof obj === "function"
                }
            }
            _.isFinite = function(obj) {
                return isFinite(obj) && !isNaN(parseFloat(obj))
            };
            _.isNaN = function(obj) {
                return _.isNumber(obj) && obj != +obj
            };
            _.isBoolean = function(obj) {
                return obj === true || obj === false || toString.call(obj) == "[object Boolean]"
            };
            _.isNull = function(obj) {
                return obj === null
            };
            _.isUndefined = function(obj) {
                return obj === void 0
            };
            _.has = function(obj, key) {
                return hasOwnProperty.call(obj, key)
            };
            _.noConflict = function() {
                root._ = previousUnderscore;
                return this
            };
            _.identity = function(value) {
                return value
            };
            _.times = function(n, iterator, context) {
                var accum = Array(Math.max(0, n));
                for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
                return accum
            };
            _.random = function(min, max) {
                if (max == null) {
                    max = min;
                    min = 0
                }
                return min + Math.floor(Math.random() * (max - min + 1))
            };
            var entityMap = {
                escape: {
                    "&": "&amp;",
                    "<": "&lt;",
                    ">": "&gt;",
                    '"': "&quot;",
                    "'": "&#x27;"
                }
            };
            entityMap.unescape = _.invert(entityMap.escape);
            var entityRegexes = {
                escape: new RegExp("[" + _.keys(entityMap.escape).join("") + "]", "g"),
                unescape: new RegExp("(" + _.keys(entityMap.unescape).join("|") + ")", "g")
            };
            _.each(["escape", "unescape"], function(method) {
                _[method] = function(string) {
                    if (string == null) return "";
                    return ("" + string).replace(entityRegexes[method], function(match) {
                        return entityMap[method][match]
                    })
                }
            });
            _.result = function(object, property) {
                if (object == null) return void 0;
                var value = object[property];
                return _.isFunction(value) ? value.call(object) : value
            };
            _.mixin = function(obj) {
                each(_.functions(obj), function(name) {
                    var func = _[name] = obj[name];
                    _.prototype[name] = function() {
                        var args = [this._wrapped];
                        push.apply(args, arguments);
                        return result.call(this, func.apply(_, args))
                    }
                })
            };
            var idCounter = 0;
            _.uniqueId = function(prefix) {
                var id = ++idCounter + "";
                return prefix ? prefix + id : id
            };
            _.templateSettings = {
                evaluate: /<%([\s\S]+?)%>/g,
                interpolate: /<%=([\s\S]+?)%>/g,
                escape: /<%-([\s\S]+?)%>/g
            };
            var noMatch = /(.)^/;
            var escapes = {
                "'": "'",
                "\\": "\\",
                "\r": "r",
                "\n": "n",
                "\t": "t",
                "\u2028": "u2028",
                "\u2029": "u2029"
            };
            var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;
            _.template = function(text, data, settings) {
                var render;
                settings = _.defaults({}, settings, _.templateSettings);
                var matcher = new RegExp([(settings.escape || noMatch).source, (settings.interpolate || noMatch).source, (settings.evaluate || noMatch).source].join("|") + "|$", "g");
                var index = 0;
                var source = "__p+='";
                text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
                    source += text.slice(index, offset).replace(escaper, function(match) {
                        return "\\" + escapes[match]
                    });
                    if (escape) {
                        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'"
                    }
                    if (interpolate) {
                        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'"
                    }
                    if (evaluate) {
                        source += "';\n" + evaluate + "\n__p+='"
                    }
                    index = offset + match.length;
                    return match
                });
                source += "';\n";
                if (!settings.variable) source = "with(obj||{}){\n" + source + "}\n";
                source = "var __t,__p='',__j=Array.prototype.join," + "print=function(){__p+=__j.call(arguments,'');};\n" + source + "return __p;\n";
                try {
                    render = new Function(settings.variable || "obj", "_", source)
                } catch (e) {
                    e.source = source;
                    throw e
                }
                if (data) return render(data, _);
                var template = function(data) {
                    return render.call(this, data, _)
                };
                template.source = "function(" + (settings.variable || "obj") + "){\n" + source + "}";
                return template
            };
            _.chain = function(obj) {
                return _(obj).chain()
            };
            var result = function(obj) {
                return this._chain ? _(obj).chain() : obj
            };
            _.mixin(_);
            each(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], function(name) {
                var method = ArrayProto[name];
                _.prototype[name] = function() {
                    var obj = this._wrapped;
                    method.apply(obj, arguments);
                    if ((name == "shift" || name == "splice") && obj.length === 0) delete obj[0];
                    return result.call(this, obj)
                }
            });
            each(["concat", "join", "slice"], function(name) {
                var method = ArrayProto[name];
                _.prototype[name] = function() {
                    return result.call(this, method.apply(this._wrapped, arguments))
                }
            });
            _.extend(_.prototype, {
                chain: function() {
                    this._chain = true;
                    return this
                },
                value: function() {
                    return this._wrapped
                }
            })
        }).call(this)
    }, {}],
    9: [function(require, module, exports) {
        (function(root, factory) {
            if (typeof define === "function" && define.amd) {
                define(["backbone", "underscore", "backbone.wreqr", "backbone.babysitter"], function(Backbone, _) {
                    return root.Marionette = root.Mn = factory(root, Backbone, _)
                })
            } else if (typeof exports !== "undefined") {
                var Backbone = require("backbone");
                var _ = require("underscore");
                var Wreqr = require("backbone.wreqr");
                var BabySitter = require("backbone.babysitter");
                module.exports = factory(root, Backbone, _)
            } else {
                root.Marionette = root.Mn = factory(root, root.Backbone, root._)
            }
        })(this, function(root, Backbone, _) {
            "use strict";
            var previousMarionette = root.Marionette;
            var previousMn = root.Mn;
            var Marionette = Backbone.Marionette = {};
            Marionette.VERSION = "2.4.3";
            Marionette.noConflict = function() {
                root.Marionette = previousMarionette;
                root.Mn = previousMn;
                return this
            };
            Marionette.Deferred = Backbone.$.Deferred;
            Marionette.FEATURES = {};
            Marionette.isEnabled = function(name) {
                return !!Marionette.FEATURES[name]
            };
            Marionette.extend = Backbone.Model.extend;
            Marionette.isNodeAttached = function(el) {
                return Backbone.$.contains(document.documentElement, el)
            };
            Marionette.mergeOptions = function(options, keys) {
                if (!options) {
                    return
                }
                _.extend(this, _.pick(options, keys))
            };
            Marionette.getOption = function(target, optionName) {
                if (!target || !optionName) {
                    return
                }
                if (target.options && target.options[optionName] !== undefined) {
                    return target.options[optionName]
                } else {
                    return target[optionName]
                }
            };
            Marionette.proxyGetOption = function(optionName) {
                return Marionette.getOption(this, optionName)
            };
            Marionette._getValue = function(value, context, params) {
                if (_.isFunction(value)) {
                    value = params ? value.apply(context, params) : value.call(context)
                }
                return value
            };
            Marionette.normalizeMethods = function(hash) {
                return _.reduce(hash, function(normalizedHash, method, name) {
                    if (!_.isFunction(method)) {
                        method = this[method]
                    }
                    if (method) {
                        normalizedHash[name] = method
                    }
                    return normalizedHash
                }, {}, this)
            };
            Marionette.normalizeUIString = function(uiString, ui) {
                return uiString.replace(/@ui\.[a-zA-Z_$0-9]*/g, function(r) {
                    return ui[r.slice(4)]
                })
            };
            Marionette.normalizeUIKeys = function(hash, ui) {
                return _.reduce(hash, function(memo, val, key) {
                    var normalizedKey = Marionette.normalizeUIString(key, ui);
                    memo[normalizedKey] = val;
                    return memo
                }, {})
            };
            Marionette.normalizeUIValues = function(hash, ui, properties) {
                _.each(hash, function(val, key) {
                    if (_.isString(val)) {
                        hash[key] = Marionette.normalizeUIString(val, ui)
                    } else if (_.isObject(val) && _.isArray(properties)) {
                        _.extend(val, Marionette.normalizeUIValues(_.pick(val, properties), ui));
                        _.each(properties, function(property) {
                            var propertyVal = val[property];
                            if (_.isString(propertyVal)) {
                                val[property] = Marionette.normalizeUIString(propertyVal, ui)
                            }
                        })
                    }
                });
                return hash
            };
            Marionette.actAsCollection = function(object, listProperty) {
                var methods = ["forEach", "each", "map", "find", "detect", "filter", "select", "reject", "every", "all", "some", "any", "include", "contains", "invoke", "toArray", "first", "initial", "rest", "last", "without", "isEmpty", "pluck"];
                _.each(methods, function(method) {
                    object[method] = function() {
                        var list = _.values(_.result(this, listProperty));
                        var args = [list].concat(_.toArray(arguments));
                        return _[method].apply(_, args)
                    }
                })
            };
            var deprecate = Marionette.deprecate = function(message, test) {
                if (_.isObject(message)) {
                    message = message.prev + " is going to be removed in the future. " + "Please use " + message.next + " instead." + (message.url ? " See: " + message.url : "")
                }
                if ((test === undefined || !test) && !deprecate._cache[message]) {
                    deprecate._warn("Deprecation warning: " + message);
                    deprecate._cache[message] = true
                }
            };
            deprecate._warn = typeof console !== "undefined" && (console.warn || console.log) || function() {};
            deprecate._cache = {};
            Marionette._triggerMethod = function() {
                var splitter = /(^|:)(\w)/gi;

                function getEventName(match, prefix, eventName) {
                    return eventName.toUpperCase()
                }
                return function(context, event, args) {
                    var noEventArg = arguments.length < 3;
                    if (noEventArg) {
                        args = event;
                        event = args[0]
                    }
                    var methodName = "on" + event.replace(splitter, getEventName);
                    var method = context[methodName];
                    var result;
                    if (_.isFunction(method)) {
                        result = method.apply(context, noEventArg ? _.rest(args) : args)
                    }
                    if (_.isFunction(context.trigger)) {
                        if (noEventArg + args.length > 1) {
                            context.trigger.apply(context, noEventArg ? args : [event].concat(_.drop(args, 0)))
                        } else {
                            context.trigger(event)
                        }
                    }
                    return result
                }
            }();
            Marionette.triggerMethod = function(event) {
                return Marionette._triggerMethod(this, arguments)
            };
            Marionette.triggerMethodOn = function(context) {
                var fnc = _.isFunction(context.triggerMethod) ? context.triggerMethod : Marionette.triggerMethod;
                return fnc.apply(context, _.rest(arguments))
            };
            Marionette.MonitorDOMRefresh = function(view) {
                if (view._isDomRefreshMonitored) {
                    return
                }
                view._isDomRefreshMonitored = true;

                function handleShow() {
                    view._isShown = true;
                    triggerDOMRefresh()
                }

                function handleRender() {
                    view._isRendered = true;
                    triggerDOMRefresh()
                }

                function triggerDOMRefresh() {
                    if (view._isShown && view._isRendered && Marionette.isNodeAttached(view.el)) {
                        Marionette.triggerMethodOn(view, "dom:refresh", view)
                    }
                }
                view.on({
                    show: handleShow,
                    render: handleRender
                })
            };
            (function(Marionette) {
                "use strict";

                function bindFromStrings(target, entity, evt, methods) {
                    var methodNames = methods.split(/\s+/);
                    _.each(methodNames, function(methodName) {
                        var method = target[methodName];
                        if (!method) {
                            throw new Marionette.Error('Method "' + methodName + '" was configured as an event handler, but does not exist.')
                        }
                        target.listenTo(entity, evt, method)
                    })
                }

                function bindToFunction(target, entity, evt, method) {
                    target.listenTo(entity, evt, method)
                }

                function unbindFromStrings(target, entity, evt, methods) {
                    var methodNames = methods.split(/\s+/);
                    _.each(methodNames, function(methodName) {
                        var method = target[methodName];
                        target.stopListening(entity, evt, method)
                    })
                }

                function unbindToFunction(target, entity, evt, method) {
                    target.stopListening(entity, evt, method)
                }

                function iterateEvents(target, entity, bindings, functionCallback, stringCallback) {
                    if (!entity || !bindings) {
                        return
                    }
                    if (!_.isObject(bindings)) {
                        throw new Marionette.Error({
                            message: "Bindings must be an object or function.",
                            url: "marionette.functions.html#marionettebindentityevents"
                        })
                    }
                    bindings = Marionette._getValue(bindings, target);
                    _.each(bindings, function(methods, evt) {
                        if (_.isFunction(methods)) {
                            functionCallback(target, entity, evt, methods)
                        } else {
                            stringCallback(target, entity, evt, methods)
                        }
                    })
                }
                Marionette.bindEntityEvents = function(target, entity, bindings) {
                    iterateEvents(target, entity, bindings, bindToFunction, bindFromStrings)
                };
                Marionette.unbindEntityEvents = function(target, entity, bindings) {
                    iterateEvents(target, entity, bindings, unbindToFunction, unbindFromStrings)
                };
                Marionette.proxyBindEntityEvents = function(entity, bindings) {
                    return Marionette.bindEntityEvents(this, entity, bindings)
                };
                Marionette.proxyUnbindEntityEvents = function(entity, bindings) {
                    return Marionette.unbindEntityEvents(this, entity, bindings)
                }
            })(Marionette);
            var errorProps = ["description", "fileName", "lineNumber", "name", "message", "number"];
            Marionette.Error = Marionette.extend.call(Error, {
                urlRoot: "http://marionettejs.com/docs/v" + Marionette.VERSION + "/",
                constructor: function(message, options) {
                    if (_.isObject(message)) {
                        options = message;
                        message = options.message
                    } else if (!options) {
                        options = {}
                    }
                    var error = Error.call(this, message);
                    _.extend(this, _.pick(error, errorProps), _.pick(options, errorProps));
                    this.captureStackTrace();
                    if (options.url) {
                        this.url = this.urlRoot + options.url
                    }
                },
                captureStackTrace: function() {
                    if (Error.captureStackTrace) {
                        Error.captureStackTrace(this, Marionette.Error)
                    }
                },
                toString: function() {
                    return this.name + ": " + this.message + (this.url ? " See: " + this.url : "")
                }
            });
            Marionette.Error.extend = Marionette.extend;
            Marionette.Callbacks = function() {
                this._deferred = Marionette.Deferred();
                this._callbacks = []
            };
            _.extend(Marionette.Callbacks.prototype, {
                add: function(callback, contextOverride) {
                    var promise = _.result(this._deferred, "promise");
                    this._callbacks.push({
                        cb: callback,
                        ctx: contextOverride
                    });
                    promise.then(function(args) {
                        if (contextOverride) {
                            args.context = contextOverride
                        }
                        callback.call(args.context, args.options)
                    })
                },
                run: function(options, context) {
                    this._deferred.resolve({
                        options: options,
                        context: context
                    })
                },
                reset: function() {
                    var callbacks = this._callbacks;
                    this._deferred = Marionette.Deferred();
                    this._callbacks = [];
                    _.each(callbacks, function(cb) {
                        this.add(cb.cb, cb.ctx)
                    }, this)
                }
            });
            Marionette.Controller = function(options) {
                this.options = options || {};
                if (_.isFunction(this.initialize)) {
                    this.initialize(this.options)
                }
            };
            Marionette.Controller.extend = Marionette.extend;
            _.extend(Marionette.Controller.prototype, Backbone.Events, {
                destroy: function() {
                    Marionette._triggerMethod(this, "before:destroy", arguments);
                    Marionette._triggerMethod(this, "destroy", arguments);
                    this.stopListening();
                    this.off();
                    return this
                },
                triggerMethod: Marionette.triggerMethod,
                mergeOptions: Marionette.mergeOptions,
                getOption: Marionette.proxyGetOption
            });
            Marionette.Object = function(options) {
                this.options = _.extend({}, _.result(this, "options"), options);
                this.initialize.apply(this, arguments)
            };
            Marionette.Object.extend = Marionette.extend;
            _.extend(Marionette.Object.prototype, Backbone.Events, {
                initialize: function() {},
                destroy: function() {
                    this.triggerMethod("before:destroy");
                    this.triggerMethod("destroy");
                    this.stopListening();
                    return this
                },
                triggerMethod: Marionette.triggerMethod,
                mergeOptions: Marionette.mergeOptions,
                getOption: Marionette.proxyGetOption,
                bindEntityEvents: Marionette.proxyBindEntityEvents,
                unbindEntityEvents: Marionette.proxyUnbindEntityEvents
            });
            Marionette.Region = Marionette.Object.extend({
                constructor: function(options) {
                    this.options = options || {};
                    this.el = this.getOption("el");
                    this.el = this.el instanceof Backbone.$ ? this.el[0] : this.el;
                    if (!this.el) {
                        throw new Marionette.Error({
                            name: "NoElError",
                            message: 'An "el" must be specified for a region.'
                        })
                    }
                    this.$el = this.getEl(this.el);
                    Marionette.Object.call(this, options)
                },
                show: function(view, options) {
                    if (!this._ensureElement()) {
                        return
                    }
                    this._ensureViewIsIntact(view);
                    Marionette.MonitorDOMRefresh(view);
                    var showOptions = options || {};
                    var isDifferentView = view !== this.currentView;
                    var preventDestroy = !!showOptions.preventDestroy;
                    var forceShow = !!showOptions.forceShow;
                    var isChangingView = !!this.currentView;
                    var _shouldDestroyView = isDifferentView && !preventDestroy;
                    var _shouldShowView = isDifferentView || forceShow;
                    if (isChangingView) {
                        this.triggerMethod("before:swapOut", this.currentView, this, options)
                    }
                    if (this.currentView) {
                        delete this.currentView._parent
                    }
                    if (_shouldDestroyView) {
                        this.empty()
                    } else if (isChangingView && _shouldShowView) {
                        this.currentView.off("destroy", this.empty, this)
                    }
                    if (_shouldShowView) {
                        view.once("destroy", this.empty, this);
                        this._renderView(view);
                        view._parent = this;
                        if (isChangingView) {
                            this.triggerMethod("before:swap", view, this, options)
                        }
                        this.triggerMethod("before:show", view, this, options);
                        Marionette.triggerMethodOn(view, "before:show", view, this, options);
                        if (isChangingView) {
                            this.triggerMethod("swapOut", this.currentView, this, options)
                        }
                        var attachedRegion = Marionette.isNodeAttached(this.el);
                        var displayedViews = [];
                        var attachOptions = _.extend({
                            triggerBeforeAttach: this.triggerBeforeAttach,
                            triggerAttach: this.triggerAttach
                        }, showOptions);
                        if (attachedRegion && attachOptions.triggerBeforeAttach) {
                            displayedViews = this._displayedViews(view);
                            this._triggerAttach(displayedViews, "before:")
                        }
                        this.attachHtml(view);
                        this.currentView = view;
                        if (attachedRegion && attachOptions.triggerAttach) {
                            displayedViews = this._displayedViews(view);
                            this._triggerAttach(displayedViews)
                        }
                        if (isChangingView) {
                            this.triggerMethod("swap", view, this, options)
                        }
                        this.triggerMethod("show", view, this, options);
                        Marionette.triggerMethodOn(view, "show", view, this, options);
                        return this
                    }
                    return this
                },
                triggerBeforeAttach: true,
                triggerAttach: true,
                _triggerAttach: function(views, prefix) {
                    var eventName = (prefix || "") + "attach";
                    _.each(views, function(view) {
                        Marionette.triggerMethodOn(view, eventName, view, this)
                    }, this)
                },
                _displayedViews: function(view) {
                    return _.union([view], _.result(view, "_getNestedViews") || [])
                },
                _renderView: function(view) {
                    if (!view.supportsRenderLifecycle) {
                        Marionette.triggerMethodOn(view, "before:render", view)
                    }
                    view.render();
                    if (!view.supportsRenderLifecycle) {
                        Marionette.triggerMethodOn(view, "render", view)
                    }
                },
                _ensureElement: function() {
                    if (!_.isObject(this.el)) {
                        this.$el = this.getEl(this.el);
                        this.el = this.$el[0]
                    }
                    if (!this.$el || this.$el.length === 0) {
                        if (this.getOption("allowMissingEl")) {
                            return false
                        } else {
                            throw new Marionette.Error('An "el" ' + this.$el.selector + " must exist in DOM")
                        }
                    }
                    return true
                },
                _ensureViewIsIntact: function(view) {
                    if (!view) {
                        throw new Marionette.Error({
                            name: "ViewNotValid",
                            message: "The view passed is undefined and therefore invalid. You must pass a view instance to show."
                        })
                    }
                    if (view.isDestroyed) {
                        throw new Marionette.Error({
                            name: "ViewDestroyedError",
                            message: 'View (cid: "' + view.cid + '") has already been destroyed and cannot be used.'
                        })
                    }
                },
                getEl: function(el) {
                    return Backbone.$(el, Marionette._getValue(this.options.parentEl, this))
                },
                attachHtml: function(view) {
                    this.$el.contents().detach();
                    this.el.appendChild(view.el)
                },
                empty: function(options) {
                    var view = this.currentView;
                    var emptyOptions = options || {};
                    var preventDestroy = !!emptyOptions.preventDestroy;
                    if (!view) {
                        return
                    }
                    view.off("destroy", this.empty, this);
                    this.triggerMethod("before:empty", view);
                    if (!preventDestroy) {
                        this._destroyView()
                    }
                    this.triggerMethod("empty", view);
                    delete this.currentView;
                    if (preventDestroy) {
                        this.$el.contents().detach()
                    }
                    return this
                },
                _destroyView: function() {
                    var view = this.currentView;
                    if (view.isDestroyed) {
                        return
                    }
                    if (!view.supportsDestroyLifecycle) {
                        Marionette.triggerMethodOn(view, "before:destroy", view)
                    }
                    if (view.destroy) {
                        view.destroy()
                    } else {
                        view.remove();
                        view.isDestroyed = true
                    }
                    if (!view.supportsDestroyLifecycle) {
                        Marionette.triggerMethodOn(view, "destroy", view)
                    }
                },
                attachView: function(view) {
                    if (this.currentView) {
                        delete this.currentView._parent
                    }
                    view._parent = this;
                    this.currentView = view;
                    return this
                },
                hasView: function() {
                    return !!this.currentView
                },
                reset: function() {
                    this.empty();
                    if (this.$el) {
                        this.el = this.$el.selector
                    }
                    delete this.$el;
                    return this
                }
            }, {
                buildRegion: function(regionConfig, DefaultRegionClass) {
                    if (_.isString(regionConfig)) {
                        return this._buildRegionFromSelector(regionConfig, DefaultRegionClass)
                    }
                    if (regionConfig.selector || regionConfig.el || regionConfig.regionClass) {
                        return this._buildRegionFromObject(regionConfig, DefaultRegionClass)
                    }
                    if (_.isFunction(regionConfig)) {
                        return this._buildRegionFromRegionClass(regionConfig)
                    }
                    throw new Marionette.Error({
                        message: "Improper region configuration type.",
                        url: "marionette.region.html#region-configuration-types"
                    })
                },
                _buildRegionFromSelector: function(selector, DefaultRegionClass) {
                    return new DefaultRegionClass({
                        el: selector
                    })
                },
                _buildRegionFromObject: function(regionConfig, DefaultRegionClass) {
                    var RegionClass = regionConfig.regionClass || DefaultRegionClass;
                    var options = _.omit(regionConfig, "selector", "regionClass");
                    if (regionConfig.selector && !options.el) {
                        options.el = regionConfig.selector
                    }
                    return new RegionClass(options)
                },
                _buildRegionFromRegionClass: function(RegionClass) {
                    return new RegionClass
                }
            });
            Marionette.RegionManager = Marionette.Controller.extend({
                constructor: function(options) {
                    this._regions = {};
                    this.length = 0;
                    Marionette.Controller.call(this, options);
                    this.addRegions(this.getOption("regions"))
                },
                addRegions: function(regionDefinitions, defaults) {
                    regionDefinitions = Marionette._getValue(regionDefinitions, this, arguments);
                    return _.reduce(regionDefinitions, function(regions, definition, name) {
                        if (_.isString(definition)) {
                            definition = {
                                selector: definition
                            }
                        }
                        if (definition.selector) {
                            definition = _.defaults({}, definition, defaults)
                        }
                        regions[name] = this.addRegion(name, definition);
                        return regions
                    }, {}, this)
                },
                addRegion: function(name, definition) {
                    var region;
                    if (definition instanceof Marionette.Region) {
                        region = definition
                    } else {
                        region = Marionette.Region.buildRegion(definition, Marionette.Region)
                    }
                    this.triggerMethod("before:add:region", name, region);
                    region._parent = this;
                    this._store(name, region);
                    this.triggerMethod("add:region", name, region);
                    return region
                },
                get: function(name) {
                    return this._regions[name]
                },
                getRegions: function() {
                    return _.clone(this._regions)
                },
                removeRegion: function(name) {
                    var region = this._regions[name];
                    this._remove(name, region);
                    return region
                },
                removeRegions: function() {
                    var regions = this.getRegions();
                    _.each(this._regions, function(region, name) {
                        this._remove(name, region)
                    }, this);
                    return regions
                },
                emptyRegions: function() {
                    var regions = this.getRegions();
                    _.invoke(regions, "empty");
                    return regions
                },
                destroy: function() {
                    this.removeRegions();
                    return Marionette.Controller.prototype.destroy.apply(this, arguments)
                },
                _store: function(name, region) {
                    if (!this._regions[name]) {
                        this.length++
                    }
                    this._regions[name] = region
                },
                _remove: function(name, region) {
                    this.triggerMethod("before:remove:region", name, region);
                    region.empty();
                    region.stopListening();
                    delete region._parent;
                    delete this._regions[name];
                    this.length--;
                    this.triggerMethod("remove:region", name, region)
                }
            });
            Marionette.actAsCollection(Marionette.RegionManager.prototype, "_regions");
            Marionette.TemplateCache = function(templateId) {
                this.templateId = templateId
            };
            _.extend(Marionette.TemplateCache, {
                templateCaches: {},
                get: function(templateId, options) {
                    var cachedTemplate = this.templateCaches[templateId];
                    if (!cachedTemplate) {
                        cachedTemplate = new Marionette.TemplateCache(templateId);
                        this.templateCaches[templateId] = cachedTemplate
                    }
                    return cachedTemplate.load(options)
                },
                clear: function() {
                    var i;
                    var args = _.toArray(arguments);
                    var length = args.length;
                    if (length > 0) {
                        for (i = 0; i < length; i++) {
                            delete this.templateCaches[args[i]]
                        }
                    } else {
                        this.templateCaches = {}
                    }
                }
            });
            _.extend(Marionette.TemplateCache.prototype, {
                load: function(options) {
                    if (this.compiledTemplate) {
                        return this.compiledTemplate
                    }
                    var template = this.loadTemplate(this.templateId, options);
                    this.compiledTemplate = this.compileTemplate(template, options);
                    return this.compiledTemplate
                },
                loadTemplate: function(templateId, options) {
                    var $template = Backbone.$(templateId);
                    if (!$template.length) {
                        throw new Marionette.Error({
                            name: "NoTemplateError",
                            message: 'Could not find template: "' + templateId + '"'
                        })
                    }
                    return $template.html()
                },
                compileTemplate: function(rawTemplate, options) {
                    return _.template(rawTemplate, options)
                }
            });
            Marionette.Renderer = {
                render: function(template, data) {
                    if (!template) {
                        throw new Marionette.Error({
                            name: "TemplateNotFoundError",
                            message: "Cannot render the template since its false, null or undefined."
                        })
                    }
                    var templateFunc = _.isFunction(template) ? template : Marionette.TemplateCache.get(template);
                    return templateFunc(data)
                }
            };
            Marionette.View = Backbone.View.extend({
                isDestroyed: false,
                supportsRenderLifecycle: true,
                supportsDestroyLifecycle: true,
                constructor: function(options) {
                    this.render = _.bind(this.render, this);
                    options = Marionette._getValue(options, this);
                    this.options = _.extend({}, _.result(this, "options"), options);
                    this._behaviors = Marionette.Behaviors(this);
                    Backbone.View.call(this, this.options);
                    Marionette.MonitorDOMRefresh(this)
                },
                getTemplate: function() {
                    return this.getOption("template")
                },
                serializeModel: function(model) {
                    return model.toJSON.apply(model, _.rest(arguments))
                },
                mixinTemplateHelpers: function(target) {
                    target = target || {};
                    var templateHelpers = this.getOption("templateHelpers");
                    templateHelpers = Marionette._getValue(templateHelpers, this);
                    return _.extend(target, templateHelpers)
                },
                normalizeUIKeys: function(hash) {
                    var uiBindings = _.result(this, "_uiBindings");
                    return Marionette.normalizeUIKeys(hash, uiBindings || _.result(this, "ui"))
                },
                normalizeUIValues: function(hash, properties) {
                    var ui = _.result(this, "ui");
                    var uiBindings = _.result(this, "_uiBindings");
                    return Marionette.normalizeUIValues(hash, uiBindings || ui, properties)
                },
                configureTriggers: function() {
                    if (!this.triggers) {
                        return
                    }
                    var triggers = this.normalizeUIKeys(_.result(this, "triggers"));
                    return _.reduce(triggers, function(events, value, key) {
                        events[key] = this._buildViewTrigger(value);
                        return events
                    }, {}, this)
                },
                delegateEvents: function(events) {
                    this._delegateDOMEvents(events);
                    this.bindEntityEvents(this.model, this.getOption("modelEvents"));
                    this.bindEntityEvents(this.collection, this.getOption("collectionEvents"));
                    _.each(this._behaviors, function(behavior) {
                        behavior.bindEntityEvents(this.model, behavior.getOption("modelEvents"));
                        behavior.bindEntityEvents(this.collection, behavior.getOption("collectionEvents"))
                    }, this);
                    return this
                },
                _delegateDOMEvents: function(eventsArg) {
                    var events = Marionette._getValue(eventsArg || this.events, this);
                    events = this.normalizeUIKeys(events);
                    if (_.isUndefined(eventsArg)) {
                        this.events = events
                    }
                    var combinedEvents = {};
                    var behaviorEvents = _.result(this, "behaviorEvents") || {};
                    var triggers = this.configureTriggers();
                    var behaviorTriggers = _.result(this, "behaviorTriggers") || {};
                    _.extend(combinedEvents, behaviorEvents, events, triggers, behaviorTriggers);
                    Backbone.View.prototype.delegateEvents.call(this, combinedEvents)
                },
                undelegateEvents: function() {
                    Backbone.View.prototype.undelegateEvents.apply(this, arguments);
                    this.unbindEntityEvents(this.model, this.getOption("modelEvents"));
                    this.unbindEntityEvents(this.collection, this.getOption("collectionEvents"));
                    _.each(this._behaviors, function(behavior) {
                        behavior.unbindEntityEvents(this.model, behavior.getOption("modelEvents"));
                        behavior.unbindEntityEvents(this.collection, behavior.getOption("collectionEvents"))
                    }, this);
                    return this
                },
                _ensureViewIsIntact: function() {
                    if (this.isDestroyed) {
                        throw new Marionette.Error({
                            name: "ViewDestroyedError",
                            message: 'View (cid: "' + this.cid + '") has already been destroyed and cannot be used.'
                        })
                    }
                },
                destroy: function() {
                    if (this.isDestroyed) {
                        return this
                    }
                    var args = _.toArray(arguments);
                    this.triggerMethod.apply(this, ["before:destroy"].concat(args));
                    this.isDestroyed = true;
                    this.triggerMethod.apply(this, ["destroy"].concat(args));
                    this.unbindUIElements();
                    this.isRendered = false;
                    this.remove();
                    _.invoke(this._behaviors, "destroy", args);
                    return this
                },
                bindUIElements: function() {
                    this._bindUIElements();
                    _.invoke(this._behaviors, this._bindUIElements)
                },
                _bindUIElements: function() {
                    if (!this.ui) {
                        return
                    }
                    if (!this._uiBindings) {
                        this._uiBindings = this.ui
                    }
                    var bindings = _.result(this, "_uiBindings");
                    this.ui = {};
                    _.each(bindings, function(selector, key) {
                        this.ui[key] = this.$(selector)
                    }, this)
                },
                unbindUIElements: function() {
                    this._unbindUIElements();
                    _.invoke(this._behaviors, this._unbindUIElements)
                },
                _unbindUIElements: function() {
                    if (!this.ui || !this._uiBindings) {
                        return
                    }
                    _.each(this.ui, function($el, name) {
                        delete this.ui[name]
                    }, this);
                    this.ui = this._uiBindings;
                    delete this._uiBindings
                },
                _buildViewTrigger: function(triggerDef) {
                    var options = _.defaults({}, triggerDef, {
                        preventDefault: true,
                        stopPropagation: true
                    });
                    var eventName = _.isObject(triggerDef) ? options.event : triggerDef;
                    return function(e) {
                        if (e) {
                            if (e.preventDefault && options.preventDefault) {
                                e.preventDefault()
                            }
                            if (e.stopPropagation && options.stopPropagation) {
                                e.stopPropagation()
                            }
                        }
                        var args = {
                            view: this,
                            model: this.model,
                            collection: this.collection
                        };
                        this.triggerMethod(eventName, args)
                    }
                },
                setElement: function() {
                    var ret = Backbone.View.prototype.setElement.apply(this, arguments);
                    _.invoke(this._behaviors, "proxyViewProperties", this);
                    return ret
                },
                triggerMethod: function() {
                    var ret = Marionette._triggerMethod(this, arguments);
                    this._triggerEventOnBehaviors(arguments);
                    this._triggerEventOnParentLayout(arguments[0], _.rest(arguments));
                    return ret
                },
                _triggerEventOnBehaviors: function(args) {
                    var triggerMethod = Marionette._triggerMethod;
                    var behaviors = this._behaviors;
                    for (var i = 0, length = behaviors && behaviors.length; i < length; i++) {
                        triggerMethod(behaviors[i], args)
                    }
                },
                _triggerEventOnParentLayout: function(eventName, args) {
                    var layoutView = this._parentLayoutView();
                    if (!layoutView) {
                        return
                    }
                    var eventPrefix = Marionette.getOption(layoutView, "childViewEventPrefix");
                    var prefixedEventName = eventPrefix + ":" + eventName;
                    var callArgs = [this].concat(args);
                    Marionette._triggerMethod(layoutView, prefixedEventName, callArgs);
                    var childEvents = Marionette.getOption(layoutView, "childEvents");
                    var normalizedChildEvents = layoutView.normalizeMethods(childEvents);
                    if (normalizedChildEvents && _.isFunction(normalizedChildEvents[eventName])) {
                        normalizedChildEvents[eventName].apply(layoutView, callArgs)
                    }
                },
                _getImmediateChildren: function() {
                    return []
                },
                _getNestedViews: function() {
                    var children = this._getImmediateChildren();
                    if (!children.length) {
                        return children
                    }
                    return _.reduce(children, function(memo, view) {
                        if (!view._getNestedViews) {
                            return memo
                        }
                        return memo.concat(view._getNestedViews())
                    }, children)
                },
                _getAncestors: function() {
                    var ancestors = [];
                    var parent = this._parent;
                    while (parent) {
                        ancestors.push(parent);
                        parent = parent._parent
                    }
                    return ancestors
                },
                _parentLayoutView: function() {
                    var ancestors = this._getAncestors();
                    return _.find(ancestors, function(parent) {
                        return parent instanceof Marionette.LayoutView
                    })
                },
                normalizeMethods: Marionette.normalizeMethods,
                mergeOptions: Marionette.mergeOptions,
                getOption: Marionette.proxyGetOption,
                bindEntityEvents: Marionette.proxyBindEntityEvents,
                unbindEntityEvents: Marionette.proxyUnbindEntityEvents
            });
            Marionette.ItemView = Marionette.View.extend({
                constructor: function() {
                    Marionette.View.apply(this, arguments)
                },
                serializeData: function() {
                    if (!this.model && !this.collection) {
                        return {}
                    }
                    var args = [this.model || this.collection];
                    if (arguments.length) {
                        args.push.apply(args, arguments)
                    }
                    if (this.model) {
                        return this.serializeModel.apply(this, args)
                    } else {
                        return {
                            items: this.serializeCollection.apply(this, args)
                        }
                    }
                },
                serializeCollection: function(collection) {
                    return collection.toJSON.apply(collection, _.rest(arguments))
                },
                render: function() {
                    this._ensureViewIsIntact();
                    this.triggerMethod("before:render", this);
                    this._renderTemplate();
                    this.isRendered = true;
                    this.bindUIElements();
                    this.triggerMethod("render", this);
                    return this
                },
                _renderTemplate: function() {
                    var template = this.getTemplate();
                    if (template === false) {
                        return
                    }
                    if (!template) {
                        throw new Marionette.Error({
                            name: "UndefinedTemplateError",
                            message: "Cannot render the template since it is null or undefined."
                        })
                    }
                    var data = this.mixinTemplateHelpers(this.serializeData());
                    var html = Marionette.Renderer.render(template, data, this);
                    this.attachElContent(html);
                    return this
                },
                attachElContent: function(html) {
                    this.$el.html(html);
                    return this
                }
            });
            Marionette.CollectionView = Marionette.View.extend({
                childViewEventPrefix: "childview",
                sort: true,
                constructor: function(options) {
                    this.once("render", this._initialEvents);
                    this._initChildViewStorage();
                    Marionette.View.apply(this, arguments);
                    this.on({
                        "before:show": this._onBeforeShowCalled,
                        show: this._onShowCalled,
                        "before:attach": this._onBeforeAttachCalled,
                        attach: this._onAttachCalled
                    });
                    this.initRenderBuffer()
                },
                initRenderBuffer: function() {
                    this._bufferedChildren = []
                },
                startBuffering: function() {
                    this.initRenderBuffer();
                    this.isBuffering = true
                },
                endBuffering: function() {
                    var canTriggerAttach = this._isShown && Marionette.isNodeAttached(this.el);
                    var nestedViews;
                    this.isBuffering = false;
                    if (this._isShown) {
                        this._triggerMethodMany(this._bufferedChildren, this, "before:show")
                    }
                    if (canTriggerAttach && this._triggerBeforeAttach) {
                        nestedViews = this._getNestedViews();
                        this._triggerMethodMany(nestedViews, this, "before:attach")
                    }
                    this.attachBuffer(this, this._createBuffer());
                    if (canTriggerAttach && this._triggerAttach) {
                        nestedViews = this._getNestedViews();
                        this._triggerMethodMany(nestedViews, this, "attach")
                    }
                    if (this._isShown) {
                        this._triggerMethodMany(this._bufferedChildren, this, "show")
                    }
                    this.initRenderBuffer()
                },
                _triggerMethodMany: function(targets, source, eventName) {
                    var args = _.drop(arguments, 3);
                    _.each(targets, function(target) {
                        Marionette.triggerMethodOn.apply(target, [target, eventName, target, source].concat(args))
                    })
                },
                _initialEvents: function() {
                    if (this.collection) {
                        this.listenTo(this.collection, "add", this._onCollectionAdd);
                        this.listenTo(this.collection, "remove", this._onCollectionRemove);
                        this.listenTo(this.collection, "reset", this.render);
                        if (this.getOption("sort")) {
                            this.listenTo(this.collection, "sort", this._sortViews)
                        }
                    }
                },
                _onCollectionAdd: function(child, collection, opts) {
                    var index = opts.at !== undefined && (opts.index || collection.indexOf(child));
                    if (this.getOption("filter") || index === false) {
                        index = _.indexOf(this._filteredSortedModels(index), child)
                    }
                    if (this._shouldAddChild(child, index)) {
                        this.destroyEmptyView();
                        var ChildView = this.getChildView(child);
                        this.addChild(child, ChildView, index)
                    }
                },
                _onCollectionRemove: function(model) {
                    var view = this.children.findByModel(model);
                    this.removeChildView(view);
                    this.checkEmpty()
                },
                _onBeforeShowCalled: function() {
                    this._triggerBeforeAttach = this._triggerAttach = false;
                    this.children.each(function(childView) {
                        Marionette.triggerMethodOn(childView, "before:show", childView)
                    })
                },
                _onShowCalled: function() {
                    this.children.each(function(childView) {
                        Marionette.triggerMethodOn(childView, "show", childView)
                    })
                },
                _onBeforeAttachCalled: function() {
                    this._triggerBeforeAttach = true
                },
                _onAttachCalled: function() {
                    this._triggerAttach = true
                },
                render: function() {
                    this._ensureViewIsIntact();
                    this.triggerMethod("before:render", this);
                    this._renderChildren();
                    this.isRendered = true;
                    this.triggerMethod("render", this);
                    return this
                },
                reorder: function() {
                    var children = this.children;
                    var models = this._filteredSortedModels();
                    var modelsChanged = _.find(models, function(model) {
                        return !children.findByModel(model)
                    });
                    if (modelsChanged) {
                        this.render()
                    } else {
                        var els = _.map(models, function(model, index) {
                            var view = children.findByModel(model);
                            view._index = index;
                            return view.el
                        });
                        this.triggerMethod("before:reorder");
                        this._appendReorderedChildren(els);
                        this.triggerMethod("reorder")
                    }
                },
                resortView: function() {
                    if (Marionette.getOption(this, "reorderOnSort")) {
                        this.reorder()
                    } else {
                        this.render()
                    }
                },
                _sortViews: function() {
                    var models = this._filteredSortedModels();
                    var orderChanged = _.find(models, function(item, index) {
                        var view = this.children.findByModel(item);
                        return !view || view._index !== index
                    }, this);
                    if (orderChanged) {
                        this.resortView()
                    }
                },
                _emptyViewIndex: -1,
                _appendReorderedChildren: function(children) {
                    this.$el.append(children)
                },
                _renderChildren: function() {
                    this.destroyEmptyView();
                    this.destroyChildren({
                        checkEmpty: false
                    });
                    if (this.isEmpty(this.collection)) {
                        this.showEmptyView()
                    } else {
                        this.triggerMethod("before:render:collection", this);
                        this.startBuffering();
                        this.showCollection();
                        this.endBuffering();
                        this.triggerMethod("render:collection", this);
                        if (this.children.isEmpty() && this.getOption("filter")) {
                            this.showEmptyView()
                        }
                    }
                },
                showCollection: function() {
                    var ChildView;
                    var models = this._filteredSortedModels();
                    _.each(models, function(child, index) {
                        ChildView = this.getChildView(child);
                        this.addChild(child, ChildView, index)
                    }, this)
                },
                _filteredSortedModels: function(addedAt) {
                    var viewComparator = this.getViewComparator();
                    var models = this.collection.models;
                    addedAt = Math.min(Math.max(addedAt, 0), models.length - 1);
                    if (viewComparator) {
                        var addedModel;
                        if (addedAt) {
                            addedModel = models[addedAt];
                            models = models.slice(0, addedAt).concat(models.slice(addedAt + 1))
                        }
                        models = this._sortModelsBy(models, viewComparator);
                        if (addedModel) {
                            models.splice(addedAt, 0, addedModel)
                        }
                    }
                    if (this.getOption("filter")) {
                        models = _.filter(models, function(model, index) {
                            return this._shouldAddChild(model, index)
                        }, this)
                    }
                    return models
                },
                _sortModelsBy: function(models, comparator) {
                    if (typeof comparator === "string") {
                        return _.sortBy(models, function(model) {
                            return model.get(comparator)
                        }, this)
                    } else if (comparator.length === 1) {
                        return _.sortBy(models, comparator, this)
                    } else {
                        return models.sort(_.bind(comparator, this))
                    }
                },
                showEmptyView: function() {
                    var EmptyView = this.getEmptyView();
                    if (EmptyView && !this._showingEmptyView) {
                        this.triggerMethod("before:render:empty");
                        this._showingEmptyView = true;
                        var model = new Backbone.Model;
                        this.addEmptyView(model, EmptyView);
                        this.triggerMethod("render:empty")
                    }
                },
                destroyEmptyView: function() {
                    if (this._showingEmptyView) {
                        this.triggerMethod("before:remove:empty");
                        this.destroyChildren();
                        delete this._showingEmptyView;
                        this.triggerMethod("remove:empty")
                    }
                },
                getEmptyView: function() {
                    return this.getOption("emptyView")
                },
                addEmptyView: function(child, EmptyView) {
                    var canTriggerAttach = this._isShown && !this.isBuffering && Marionette.isNodeAttached(this.el);
                    var nestedViews;
                    var emptyViewOptions = this.getOption("emptyViewOptions") || this.getOption("childViewOptions");
                    if (_.isFunction(emptyViewOptions)) {
                        emptyViewOptions = emptyViewOptions.call(this, child, this._emptyViewIndex)
                    }
                    var view = this.buildChildView(child, EmptyView, emptyViewOptions);
                    view._parent = this;
                    this.proxyChildEvents(view);
                    view.once("render", function() {
                        if (this._isShown) {
                            Marionette.triggerMethodOn(view, "before:show", view)
                        }
                        if (canTriggerAttach && this._triggerBeforeAttach) {
                            nestedViews = this._getViewAndNested(view);
                            this._triggerMethodMany(nestedViews, this, "before:attach")
                        }
                    }, this);
                    this.children.add(view);
                    this.renderChildView(view, this._emptyViewIndex);
                    if (canTriggerAttach && this._triggerAttach) {
                        nestedViews = this._getViewAndNested(view);
                        this._triggerMethodMany(nestedViews, this, "attach")
                    }
                    if (this._isShown) {
                        Marionette.triggerMethodOn(view, "show", view)
                    }
                },
                getChildView: function(child) {
                    var childView = this.getOption("childView");
                    if (!childView) {
                        throw new Marionette.Error({
                            name: "NoChildViewError",
                            message: 'A "childView" must be specified'
                        })
                    }
                    return childView
                },
                addChild: function(child, ChildView, index) {
                    var childViewOptions = this.getOption("childViewOptions");
                    childViewOptions = Marionette._getValue(childViewOptions, this, [child, index]);
                    var view = this.buildChildView(child, ChildView, childViewOptions);
                    this._updateIndices(view, true, index);
                    this.triggerMethod("before:add:child", view);
                    this._addChildView(view, index);
                    this.triggerMethod("add:child", view);
                    view._parent = this;
                    return view
                },
                _updateIndices: function(view, increment, index) {
                    if (!this.getOption("sort")) {
                        return
                    }
                    if (increment) {
                        view._index = index
                    }
                    this.children.each(function(laterView) {
                        if (laterView._index >= view._index) {
                            laterView._index += increment ? 1 : -1
                        }
                    })
                },
                _addChildView: function(view, index) {
                    var canTriggerAttach = this._isShown && !this.isBuffering && Marionette.isNodeAttached(this.el);
                    var nestedViews;
                    this.proxyChildEvents(view);
                    view.once("render", function() {
                        if (this._isShown && !this.isBuffering) {
                            Marionette.triggerMethodOn(view, "before:show", view)
                        }
                        if (canTriggerAttach && this._triggerBeforeAttach) {
                            nestedViews = this._getViewAndNested(view);
                            this._triggerMethodMany(nestedViews, this, "before:attach")
                        }
                    }, this);
                    this.children.add(view);
                    this.renderChildView(view, index);
                    if (canTriggerAttach && this._triggerAttach) {
                        nestedViews = this._getViewAndNested(view);
                        this._triggerMethodMany(nestedViews, this, "attach")
                    }
                    if (this._isShown && !this.isBuffering) {
                        Marionette.triggerMethodOn(view, "show", view)
                    }
                },
                renderChildView: function(view, index) {
                    if (!view.supportsRenderLifecycle) {
                        Marionette.triggerMethodOn(view, "before:render", view)
                    }
                    view.render();
                    if (!view.supportsRenderLifecycle) {
                        Marionette.triggerMethodOn(view, "render", view)
                    }
                    this.attachHtml(this, view, index);
                    return view
                },
                buildChildView: function(child, ChildViewClass, childViewOptions) {
                    var options = _.extend({
                        model: child
                    }, childViewOptions);
                    var childView = new ChildViewClass(options);
                    Marionette.MonitorDOMRefresh(childView);
                    return childView
                },
                removeChildView: function(view) {
                    if (!view) {
                        return view
                    }
                    this.triggerMethod("before:remove:child", view);
                    if (!view.supportsDestroyLifecycle) {
                        Marionette.triggerMethodOn(view, "before:destroy", view)
                    }
                    if (view.destroy) {
                        view.destroy()
                    } else {
                        view.remove()
                    }
                    if (!view.supportsDestroyLifecycle) {
                        Marionette.triggerMethodOn(view, "destroy", view)
                    }
                    delete view._parent;
                    this.stopListening(view);
                    this.children.remove(view);
                    this.triggerMethod("remove:child", view);
                    this._updateIndices(view, false);
                    return view
                },
                isEmpty: function() {
                    return !this.collection || this.collection.length === 0
                },
                checkEmpty: function() {
                    if (this.isEmpty(this.collection)) {
                        this.showEmptyView()
                    }
                },
                attachBuffer: function(collectionView, buffer) {
                    collectionView.$el.append(buffer)
                },
                _createBuffer: function() {
                    var elBuffer = document.createDocumentFragment();
                    _.each(this._bufferedChildren, function(b) {
                        elBuffer.appendChild(b.el)
                    });
                    return elBuffer
                },
                attachHtml: function(collectionView, childView, index) {
                    if (collectionView.isBuffering) {
                        collectionView._bufferedChildren.splice(index, 0, childView)
                    } else {
                        if (!collectionView._insertBefore(childView, index)) {
                            collectionView._insertAfter(childView)
                        }
                    }
                },
                _insertBefore: function(childView, index) {
                    var currentView;
                    var findPosition = this.getOption("sort") && index < this.children.length - 1;
                    if (findPosition) {
                        currentView = this.children.find(function(view) {
                            return view._index === index + 1
                        })
                    }
                    if (currentView) {
                        currentView.$el.before(childView.el);
                        return true
                    }
                    return false
                },
                _insertAfter: function(childView) {
                    this.$el.append(childView.el)
                },
                _initChildViewStorage: function() {
                    this.children = new Backbone.ChildViewContainer
                },
                destroy: function() {
                    if (this.isDestroyed) {
                        return this
                    }
                    this.triggerMethod("before:destroy:collection");
                    this.destroyChildren({
                        checkEmpty: false
                    });
                    this.triggerMethod("destroy:collection");
                    return Marionette.View.prototype.destroy.apply(this, arguments)
                },
                destroyChildren: function(options) {
                    var destroyOptions = options || {};
                    var shouldCheckEmpty = true;
                    var childViews = this.children.map(_.identity);
                    if (!_.isUndefined(destroyOptions.checkEmpty)) {
                        shouldCheckEmpty = destroyOptions.checkEmpty
                    }
                    this.children.each(this.removeChildView, this);
                    if (shouldCheckEmpty) {
                        this.checkEmpty()
                    }
                    return childViews
                },
                _shouldAddChild: function(child, index) {
                    var filter = this.getOption("filter");
                    return !_.isFunction(filter) || filter.call(this, child, index, this.collection)
                },
                proxyChildEvents: function(view) {
                    var prefix = this.getOption("childViewEventPrefix");
                    this.listenTo(view, "all", function() {
                        var args = _.toArray(arguments);
                        var rootEvent = args[0];
                        var childEvents = this.normalizeMethods(_.result(this, "childEvents"));
                        args[0] = prefix + ":" + rootEvent;
                        args.splice(1, 0, view);
                        if (typeof childEvents !== "undefined" && _.isFunction(childEvents[rootEvent])) {
                            childEvents[rootEvent].apply(this, args.slice(1))
                        }
                        this.triggerMethod.apply(this, args)
                    })
                },
                _getImmediateChildren: function() {
                    return _.values(this.children._views)
                },
                _getViewAndNested: function(view) {
                    return [view].concat(_.result(view, "_getNestedViews") || [])
                },
                getViewComparator: function() {
                    return this.getOption("viewComparator")
                }
            });
            Marionette.CompositeView = Marionette.CollectionView.extend({
                constructor: function() {
                    Marionette.CollectionView.apply(this, arguments)
                },
                _initialEvents: function() {
                    if (this.collection) {
                        this.listenTo(this.collection, "add", this._onCollectionAdd);
                        this.listenTo(this.collection, "remove", this._onCollectionRemove);
                        this.listenTo(this.collection, "reset", this._renderChildren);
                        if (this.getOption("sort")) {
                            this.listenTo(this.collection, "sort", this._sortViews)
                        }
                    }
                },
                getChildView: function(child) {
                    var childView = this.getOption("childView") || this.constructor;
                    return childView
                },
                serializeData: function() {
                    var data = {};
                    if (this.model) {
                        data = _.partial(this.serializeModel, this.model).apply(this, arguments)
                    }
                    return data
                },
                render: function() {
                    this._ensureViewIsIntact();
                    this._isRendering = true;
                    this.resetChildViewContainer();
                    this.triggerMethod("before:render", this);
                    this._renderTemplate();
                    this._renderChildren();
                    this._isRendering = false;
                    this.isRendered = true;
                    this.triggerMethod("render", this);
                    return this
                },
                _renderChildren: function() {
                    if (this.isRendered || this._isRendering) {
                        Marionette.CollectionView.prototype._renderChildren.call(this)
                    }
                },
                _renderTemplate: function() {
                    var data = {};
                    data = this.serializeData();
                    data = this.mixinTemplateHelpers(data);
                    this.triggerMethod("before:render:template");
                    var template = this.getTemplate();
                    var html = Marionette.Renderer.render(template, data, this);
                    this.attachElContent(html);
                    this.bindUIElements();
                    this.triggerMethod("render:template")
                },
                attachElContent: function(html) {
                    this.$el.html(html);
                    return this
                },
                attachBuffer: function(compositeView, buffer) {
                    var $container = this.getChildViewContainer(compositeView);
                    $container.append(buffer)
                },
                _insertAfter: function(childView) {
                    var $container = this.getChildViewContainer(this, childView);
                    $container.append(childView.el)
                },
                _appendReorderedChildren: function(children) {
                    var $container = this.getChildViewContainer(this);
                    $container.append(children)
                },
                getChildViewContainer: function(containerView, childView) {
                    if (!!containerView.$childViewContainer) {
                        return containerView.$childViewContainer
                    }
                    var container;
                    var childViewContainer = Marionette.getOption(containerView, "childViewContainer");
                    if (childViewContainer) {
                        var selector = Marionette._getValue(childViewContainer, containerView);
                        if (selector.charAt(0) === "@" && containerView.ui) {
                            container = containerView.ui[selector.substr(4)]
                        } else {
                            container = containerView.$(selector)
                        }
                        if (container.length <= 0) {
                            throw new Marionette.Error({
                                name: "ChildViewContainerMissingError",
                                message: 'The specified "childViewContainer" was not found: ' + containerView.childViewContainer
                            })
                        }
                    } else {
                        container = containerView.$el
                    }
                    containerView.$childViewContainer = container;
                    return container
                },
                resetChildViewContainer: function() {
                    if (this.$childViewContainer) {
                        this.$childViewContainer = undefined
                    }
                }
            });
            Marionette.LayoutView = Marionette.ItemView.extend({
                regionClass: Marionette.Region,
                options: {
                    destroyImmediate: false
                },
                childViewEventPrefix: "childview",
                constructor: function(options) {
                    options = options || {};
                    this._firstRender = true;
                    this._initializeRegions(options);
                    Marionette.ItemView.call(this, options)
                },
                render: function() {
                    this._ensureViewIsIntact();
                    if (this._firstRender) {
                        this._firstRender = false
                    } else {
                        this._reInitializeRegions()
                    }
                    return Marionette.ItemView.prototype.render.apply(this, arguments)
                },
                destroy: function() {
                    if (this.isDestroyed) {
                        return this
                    }
                    if (this.getOption("destroyImmediate") === true) {
                        this.$el.remove()
                    }
                    this.regionManager.destroy();
                    return Marionette.ItemView.prototype.destroy.apply(this, arguments)
                },
                showChildView: function(regionName, view) {
                    return this.getRegion(regionName).show(view)
                },
                getChildView: function(regionName) {
                    return this.getRegion(regionName).currentView
                },
                addRegion: function(name, definition) {
                    var regions = {};
                    regions[name] = definition;
                    return this._buildRegions(regions)[name]
                },
                addRegions: function(regions) {
                    this.regions = _.extend({}, this.regions, regions);
                    return this._buildRegions(regions)
                },
                removeRegion: function(name) {
                    delete this.regions[name];
                    return this.regionManager.removeRegion(name)
                },
                getRegion: function(region) {
                    return this.regionManager.get(region)
                },
                getRegions: function() {
                    return this.regionManager.getRegions()
                },
                _buildRegions: function(regions) {
                    var defaults = {
                        regionClass: this.getOption("regionClass"),
                        parentEl: _.partial(_.result, this, "el")
                    };
                    return this.regionManager.addRegions(regions, defaults)
                },
                _initializeRegions: function(options) {
                    var regions;
                    this._initRegionManager();
                    regions = Marionette._getValue(this.regions, this, [options]) || {};
                    var regionOptions = this.getOption.call(options, "regions");
                    regionOptions = Marionette._getValue(regionOptions, this, [options]);
                    _.extend(regions, regionOptions);
                    regions = this.normalizeUIValues(regions, ["selector", "el"]);
                    this.addRegions(regions)
                },
                _reInitializeRegions: function() {
                    this.regionManager.invoke("reset")
                },
                getRegionManager: function() {
                    return new Marionette.RegionManager
                },
                _initRegionManager: function() {
                    this.regionManager = this.getRegionManager();
                    this.regionManager._parent = this;
                    this.listenTo(this.regionManager, "before:add:region", function(name) {
                        this.triggerMethod("before:add:region", name)
                    });
                    this.listenTo(this.regionManager, "add:region", function(name, region) {
                        this[name] = region;
                        this.triggerMethod("add:region", name, region)
                    });
                    this.listenTo(this.regionManager, "before:remove:region", function(name) {
                        this.triggerMethod("before:remove:region", name)
                    });
                    this.listenTo(this.regionManager, "remove:region", function(name, region) {
                        delete this[name];
                        this.triggerMethod("remove:region", name, region)
                    })
                },
                _getImmediateChildren: function() {
                    return _.chain(this.regionManager.getRegions()).pluck("currentView").compact().value()
                }
            });
            Marionette.Behavior = Marionette.Object.extend({
                constructor: function(options, view) {
                    this.view = view;
                    this.defaults = _.result(this, "defaults") || {};
                    this.options = _.extend({}, this.defaults, options);
                    this.ui = _.extend({}, _.result(view, "ui"), _.result(this, "ui"));
                    Marionette.Object.apply(this, arguments)
                },
                $: function() {
                    return this.view.$.apply(this.view, arguments)
                },
                destroy: function() {
                    this.stopListening();
                    return this
                },
                proxyViewProperties: function(view) {
                    this.$el = view.$el;
                    this.el = view.el
                }
            });
            Marionette.Behaviors = function(Marionette, _) {
                var delegateEventSplitter = /^(\S+)\s*(.*)$/;

                function Behaviors(view, behaviors) {
                    if (!_.isObject(view.behaviors)) {
                        return {}
                    }
                    behaviors = Behaviors.parseBehaviors(view, behaviors || _.result(view, "behaviors"));
                    Behaviors.wrap(view, behaviors, _.keys(methods));
                    return behaviors
                }
                var methods = {
                    behaviorTriggers: function(behaviorTriggers, behaviors) {
                        var triggerBuilder = new BehaviorTriggersBuilder(this, behaviors);
                        return triggerBuilder.buildBehaviorTriggers()
                    },
                    behaviorEvents: function(behaviorEvents, behaviors) {
                        var _behaviorsEvents = {};
                        _.each(behaviors, function(b, i) {
                            var _events = {};
                            var behaviorEvents = _.clone(_.result(b, "events")) || {};
                            behaviorEvents = Marionette.normalizeUIKeys(behaviorEvents, getBehaviorsUI(b));
                            var j = 0;
                            _.each(behaviorEvents, function(behaviour, key) {
                                var match = key.match(delegateEventSplitter);
                                var eventName = match[1] + "." + [this.cid, i, j++, " "].join("");
                                var selector = match[2];
                                var eventKey = eventName + selector;
                                var handler = _.isFunction(behaviour) ? behaviour : b[behaviour];
                                _events[eventKey] = _.bind(handler, b)
                            }, this);
                            _behaviorsEvents = _.extend(_behaviorsEvents, _events)
                        }, this);
                        return _behaviorsEvents
                    }
                };
                _.extend(Behaviors, {
                    behaviorsLookup: function() {
                        throw new Marionette.Error({
                            message: "You must define where your behaviors are stored.",
                            url: "marionette.behaviors.html#behaviorslookup"
                        })
                    },
                    getBehaviorClass: function(options, key) {
                        if (options.behaviorClass) {
                            return options.behaviorClass
                        }
                        return Marionette._getValue(Behaviors.behaviorsLookup, this, [options, key])[key]
                    },
                    parseBehaviors: function(view, behaviors) {
                        return _.chain(behaviors).map(function(options, key) {
                            var BehaviorClass = Behaviors.getBehaviorClass(options, key);
                            var behavior = new BehaviorClass(options, view);
                            var nestedBehaviors = Behaviors.parseBehaviors(view, _.result(behavior, "behaviors"));
                            return [behavior].concat(nestedBehaviors)
                        }).flatten().value()
                    },
                    wrap: function(view, behaviors, methodNames) {
                        _.each(methodNames, function(methodName) {
                            view[methodName] = _.partial(methods[methodName], view[methodName], behaviors)
                        })
                    }
                });

                function BehaviorTriggersBuilder(view, behaviors) {
                    this._view = view;
                    this._behaviors = behaviors;
                    this._triggers = {}
                }
                _.extend(BehaviorTriggersBuilder.prototype, {
                    buildBehaviorTriggers: function() {
                        _.each(this._behaviors, this._buildTriggerHandlersForBehavior, this);
                        return this._triggers
                    },
                    _buildTriggerHandlersForBehavior: function(behavior, i) {
                        var triggersHash = _.clone(_.result(behavior, "triggers")) || {};
                        triggersHash = Marionette.normalizeUIKeys(triggersHash, getBehaviorsUI(behavior));
                        _.each(triggersHash, _.bind(this._setHandlerForBehavior, this, behavior, i))
                    },
                    _setHandlerForBehavior: function(behavior, i, eventName, trigger) {
                        var triggerKey = trigger.replace(/^\S+/, function(triggerName) {
                            return triggerName + "." + "behaviortriggers" + i
                        });
                        this._triggers[triggerKey] = this._view._buildViewTrigger(eventName)
                    }
                });

                function getBehaviorsUI(behavior) {
                    return behavior._uiBindings || behavior.ui
                }
                return Behaviors
            }(Marionette, _);
            Marionette.AppRouter = Backbone.Router.extend({
                constructor: function(options) {
                    this.options = options || {};
                    Backbone.Router.apply(this, arguments);
                    var appRoutes = this.getOption("appRoutes");
                    var controller = this._getController();
                    this.processAppRoutes(controller, appRoutes);
                    this.on("route", this._processOnRoute, this)
                },
                appRoute: function(route, methodName) {
                    var controller = this._getController();
                    this._addAppRoute(controller, route, methodName)
                },
                _processOnRoute: function(routeName, routeArgs) {
                    if (_.isFunction(this.onRoute)) {
                        var routePath = _.invert(this.getOption("appRoutes"))[routeName];
                        this.onRoute(routeName, routePath, routeArgs)
                    }
                },
                processAppRoutes: function(controller, appRoutes) {
                    if (!appRoutes) {
                        return
                    }
                    var routeNames = _.keys(appRoutes).reverse();
                    _.each(routeNames, function(route) {
                        this._addAppRoute(controller, route, appRoutes[route])
                    }, this)
                },
                _getController: function() {
                    return this.getOption("controller")
                },
                _addAppRoute: function(controller, route, methodName) {
                    var method = controller[methodName];
                    if (!method) {
                        throw new Marionette.Error('Method "' + methodName + '" was not found on the controller')
                    }
                    this.route(route, methodName, _.bind(method, controller))
                },
                mergeOptions: Marionette.mergeOptions,
                getOption: Marionette.proxyGetOption,
                triggerMethod: Marionette.triggerMethod,
                bindEntityEvents: Marionette.proxyBindEntityEvents,
                unbindEntityEvents: Marionette.proxyUnbindEntityEvents
            });
            Marionette.Application = Marionette.Object.extend({
                constructor: function(options) {
                    this._initializeRegions(options);
                    this._initCallbacks = new Marionette.Callbacks;
                    this.submodules = {};
                    _.extend(this, options);
                    this._initChannel();
                    Marionette.Object.apply(this, arguments)
                },
                execute: function() {
                    this.commands.execute.apply(this.commands, arguments)
                },
                request: function() {
                    return this.reqres.request.apply(this.reqres, arguments)
                },
                addInitializer: function(initializer) {
                    this._initCallbacks.add(initializer)
                },
                start: function(options) {
                    this.triggerMethod("before:start", options);
                    this._initCallbacks.run(options, this);
                    this.triggerMethod("start", options)
                },
                addRegions: function(regions) {
                    return this._regionManager.addRegions(regions)
                },
                emptyRegions: function() {
                    return this._regionManager.emptyRegions()
                },
                removeRegion: function(region) {
                    return this._regionManager.removeRegion(region)
                },
                getRegion: function(region) {
                    return this._regionManager.get(region)
                },
                getRegions: function() {
                    return this._regionManager.getRegions()
                },
                module: function(moduleNames, moduleDefinition) {
                    var ModuleClass = Marionette.Module.getClass(moduleDefinition);
                    var args = _.toArray(arguments);
                    args.unshift(this);
                    return ModuleClass.create.apply(ModuleClass, args)
                },
                getRegionManager: function() {
                    return new Marionette.RegionManager
                },
                _initializeRegions: function(options) {
                    var regions = _.isFunction(this.regions) ? this.regions(options) : this.regions || {};
                    this._initRegionManager();
                    var optionRegions = Marionette.getOption(options, "regions");
                    if (_.isFunction(optionRegions)) {
                        optionRegions = optionRegions.call(this, options)
                    }
                    _.extend(regions, optionRegions);
                    this.addRegions(regions);
                    return this
                },
                _initRegionManager: function() {
                    this._regionManager = this.getRegionManager();
                    this._regionManager._parent = this;
                    this.listenTo(this._regionManager, "before:add:region", function() {
                        Marionette._triggerMethod(this, "before:add:region", arguments)
                    });
                    this.listenTo(this._regionManager, "add:region", function(name, region) {
                        this[name] = region;
                        Marionette._triggerMethod(this, "add:region", arguments)
                    });
                    this.listenTo(this._regionManager, "before:remove:region", function() {
                        Marionette._triggerMethod(this, "before:remove:region", arguments)
                    });
                    this.listenTo(this._regionManager, "remove:region", function(name) {
                        delete this[name];
                        Marionette._triggerMethod(this, "remove:region", arguments)
                    })
                },
                _initChannel: function() {
                    this.channelName = _.result(this, "channelName") || "global";
                    this.channel = _.result(this, "channel") || Backbone.Wreqr.radio.channel(this.channelName);
                    this.vent = _.result(this, "vent") || this.channel.vent;
                    this.commands = _.result(this, "commands") || this.channel.commands;
                    this.reqres = _.result(this, "reqres") || this.channel.reqres
                }
            });
            Marionette.Module = function(moduleName, app, options) {
                this.moduleName = moduleName;
                this.options = _.extend({}, this.options, options);
                this.initialize = options.initialize || this.initialize;
                this.submodules = {};
                this._setupInitializersAndFinalizers();
                this.app = app;
                if (_.isFunction(this.initialize)) {
                    this.initialize(moduleName, app, this.options)
                }
            };
            Marionette.Module.extend = Marionette.extend;
            _.extend(Marionette.Module.prototype, Backbone.Events, {
                startWithParent: true,
                initialize: function() {},
                addInitializer: function(callback) {
                    this._initializerCallbacks.add(callback)
                },
                addFinalizer: function(callback) {
                    this._finalizerCallbacks.add(callback)
                },
                start: function(options) {
                    if (this._isInitialized) {
                        return
                    }
                    _.each(this.submodules, function(mod) {
                        if (mod.startWithParent) {
                            mod.start(options)
                        }
                    });
                    this.triggerMethod("before:start", options);
                    this._initializerCallbacks.run(options, this);
                    this._isInitialized = true;
                    this.triggerMethod("start", options)
                },
                stop: function() {
                    if (!this._isInitialized) {
                        return
                    }
                    this._isInitialized = false;
                    this.triggerMethod("before:stop");
                    _.invoke(this.submodules, "stop");
                    this._finalizerCallbacks.run(undefined, this);
                    this._initializerCallbacks.reset();
                    this._finalizerCallbacks.reset();
                    this.triggerMethod("stop")
                },
                addDefinition: function(moduleDefinition, customArgs) {
                    this._runModuleDefinition(moduleDefinition, customArgs)
                },
                _runModuleDefinition: function(definition, customArgs) {
                    if (!definition) {
                        return
                    }
                    var args = _.flatten([this, this.app, Backbone, Marionette, Backbone.$, _, customArgs]);
                    definition.apply(this, args)
                },
                _setupInitializersAndFinalizers: function() {
                    this._initializerCallbacks = new Marionette.Callbacks;
                    this._finalizerCallbacks = new Marionette.Callbacks
                },
                triggerMethod: Marionette.triggerMethod
            });
            _.extend(Marionette.Module, {
                create: function(app, moduleNames, moduleDefinition) {
                    var module = app;
                    var customArgs = _.drop(arguments, 3);
                    moduleNames = moduleNames.split(".");
                    var length = moduleNames.length;
                    var moduleDefinitions = [];
                    moduleDefinitions[length - 1] = moduleDefinition;
                    _.each(moduleNames, function(moduleName, i) {
                        var parentModule = module;
                        module = this._getModule(parentModule, moduleName, app, moduleDefinition);
                        this._addModuleDefinition(parentModule, module, moduleDefinitions[i], customArgs)
                    }, this);
                    return module
                },
                _getModule: function(parentModule, moduleName, app, def, args) {
                    var options = _.extend({}, def);
                    var ModuleClass = this.getClass(def);
                    var module = parentModule[moduleName];
                    if (!module) {
                        module = new ModuleClass(moduleName, app, options);
                        parentModule[moduleName] = module;
                        parentModule.submodules[moduleName] = module
                    }
                    return module
                },
                getClass: function(moduleDefinition) {
                    var ModuleClass = Marionette.Module;
                    if (!moduleDefinition) {
                        return ModuleClass
                    }
                    if (moduleDefinition.prototype instanceof ModuleClass) {
                        return moduleDefinition
                    }
                    return moduleDefinition.moduleClass || ModuleClass
                },
                _addModuleDefinition: function(parentModule, module, def, args) {
                    var fn = this._getDefine(def);
                    var startWithParent = this._getStartWithParent(def, module);
                    if (fn) {
                        module.addDefinition(fn, args)
                    }
                    this._addStartWithParent(parentModule, module, startWithParent)
                },
                _getStartWithParent: function(def, module) {
                    var swp;
                    if (_.isFunction(def) && def.prototype instanceof Marionette.Module) {
                        swp = module.constructor.prototype.startWithParent;
                        return _.isUndefined(swp) ? true : swp
                    }
                    if (_.isObject(def)) {
                        swp = def.startWithParent;
                        return _.isUndefined(swp) ? true : swp
                    }
                    return true
                },
                _getDefine: function(def) {
                    if (_.isFunction(def) && !(def.prototype instanceof Marionette.Module)) {
                        return def
                    }
                    if (_.isObject(def)) {
                        return def.define
                    }
                    return null
                },
                _addStartWithParent: function(parentModule, module, startWithParent) {
                    module.startWithParent = module.startWithParent && startWithParent;
                    if (!module.startWithParent || !!module.startWithParentIsConfigured) {
                        return
                    }
                    module.startWithParentIsConfigured = true;
                    parentModule.addInitializer(function(options) {
                        if (module.startWithParent) {
                            module.start(options)
                        }
                    })
                }
            });
            return Marionette
        })
    }, {
        backbone: 25,
        "backbone.babysitter": 10,
        "backbone.wreqr": 11,
        underscore: 47
    }],
    10: [function(require, module, exports) {
        (function(root, factory) {
            if (typeof define === "function" && define.amd) {
                define(["backbone", "underscore"], function(Backbone, _) {
                    return factory(Backbone, _)
                })
            } else if (typeof exports !== "undefined") {
                var Backbone = require("backbone");
                var _ = require("underscore");
                module.exports = factory(Backbone, _)
            } else {
                factory(root.Backbone, root._)
            }
        })(this, function(Backbone, _) {
            "use strict";
            var previousChildViewContainer = Backbone.ChildViewContainer;
            Backbone.ChildViewContainer = function(Backbone, _) {
                var Container = function(views) {
                    this._views = {};
                    this._indexByModel = {};
                    this._indexByCustom = {};
                    this._updateLength();
                    _.each(views, this.add, this)
                };
                _.extend(Container.prototype, {
                    add: function(view, customIndex) {
                        var viewCid = view.cid;
                        this._views[viewCid] = view;
                        if (view.model) {
                            this._indexByModel[view.model.cid] = viewCid
                        }
                        if (customIndex) {
                            this._indexByCustom[customIndex] = viewCid
                        }
                        this._updateLength();
                        return this
                    },
                    findByModel: function(model) {
                        return this.findByModelCid(model.cid)
                    },
                    findByModelCid: function(modelCid) {
                        var viewCid = this._indexByModel[modelCid];
                        return this.findByCid(viewCid)
                    },
                    findByCustom: function(index) {
                        var viewCid = this._indexByCustom[index];
                        return this.findByCid(viewCid)
                    },
                    findByIndex: function(index) {
                        return _.values(this._views)[index]
                    },
                    findByCid: function(cid) {
                        return this._views[cid]
                    },
                    remove: function(view) {
                        var viewCid = view.cid;
                        if (view.model) {
                            delete this._indexByModel[view.model.cid]
                        }
                        _.any(this._indexByCustom, function(cid, key) {
                            if (cid === viewCid) {
                                delete this._indexByCustom[key];
                                return true
                            }
                        }, this);
                        delete this._views[viewCid];
                        this._updateLength();
                        return this
                    },
                    call: function(method) {
                        this.apply(method, _.tail(arguments))
                    },
                    apply: function(method, args) {
                        _.each(this._views, function(view) {
                            if (_.isFunction(view[method])) {
                                view[method].apply(view, args || [])
                            }
                        })
                    },
                    _updateLength: function() {
                        this.length = _.size(this._views)
                    }
                });
                var methods = ["forEach", "each", "map", "find", "detect", "filter", "select", "reject", "every", "all", "some", "any", "include", "contains", "invoke", "toArray", "first", "initial", "rest", "last", "without", "isEmpty", "pluck", "reduce"];
                _.each(methods, function(method) {
                    Container.prototype[method] = function() {
                        var views = _.values(this._views);
                        var args = [views].concat(_.toArray(arguments));
                        return _[method].apply(_, args)
                    }
                });
                return Container
            }(Backbone, _);
            Backbone.ChildViewContainer.VERSION = "0.1.10";
            Backbone.ChildViewContainer.noConflict = function() {
                Backbone.ChildViewContainer = previousChildViewContainer;
                return this
            };
            return Backbone.ChildViewContainer
        })
    }, {
        backbone: 25,
        underscore: 47
    }],
    11: [function(require, module, exports) {
        (function(root, factory) {
            if (typeof define === "function" && define.amd) {
                define(["backbone", "underscore"], function(Backbone, _) {
                    return factory(Backbone, _)
                })
            } else if (typeof exports !== "undefined") {
                var Backbone = require("backbone");
                var _ = require("underscore");
                module.exports = factory(Backbone, _)
            } else {
                factory(root.Backbone, root._)
            }
        })(this, function(Backbone, _) {
            "use strict";
            var previousWreqr = Backbone.Wreqr;
            var Wreqr = Backbone.Wreqr = {};
            Backbone.Wreqr.VERSION = "1.3.5";
            Backbone.Wreqr.noConflict = function() {
                Backbone.Wreqr = previousWreqr;
                return this
            };
            Wreqr.Handlers = function(Backbone, _) {
                "use strict";
                var Handlers = function(options) {
                    this.options = options;
                    this._wreqrHandlers = {};
                    if (_.isFunction(this.initialize)) {
                        this.initialize(options)
                    }
                };
                Handlers.extend = Backbone.Model.extend;
                _.extend(Handlers.prototype, Backbone.Events, {
                    setHandlers: function(handlers) {
                        _.each(handlers, function(handler, name) {
                            var context = null;
                            if (_.isObject(handler) && !_.isFunction(handler)) {
                                context = handler.context;
                                handler = handler.callback
                            }
                            this.setHandler(name, handler, context)
                        }, this)
                    },
                    setHandler: function(name, handler, context) {
                        var config = {
                            callback: handler,
                            context: context
                        };
                        this._wreqrHandlers[name] = config;
                        this.trigger("handler:add", name, handler, context)
                    },
                    hasHandler: function(name) {
                        return !!this._wreqrHandlers[name]
                    },
                    getHandler: function(name) {
                        var config = this._wreqrHandlers[name];
                        if (!config) {
                            return
                        }
                        return function() {
                            return config.callback.apply(config.context, arguments)
                        }
                    },
                    removeHandler: function(name) {
                        delete this._wreqrHandlers[name]
                    },
                    removeAllHandlers: function() {
                        this._wreqrHandlers = {}
                    }
                });
                return Handlers
            }(Backbone, _);
            Wreqr.CommandStorage = function() {
                "use strict";
                var CommandStorage = function(options) {
                    this.options = options;
                    this._commands = {};
                    if (_.isFunction(this.initialize)) {
                        this.initialize(options)
                    }
                };
                _.extend(CommandStorage.prototype, Backbone.Events, {
                    getCommands: function(commandName) {
                        var commands = this._commands[commandName];
                        if (!commands) {
                            commands = {
                                command: commandName,
                                instances: []
                            };
                            this._commands[commandName] = commands
                        }
                        return commands
                    },
                    addCommand: function(commandName, args) {
                        var command = this.getCommands(commandName);
                        command.instances.push(args)
                    },
                    clearCommands: function(commandName) {
                        var command = this.getCommands(commandName);
                        command.instances = []
                    }
                });
                return CommandStorage
            }();
            Wreqr.Commands = function(Wreqr, _) {
                "use strict";
                return Wreqr.Handlers.extend({
                    storageType: Wreqr.CommandStorage,
                    constructor: function(options) {
                        this.options = options || {};
                        this._initializeStorage(this.options);
                        this.on("handler:add", this._executeCommands, this);
                        Wreqr.Handlers.prototype.constructor.apply(this, arguments)
                    },
                    execute: function(name) {
                        name = arguments[0];
                        var args = _.rest(arguments);
                        if (this.hasHandler(name)) {
                            this.getHandler(name).apply(this, args)
                        } else {
                            this.storage.addCommand(name, args)
                        }
                    },
                    _executeCommands: function(name, handler, context) {
                        var command = this.storage.getCommands(name);
                        _.each(command.instances, function(args) {
                            handler.apply(context, args)
                        });
                        this.storage.clearCommands(name)
                    },
                    _initializeStorage: function(options) {
                        var storage;
                        var StorageType = options.storageType || this.storageType;
                        if (_.isFunction(StorageType)) {
                            storage = new StorageType
                        } else {
                            storage = StorageType
                        }
                        this.storage = storage
                    }
                })
            }(Wreqr, _);
            Wreqr.RequestResponse = function(Wreqr, _) {
                "use strict";
                return Wreqr.Handlers.extend({
                    request: function(name) {
                        if (this.hasHandler(name)) {
                            return this.getHandler(name).apply(this, _.rest(arguments))
                        }
                    }
                })
            }(Wreqr, _);
            Wreqr.EventAggregator = function(Backbone, _) {
                "use strict";
                var EA = function() {};
                EA.extend = Backbone.Model.extend;
                _.extend(EA.prototype, Backbone.Events);
                return EA
            }(Backbone, _);
            Wreqr.Channel = function(Wreqr) {
                "use strict";
                var Channel = function(channelName) {
                    this.vent = new Backbone.Wreqr.EventAggregator;
                    this.reqres = new Backbone.Wreqr.RequestResponse;
                    this.commands = new Backbone.Wreqr.Commands;
                    this.channelName = channelName
                };
                _.extend(Channel.prototype, {
                    reset: function() {
                        this.vent.off();
                        this.vent.stopListening();
                        this.reqres.removeAllHandlers();
                        this.commands.removeAllHandlers();
                        return this
                    },
                    connectEvents: function(hash, context) {
                        this._connect("vent", hash, context);
                        return this
                    },
                    connectCommands: function(hash, context) {
                        this._connect("commands", hash, context);
                        return this
                    },
                    connectRequests: function(hash, context) {
                        this._connect("reqres", hash, context);
                        return this
                    },
                    _connect: function(type, hash, context) {
                        if (!hash) {
                            return
                        }
                        context = context || this;
                        var method = type === "vent" ? "on" : "setHandler";
                        _.each(hash, function(fn, eventName) {
                            this[type][method](eventName, _.bind(fn, context))
                        }, this)
                    }
                });
                return Channel
            }(Wreqr);
            Wreqr.radio = function(Wreqr, _) {
                "use strict";
                var Radio = function() {
                    this._channels = {};
                    this.vent = {};
                    this.commands = {};
                    this.reqres = {};
                    this._proxyMethods()
                };
                _.extend(Radio.prototype, {
                    channel: function(channelName) {
                        if (!channelName) {
                            throw new Error("Channel must receive a name")
                        }
                        return this._getChannel(channelName)
                    },
                    _getChannel: function(channelName) {
                        var channel = this._channels[channelName];
                        if (!channel) {
                            channel = new Wreqr.Channel(channelName);
                            this._channels[channelName] = channel
                        }
                        return channel
                    },
                    _proxyMethods: function() {
                        _.each(["vent", "commands", "reqres"], function(system) {
                            _.each(messageSystems[system], function(method) {
                                this[system][method] = proxyMethod(this, system, method)
                            }, this)
                        }, this)
                    }
                });
                var messageSystems = {
                    vent: ["on", "off", "trigger", "once", "stopListening", "listenTo", "listenToOnce"],
                    commands: ["execute", "setHandler", "setHandlers", "removeHandler", "removeAllHandlers"],
                    reqres: ["request", "setHandler", "setHandlers", "removeHandler", "removeAllHandlers"]
                };
                var proxyMethod = function(radio, system, method) {
                    return function(channelName) {
                        var messageSystem = radio._getChannel(channelName)[system];
                        return messageSystem[method].apply(messageSystem, _.rest(arguments))
                    }
                };
                return new Radio
            }(Wreqr, _);
            return Backbone.Wreqr
        })
    }, {
        backbone: 25,
        underscore: 47
    }],
    12: [function(require, module, exports) {
        (function(global, factory) {
            typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory(require("underscore"), require("backbone")) : typeof define === "function" && define.amd ? define(["underscore", "backbone"], factory) : global.Backbone.Radio = factory(global._, global.Backbone)
        })(this, function(_, Backbone) {
            "use strict";
            var previousRadio = Backbone.Radio;
            var Radio = Backbone.Radio = {};
            Radio.VERSION = "1.0.2";
            Radio.noConflict = function() {
                Backbone.Radio = previousRadio;
                return this
            };
            Radio.DEBUG = false;
            Radio._debugText = function(warning, eventName, channelName) {
                return warning + (channelName ? " on the " + channelName + " channel" : "") + ': "' + eventName + '"'
            };
            Radio.debugLog = function(warning, eventName, channelName) {
                if (Radio.DEBUG && console && console.warn) {
                    console.warn(Radio._debugText(warning, eventName, channelName))
                }
            };
            var eventSplitter = /\s+/;
            Radio._eventsApi = function(obj, action, name, rest) {
                if (!name) {
                    return false
                }
                var results = {};
                if (typeof name === "object") {
                    for (var key in name) {
                        var result = obj[action].apply(obj, [key, name[key]].concat(rest));
                        eventSplitter.test(key) ? _.extend(results, result) : results[key] = result
                    }
                    return results
                }
                if (eventSplitter.test(name)) {
                    var names = name.split(eventSplitter);
                    for (var i = 0, l = names.length; i < l; i++) {
                        results[names[i]] = obj[action].apply(obj, [names[i]].concat(rest))
                    }
                    return results
                }
                return false
            };
            Radio._callHandler = function(callback, context, args) {
                var a1 = args[0],
                    a2 = args[1],
                    a3 = args[2];
                switch (args.length) {
                    case 0:
                        return callback.call(context);
                    case 1:
                        return callback.call(context, a1);
                    case 2:
                        return callback.call(context, a1, a2);
                    case 3:
                        return callback.call(context, a1, a2, a3);
                    default:
                        return callback.apply(context, args)
                }
            };

            function removeHandler(store, name, callback, context) {
                var event = store[name];
                if ((!callback || (callback === event.callback || callback === event.callback._callback)) && (!context || context === event.context)) {
                    delete store[name];
                    return true
                }
            }

            function removeHandlers(store, name, callback, context) {
                store || (store = {});
                var names = name ? [name] : _.keys(store);
                var matched = false;
                for (var i = 0, length = names.length; i < length; i++) {
                    name = names[i];
                    if (!store[name]) {
                        continue
                    }
                    if (removeHandler(store, name, callback, context)) {
                        matched = true
                    }
                }
                return matched
            }
            var _logs = {};

            function _partial(channelName) {
                return _logs[channelName] || (_logs[channelName] = _.partial(Radio.log, channelName))
            }
            _.extend(Radio, {
                log: function log(channelName, eventName) {
                    var args = _.rest(arguments, 2);
                    console.log("[" + channelName + '] "' + eventName + '"', args)
                },
                tuneIn: function tuneIn(channelName) {
                    var channel = Radio.channel(channelName);
                    channel._tunedIn = true;
                    channel.on("all", _partial(channelName));
                    return this
                },
                tuneOut: function tuneOut(channelName) {
                    var channel = Radio.channel(channelName);
                    channel._tunedIn = false;
                    channel.off("all", _partial(channelName));
                    delete _logs[channelName];
                    return this
                }
            });

            function makeCallback(callback) {
                return _.isFunction(callback) ? callback : function() {
                    return callback
                }
            }
            Radio.Requests = {
                request: function request(name) {
                    var args = _.rest(arguments);
                    var results = Radio._eventsApi(this, "request", name, args);
                    if (results) {
                        return results
                    }
                    var channelName = this.channelName;
                    var requests = this._requests;
                    if (channelName && this._tunedIn) {
                        Radio.log.apply(this, [channelName, name].concat(args))
                    }
                    if (requests && (requests[name] || requests["default"])) {
                        var handler = requests[name] || requests["default"];
                        args = requests[name] ? args : arguments;
                        return Radio._callHandler(handler.callback, handler.context, args)
                    } else {
                        Radio.debugLog("An unhandled request was fired", name, channelName)
                    }
                },
                reply: function reply(name, callback, context) {
                    if (Radio._eventsApi(this, "reply", name, [callback, context])) {
                        return this
                    }
                    this._requests || (this._requests = {});
                    if (this._requests[name]) {
                        Radio.debugLog("A request was overwritten", name, this.channelName)
                    }
                    this._requests[name] = {
                        callback: makeCallback(callback),
                        context: context || this
                    };
                    return this
                },
                replyOnce: function replyOnce(name, callback, context) {
                    if (Radio._eventsApi(this, "replyOnce", name, [callback, context])) {
                        return this
                    }
                    var self = this;
                    var once = _.once(function() {
                        self.stopReplying(name);
                        return makeCallback(callback).apply(this, arguments)
                    });
                    return this.reply(name, once, context)
                },
                stopReplying: function stopReplying(name, callback, context) {
                    if (Radio._eventsApi(this, "stopReplying", name)) {
                        return this
                    }
                    if (!name && !callback && !context) {
                        delete this._requests
                    } else if (!removeHandlers(this._requests, name, callback, context)) {
                        Radio.debugLog("Attempted to remove the unregistered request", name, this.channelName)
                    }
                    return this
                }
            };
            Radio._channels = {};
            Radio.channel = function(channelName) {
                if (!channelName) {
                    throw new Error("You must provide a name for the channel.")
                }
                if (Radio._channels[channelName]) {
                    return Radio._channels[channelName]
                } else {
                    return Radio._channels[channelName] = new Radio.Channel(channelName)
                }
            };
            Radio.Channel = function(channelName) {
                this.channelName = channelName
            };
            _.extend(Radio.Channel.prototype, Backbone.Events, Radio.Requests, {
                reset: function reset() {
                    this.off();
                    this.stopListening();
                    this.stopReplying();
                    return this
                }
            });
            var channel, args, systems = [Backbone.Events, Radio.Commands, Radio.Requests];
            _.each(systems, function(system) {
                _.each(system, function(method, methodName) {
                    Radio[methodName] = function(channelName) {
                        args = _.rest(arguments);
                        channel = this.channel(channelName);
                        return channel[methodName].apply(channel, args)
                    }
                })
            });
            Radio.reset = function(channelName) {
                var channels = !channelName ? this._channels : [this._channels[channelName]];
                _.invoke(channels, "reset")
            };
            var backbone_radio = Radio;
            return backbone_radio
        })
    }, {
        backbone: 25,
        underscore: 47
    }],
    13: [function(require, module, exports) {
        (function(global, factory) {
            typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory(require("backbone-metal-classify"), require("backbone-normalize-hash"), require("backbone.radio"), require("underscore"), require("es6-promise")) : typeof define === "function" && define.amd ? define(["backbone-metal-classify", "backbone-normalize-hash", "backbone.radio", "underscore", "es6-promise"], factory) : global.Backbone.Service = factory(global.classify, global.normalizeHash, global.Radio, global._, global.PromisePolyfill)
        })(this, function(classify, normalizeHash, Radio, _, PromisePolyfill) {
            "use strict";
            var resolved = PromisePolyfill.Promise.resolve();
            Radio.Channel = classify(Radio.Channel);
            var backbone_service = Radio.Channel.extend({
                constructor: function constructor() {
                    var _this = this;
                    var start = _.once(function() {
                        return resolved.then(function() {
                            return _this.start()
                        })
                    });
                    var requests = normalizeHash(this, "requests");
                    _.each(requests, function(val, key) {
                        _this.reply(key, function() {
                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                args[_key] = arguments[_key]
                            }
                            return start().then(function() {
                                return _this[key].apply(_this, args)
                            })["catch"](function(err) {
                                _this.onError(err);
                                throw err
                            })
                        })
                    });
                    this._super.apply(this, arguments)
                },
                setup: function setup() {},
                start: function start() {},
                onError: function onError() {}
            });
            return backbone_service
        })
    }, {
        "backbone-metal-classify": 14,
        "backbone-normalize-hash": 16,
        "backbone.radio": 17,
        "es6-promise": 19,
        underscore: 20
    }],
    14: [function(require, module, exports) {
        var Metal = require("backbone-metal");
        var _ = require("underscore");
        module.exports = function classify(target) {
            if (target.prototype instanceof Metal.Class) {
                return target
            }
            return Metal.Class.extend(_.extend({
                constructor: target
            }, _.omit(target.prototype, _.keys(Metal.Class.prototype))), _.omit(target, _.keys(Metal.Class)))
        }
    }, {
        "backbone-metal": 15,
        underscore: 20
    }],
    15: [function(require, module, exports) {
        arguments[4][5][0].apply(exports, arguments)
    }, {
        backbone: 25,
        dup: 5,
        underscore: 20
    }],
    16: [function(require, module, exports) {
        var _ = require("underscore");
        module.exports = function normalizeHash(source, hash) {
            var obj = _.result(source, hash);
            var clone = {};
            _.each(obj, function(val, key) {
                clone[key] = _.isFunction(val) ? val : source[key]
            });
            return clone
        }
    }, {
        underscore: 20
    }],
    17: [function(require, module, exports) {
        (function(global, factory) {
            typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory(require("underscore"), require("backbone")) : typeof define === "function" && define.amd ? define(["underscore", "backbone"], factory) : global.Backbone.Radio = factory(global._, global.Backbone)
        })(this, function(_, Backbone) {
            "use strict";
            var previousRadio = Backbone.Radio;
            var Radio = Backbone.Radio = {};
            Radio.VERSION = "0.9.1";
            Radio.noConflict = function() {
                Backbone.Radio = previousRadio;
                return this
            };
            Radio.DEBUG = false;
            Radio._debugText = function(warning, eventName, channelName) {
                return warning + (channelName ? " on the " + channelName + " channel" : "") + ': "' + eventName + '"'
            };
            Radio.debugLog = function(warning, eventName, channelName) {
                if (Radio.DEBUG && console && console.warn) {
                    console.warn(Radio._debugText(warning, eventName, channelName))
                }
            };
            var eventSplitter = /\s+/;
            Radio._eventsApi = function(obj, action, name, rest) {
                if (!name) {
                    return false
                }
                var results = {};
                if (typeof name === "object") {
                    for (var key in name) {
                        var result = obj[action].apply(obj, [key, name[key]].concat(rest));
                        eventSplitter.test(key) ? _.extend(results, result) : results[key] = result
                    }
                    return results
                }
                if (eventSplitter.test(name)) {
                    var names = name.split(eventSplitter);
                    for (var i = 0, l = names.length; i < l; i++) {
                        results[names[i]] = obj[action].apply(obj, [names[i]].concat(rest))
                    }
                    return results
                }
                return false
            };
            Radio._callHandler = function(callback, context, args) {
                var a1 = args[0],
                    a2 = args[1],
                    a3 = args[2];
                switch (args.length) {
                    case 0:
                        return callback.call(context);
                    case 1:
                        return callback.call(context, a1);
                    case 2:
                        return callback.call(context, a1, a2);
                    case 3:
                        return callback.call(context, a1, a2, a3);
                    default:
                        return callback.apply(context, args)
                }
            };

            function removeHandler(store, name, callback, context) {
                var event = store[name];
                if ((!callback || (callback === event.callback || callback === event.callback._callback)) && (!context || context === event.context)) {
                    delete store[name];
                    return true
                }
            }

            function removeHandlers(store, name, callback, context) {
                store || (store = {});
                var names = name ? [name] : _.keys(store);
                var matched = false;
                for (var i = 0, length = names.length; i < length; i++) {
                    name = names[i];
                    if (!store[name]) {
                        continue
                    }
                    if (removeHandler(store, name, callback, context)) {
                        matched = true
                    }
                }
                return matched
            }
            var _logs = {};

            function _partial(channelName) {
                return _logs[channelName] || (_logs[channelName] = _.partial(Radio.log, channelName))
            }
            _.extend(Radio, {
                log: function log(channelName, eventName) {
                    var args = _.rest(arguments, 2);
                    console.log("[" + channelName + '] "' + eventName + '"', args)
                },
                tuneIn: function tuneIn(channelName) {
                    var channel = Radio.channel(channelName);
                    channel._tunedIn = true;
                    channel.on("all", _partial(channelName));
                    return this
                },
                tuneOut: function tuneOut(channelName) {
                    var channel = Radio.channel(channelName);
                    channel._tunedIn = false;
                    channel.off("all", _partial(channelName));
                    delete _logs[channelName];
                    return this
                }
            });
            Radio.Commands = {
                command: function command(name) {
                    var args = _.rest(arguments);
                    if (Radio._eventsApi(this, "command", name, args)) {
                        return this
                    }
                    var channelName = this.channelName;
                    var commands = this._commands;
                    if (channelName && this._tunedIn) {
                        Radio.log.apply(this, [channelName, name].concat(args))
                    }
                    if (commands && (commands[name] || commands["default"])) {
                        var handler = commands[name] || commands["default"];
                        args = commands[name] ? args : arguments;
                        Radio._callHandler(handler.callback, handler.context, args)
                    } else {
                        Radio.debugLog("An unhandled command was fired", name, channelName)
                    }
                    return this
                },
                comply: function comply(name, callback, context) {
                    if (Radio._eventsApi(this, "comply", name, [callback, context])) {
                        return this
                    }
                    this._commands || (this._commands = {});
                    if (this._commands[name]) {
                        Radio.debugLog("A command was overwritten", name, this.channelName)
                    }
                    this._commands[name] = {
                        callback: callback,
                        context: context || this
                    };
                    return this
                },
                complyOnce: function complyOnce(name, callback, context) {
                    if (Radio._eventsApi(this, "complyOnce", name, [callback, context])) {
                        return this
                    }
                    var self = this;
                    var once = _.once(function() {
                        self.stopComplying(name);
                        return callback.apply(this, arguments)
                    });
                    return this.comply(name, once, context)
                },
                stopComplying: function stopComplying(name, callback, context) {
                    if (Radio._eventsApi(this, "stopComplying", name)) {
                        return this
                    }
                    if (!name && !callback && !context) {
                        delete this._commands
                    } else if (!removeHandlers(this._commands, name, callback, context)) {
                        Radio.debugLog("Attempted to remove the unregistered command", name, this.channelName)
                    }
                    return this
                }
            };

            function makeCallback(callback) {
                return _.isFunction(callback) ? callback : function() {
                    return callback
                }
            }
            Radio.Requests = {
                request: function request(name) {
                    var args = _.rest(arguments);
                    var results = Radio._eventsApi(this, "request", name, args);
                    if (results) {
                        return results
                    }
                    var channelName = this.channelName;
                    var requests = this._requests;
                    if (channelName && this._tunedIn) {
                        Radio.log.apply(this, [channelName, name].concat(args))
                    }
                    if (requests && (requests[name] || requests["default"])) {
                        var handler = requests[name] || requests["default"];
                        args = requests[name] ? args : arguments;
                        return Radio._callHandler(handler.callback, handler.context, args)
                    } else {
                        Radio.debugLog("An unhandled request was fired", name, channelName)
                    }
                },
                reply: function reply(name, callback, context) {
                    if (Radio._eventsApi(this, "reply", name, [callback, context])) {
                        return this
                    }
                    this._requests || (this._requests = {});
                    if (this._requests[name]) {
                        Radio.debugLog("A request was overwritten", name, this.channelName)
                    }
                    this._requests[name] = {
                        callback: makeCallback(callback),
                        context: context || this
                    };
                    return this
                },
                replyOnce: function replyOnce(name, callback, context) {
                    if (Radio._eventsApi(this, "replyOnce", name, [callback, context])) {
                        return this
                    }
                    var self = this;
                    var once = _.once(function() {
                        self.stopReplying(name);
                        return makeCallback(callback).apply(this, arguments)
                    });
                    return this.reply(name, once, context)
                },
                stopReplying: function stopReplying(name, callback, context) {
                    if (Radio._eventsApi(this, "stopReplying", name)) {
                        return this
                    }
                    if (!name && !callback && !context) {
                        delete this._requests
                    } else if (!removeHandlers(this._requests, name, callback, context)) {
                        Radio.debugLog("Attempted to remove the unregistered request", name, this.channelName)
                    }
                    return this
                }
            };
            Radio._channels = {};
            Radio.channel = function(channelName) {
                if (!channelName) {
                    throw new Error("You must provide a name for the channel.")
                }
                if (Radio._channels[channelName]) {
                    return Radio._channels[channelName]
                } else {
                    return Radio._channels[channelName] = new Radio.Channel(channelName)
                }
            };
            Radio.Channel = function(channelName) {
                this.channelName = channelName
            };
            _.extend(Radio.Channel.prototype, Backbone.Events, Radio.Commands, Radio.Requests, {
                reset: function reset() {
                    this.off();
                    this.stopListening();
                    this.stopComplying();
                    this.stopReplying();
                    return this
                }
            });
            var channel, args, systems = [Backbone.Events, Radio.Commands, Radio.Requests];
            _.each(systems, function(system) {
                _.each(system, function(method, methodName) {
                    Radio[methodName] = function(channelName) {
                        args = _.rest(arguments);
                        channel = this.channel(channelName);
                        return channel[methodName].apply(channel, args)
                    }
                })
            });
            Radio.reset = function(channelName) {
                var channels = !channelName ? this._channels : [this._channels[channelName]];
                _.invoke(channels, "reset")
            };
            var backbone_radio = Radio;
            return backbone_radio
        })
    }, {
        backbone: 18,
        underscore: 20
    }],
    18: [function(require, module, exports) {
        (function(global) {
            (function(factory) {
                var root = typeof self == "object" && self.self == self && self || typeof global == "object" && global.global == global && global;
                if (typeof define === "function" && define.amd) {
                    define(["underscore", "jquery", "exports"], function(_, $, exports) {
                        root.Backbone = factory(root, exports, _, $)
                    })
                } else if (typeof exports !== "undefined") {
                    var _ = require("underscore"),
                        $;
                    try {
                        $ = require("jquery")
                    } catch (e) {}
                    factory(root, exports, _, $)
                } else {
                    root.Backbone = factory(root, {}, root._, root.jQuery || root.Zepto || root.ender || root.$)
                }
            })(function(root, Backbone, _, $) {
                var previousBackbone = root.Backbone;
                var slice = [].slice;
                Backbone.VERSION = "1.2.1";
                Backbone.$ = $;
                Backbone.noConflict = function() {
                    root.Backbone = previousBackbone;
                    return this
                };
                Backbone.emulateHTTP = false;
                Backbone.emulateJSON = false;
                var addMethod = function(length, method, attribute) {
                    switch (length) {
                        case 1:
                            return function() {
                                return _[method](this[attribute])
                            };
                        case 2:
                            return function(value) {
                                return _[method](this[attribute], value)
                            };
                        case 3:
                            return function(iteratee, context) {
                                return _[method](this[attribute], iteratee, context)
                            };
                        case 4:
                            return function(iteratee, defaultVal, context) {
                                return _[method](this[attribute], iteratee, defaultVal, context)
                            };
                        default:
                            return function() {
                                var args = slice.call(arguments);
                                args.unshift(this[attribute]);
                                return _[method].apply(_, args)
                            }
                    }
                };
                var addUnderscoreMethods = function(Class, methods, attribute) {
                    _.each(methods, function(length, method) {
                        if (_[method]) Class.prototype[method] = addMethod(length, method, attribute)
                    })
                };
                var Events = Backbone.Events = {};
                var eventSplitter = /\s+/;
                var eventsApi = function(iteratee, memo, name, callback, opts) {
                    var i = 0,
                        names;
                    if (name && typeof name === "object") {
                        if (callback !== void 0 && "context" in opts && opts.context === void 0) opts.context = callback;
                        for (names = _.keys(name); i < names.length; i++) {
                            memo = iteratee(memo, names[i], name[names[i]], opts)
                        }
                    } else if (name && eventSplitter.test(name)) {
                        for (names = name.split(eventSplitter); i < names.length; i++) {
                            memo = iteratee(memo, names[i], callback, opts)
                        }
                    } else {
                        memo = iteratee(memo, name, callback, opts)
                    }
                    return memo
                };
                Events.on = function(name, callback, context) {
                    return internalOn(this, name, callback, context)
                };
                var internalOn = function(obj, name, callback, context, listening) {
                    obj._events = eventsApi(onApi, obj._events || {}, name, callback, {
                        context: context,
                        ctx: obj,
                        listening: listening
                    });
                    if (listening) {
                        var listeners = obj._listeners || (obj._listeners = {});
                        listeners[listening.id] = listening
                    }
                    return obj
                };
                Events.listenTo = function(obj, name, callback) {
                    if (!obj) return this;
                    var id = obj._listenId || (obj._listenId = _.uniqueId("l"));
                    var listeningTo = this._listeningTo || (this._listeningTo = {});
                    var listening = listeningTo[id];
                    if (!listening) {
                        var thisId = this._listenId || (this._listenId = _.uniqueId("l"));
                        listening = listeningTo[id] = {
                            obj: obj,
                            objId: id,
                            id: thisId,
                            listeningTo: listeningTo,
                            count: 0
                        }
                    }
                    internalOn(obj, name, callback, this, listening);
                    return this
                };
                var onApi = function(events, name, callback, options) {
                    if (callback) {
                        var handlers = events[name] || (events[name] = []);
                        var context = options.context,
                            ctx = options.ctx,
                            listening = options.listening;
                        if (listening) listening.count++;
                        handlers.push({
                            callback: callback,
                            context: context,
                            ctx: context || ctx,
                            listening: listening
                        })
                    }
                    return events
                };
                Events.off = function(name, callback, context) {
                    if (!this._events) return this;
                    this._events = eventsApi(offApi, this._events, name, callback, {
                        context: context,
                        listeners: this._listeners
                    });
                    return this
                };
                Events.stopListening = function(obj, name, callback) {
                    var listeningTo = this._listeningTo;
                    if (!listeningTo) return this;
                    var ids = obj ? [obj._listenId] : _.keys(listeningTo);
                    for (var i = 0; i < ids.length; i++) {
                        var listening = listeningTo[ids[i]];
                        if (!listening) break;
                        listening.obj.off(name, callback, this)
                    }
                    if (_.isEmpty(listeningTo)) this._listeningTo = void 0;
                    return this
                };
                var offApi = function(events, name, callback, options) {
                    if (!events) return;
                    var i = 0,
                        listening;
                    var context = options.context,
                        listeners = options.listeners;
                    if (!name && !callback && !context) {
                        var ids = _.keys(listeners);
                        for (; i < ids.length; i++) {
                            listening = listeners[ids[i]];
                            delete listeners[listening.id];
                            delete listening.listeningTo[listening.objId]
                        }
                        return
                    }
                    var names = name ? [name] : _.keys(events);
                    for (; i < names.length; i++) {
                        name = names[i];
                        var handlers = events[name];
                        if (!handlers) break;
                        var remaining = [];
                        for (var j = 0; j < handlers.length; j++) {
                            var handler = handlers[j];
                            if (callback && callback !== handler.callback && callback !== handler.callback._callback || context && context !== handler.context) {
                                remaining.push(handler)
                            } else {
                                listening = handler.listening;
                                if (listening && --listening.count === 0) {
                                    delete listeners[listening.id];
                                    delete listening.listeningTo[listening.objId]
                                }
                            }
                        }
                        if (remaining.length) {
                            events[name] = remaining
                        } else {
                            delete events[name]
                        }
                    }
                    if (_.size(events)) return events
                };
                Events.once = function(name, callback, context) {
                    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.off, this));
                    return this.on(events, void 0, context)
                };
                Events.listenToOnce = function(obj, name, callback) {
                    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.stopListening, this, obj));
                    return this.listenTo(obj, events)
                };
                var onceMap = function(map, name, callback, offer) {
                    if (callback) {
                        var once = map[name] = _.once(function() {
                            offer(name, once);
                            callback.apply(this, arguments)
                        });
                        once._callback = callback
                    }
                    return map
                };
                Events.trigger = function(name) {
                    if (!this._events) return this;
                    var length = Math.max(0, arguments.length - 1);
                    var args = Array(length);
                    for (var i = 0; i < length; i++) args[i] = arguments[i + 1];
                    eventsApi(triggerApi, this._events, name, void 0, args);
                    return this
                };
                var triggerApi = function(objEvents, name, cb, args) {
                    if (objEvents) {
                        var events = objEvents[name];
                        var allEvents = objEvents.all;
                        if (events && allEvents) allEvents = allEvents.slice();
                        if (events) triggerEvents(events, args);
                        if (allEvents) triggerEvents(allEvents, [name].concat(args))
                    }
                    return objEvents
                };
                var triggerEvents = function(events, args) {
                    var ev, i = -1,
                        l = events.length,
                        a1 = args[0],
                        a2 = args[1],
                        a3 = args[2];
                    switch (args.length) {
                        case 0:
                            while (++i < l)(ev = events[i]).callback.call(ev.ctx);
                            return;
                        case 1:
                            while (++i < l)(ev = events[i]).callback.call(ev.ctx, a1);
                            return;
                        case 2:
                            while (++i < l)(ev = events[i]).callback.call(ev.ctx, a1, a2);
                            return;
                        case 3:
                            while (++i < l)(ev = events[i]).callback.call(ev.ctx, a1, a2, a3);
                            return;
                        default:
                            while (++i < l)(ev = events[i]).callback.apply(ev.ctx, args);
                            return
                    }
                };
                Events.bind = Events.on;
                Events.unbind = Events.off;
                _.extend(Backbone, Events);
                var Model = Backbone.Model = function(attributes, options) {
                    var attrs = attributes || {};
                    options || (options = {});
                    this.cid = _.uniqueId(this.cidPrefix);
                    this.attributes = {};
                    if (options.collection) this.collection = options.collection;
                    if (options.parse) attrs = this.parse(attrs, options) || {};
                    attrs = _.defaults({}, attrs, _.result(this, "defaults"));
                    this.set(attrs, options);
                    this.changed = {};
                    this.initialize.apply(this, arguments)
                };
                _.extend(Model.prototype, Events, {
                    changed: null,
                    validationError: null,
                    idAttribute: "id",
                    cidPrefix: "c",
                    initialize: function() {},
                    toJSON: function(options) {
                        return _.clone(this.attributes)
                    },
                    sync: function() {
                        return Backbone.sync.apply(this, arguments)
                    },
                    get: function(attr) {
                        return this.attributes[attr]
                    },
                    escape: function(attr) {
                        return _.escape(this.get(attr))
                    },
                    has: function(attr) {
                        return this.get(attr) != null
                    },
                    matches: function(attrs) {
                        return !!_.iteratee(attrs, this)(this.attributes)
                    },
                    set: function(key, val, options) {
                        if (key == null) return this;
                        var attrs;
                        if (typeof key === "object") {
                            attrs = key;
                            options = val
                        } else {
                            (attrs = {})[key] = val
                        }
                        options || (options = {});
                        if (!this._validate(attrs, options)) return false;
                        var unset = options.unset;
                        var silent = options.silent;
                        var changes = [];
                        var changing = this._changing;
                        this._changing = true;
                        if (!changing) {
                            this._previousAttributes = _.clone(this.attributes);
                            this.changed = {}
                        }
                        var current = this.attributes;
                        var changed = this.changed;
                        var prev = this._previousAttributes;
                        if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];
                        for (var attr in attrs) {
                            val = attrs[attr];
                            if (!_.isEqual(current[attr], val)) changes.push(attr);
                            if (!_.isEqual(prev[attr], val)) {
                                changed[attr] = val
                            } else {
                                delete changed[attr]
                            }
                            unset ? delete current[attr] : current[attr] = val
                        }
                        if (!silent) {
                            if (changes.length) this._pending = options;
                            for (var i = 0; i < changes.length; i++) {
                                this.trigger("change:" + changes[i], this, current[changes[i]], options)
                            }
                        }
                        if (changing) return this;
                        if (!silent) {
                            while (this._pending) {
                                options = this._pending;
                                this._pending = false;
                                this.trigger("change", this, options)
                            }
                        }
                        this._pending = false;
                        this._changing = false;
                        return this
                    },
                    unset: function(attr, options) {
                        return this.set(attr, void 0, _.extend({}, options, {
                            unset: true
                        }))
                    },
                    clear: function(options) {
                        var attrs = {};
                        for (var key in this.attributes) attrs[key] = void 0;
                        return this.set(attrs, _.extend({}, options, {
                            unset: true
                        }))
                    },
                    hasChanged: function(attr) {
                        if (attr == null) return !_.isEmpty(this.changed);
                        return _.has(this.changed, attr)
                    },
                    changedAttributes: function(diff) {
                        if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
                        var old = this._changing ? this._previousAttributes : this.attributes;
                        var changed = {};
                        for (var attr in diff) {
                            var val = diff[attr];
                            if (_.isEqual(old[attr], val)) continue;
                            changed[attr] = val
                        }
                        return _.size(changed) ? changed : false
                    },
                    previous: function(attr) {
                        if (attr == null || !this._previousAttributes) return null;
                        return this._previousAttributes[attr]
                    },
                    previousAttributes: function() {
                        return _.clone(this._previousAttributes)
                    },
                    fetch: function(options) {
                        options = _.extend({
                            parse: true
                        }, options);
                        var model = this;
                        var success = options.success;
                        options.success = function(resp) {
                            var serverAttrs = options.parse ? model.parse(resp, options) : resp;
                            if (!model.set(serverAttrs, options)) return false;
                            if (success) success.call(options.context, model, resp, options);
                            model.trigger("sync", model, resp, options)
                        };
                        wrapError(this, options);
                        return this.sync("read", this, options)
                    },
                    save: function(key, val, options) {
                        var attrs;
                        if (key == null || typeof key === "object") {
                            attrs = key;
                            options = val
                        } else {
                            (attrs = {})[key] = val
                        }
                        options = _.extend({
                            validate: true,
                            parse: true
                        }, options);
                        var wait = options.wait;
                        if (attrs && !wait) {
                            if (!this.set(attrs, options)) return false
                        } else {
                            if (!this._validate(attrs, options)) return false
                        }
                        var model = this;
                        var success = options.success;
                        var attributes = this.attributes;
                        options.success = function(resp) {
                            model.attributes = attributes;
                            var serverAttrs = options.parse ? model.parse(resp, options) : resp;
                            if (wait) serverAttrs = _.extend({}, attrs, serverAttrs);
                            if (serverAttrs && !model.set(serverAttrs, options)) return false;
                            if (success) success.call(options.context, model, resp, options);
                            model.trigger("sync", model, resp, options)
                        };
                        wrapError(this, options);
                        if (attrs && wait) this.attributes = _.extend({}, attributes, attrs);
                        var method = this.isNew() ? "create" : options.patch ? "patch" : "update";
                        if (method === "patch" && !options.attrs) options.attrs = attrs;
                        var xhr = this.sync(method, this, options);
                        this.attributes = attributes;
                        return xhr
                    },
                    destroy: function(options) {
                        options = options ? _.clone(options) : {};
                        var model = this;
                        var success = options.success;
                        var wait = options.wait;
                        var destroy = function() {
                            model.stopListening();
                            model.trigger("destroy", model, model.collection, options)
                        };
                        options.success = function(resp) {
                            if (wait) destroy();
                            if (success) success.call(options.context, model, resp, options);
                            if (!model.isNew()) model.trigger("sync", model, resp, options)
                        };
                        var xhr = false;
                        if (this.isNew()) {
                            _.defer(options.success)
                        } else {
                            wrapError(this, options);
                            xhr = this.sync("delete", this, options)
                        }
                        if (!wait) destroy();
                        return xhr
                    },
                    url: function() {
                        var base = _.result(this, "urlRoot") || _.result(this.collection, "url") || urlError();
                        if (this.isNew()) return base;
                        var id = this.get(this.idAttribute);
                        return base.replace(/[^\/]$/, "$&/") + encodeURIComponent(id)
                    },
                    parse: function(resp, options) {
                        return resp
                    },
                    clone: function() {
                        return new this.constructor(this.attributes)
                    },
                    isNew: function() {
                        return !this.has(this.idAttribute)
                    },
                    isValid: function(options) {
                        return this._validate({}, _.defaults({
                            validate: true
                        }, options))
                    },
                    _validate: function(attrs, options) {
                        if (!options.validate || !this.validate) return true;
                        attrs = _.extend({}, this.attributes, attrs);
                        var error = this.validationError = this.validate(attrs, options) || null;
                        if (!error) return true;
                        this.trigger("invalid", this, error, _.extend(options, {
                            validationError: error
                        }));
                        return false
                    }
                });
                var modelMethods = {
                    keys: 1,
                    values: 1,
                    pairs: 1,
                    invert: 1,
                    pick: 0,
                    omit: 0,
                    chain: 1,
                    isEmpty: 1
                };
                addUnderscoreMethods(Model, modelMethods, "attributes");
                var Collection = Backbone.Collection = function(models, options) {
                    options || (options = {});
                    if (options.model) this.model = options.model;
                    if (options.comparator !== void 0) this.comparator = options.comparator;
                    this._reset();
                    this.initialize.apply(this, arguments);
                    if (models) this.reset(models, _.extend({
                        silent: true
                    }, options))
                };
                var setOptions = {
                    add: true,
                    remove: true,
                    merge: true
                };
                var addOptions = {
                    add: true,
                    remove: false
                };
                _.extend(Collection.prototype, Events, {
                    model: Model,
                    initialize: function() {},
                    toJSON: function(options) {
                        return this.map(function(model) {
                            return model.toJSON(options)
                        })
                    },
                    sync: function() {
                        return Backbone.sync.apply(this, arguments)
                    },
                    add: function(models, options) {
                        return this.set(models, _.extend({
                            merge: false
                        }, options, addOptions))
                    },
                    remove: function(models, options) {
                        options = _.extend({}, options);
                        var singular = !_.isArray(models);
                        models = singular ? [models] : _.clone(models);
                        var removed = this._removeModels(models, options);
                        if (!options.silent && removed) this.trigger("update", this, options);
                        return singular ? removed[0] : removed
                    },
                    set: function(models, options) {
                        options = _.defaults({}, options, setOptions);
                        if (options.parse && !this._isModel(models)) models = this.parse(models, options);
                        var singular = !_.isArray(models);
                        models = singular ? models ? [models] : [] : models.slice();
                        var id, model, attrs, existing, sort;
                        var at = options.at;
                        if (at != null) at = +at;
                        if (at < 0) at += this.length + 1;
                        var sortable = this.comparator && at == null && options.sort !== false;
                        var sortAttr = _.isString(this.comparator) ? this.comparator : null;
                        var toAdd = [],
                            toRemove = [],
                            modelMap = {};
                        var add = options.add,
                            merge = options.merge,
                            remove = options.remove;
                        var order = !sortable && add && remove ? [] : false;
                        var orderChanged = false;
                        for (var i = 0; i < models.length; i++) {
                            attrs = models[i];
                            if (existing = this.get(attrs)) {
                                if (remove) modelMap[existing.cid] = true;
                                if (merge && attrs !== existing) {
                                    attrs = this._isModel(attrs) ? attrs.attributes : attrs;
                                    if (options.parse) attrs = existing.parse(attrs, options);
                                    existing.set(attrs, options);
                                    if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true
                                }
                                models[i] = existing
                            } else if (add) {
                                model = models[i] = this._prepareModel(attrs, options);
                                if (!model) continue;
                                toAdd.push(model);
                                this._addReference(model, options)
                            }
                            model = existing || model;
                            if (!model) continue;
                            id = this.modelId(model.attributes);
                            if (order && (model.isNew() || !modelMap[id])) {
                                order.push(model);
                                orderChanged = orderChanged || !this.models[i] || model.cid !== this.models[i].cid
                            }
                            modelMap[id] = true
                        }
                        if (remove) {
                            for (var i = 0; i < this.length; i++) {
                                if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model)
                            }
                            if (toRemove.length) this._removeModels(toRemove, options)
                        }
                        if (toAdd.length || orderChanged) {
                            if (sortable) sort = true;
                            this.length += toAdd.length;
                            if (at != null) {
                                for (var i = 0; i < toAdd.length; i++) {
                                    this.models.splice(at + i, 0, toAdd[i])
                                }
                            } else {
                                if (order) this.models.length = 0;
                                var orderedModels = order || toAdd;
                                for (var i = 0; i < orderedModels.length; i++) {
                                    this.models.push(orderedModels[i])
                                }
                            }
                        }
                        if (sort) this.sort({
                            silent: true
                        });
                        if (!options.silent) {
                            var addOpts = at != null ? _.clone(options) : options;
                            for (var i = 0; i < toAdd.length; i++) {
                                if (at != null) addOpts.index = at + i;
                                (model = toAdd[i]).trigger("add", model, this, addOpts)
                            }
                            if (sort || orderChanged) this.trigger("sort", this, options);
                            if (toAdd.length || toRemove.length) this.trigger("update", this, options)
                        }
                        return singular ? models[0] : models
                    },
                    reset: function(models, options) {
                        options = options ? _.clone(options) : {};
                        for (var i = 0; i < this.models.length; i++) {
                            this._removeReference(this.models[i], options)
                        }
                        options.previousModels = this.models;
                        this._reset();
                        models = this.add(models, _.extend({
                            silent: true
                        }, options));
                        if (!options.silent) this.trigger("reset", this, options);
                        return models
                    },
                    push: function(model, options) {
                        return this.add(model, _.extend({
                            at: this.length
                        }, options))
                    },
                    pop: function(options) {
                        var model = this.at(this.length - 1);
                        return this.remove(model, options)
                    },
                    unshift: function(model, options) {
                        return this.add(model, _.extend({
                            at: 0
                        }, options))
                    },
                    shift: function(options) {
                        var model = this.at(0);
                        return this.remove(model, options)
                    },
                    slice: function() {
                        return slice.apply(this.models, arguments)
                    },
                    get: function(obj) {
                        if (obj == null) return void 0;
                        var id = this.modelId(this._isModel(obj) ? obj.attributes : obj);
                        return this._byId[obj] || this._byId[id] || this._byId[obj.cid]
                    },
                    at: function(index) {
                        if (index < 0) index += this.length;
                        return this.models[index]
                    },
                    where: function(attrs, first) {
                        var matches = _.matches(attrs);
                        return this[first ? "find" : "filter"](function(model) {
                            return matches(model.attributes)
                        })
                    },
                    findWhere: function(attrs) {
                        return this.where(attrs, true)
                    },
                    sort: function(options) {
                        if (!this.comparator) throw new Error("Cannot sort a set without a comparator");
                        options || (options = {});
                        if (_.isString(this.comparator) || this.comparator.length === 1) {
                            this.models = this.sortBy(this.comparator, this)
                        } else {
                            this.models.sort(_.bind(this.comparator, this))
                        }
                        if (!options.silent) this.trigger("sort", this, options);
                        return this
                    },
                    pluck: function(attr) {
                        return _.invoke(this.models, "get", attr)
                    },
                    fetch: function(options) {
                        options = _.extend({
                            parse: true
                        }, options);
                        var success = options.success;
                        var collection = this;
                        options.success = function(resp) {
                            var method = options.reset ? "reset" : "set";
                            collection[method](resp, options);
                            if (success) success.call(options.context, collection, resp, options);
                            collection.trigger("sync", collection, resp, options)
                        };
                        wrapError(this, options);
                        return this.sync("read", this, options)
                    },
                    create: function(model, options) {
                        options = options ? _.clone(options) : {};
                        var wait = options.wait;
                        model = this._prepareModel(model, options);
                        if (!model) return false;
                        if (!wait) this.add(model, options);
                        var collection = this;
                        var success = options.success;
                        options.success = function(model, resp, callbackOpts) {
                            if (wait) collection.add(model, callbackOpts);
                            if (success) success.call(callbackOpts.context, model, resp, callbackOpts)
                        };
                        model.save(null, options);
                        return model
                    },
                    parse: function(resp, options) {
                        return resp
                    },
                    clone: function() {
                        return new this.constructor(this.models, {
                            model: this.model,
                            comparator: this.comparator
                        })
                    },
                    modelId: function(attrs) {
                        return attrs[this.model.prototype.idAttribute || "id"]
                    },
                    _reset: function() {
                        this.length = 0;
                        this.models = [];
                        this._byId = {}
                    },
                    _prepareModel: function(attrs, options) {
                        if (this._isModel(attrs)) {
                            if (!attrs.collection) attrs.collection = this;
                            return attrs
                        }
                        options = options ? _.clone(options) : {};
                        options.collection = this;
                        var model = new this.model(attrs, options);
                        if (!model.validationError) return model;
                        this.trigger("invalid", this, model.validationError, options);
                        return false
                    },
                    _removeModels: function(models, options) {
                        var removed = [];
                        for (var i = 0; i < models.length; i++) {
                            var model = this.get(models[i]);
                            if (!model) continue;
                            var index = this.indexOf(model);
                            this.models.splice(index, 1);
                            this.length--;
                            if (!options.silent) {
                                options.index = index;
                                model.trigger("remove", model, this, options)
                            }
                            removed.push(model);
                            this._removeReference(model, options)
                        }
                        return removed.length ? removed : false
                    },
                    _isModel: function(model) {
                        return model instanceof Model
                    },
                    _addReference: function(model, options) {
                        this._byId[model.cid] = model;
                        var id = this.modelId(model.attributes);
                        if (id != null) this._byId[id] = model;
                        model.on("all", this._onModelEvent, this)
                    },
                    _removeReference: function(model, options) {
                        delete this._byId[model.cid];
                        var id = this.modelId(model.attributes);
                        if (id != null) delete this._byId[id];
                        if (this === model.collection) delete model.collection;
                        model.off("all", this._onModelEvent, this)
                    },
                    _onModelEvent: function(event, model, collection, options) {
                        if ((event === "add" || event === "remove") && collection !== this) return;
                        if (event === "destroy") this.remove(model, options);
                        if (event === "change") {
                            var prevId = this.modelId(model.previousAttributes());
                            var id = this.modelId(model.attributes);
                            if (prevId !== id) {
                                if (prevId != null) delete this._byId[prevId];
                                if (id != null) this._byId[id] = model
                            }
                        }
                        this.trigger.apply(this, arguments)
                    }
                });
                var collectionMethods = {
                    forEach: 3,
                    each: 3,
                    map: 3,
                    collect: 3,
                    reduce: 4,
                    foldl: 4,
                    inject: 4,
                    reduceRight: 4,
                    foldr: 4,
                    find: 3,
                    detect: 3,
                    filter: 3,
                    select: 3,
                    reject: 3,
                    every: 3,
                    all: 3,
                    some: 3,
                    any: 3,
                    include: 2,
                    contains: 2,
                    invoke: 0,
                    max: 3,
                    min: 3,
                    toArray: 1,
                    size: 1,
                    first: 3,
                    head: 3,
                    take: 3,
                    initial: 3,
                    rest: 3,
                    tail: 3,
                    drop: 3,
                    last: 3,
                    without: 0,
                    difference: 0,
                    indexOf: 3,
                    shuffle: 1,
                    lastIndexOf: 3,
                    isEmpty: 1,
                    chain: 1,
                    sample: 3,
                    partition: 3
                };
                addUnderscoreMethods(Collection, collectionMethods, "models");
                var attributeMethods = ["groupBy", "countBy", "sortBy", "indexBy"];
                _.each(attributeMethods, function(method) {
                    if (!_[method]) return;
                    Collection.prototype[method] = function(value, context) {
                        var iterator = _.isFunction(value) ? value : function(model) {
                            return model.get(value)
                        };
                        return _[method](this.models, iterator, context)
                    }
                });
                var View = Backbone.View = function(options) {
                    this.cid = _.uniqueId("view");
                    _.extend(this, _.pick(options, viewOptions));
                    this._ensureElement();
                    this.initialize.apply(this, arguments)
                };
                var delegateEventSplitter = /^(\S+)\s*(.*)$/;
                var viewOptions = ["model", "collection", "el", "id", "attributes", "className", "tagName", "events"];
                _.extend(View.prototype, Events, {
                    tagName: "div",
                    $: function(selector) {
                        return this.$el.find(selector)
                    },
                    initialize: function() {},
                    render: function() {
                        return this
                    },
                    remove: function() {
                        this._removeElement();
                        this.stopListening();
                        return this
                    },
                    _removeElement: function() {
                        this.$el.remove()
                    },
                    setElement: function(element) {
                        this.undelegateEvents();
                        this._setElement(element);
                        this.delegateEvents();
                        return this
                    },
                    _setElement: function(el) {
                        this.$el = el instanceof Backbone.$ ? el : Backbone.$(el);
                        this.el = this.$el[0]
                    },
                    delegateEvents: function(events) {
                        events || (events = _.result(this, "events"));
                        if (!events) return this;
                        this.undelegateEvents();
                        for (var key in events) {
                            var method = events[key];
                            if (!_.isFunction(method)) method = this[method];
                            if (!method) continue;
                            var match = key.match(delegateEventSplitter);
                            this.delegate(match[1], match[2], _.bind(method, this))
                        }
                        return this
                    },
                    delegate: function(eventName, selector, listener) {
                        this.$el.on(eventName + ".delegateEvents" + this.cid, selector, listener);
                        return this
                    },
                    undelegateEvents: function() {
                        if (this.$el) this.$el.off(".delegateEvents" + this.cid);
                        return this
                    },
                    undelegate: function(eventName, selector, listener) {
                        this.$el.off(eventName + ".delegateEvents" + this.cid, selector, listener);
                        return this
                    },
                    _createElement: function(tagName) {
                        return document.createElement(tagName)
                    },
                    _ensureElement: function() {
                        if (!this.el) {
                            var attrs = _.extend({}, _.result(this, "attributes"));
                            if (this.id) attrs.id = _.result(this, "id");
                            if (this.className) attrs["class"] = _.result(this, "className");
                            this.setElement(this._createElement(_.result(this, "tagName")));
                            this._setAttributes(attrs)
                        } else {
                            this.setElement(_.result(this, "el"))
                        }
                    },
                    _setAttributes: function(attributes) {
                        this.$el.attr(attributes)
                    }
                });
                Backbone.sync = function(method, model, options) {
                    var type = methodMap[method];
                    _.defaults(options || (options = {}), {
                        emulateHTTP: Backbone.emulateHTTP,
                        emulateJSON: Backbone.emulateJSON
                    });
                    var params = {
                        type: type,
                        dataType: "json"
                    };
                    if (!options.url) {
                        params.url = _.result(model, "url") || urlError()
                    }
                    if (options.data == null && model && (method === "create" || method === "update" || method === "patch")) {
                        params.contentType = "application/json";
                        params.data = JSON.stringify(options.attrs || model.toJSON(options))
                    }
                    if (options.emulateJSON) {
                        params.contentType = "application/x-www-form-urlencoded";
                        params.data = params.data ? {
                            model: params.data
                        } : {}
                    }
                    if (options.emulateHTTP && (type === "PUT" || type === "DELETE" || type === "PATCH")) {
                        params.type = "POST";
                        if (options.emulateJSON) params.data._method = type;
                        var beforeSend = options.beforeSend;
                        options.beforeSend = function(xhr) {
                            xhr.setRequestHeader("X-HTTP-Method-Override", type);
                            if (beforeSend) return beforeSend.apply(this, arguments)
                        }
                    }
                    if (params.type !== "GET" && !options.emulateJSON) {
                        params.processData = false
                    }
                    var error = options.error;
                    options.error = function(xhr, textStatus, errorThrown) {
                        options.textStatus = textStatus;
                        options.errorThrown = errorThrown;
                        if (error) error.call(options.context, xhr, textStatus, errorThrown)
                    };
                    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
                    model.trigger("request", model, xhr, options);
                    return xhr
                };
                var methodMap = {
                    create: "POST",
                    update: "PUT",
                    patch: "PATCH",
                    delete: "DELETE",
                    read: "GET"
                };
                Backbone.ajax = function() {
                    return Backbone.$.ajax.apply(Backbone.$, arguments)
                };
                var Router = Backbone.Router = function(options) {
                    options || (options = {});
                    if (options.routes) this.routes = options.routes;
                    this._bindRoutes();
                    this.initialize.apply(this, arguments)
                };
                var optionalParam = /\((.*?)\)/g;
                var namedParam = /(\(\?)?:\w+/g;
                var splatParam = /\*\w+/g;
                var escapeRegExp = /[\-{}\[\]+?.,\\\^$|#\s]/g;
                _.extend(Router.prototype, Events, {
                    initialize: function() {},
                    route: function(route, name, callback) {
                        if (!_.isRegExp(route)) route = this._routeToRegExp(route);
                        if (_.isFunction(name)) {
                            callback = name;
                            name = ""
                        }
                        if (!callback) callback = this[name];
                        var router = this;
                        Backbone.history.route(route, function(fragment) {
                            var args = router._extractParameters(route, fragment);
                            if (router.execute(callback, args, name) !== false) {
                                router.trigger.apply(router, ["route:" + name].concat(args));
                                router.trigger("route", name, args);
                                Backbone.history.trigger("route", router, name, args)
                            }
                        });
                        return this
                    },
                    execute: function(callback, args, name) {
                        if (callback) callback.apply(this, args)
                    },
                    navigate: function(fragment, options) {
                        Backbone.history.navigate(fragment, options);
                        return this
                    },
                    _bindRoutes: function() {
                        if (!this.routes) return;
                        this.routes = _.result(this, "routes");
                        var route, routes = _.keys(this.routes);
                        while ((route = routes.pop()) != null) {
                            this.route(route, this.routes[route])
                        }
                    },
                    _routeToRegExp: function(route) {
                        route = route.replace(escapeRegExp, "\\$&").replace(optionalParam, "(?:$1)?").replace(namedParam, function(match, optional) {
                            return optional ? match : "([^/?]+)"
                        }).replace(splatParam, "([^?]*?)");
                        return new RegExp("^" + route + "(?:\\?([\\s\\S]*))?$")
                    },
                    _extractParameters: function(route, fragment) {
                        var params = route.exec(fragment).slice(1);
                        return _.map(params, function(param, i) {
                            if (i === params.length - 1) return param || null;
                            return param ? decodeURIComponent(param) : null
                        })
                    }
                });
                var History = Backbone.History = function() {
                    this.handlers = [];
                    _.bindAll(this, "checkUrl");
                    if (typeof window !== "undefined") {
                        this.location = window.location;
                        this.history = window.history
                    }
                };
                var routeStripper = /^[#\/]|\s+$/g;
                var rootStripper = /^\/+|\/+$/g;
                var pathStripper = /#.*$/;
                History.started = false;
                _.extend(History.prototype, Events, {
                    interval: 50,
                    atRoot: function() {
                        var path = this.location.pathname.replace(/[^\/]$/, "$&/");
                        return path === this.root && !this.getSearch()
                    },
                    matchRoot: function() {
                        var path = this.decodeFragment(this.location.pathname);
                        var root = path.slice(0, this.root.length - 1) + "/";
                        return root === this.root
                    },
                    decodeFragment: function(fragment) {
                        return decodeURI(fragment.replace(/%25/g, "%2525"))
                    },
                    getSearch: function() {
                        var match = this.location.href.replace(/#.*/, "").match(/\?.+/);
                        return match ? match[0] : ""
                    },
                    getHash: function(window) {
                        var match = (window || this).location.href.match(/#(.*)$/);
                        return match ? match[1] : ""
                    },
                    getPath: function() {
                        var path = this.decodeFragment(this.location.pathname + this.getSearch()).slice(this.root.length - 1);
                        return path.charAt(0) === "/" ? path.slice(1) : path
                    },
                    getFragment: function(fragment) {
                        if (fragment == null) {
                            if (this._usePushState || !this._wantsHashChange) {
                                fragment = this.getPath()
                            } else {
                                fragment = this.getHash()
                            }
                        }
                        return fragment.replace(routeStripper, "")
                    },
                    start: function(options) {
                        if (History.started) throw new Error("Backbone.history has already been started");
                        History.started = true;
                        this.options = _.extend({
                            root: "/"
                        }, this.options, options);
                        this.root = this.options.root;
                        this._wantsHashChange = this.options.hashChange !== false;
                        this._hasHashChange = "onhashchange" in window;
                        this._useHashChange = this._wantsHashChange && this._hasHashChange;
                        this._wantsPushState = !!this.options.pushState;
                        this._hasPushState = !!(this.history && this.history.pushState);
                        this._usePushState = this._wantsPushState && this._hasPushState;
                        this.fragment = this.getFragment();
                        this.root = ("/" + this.root + "/").replace(rootStripper, "/");
                        if (this._wantsHashChange && this._wantsPushState) {
                            if (!this._hasPushState && !this.atRoot()) {
                                var root = this.root.slice(0, -1) || "/";
                                this.location.replace(root + "#" + this.getPath());
                                return true
                            } else if (this._hasPushState && this.atRoot()) {
                                this.navigate(this.getHash(), {
                                    replace: true
                                })
                            }
                        }
                        if (!this._hasHashChange && this._wantsHashChange && !this._usePushState) {
                            this.iframe = document.createElement("iframe");
                            this.iframe.src = "javascript:0";
                            this.iframe.style.display = "none";
                            this.iframe.tabIndex = -1;
                            var body = document.body;
                            var iWindow = body.insertBefore(this.iframe, body.firstChild).contentWindow;
                            iWindow.document.open();
                            iWindow.document.close();
                            iWindow.location.hash = "#" + this.fragment
                        }
                        var addEventListener = window.addEventListener || function(eventName, listener) {
                            return attachEvent("on" + eventName, listener)
                        };
                        if (this._usePushState) {
                            addEventListener("popstate", this.checkUrl, false)
                        } else if (this._useHashChange && !this.iframe) {
                            addEventListener("hashchange", this.checkUrl, false)
                        } else if (this._wantsHashChange) {
                            this._checkUrlInterval = setInterval(this.checkUrl, this.interval)
                        }
                        if (!this.options.silent) return this.loadUrl()
                    },
                    stop: function() {
                        var removeEventListener = window.removeEventListener || function(eventName, listener) {
                            return detachEvent("on" + eventName, listener)
                        };
                        if (this._usePushState) {
                            removeEventListener("popstate", this.checkUrl, false)
                        } else if (this._useHashChange && !this.iframe) {
                            removeEventListener("hashchange", this.checkUrl, false)
                        }
                        if (this.iframe) {
                            document.body.removeChild(this.iframe);
                            this.iframe = null
                        }
                        if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);
                        History.started = false
                    },
                    route: function(route, callback) {
                        this.handlers.unshift({
                            route: route,
                            callback: callback
                        })
                    },
                    checkUrl: function(e) {
                        var current = this.getFragment();
                        if (current === this.fragment && this.iframe) {
                            current = this.getHash(this.iframe.contentWindow)
                        }
                        if (current === this.fragment) return false;
                        if (this.iframe) this.navigate(current);
                        this.loadUrl()
                    },
                    loadUrl: function(fragment) {
                        if (!this.matchRoot()) return false;
                        fragment = this.fragment = this.getFragment(fragment);
                        return _.any(this.handlers, function(handler) {
                            if (handler.route.test(fragment)) {
                                handler.callback(fragment);
                                return true
                            }
                        })
                    },
                    navigate: function(fragment, options) {
                        if (!History.started) return false;
                        if (!options || options === true) options = {
                            trigger: !!options
                        };
                        fragment = this.getFragment(fragment || "");
                        var root = this.root;
                        if (fragment === "" || fragment.charAt(0) === "?") {
                            root = root.slice(0, -1) || "/"
                        }
                        var url = root + fragment;
                        fragment = this.decodeFragment(fragment.replace(pathStripper, ""));
                        if (this.fragment === fragment) return;
                        this.fragment = fragment;
                        if (this._usePushState) {
                            this.history[options.replace ? "replaceState" : "pushState"]({}, document.title, url)
                        } else if (this._wantsHashChange) {
                            this._updateHash(this.location, fragment, options.replace);
                            if (this.iframe && fragment !== this.getHash(this.iframe.contentWindow)) {
                                var iWindow = this.iframe.contentWindow;
                                if (!options.replace) {
                                    iWindow.document.open();
                                    iWindow.document.close()
                                }
                                this._updateHash(iWindow.location, fragment, options.replace)
                            }
                        } else {
                            return this.location.assign(url)
                        }
                        if (options.trigger) return this.loadUrl(fragment)
                    },
                    _updateHash: function(location, fragment, replace) {
                        if (replace) {
                            var href = location.href.replace(/(javascript:|#).*$/, "");
                            location.replace(href + "#" + fragment)
                        } else {
                            location.hash = "#" + fragment
                        }
                    }
                });
                Backbone.history = new History;
                var extend = function(protoProps, staticProps) {
                    var parent = this;
                    var child;
                    if (protoProps && _.has(protoProps, "constructor")) {
                        child = protoProps.constructor
                    } else {
                        child = function() {
                            return parent.apply(this, arguments)
                        }
                    }
                    _.extend(child, parent, staticProps);
                    var Surrogate = function() {
                        this.constructor = child
                    };
                    Surrogate.prototype = parent.prototype;
                    child.prototype = new Surrogate;
                    if (protoProps) _.extend(child.prototype, protoProps);
                    child.__super__ = parent.prototype;
                    return child
                };
                Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;
                var urlError = function() {
                    throw new Error('A "url" property or function must be specified')
                };
                var wrapError = function(model, options) {
                    var error = options.error;
                    options.error = function(resp) {
                        if (error) error.call(options.context, model, resp, options);
                        model.trigger("error", model, resp, options)
                    }
                };
                return Backbone
            })
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {
        jquery: 36,
        underscore: 20
    }],
    19: [function(require, module, exports) {
        (function(process, global) {
            (function() {
                "use strict";

                function lib$es6$promise$utils$$objectOrFunction(x) {
                    return typeof x === "function" || typeof x === "object" && x !== null
                }

                function lib$es6$promise$utils$$isFunction(x) {
                    return typeof x === "function"
                }

                function lib$es6$promise$utils$$isMaybeThenable(x) {
                    return typeof x === "object" && x !== null
                }
                var lib$es6$promise$utils$$_isArray;
                if (!Array.isArray) {
                    lib$es6$promise$utils$$_isArray = function(x) {
                        return Object.prototype.toString.call(x) === "[object Array]"
                    }
                } else {
                    lib$es6$promise$utils$$_isArray = Array.isArray
                }
                var lib$es6$promise$utils$$isArray = lib$es6$promise$utils$$_isArray;
                var lib$es6$promise$asap$$len = 0;
                var lib$es6$promise$asap$$toString = {}.toString;
                var lib$es6$promise$asap$$vertxNext;
                var lib$es6$promise$asap$$customSchedulerFn;
                var lib$es6$promise$asap$$asap = function asap(callback, arg) {
                    lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len] = callback;
                    lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len + 1] = arg;
                    lib$es6$promise$asap$$len += 2;
                    if (lib$es6$promise$asap$$len === 2) {
                        if (lib$es6$promise$asap$$customSchedulerFn) {
                            lib$es6$promise$asap$$customSchedulerFn(lib$es6$promise$asap$$flush)
                        } else {
                            lib$es6$promise$asap$$scheduleFlush()
                        }
                    }
                };

                function lib$es6$promise$asap$$setScheduler(scheduleFn) {
                    lib$es6$promise$asap$$customSchedulerFn = scheduleFn
                }

                function lib$es6$promise$asap$$setAsap(asapFn) {
                    lib$es6$promise$asap$$asap = asapFn
                }
                var lib$es6$promise$asap$$browserWindow = typeof window !== "undefined" ? window : undefined;
                var lib$es6$promise$asap$$browserGlobal = lib$es6$promise$asap$$browserWindow || {};
                var lib$es6$promise$asap$$BrowserMutationObserver = lib$es6$promise$asap$$browserGlobal.MutationObserver || lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;
                var lib$es6$promise$asap$$isNode = typeof process !== "undefined" && {}.toString.call(process) === "[object process]";
                var lib$es6$promise$asap$$isWorker = typeof Uint8ClampedArray !== "undefined" && typeof importScripts !== "undefined" && typeof MessageChannel !== "undefined";

                function lib$es6$promise$asap$$useNextTick() {
                    var nextTick = process.nextTick;
                    var version = process.versions.node.match(/^(?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)$/);
                    if (Array.isArray(version) && version[1] === "0" && version[2] === "10") {
                        nextTick = setImmediate
                    }
                    return function() {
                        nextTick(lib$es6$promise$asap$$flush)
                    }
                }

                function lib$es6$promise$asap$$useVertxTimer() {
                    return function() {
                        lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush)
                    }
                }

                function lib$es6$promise$asap$$useMutationObserver() {
                    var iterations = 0;
                    var observer = new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);
                    var node = document.createTextNode("");
                    observer.observe(node, {
                        characterData: true
                    });
                    return function() {
                        node.data = iterations = ++iterations % 2
                    }
                }

                function lib$es6$promise$asap$$useMessageChannel() {
                    var channel = new MessageChannel;
                    channel.port1.onmessage = lib$es6$promise$asap$$flush;
                    return function() {
                        channel.port2.postMessage(0)
                    }
                }

                function lib$es6$promise$asap$$useSetTimeout() {
                    return function() {
                        setTimeout(lib$es6$promise$asap$$flush, 1)
                    }
                }
                var lib$es6$promise$asap$$queue = new Array(1e3);

                function lib$es6$promise$asap$$flush() {
                    for (var i = 0; i < lib$es6$promise$asap$$len; i += 2) {
                        var callback = lib$es6$promise$asap$$queue[i];
                        var arg = lib$es6$promise$asap$$queue[i + 1];
                        callback(arg);
                        lib$es6$promise$asap$$queue[i] = undefined;
                        lib$es6$promise$asap$$queue[i + 1] = undefined
                    }
                    lib$es6$promise$asap$$len = 0
                }

                function lib$es6$promise$asap$$attemptVertex() {
                    try {
                        var r = require;
                        var vertx = r("vertx");
                        lib$es6$promise$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;
                        return lib$es6$promise$asap$$useVertxTimer()
                    } catch (e) {
                        return lib$es6$promise$asap$$useSetTimeout()
                    }
                }
                var lib$es6$promise$asap$$scheduleFlush;
                if (lib$es6$promise$asap$$isNode) {
                    lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useNextTick()
                } else if (lib$es6$promise$asap$$BrowserMutationObserver) {
                    lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMutationObserver()
                } else if (lib$es6$promise$asap$$isWorker) {
                    lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMessageChannel()
                } else if (lib$es6$promise$asap$$browserWindow === undefined && typeof require === "function") {
                    lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$attemptVertex()
                } else {
                    lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useSetTimeout()
                }

                function lib$es6$promise$$internal$$noop() {}
                var lib$es6$promise$$internal$$PENDING = void 0;
                var lib$es6$promise$$internal$$FULFILLED = 1;
                var lib$es6$promise$$internal$$REJECTED = 2;
                var lib$es6$promise$$internal$$GET_THEN_ERROR = new lib$es6$promise$$internal$$ErrorObject;

                function lib$es6$promise$$internal$$selfFullfillment() {
                    return new TypeError("You cannot resolve a promise with itself")
                }

                function lib$es6$promise$$internal$$cannotReturnOwn() {
                    return new TypeError("A promises callback cannot return that same promise.")
                }

                function lib$es6$promise$$internal$$getThen(promise) {
                    try {
                        return promise.then
                    } catch (error) {
                        lib$es6$promise$$internal$$GET_THEN_ERROR.error = error;
                        return lib$es6$promise$$internal$$GET_THEN_ERROR
                    }
                }

                function lib$es6$promise$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {
                    try {
                        then.call(value, fulfillmentHandler, rejectionHandler)
                    } catch (e) {
                        return e
                    }
                }

                function lib$es6$promise$$internal$$handleForeignThenable(promise, thenable, then) {
                    lib$es6$promise$asap$$asap(function(promise) {
                        var sealed = false;
                        var error = lib$es6$promise$$internal$$tryThen(then, thenable, function(value) {
                            if (sealed) {
                                return
                            }
                            sealed = true;
                            if (thenable !== value) {
                                lib$es6$promise$$internal$$resolve(promise, value)
                            } else {
                                lib$es6$promise$$internal$$fulfill(promise, value)
                            }
                        }, function(reason) {
                            if (sealed) {
                                return
                            }
                            sealed = true;
                            lib$es6$promise$$internal$$reject(promise, reason)
                        }, "Settle: " + (promise._label || " unknown promise"));
                        if (!sealed && error) {
                            sealed = true;
                            lib$es6$promise$$internal$$reject(promise, error)
                        }
                    }, promise)
                }

                function lib$es6$promise$$internal$$handleOwnThenable(promise, thenable) {
                    if (thenable._state === lib$es6$promise$$internal$$FULFILLED) {
                        lib$es6$promise$$internal$$fulfill(promise, thenable._result)
                    } else if (thenable._state === lib$es6$promise$$internal$$REJECTED) {
                        lib$es6$promise$$internal$$reject(promise, thenable._result)
                    } else {
                        lib$es6$promise$$internal$$subscribe(thenable, undefined, function(value) {
                            lib$es6$promise$$internal$$resolve(promise, value)
                        }, function(reason) {
                            lib$es6$promise$$internal$$reject(promise, reason)
                        })
                    }
                }

                function lib$es6$promise$$internal$$handleMaybeThenable(promise, maybeThenable) {
                    if (maybeThenable.constructor === promise.constructor) {
                        lib$es6$promise$$internal$$handleOwnThenable(promise, maybeThenable)
                    } else {
                        var then = lib$es6$promise$$internal$$getThen(maybeThenable);
                        if (then === lib$es6$promise$$internal$$GET_THEN_ERROR) {
                            lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$GET_THEN_ERROR.error)
                        } else if (then === undefined) {
                            lib$es6$promise$$internal$$fulfill(promise, maybeThenable)
                        } else if (lib$es6$promise$utils$$isFunction(then)) {
                            lib$es6$promise$$internal$$handleForeignThenable(promise, maybeThenable, then)
                        } else {
                            lib$es6$promise$$internal$$fulfill(promise, maybeThenable)
                        }
                    }
                }

                function lib$es6$promise$$internal$$resolve(promise, value) {
                    if (promise === value) {
                        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$selfFullfillment())
                    } else if (lib$es6$promise$utils$$objectOrFunction(value)) {
                        lib$es6$promise$$internal$$handleMaybeThenable(promise, value)
                    } else {
                        lib$es6$promise$$internal$$fulfill(promise, value)
                    }
                }

                function lib$es6$promise$$internal$$publishRejection(promise) {
                    if (promise._onerror) {
                        promise._onerror(promise._result)
                    }
                    lib$es6$promise$$internal$$publish(promise)
                }

                function lib$es6$promise$$internal$$fulfill(promise, value) {
                    if (promise._state !== lib$es6$promise$$internal$$PENDING) {
                        return
                    }
                    promise._result = value;
                    promise._state = lib$es6$promise$$internal$$FULFILLED;
                    if (promise._subscribers.length !== 0) {
                        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, promise)
                    }
                }

                function lib$es6$promise$$internal$$reject(promise, reason) {
                    if (promise._state !== lib$es6$promise$$internal$$PENDING) {
                        return
                    }
                    promise._state = lib$es6$promise$$internal$$REJECTED;
                    promise._result = reason;
                    lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publishRejection, promise)
                }

                function lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection) {
                    var subscribers = parent._subscribers;
                    var length = subscribers.length;
                    parent._onerror = null;
                    subscribers[length] = child;
                    subscribers[length + lib$es6$promise$$internal$$FULFILLED] = onFulfillment;
                    subscribers[length + lib$es6$promise$$internal$$REJECTED] = onRejection;
                    if (length === 0 && parent._state) {
                        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, parent)
                    }
                }

                function lib$es6$promise$$internal$$publish(promise) {
                    var subscribers = promise._subscribers;
                    var settled = promise._state;
                    if (subscribers.length === 0) {
                        return
                    }
                    var child, callback, detail = promise._result;
                    for (var i = 0; i < subscribers.length; i += 3) {
                        child = subscribers[i];
                        callback = subscribers[i + settled];
                        if (child) {
                            lib$es6$promise$$internal$$invokeCallback(settled, child, callback, detail)
                        } else {
                            callback(detail)
                        }
                    }
                    promise._subscribers.length = 0
                }

                function lib$es6$promise$$internal$$ErrorObject() {
                    this.error = null
                }
                var lib$es6$promise$$internal$$TRY_CATCH_ERROR = new lib$es6$promise$$internal$$ErrorObject;

                function lib$es6$promise$$internal$$tryCatch(callback, detail) {
                    try {
                        return callback(detail)
                    } catch (e) {
                        lib$es6$promise$$internal$$TRY_CATCH_ERROR.error = e;
                        return lib$es6$promise$$internal$$TRY_CATCH_ERROR
                    }
                }

                function lib$es6$promise$$internal$$invokeCallback(settled, promise, callback, detail) {
                    var hasCallback = lib$es6$promise$utils$$isFunction(callback),
                        value, error, succeeded, failed;
                    if (hasCallback) {
                        value = lib$es6$promise$$internal$$tryCatch(callback, detail);
                        if (value === lib$es6$promise$$internal$$TRY_CATCH_ERROR) {
                            failed = true;
                            error = value.error;
                            value = null
                        } else {
                            succeeded = true
                        }
                        if (promise === value) {
                            lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$cannotReturnOwn());
                            return
                        }
                    } else {
                        value = detail;
                        succeeded = true
                    }
                    if (promise._state !== lib$es6$promise$$internal$$PENDING) {} else if (hasCallback && succeeded) {
                        lib$es6$promise$$internal$$resolve(promise, value)
                    } else if (failed) {
                        lib$es6$promise$$internal$$reject(promise, error)
                    } else if (settled === lib$es6$promise$$internal$$FULFILLED) {
                        lib$es6$promise$$internal$$fulfill(promise, value)
                    } else if (settled === lib$es6$promise$$internal$$REJECTED) {
                        lib$es6$promise$$internal$$reject(promise, value)
                    }
                }

                function lib$es6$promise$$internal$$initializePromise(promise, resolver) {
                    try {
                        resolver(function resolvePromise(value) {
                            lib$es6$promise$$internal$$resolve(promise, value)
                        }, function rejectPromise(reason) {
                            lib$es6$promise$$internal$$reject(promise, reason)
                        })
                    } catch (e) {
                        lib$es6$promise$$internal$$reject(promise, e)
                    }
                }

                function lib$es6$promise$enumerator$$Enumerator(Constructor, input) {
                    var enumerator = this;
                    enumerator._instanceConstructor = Constructor;
                    enumerator.promise = new Constructor(lib$es6$promise$$internal$$noop);
                    if (enumerator._validateInput(input)) {
                        enumerator._input = input;
                        enumerator.length = input.length;
                        enumerator._remaining = input.length;
                        enumerator._init();
                        if (enumerator.length === 0) {
                            lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result)
                        } else {
                            enumerator.length = enumerator.length || 0;
                            enumerator._enumerate();
                            if (enumerator._remaining === 0) {
                                lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result)
                            }
                        }
                    } else {
                        lib$es6$promise$$internal$$reject(enumerator.promise, enumerator._validationError())
                    }
                }
                lib$es6$promise$enumerator$$Enumerator.prototype._validateInput = function(input) {
                    return lib$es6$promise$utils$$isArray(input)
                };
                lib$es6$promise$enumerator$$Enumerator.prototype._validationError = function() {
                    return new Error("Array Methods must be provided an Array")
                };
                lib$es6$promise$enumerator$$Enumerator.prototype._init = function() {
                    this._result = new Array(this.length)
                };
                var lib$es6$promise$enumerator$$default = lib$es6$promise$enumerator$$Enumerator;
                lib$es6$promise$enumerator$$Enumerator.prototype._enumerate = function() {
                    var enumerator = this;
                    var length = enumerator.length;
                    var promise = enumerator.promise;
                    var input = enumerator._input;
                    for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
                        enumerator._eachEntry(input[i], i)
                    }
                };
                lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) {
                    var enumerator = this;
                    var c = enumerator._instanceConstructor;
                    if (lib$es6$promise$utils$$isMaybeThenable(entry)) {
                        if (entry.constructor === c && entry._state !== lib$es6$promise$$internal$$PENDING) {
                            entry._onerror = null;
                            enumerator._settledAt(entry._state, i, entry._result)
                        } else {
                            enumerator._willSettleAt(c.resolve(entry), i)
                        }
                    } else {
                        enumerator._remaining--;
                        enumerator._result[i] = entry
                    }
                };
                lib$es6$promise$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) {
                    var enumerator = this;
                    var promise = enumerator.promise;
                    if (promise._state === lib$es6$promise$$internal$$PENDING) {
                        enumerator._remaining--;
                        if (state === lib$es6$promise$$internal$$REJECTED) {
                            lib$es6$promise$$internal$$reject(promise, value)
                        } else {
                            enumerator._result[i] = value
                        }
                    }
                    if (enumerator._remaining === 0) {
                        lib$es6$promise$$internal$$fulfill(promise, enumerator._result)
                    }
                };
                lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) {
                    var enumerator = this;
                    lib$es6$promise$$internal$$subscribe(promise, undefined, function(value) {
                        enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED, i, value)
                    }, function(reason) {
                        enumerator._settledAt(lib$es6$promise$$internal$$REJECTED, i, reason)
                    })
                };

                function lib$es6$promise$promise$all$$all(entries) {
                    return new lib$es6$promise$enumerator$$default(this, entries).promise
                }
                var lib$es6$promise$promise$all$$default = lib$es6$promise$promise$all$$all;

                function lib$es6$promise$promise$race$$race(entries) {
                    var Constructor = this;
                    var promise = new Constructor(lib$es6$promise$$internal$$noop);
                    if (!lib$es6$promise$utils$$isArray(entries)) {
                        lib$es6$promise$$internal$$reject(promise, new TypeError("You must pass an array to race."));
                        return promise
                    }
                    var length = entries.length;

                    function onFulfillment(value) {
                        lib$es6$promise$$internal$$resolve(promise, value)
                    }

                    function onRejection(reason) {
                        lib$es6$promise$$internal$$reject(promise, reason)
                    }
                    for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
                        lib$es6$promise$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection)
                    }
                    return promise
                }
                var lib$es6$promise$promise$race$$default = lib$es6$promise$promise$race$$race;

                function lib$es6$promise$promise$resolve$$resolve(object) {
                    var Constructor = this;
                    if (object && typeof object === "object" && object.constructor === Constructor) {
                        return object
                    }
                    var promise = new Constructor(lib$es6$promise$$internal$$noop);
                    lib$es6$promise$$internal$$resolve(promise, object);
                    return promise
                }
                var lib$es6$promise$promise$resolve$$default = lib$es6$promise$promise$resolve$$resolve;

                function lib$es6$promise$promise$reject$$reject(reason) {
                    var Constructor = this;
                    var promise = new Constructor(lib$es6$promise$$internal$$noop);
                    lib$es6$promise$$internal$$reject(promise, reason);
                    return promise
                }
                var lib$es6$promise$promise$reject$$default = lib$es6$promise$promise$reject$$reject;
                var lib$es6$promise$promise$$counter = 0;

                function lib$es6$promise$promise$$needsResolver() {
                    throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")
                }

                function lib$es6$promise$promise$$needsNew() {
                    throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")
                }
                var lib$es6$promise$promise$$default = lib$es6$promise$promise$$Promise;

                function lib$es6$promise$promise$$Promise(resolver) {
                    this._id = lib$es6$promise$promise$$counter++;
                    this._state = undefined;
                    this._result = undefined;
                    this._subscribers = [];
                    if (lib$es6$promise$$internal$$noop !== resolver) {
                        if (!lib$es6$promise$utils$$isFunction(resolver)) {
                            lib$es6$promise$promise$$needsResolver()
                        }
                        if (!(this instanceof lib$es6$promise$promise$$Promise)) {
                            lib$es6$promise$promise$$needsNew()
                        }
                        lib$es6$promise$$internal$$initializePromise(this, resolver)
                    }
                }
                lib$es6$promise$promise$$Promise.all = lib$es6$promise$promise$all$$default;
                lib$es6$promise$promise$$Promise.race = lib$es6$promise$promise$race$$default;
                lib$es6$promise$promise$$Promise.resolve = lib$es6$promise$promise$resolve$$default;
                lib$es6$promise$promise$$Promise.reject = lib$es6$promise$promise$reject$$default;
                lib$es6$promise$promise$$Promise._setScheduler = lib$es6$promise$asap$$setScheduler;
                lib$es6$promise$promise$$Promise._setAsap = lib$es6$promise$asap$$setAsap;
                lib$es6$promise$promise$$Promise._asap = lib$es6$promise$asap$$asap;
                lib$es6$promise$promise$$Promise.prototype = {
                    constructor: lib$es6$promise$promise$$Promise,
                    then: function(onFulfillment, onRejection) {
                        var parent = this;
                        var state = parent._state;
                        if (state === lib$es6$promise$$internal$$FULFILLED && !onFulfillment || state === lib$es6$promise$$internal$$REJECTED && !onRejection) {
                            return this
                        }
                        var child = new this.constructor(lib$es6$promise$$internal$$noop);
                        var result = parent._result;
                        if (state) {
                            var callback = arguments[state - 1];
                            lib$es6$promise$asap$$asap(function() {
                                lib$es6$promise$$internal$$invokeCallback(state, child, callback, result)
                            })
                        } else {
                            lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection)
                        }
                        return child
                    },
                    catch: function(onRejection) {
                        return this.then(null, onRejection)
                    }
                };

                function lib$es6$promise$polyfill$$polyfill() {
                    var local;
                    if (typeof global !== "undefined") {
                        local = global
                    } else if (typeof self !== "undefined") {
                        local = self
                    } else {
                        try {
                            local = Function("return this")()
                        } catch (e) {
                            throw new Error("polyfill failed because global object is unavailable in this environment")
                        }
                    }
                    var P = local.Promise;
                    if (P && Object.prototype.toString.call(P.resolve()) === "[object Promise]" && !P.cast) {
                        return
                    }
                    local.Promise = lib$es6$promise$promise$$default
                }
                var lib$es6$promise$polyfill$$default = lib$es6$promise$polyfill$$polyfill;
                var lib$es6$promise$umd$$ES6Promise = {
                    Promise: lib$es6$promise$promise$$default,
                    polyfill: lib$es6$promise$polyfill$$default
                };
                if (typeof define === "function" && define["amd"]) {
                    define(function() {
                        return lib$es6$promise$umd$$ES6Promise
                    })
                } else if (typeof module !== "undefined" && module["exports"]) {
                    module["exports"] = lib$es6$promise$umd$$ES6Promise
                } else if (typeof this !== "undefined") {
                    this["ES6Promise"] = lib$es6$promise$umd$$ES6Promise
                }
                lib$es6$promise$polyfill$$default()
            }).call(this)
        }).call(this, require("_process"), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {
        _process: 2
    }],
    20: [function(require, module, exports) {
        arguments[4][6][0].apply(exports, arguments)
    }, {
        dup: 6
    }],
    21: [function(require, module, exports) {
        (function(factory) {
            if (typeof define === "function" && define.amd) {
                define(["underscore", "backbone", "exports"], factory)
            } else if (typeof exports === "object") {
                factory(require("underscore"), require("backbone"), exports)
            } else {
                factory(_, Backbone, {})
            }
        })(function(_, Backbone, Stickit) {
            Stickit._handlers = [];
            Stickit.addHandler = function(handlers) {
                handlers = _.map(_.flatten([handlers]), function(handler) {
                    return _.extend({
                        updateModel: true,
                        updateView: true,
                        updateMethod: "text"
                    }, handler)
                });
                this._handlers = this._handlers.concat(handlers)
            };
            Stickit.ViewMixin = {
                _modelBindings: null,
                unstickit: function(model, bindingSelector) {
                    if (_.isObject(bindingSelector)) {
                        _.each(_.keys(bindingSelector), function(selector) {
                            this.unstickit(model, selector)
                        }, this);
                        return
                    }
                    var models = [],
                        destroyFns = [];
                    _.each(this._modelBindings, function(binding, i) {
                        if (model && binding.model !== model) {
                            return
                        }
                        if (bindingSelector && binding.config.selector != bindingSelector) return;
                        destroyFns.push(binding.config._destroy);
                        binding.model.off(binding.event, binding.fn);
                        models.push(binding.model);
                        delete this._modelBindings[i]
                    }, this);
                    _.invoke(_.uniq(models), "trigger", "stickit:unstuck", this.cid);
                    _.each(_.uniq(destroyFns), function(fn) {
                        fn.call(this)
                    }, this);
                    this._modelBindings = _.compact(this._modelBindings);
                    this.$el.off(".stickit" + (model ? "." + model.cid : ""), bindingSelector)
                },
                stickit: function(optionalModel, optionalBindingsConfig) {
                    var model = optionalModel || this.model,
                        bindings = optionalBindingsConfig || _.result(this, "bindings") || {};
                    this._modelBindings || (this._modelBindings = []);
                    this.addBinding(model, bindings);
                    var remove = this.remove;
                    if (!remove.stickitWrapped) {
                        this.remove = function() {
                            var ret = this;
                            this.unstickit();
                            if (remove) ret = remove.apply(this, arguments);
                            return ret
                        }
                    }
                    this.remove.stickitWrapped = true
                },
                addBinding: function(optionalModel, second, _binding) {
                    var $el, options, modelAttr, config, selector, model = optionalModel || this.model,
                        namespace = ".stickit." + model.cid,
                        binding = _binding || {},
                        bindId = _.uniqueId();
                    if (_.isString(second)) {
                        selector = second
                    } else {
                        var bindings = second;
                        _.each(bindings, function(v, selector) {
                            this.addBinding(model, selector, bindings[selector])
                        }, this);
                        return
                    }
                    $el = selector === ":el" ? this.$el : this.$(selector);
                    this.unstickit(model, selector);
                    if (!$el.length) return;
                    if (_.isString(binding)) binding = {
                        observe: binding
                    };
                    if (_.isFunction(binding.observe)) binding.observe = binding.observe.call(this);
                    config = getConfiguration($el, binding);
                    config.selector = selector;
                    modelAttr = config.observe;
                    config.bindId = bindId;
                    config.view = this;
                    options = _.extend({
                        stickitChange: config
                    }, config.setOptions);
                    config._destroy = function() {
                        applyViewFn(this, config.destroy, $el, model, config)
                    };
                    initializeAttributes(this, $el, config, model, modelAttr);
                    initializeVisible(this, $el, config, model, modelAttr);
                    if (modelAttr) {
                        _.each(config.events, function(type) {
                            var event = type + namespace;
                            var method = function(event) {
                                var val = config.getVal.call(this, $el, event, config, _.rest(arguments));
                                if (evaluateBoolean(this, config.updateModel, val, event, config)) setAttr(model, modelAttr, val, options, this, config)
                            };
                            method = _.bind(method, this);
                            if (selector === ":el") this.$el.on(event, method);
                            else this.$el.on(event, selector, method)
                        }, this);
                        _.each(_.flatten([modelAttr]), function(attr) {
                            observeModelEvent(model, this, "change:" + attr, config, function(model, val, options) {
                                var changeId = options && options.stickitChange && options.stickitChange.bindId || null;
                                if (changeId !== bindId) updateViewBindEl(this, $el, config, getAttr(model, modelAttr, config, this), model)
                            })
                        }, this);
                        updateViewBindEl(this, $el, config, getAttr(model, modelAttr, config, this), model, true)
                    }
                    applyViewFn(this, config.initialize, $el, model, config)
                }
            };
            _.extend(Backbone.View.prototype, Stickit.ViewMixin);
            var evaluatePath = function(obj, path) {
                var parts = (path || "").split(".");
                var result = _.reduce(parts, function(memo, i) {
                    return memo[i]
                }, obj);
                return result == null ? obj : result
            };
            var applyViewFn = function(view, fn) {
                if (fn) return (_.isString(fn) ? evaluatePath(view, fn) : fn).apply(view, _.rest(arguments, 2))
            };
            var getSelectedOption = function($select) {
                return $select.find("option").not(function() {
                    return !this.selected
                })
            };
            var evaluateBoolean = function(view, reference) {
                if (_.isBoolean(reference)) return reference;
                else if (_.isFunction(reference) || _.isString(reference)) return applyViewFn.apply(this, arguments);
                return false
            };
            var observeModelEvent = function(model, view, event, config, fn) {
                model.on(event, fn, view);
                view._modelBindings.push({
                    model: model,
                    event: event,
                    fn: fn,
                    config: config
                })
            };
            var setAttr = function(model, attr, val, options, context, config) {
                var value = {};
                if (config.onSet) val = applyViewFn(context, config.onSet, val, config);
                if (config.set) applyViewFn(context, config.set, attr, val, options, config);
                else {
                    value[attr] = val;
                    if (_.isArray(attr) && _.isArray(val)) {
                        value = _.reduce(attr, function(memo, attribute, index) {
                            memo[attribute] = _.has(val, index) ? val[index] : null;
                            return memo
                        }, {})
                    }
                    model.set(value, options)
                }
            };
            var getAttr = function(model, attr, config, context) {
                var val, retrieveVal = function(field) {
                        return model[config.escape ? "escape" : "get"](field)
                    },
                    sanitizeVal = function(val) {
                        return val == null ? "" : val
                    };
                val = _.isArray(attr) ? _.map(attr, retrieveVal) : retrieveVal(attr);
                if (config.onGet) val = applyViewFn(context, config.onGet, val, config);
                return _.isArray(val) ? _.map(val, sanitizeVal) : sanitizeVal(val)
            };
            var getConfiguration = Stickit.getConfiguration = function($el, binding) {
                var handlers = [{
                    updateModel: false,
                    updateMethod: "text",
                    update: function($el, val, m, opts) {
                        if ($el[opts.updateMethod]) $el[opts.updateMethod](val)
                    },
                    getVal: function($el, e, opts) {
                        return $el[opts.updateMethod]()
                    }
                }];
                handlers = handlers.concat(_.filter(Stickit._handlers, function(handler) {
                    return $el.is(handler.selector)
                }));
                handlers.push(binding);
                var config = _.extend.apply(_, handlers);
                if (config.visible && !_.has(config, "updateView")) config.updateView = false;
                else if (!_.has(config, "updateView")) config.updateView = true;
                return config
            };
            var initializeAttributes = function(view, $el, config, model, modelAttr) {
                var props = ["autofocus", "autoplay", "async", "checked", "controls", "defer", "disabled", "hidden", "indeterminate", "loop", "multiple", "open", "readonly", "required", "scoped", "selected"];
                _.each(config.attributes || [], function(attrConfig) {
                    var lastClass = "",
                        observed, updateAttr;
                    attrConfig = _.clone(attrConfig);
                    observed = attrConfig.observe || (attrConfig.observe = modelAttr), updateAttr = function() {
                        var updateType = _.indexOf(props, attrConfig.name, true) > -1 ? "prop" : "attr",
                            val = getAttr(model, observed, attrConfig, view);
                        if (attrConfig.name === "class") {
                            $el.removeClass(lastClass).addClass(val);
                            lastClass = val
                        } else $el[updateType](attrConfig.name, val)
                    };
                    _.each(_.flatten([observed]), function(attr) {
                        observeModelEvent(model, view, "change:" + attr, config, updateAttr)
                    });
                    updateAttr()
                })
            };
            var initializeVisible = function(view, $el, config, model, modelAttr) {
                if (config.visible == null) return;
                var visibleCb = function() {
                    var visible = config.visible,
                        visibleFn = config.visibleFn,
                        val = getAttr(model, modelAttr, config, view),
                        isVisible = !!val;
                    if (_.isFunction(visible) || _.isString(visible)) isVisible = !!applyViewFn(view, visible, val, config);
                    if (visibleFn) applyViewFn(view, visibleFn, $el, isVisible, config);
                    else {
                        $el.toggle(isVisible)
                    }
                };
                _.each(_.flatten([modelAttr]), function(attr) {
                    observeModelEvent(model, view, "change:" + attr, config, visibleCb)
                });
                visibleCb()
            };
            var updateViewBindEl = function(view, $el, config, val, model, isInitializing) {
                if (!evaluateBoolean(view, config.updateView, val, config)) return;
                applyViewFn(view, config.update, $el, val, model, config);
                if (!isInitializing) applyViewFn(view, config.afterUpdate, $el, val, config)
            };
            Stickit.addHandler([{
                selector: '[contenteditable="true"]',
                updateMethod: "html",
                events: ["input", "change"]
            }, {
                selector: "input",
                events: ["propertychange", "input", "change"],
                update: function($el, val) {
                    $el.val(val)
                },
                getVal: function($el) {
                    return $el.val()
                }
            }, {
                selector: "textarea",
                events: ["propertychange", "input", "change"],
                update: function($el, val) {
                    $el.val(val)
                },
                getVal: function($el) {
                    return $el.val()
                }
            }, {
                selector: 'input[type="radio"]',
                events: ["change"],
                update: function($el, val) {
                    $el.filter('[value="' + val + '"]').prop("checked", true)
                },
                getVal: function($el) {
                    return $el.filter(":checked").val()
                }
            }, {
                selector: 'input[type="checkbox"]',
                events: ["change"],
                update: function($el, val, model, options) {
                    if ($el.length > 1) {
                        val || (val = []);
                        $el.each(function(i, el) {
                            var checkbox = Backbone.$(el);
                            var checked = _.contains(val, checkbox.val());
                            checkbox.prop("checked", checked)
                        })
                    } else {
                        var checked = _.isBoolean(val) ? val : val === $el.val();
                        $el.prop("checked", checked)
                    }
                },
                getVal: function($el) {
                    var val;
                    if ($el.length > 1) {
                        val = _.reduce($el, function(memo, el) {
                            var checkbox = Backbone.$(el);
                            if (checkbox.prop("checked")) memo.push(checkbox.val());
                            return memo
                        }, [])
                    } else {
                        val = $el.prop("checked");
                        var boxval = $el.val();
                        if (boxval !== "on" && boxval != null) {
                            val = val ? $el.val() : null
                        }
                    }
                    return val
                }
            }, {
                selector: "select",
                events: ["change"],
                update: function($el, val, model, options) {
                    var optList, selectConfig = options.selectOptions,
                        list = selectConfig && selectConfig.collection || undefined,
                        isMultiple = $el.prop("multiple");
                    if (!selectConfig) {
                        selectConfig = {};
                        var getList = function($el) {
                            return $el.map(function() {
                                return {
                                    value: this.value,
                                    label: this.text
                                }
                            }).get()
                        };
                        if ($el.find("optgroup").length) {
                            list = {
                                opt_labels: []
                            };
                            if ($el.find("> option").length) {
                                list.opt_labels.push(undefined);
                                _.each($el.find("> option"), function(el) {
                                    list[undefined] = getList(Backbone.$(el))
                                })
                            }
                            _.each($el.find("optgroup"), function(el) {
                                var label = Backbone.$(el).attr("label");
                                list.opt_labels.push(label);
                                list[label] = getList(Backbone.$(el).find("option"))
                            })
                        } else {
                            list = getList($el.find("option"))
                        }
                    }
                    selectConfig.valuePath = selectConfig.valuePath || "value";
                    selectConfig.labelPath = selectConfig.labelPath || "label";
                    var addSelectOptions = function(optList, $el, fieldVal) {
                        _.each(optList, function(obj) {
                            var option = Backbone.$("<option/>"),
                                optionVal = obj;
                            var fillOption = function(text, val) {
                                option.text(text);
                                optionVal = val;
                                option.data("stickit_bind_val", optionVal);
                                if (!_.isArray(optionVal) && !_.isObject(optionVal)) option.val(optionVal)
                            };
                            if (obj === "__default__") fillOption(selectConfig.defaultOption.label, selectConfig.defaultOption.value);
                            else fillOption(evaluatePath(obj, selectConfig.labelPath), evaluatePath(obj, selectConfig.valuePath));
                            if (!isMultiple && optionVal != null && fieldVal != null && optionVal === fieldVal || _.isObject(fieldVal) && _.isEqual(optionVal, fieldVal)) option.prop("selected", true);
                            else if (isMultiple && _.isArray(fieldVal)) {
                                _.each(fieldVal, function(val) {
                                    if (_.isObject(val)) val = evaluatePath(val, selectConfig.valuePath);
                                    if (val === optionVal || _.isObject(val) && _.isEqual(optionVal, val)) option.prop("selected", true)
                                })
                            }
                            $el.append(option)
                        })
                    };
                    $el.find("*").remove();
                    var evaluate = function(view, list) {
                        var context = window;
                        if (list.indexOf("this.") === 0) context = view;
                        list = list.replace(/^[a-z]*\.(.+)$/, "$1");
                        return evaluatePath(context, list)
                    };
                    if (_.isString(list)) optList = evaluate(this, list);
                    else if (_.isFunction(list)) optList = applyViewFn(this, list, $el, options);
                    else optList = list;
                    if (optList instanceof Backbone.Collection) optList = optList.toJSON();
                    if (selectConfig.defaultOption) {
                        addSelectOptions(["__default__"], $el)
                    }
                    if (_.isArray(optList)) {
                        addSelectOptions(optList, $el, val)
                    } else if (optList.opt_labels) {
                        _.each(optList.opt_labels, function(label) {
                            var $group = Backbone.$("<optgroup/>").attr("label", label);
                            addSelectOptions(optList[label], $group, val);
                            $el.append($group)
                        })
                    } else {
                        var opts = [],
                            opt;
                        for (var i in optList) {
                            opt = {};
                            opt[selectConfig.valuePath] = i;
                            opt[selectConfig.labelPath] = optList[i];
                            opts.push(opt)
                        }
                        addSelectOptions(_.sortBy(opts, selectConfig.comparator || selectConfig.labelPath), $el, val)
                    }
                },
                getVal: function($el) {
                    var val;
                    if ($el.prop("multiple")) {
                        val = Backbone.$(getSelectedOption($el).map(function() {
                            return Backbone.$(this).data("stickit_bind_val")
                        })).get()
                    } else {
                        val = getSelectedOption($el).data("stickit_bind_val")
                    }
                    return val
                }
            }]);
            Backbone.Stickit = Stickit;
            return Backbone.Stickit
        })
    }, {
        backbone: 25,
        underscore: 47
    }],
    22: [function(require, module, exports) {
        (function(global, factory) {
            typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory(require("backbone"), require("backbone-metal")) : typeof define === "function" && define.amd ? define(["backbone", "backbone-metal"], factory) : global.Backbone.Storage = factory(global.Backbone, global.Metal)
        })(this, function(Backbone, Metal) {
            "use strict";
            var Storage = Backbone.Storage = Metal.Class.extend({
                model: Backbone.Model,
                collection: Backbone.Collection,
                constructor: function constructor() {
                    var _this = this;
                    this.records = new this.collection;
                    this.listenToOnce(this.records, "sync", function() {
                        _this._hasSynced = true
                    });
                    this._super.apply(this, arguments)
                },
                find: function find(model) {
                    var _this = this;
                    var record = this.records.get(model);
                    if (record) {
                        return Promise.resolve(record)
                    } else {
                        model = this._ensureModel(model);
                        return Promise.resolve(model.fetch()).then(function() {
                            return _this.insert(model)
                        })
                    }
                },
                findAll: function findAll() {
                    var _this = this;
                    if (this._hasSynced) {
                        return Promise.resolve(this.records)
                    } else {
                        return Promise.resolve(this.records.fetch()).then(function() {
                            return _this.records
                        })
                    }
                },
                save: function save(model) {
                    var _this = this;
                    var record = this.records.get(model);
                    model = record || this._ensureModel(model);
                    return Promise.resolve(model.save()).then(function() {
                        if (!record) {
                            _this.insert(model)
                        }
                        return model
                    })
                },
                insert: function insert(model) {
                    model = this.records.add(model);
                    return Promise.resolve(model)
                },
                _ensureModel: function _ensureModel(model) {
                    if (model instanceof this.model) {
                        return model
                    } else if (typeof model === "object") {
                        return new this.model(model)
                    } else {
                        return new this.model({
                            id: model
                        })
                    }
                }
            });
            var backbone_storage = Storage;
            return backbone_storage
        })
    }, {
        backbone: 25,
        "backbone-metal": 23
    }],
    23: [function(require, module, exports) {
        arguments[4][5][0].apply(exports, arguments)
    }, {
        backbone: 25,
        dup: 5,
        underscore: 24
    }],
    24: [function(require, module, exports) {
        arguments[4][6][0].apply(exports, arguments)
    }, {
        dup: 6
    }],
    25: [function(require, module, exports) {
        (function(global) {
            (function(factory) {
                var root = typeof self == "object" && self.self == self && self || typeof global == "object" && global.global == global && global;
                if (typeof define === "function" && define.amd) {
                    define(["underscore", "jquery", "exports"], function(_, $, exports) {
                        root.Backbone = factory(root, exports, _, $)
                    })
                } else if (typeof exports !== "undefined") {
                    var _ = require("underscore"),
                        $;
                    try {
                        $ = require("jquery")
                    } catch (e) {}
                    factory(root, exports, _, $)
                } else {
                    root.Backbone = factory(root, {}, root._, root.jQuery || root.Zepto || root.ender || root.$)
                }
            })(function(root, Backbone, _, $) {
                var previousBackbone = root.Backbone;
                var slice = Array.prototype.slice;
                Backbone.VERSION = "1.2.3";
                Backbone.$ = $;
                Backbone.noConflict = function() {
                    root.Backbone = previousBackbone;
                    return this
                };
                Backbone.emulateHTTP = false;
                Backbone.emulateJSON = false;
                var addMethod = function(length, method, attribute) {
                    switch (length) {
                        case 1:
                            return function() {
                                return _[method](this[attribute])
                            };
                        case 2:
                            return function(value) {
                                return _[method](this[attribute], value)
                            };
                        case 3:
                            return function(iteratee, context) {
                                return _[method](this[attribute], cb(iteratee, this), context)
                            };
                        case 4:
                            return function(iteratee, defaultVal, context) {
                                return _[method](this[attribute], cb(iteratee, this), defaultVal, context)
                            };
                        default:
                            return function() {
                                var args = slice.call(arguments);
                                args.unshift(this[attribute]);
                                return _[method].apply(_, args)
                            }
                    }
                };
                var addUnderscoreMethods = function(Class, methods, attribute) {
                    _.each(methods, function(length, method) {
                        if (_[method]) Class.prototype[method] = addMethod(length, method, attribute)
                    })
                };
                var cb = function(iteratee, instance) {
                    if (_.isFunction(iteratee)) return iteratee;
                    if (_.isObject(iteratee) && !instance._isModel(iteratee)) return modelMatcher(iteratee);
                    if (_.isString(iteratee)) return function(model) {
                        return model.get(iteratee)
                    };
                    return iteratee
                };
                var modelMatcher = function(attrs) {
                    var matcher = _.matches(attrs);
                    return function(model) {
                        return matcher(model.attributes)
                    }
                };
                var Events = Backbone.Events = {};
                var eventSplitter = /\s+/;
                var eventsApi = function(iteratee, events, name, callback, opts) {
                    var i = 0,
                        names;
                    if (name && typeof name === "object") {
                        if (callback !== void 0 && "context" in opts && opts.context === void 0) opts.context = callback;
                        for (names = _.keys(name); i < names.length; i++) {
                            events = eventsApi(iteratee, events, names[i], name[names[i]], opts)
                        }
                    } else if (name && eventSplitter.test(name)) {
                        for (names = name.split(eventSplitter); i < names.length; i++) {
                            events = iteratee(events, names[i], callback, opts)
                        }
                    } else {
                        events = iteratee(events, name, callback, opts)
                    }
                    return events
                };
                Events.on = function(name, callback, context) {
                    return internalOn(this, name, callback, context)
                };
                var internalOn = function(obj, name, callback, context, listening) {
                    obj._events = eventsApi(onApi, obj._events || {}, name, callback, {
                        context: context,
                        ctx: obj,
                        listening: listening
                    });
                    if (listening) {
                        var listeners = obj._listeners || (obj._listeners = {});
                        listeners[listening.id] = listening
                    }
                    return obj
                };
                Events.listenTo = function(obj, name, callback) {
                    if (!obj) return this;
                    var id = obj._listenId || (obj._listenId = _.uniqueId("l"));
                    var listeningTo = this._listeningTo || (this._listeningTo = {});
                    var listening = listeningTo[id];
                    if (!listening) {
                        var thisId = this._listenId || (this._listenId = _.uniqueId("l"));
                        listening = listeningTo[id] = {
                            obj: obj,
                            objId: id,
                            id: thisId,
                            listeningTo: listeningTo,
                            count: 0
                        }
                    }
                    internalOn(obj, name, callback, this, listening);
                    return this
                };
                var onApi = function(events, name, callback, options) {
                    if (callback) {
                        var handlers = events[name] || (events[name] = []);
                        var context = options.context,
                            ctx = options.ctx,
                            listening = options.listening;
                        if (listening) listening.count++;
                        handlers.push({
                            callback: callback,
                            context: context,
                            ctx: context || ctx,
                            listening: listening
                        })
                    }
                    return events
                };
                Events.off = function(name, callback, context) {
                    if (!this._events) return this;
                    this._events = eventsApi(offApi, this._events, name, callback, {
                        context: context,
                        listeners: this._listeners
                    });
                    return this
                };
                Events.stopListening = function(obj, name, callback) {
                    var listeningTo = this._listeningTo;
                    if (!listeningTo) return this;
                    var ids = obj ? [obj._listenId] : _.keys(listeningTo);
                    for (var i = 0; i < ids.length; i++) {
                        var listening = listeningTo[ids[i]];
                        if (!listening) break;
                        listening.obj.off(name, callback, this)
                    }
                    if (_.isEmpty(listeningTo)) this._listeningTo = void 0;
                    return this
                };
                var offApi = function(events, name, callback, options) {
                    if (!events) return;
                    var i = 0,
                        listening;
                    var context = options.context,
                        listeners = options.listeners;
                    if (!name && !callback && !context) {
                        var ids = _.keys(listeners);
                        for (; i < ids.length; i++) {
                            listening = listeners[ids[i]];
                            delete listeners[listening.id];
                            delete listening.listeningTo[listening.objId]
                        }
                        return
                    }
                    var names = name ? [name] : _.keys(events);
                    for (; i < names.length; i++) {
                        name = names[i];
                        var handlers = events[name];
                        if (!handlers) break;
                        var remaining = [];
                        for (var j = 0; j < handlers.length; j++) {
                            var handler = handlers[j];
                            if (callback && callback !== handler.callback && callback !== handler.callback._callback || context && context !== handler.context) {
                                remaining.push(handler)
                            } else {
                                listening = handler.listening;
                                if (listening && --listening.count === 0) {
                                    delete listeners[listening.id];
                                    delete listening.listeningTo[listening.objId]
                                }
                            }
                        }
                        if (remaining.length) {
                            events[name] = remaining
                        } else {
                            delete events[name]
                        }
                    }
                    if (_.size(events)) return events
                };
                Events.once = function(name, callback, context) {
                    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.off, this));
                    return this.on(events, void 0, context)
                };
                Events.listenToOnce = function(obj, name, callback) {
                    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.stopListening, this, obj));
                    return this.listenTo(obj, events)
                };
                var onceMap = function(map, name, callback, offer) {
                    if (callback) {
                        var once = map[name] = _.once(function() {
                            offer(name, once);
                            callback.apply(this, arguments)
                        });
                        once._callback = callback
                    }
                    return map
                };
                Events.trigger = function(name) {
                    if (!this._events) return this;
                    var length = Math.max(0, arguments.length - 1);
                    var args = Array(length);
                    for (var i = 0; i < length; i++) args[i] = arguments[i + 1];
                    eventsApi(triggerApi, this._events, name, void 0, args);
                    return this
                };
                var triggerApi = function(objEvents, name, cb, args) {
                    if (objEvents) {
                        var events = objEvents[name];
                        var allEvents = objEvents.all;
                        if (events && allEvents) allEvents = allEvents.slice();
                        if (events) triggerEvents(events, args);
                        if (allEvents) triggerEvents(allEvents, [name].concat(args))
                    }
                    return objEvents
                };
                var triggerEvents = function(events, args) {
                    var ev, i = -1,
                        l = events.length,
                        a1 = args[0],
                        a2 = args[1],
                        a3 = args[2];
                    switch (args.length) {
                        case 0:
                            while (++i < l)(ev = events[i]).callback.call(ev.ctx);
                            return;
                        case 1:
                            while (++i < l)(ev = events[i]).callback.call(ev.ctx, a1);
                            return;
                        case 2:
                            while (++i < l)(ev = events[i]).callback.call(ev.ctx, a1, a2);
                            return;
                        case 3:
                            while (++i < l)(ev = events[i]).callback.call(ev.ctx, a1, a2, a3);
                            return;
                        default:
                            while (++i < l)(ev = events[i]).callback.apply(ev.ctx, args);
                            return
                    }
                };
                Events.bind = Events.on;
                Events.unbind = Events.off;
                _.extend(Backbone, Events);
                var Model = Backbone.Model = function(attributes, options) {
                    var attrs = attributes || {};
                    options || (options = {});
                    this.cid = _.uniqueId(this.cidPrefix);
                    this.attributes = {};
                    if (options.collection) this.collection = options.collection;
                    if (options.parse) attrs = this.parse(attrs, options) || {};
                    attrs = _.defaults({}, attrs, _.result(this, "defaults"));
                    this.set(attrs, options);
                    this.changed = {};
                    this.initialize.apply(this, arguments)
                };
                _.extend(Model.prototype, Events, {
                    changed: null,
                    validationError: null,
                    idAttribute: "id",
                    cidPrefix: "c",
                    initialize: function() {},
                    toJSON: function(options) {
                        return _.clone(this.attributes)
                    },
                    sync: function() {
                        return Backbone.sync.apply(this, arguments)
                    },
                    get: function(attr) {
                        return this.attributes[attr]
                    },
                    escape: function(attr) {
                        return _.escape(this.get(attr))
                    },
                    has: function(attr) {
                        return this.get(attr) != null
                    },
                    matches: function(attrs) {
                        return !!_.iteratee(attrs, this)(this.attributes)
                    },
                    set: function(key, val, options) {
                        if (key == null) return this;
                        var attrs;
                        if (typeof key === "object") {
                            attrs = key;
                            options = val
                        } else {
                            (attrs = {})[key] = val
                        }
                        options || (options = {});
                        if (!this._validate(attrs, options)) return false;
                        var unset = options.unset;
                        var silent = options.silent;
                        var changes = [];
                        var changing = this._changing;
                        this._changing = true;
                        if (!changing) {
                            this._previousAttributes = _.clone(this.attributes);
                            this.changed = {}
                        }
                        var current = this.attributes;
                        var changed = this.changed;
                        var prev = this._previousAttributes;
                        for (var attr in attrs) {
                            val = attrs[attr];
                            if (!_.isEqual(current[attr], val)) changes.push(attr);
                            if (!_.isEqual(prev[attr], val)) {
                                changed[attr] = val
                            } else {
                                delete changed[attr]
                            }
                            unset ? delete current[attr] : current[attr] = val
                        }
                        this.id = this.get(this.idAttribute);
                        if (!silent) {
                            if (changes.length) this._pending = options;
                            for (var i = 0; i < changes.length; i++) {
                                this.trigger("change:" + changes[i], this, current[changes[i]], options)
                            }
                        }
                        if (changing) return this;
                        if (!silent) {
                            while (this._pending) {
                                options = this._pending;
                                this._pending = false;
                                this.trigger("change", this, options)
                            }
                        }
                        this._pending = false;
                        this._changing = false;
                        return this
                    },
                    unset: function(attr, options) {
                        return this.set(attr, void 0, _.extend({}, options, {
                            unset: true
                        }))
                    },
                    clear: function(options) {
                        var attrs = {};
                        for (var key in this.attributes) attrs[key] = void 0;
                        return this.set(attrs, _.extend({}, options, {
                            unset: true
                        }))
                    },
                    hasChanged: function(attr) {
                        if (attr == null) return !_.isEmpty(this.changed);
                        return _.has(this.changed, attr)
                    },
                    changedAttributes: function(diff) {
                        if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
                        var old = this._changing ? this._previousAttributes : this.attributes;
                        var changed = {};
                        for (var attr in diff) {
                            var val = diff[attr];
                            if (_.isEqual(old[attr], val)) continue;
                            changed[attr] = val
                        }
                        return _.size(changed) ? changed : false
                    },
                    previous: function(attr) {
                        if (attr == null || !this._previousAttributes) return null;
                        return this._previousAttributes[attr]
                    },
                    previousAttributes: function() {
                        return _.clone(this._previousAttributes)
                    },
                    fetch: function(options) {
                        options = _.extend({
                            parse: true
                        }, options);
                        var model = this;
                        var success = options.success;
                        options.success = function(resp) {
                            var serverAttrs = options.parse ? model.parse(resp, options) : resp;
                            if (!model.set(serverAttrs, options)) return false;
                            if (success) success.call(options.context, model, resp, options);
                            model.trigger("sync", model, resp, options)
                        };
                        wrapError(this, options);
                        return this.sync("read", this, options)
                    },
                    save: function(key, val, options) {
                        var attrs;
                        if (key == null || typeof key === "object") {
                            attrs = key;
                            options = val
                        } else {
                            (attrs = {})[key] = val
                        }
                        options = _.extend({
                            validate: true,
                            parse: true
                        }, options);
                        var wait = options.wait;
                        if (attrs && !wait) {
                            if (!this.set(attrs, options)) return false
                        } else {
                            if (!this._validate(attrs, options)) return false
                        }
                        var model = this;
                        var success = options.success;
                        var attributes = this.attributes;
                        options.success = function(resp) {
                            model.attributes = attributes;
                            var serverAttrs = options.parse ? model.parse(resp, options) : resp;
                            if (wait) serverAttrs = _.extend({}, attrs, serverAttrs);
                            if (serverAttrs && !model.set(serverAttrs, options)) return false;
                            if (success) success.call(options.context, model, resp, options);
                            model.trigger("sync", model, resp, options)
                        };
                        wrapError(this, options);
                        if (attrs && wait) this.attributes = _.extend({}, attributes, attrs);
                        var method = this.isNew() ? "create" : options.patch ? "patch" : "update";
                        if (method === "patch" && !options.attrs) options.attrs = attrs;
                        var xhr = this.sync(method, this, options);
                        this.attributes = attributes;
                        return xhr
                    },
                    destroy: function(options) {
                        options = options ? _.clone(options) : {};
                        var model = this;
                        var success = options.success;
                        var wait = options.wait;
                        var destroy = function() {
                            model.stopListening();
                            model.trigger("destroy", model, model.collection, options)
                        };
                        options.success = function(resp) {
                            if (wait) destroy();
                            if (success) success.call(options.context, model, resp, options);
                            if (!model.isNew()) model.trigger("sync", model, resp, options)
                        };
                        var xhr = false;
                        if (this.isNew()) {
                            _.defer(options.success)
                        } else {
                            wrapError(this, options);
                            xhr = this.sync("delete", this, options)
                        }
                        if (!wait) destroy();
                        return xhr
                    },
                    url: function() {
                        var base = _.result(this, "urlRoot") || _.result(this.collection, "url") || urlError();
                        if (this.isNew()) return base;
                        var id = this.get(this.idAttribute);
                        return base.replace(/[^\/]$/, "$&/") + encodeURIComponent(id)
                    },
                    parse: function(resp, options) {
                        return resp
                    },
                    clone: function() {
                        return new this.constructor(this.attributes)
                    },
                    isNew: function() {
                        return !this.has(this.idAttribute)
                    },
                    isValid: function(options) {
                        return this._validate({}, _.defaults({
                            validate: true
                        }, options))
                    },
                    _validate: function(attrs, options) {
                        if (!options.validate || !this.validate) return true;
                        attrs = _.extend({}, this.attributes, attrs);
                        var error = this.validationError = this.validate(attrs, options) || null;
                        if (!error) return true;
                        this.trigger("invalid", this, error, _.extend(options, {
                            validationError: error
                        }));
                        return false
                    }
                });
                var modelMethods = {
                    keys: 1,
                    values: 1,
                    pairs: 1,
                    invert: 1,
                    pick: 0,
                    omit: 0,
                    chain: 1,
                    isEmpty: 1
                };
                addUnderscoreMethods(Model, modelMethods, "attributes");
                var Collection = Backbone.Collection = function(models, options) {
                    options || (options = {});
                    if (options.model) this.model = options.model;
                    if (options.comparator !== void 0) this.comparator = options.comparator;
                    this._reset();
                    this.initialize.apply(this, arguments);
                    if (models) this.reset(models, _.extend({
                        silent: true
                    }, options))
                };
                var setOptions = {
                    add: true,
                    remove: true,
                    merge: true
                };
                var addOptions = {
                    add: true,
                    remove: false
                };
                var splice = function(array, insert, at) {
                    at = Math.min(Math.max(at, 0), array.length);
                    var tail = Array(array.length - at);
                    var length = insert.length;
                    for (var i = 0; i < tail.length; i++) tail[i] = array[i + at];
                    for (i = 0; i < length; i++) array[i + at] = insert[i];
                    for (i = 0; i < tail.length; i++) array[i + length + at] = tail[i]
                };
                _.extend(Collection.prototype, Events, {
                    model: Model,
                    initialize: function() {},
                    toJSON: function(options) {
                        return this.map(function(model) {
                            return model.toJSON(options)
                        })
                    },
                    sync: function() {
                        return Backbone.sync.apply(this, arguments)
                    },
                    add: function(models, options) {
                        return this.set(models, _.extend({
                            merge: false
                        }, options, addOptions))
                    },
                    remove: function(models, options) {
                        options = _.extend({}, options);
                        var singular = !_.isArray(models);
                        models = singular ? [models] : _.clone(models);
                        var removed = this._removeModels(models, options);
                        if (!options.silent && removed) this.trigger("update", this, options);
                        return singular ? removed[0] : removed
                    },
                    set: function(models, options) {
                        if (models == null) return;
                        options = _.defaults({}, options, setOptions);
                        if (options.parse && !this._isModel(models)) models = this.parse(models, options);
                        var singular = !_.isArray(models);
                        models = singular ? [models] : models.slice();
                        var at = options.at;
                        if (at != null) at = +at;
                        if (at < 0) at += this.length + 1;
                        var set = [];
                        var toAdd = [];
                        var toRemove = [];
                        var modelMap = {};
                        var add = options.add;
                        var merge = options.merge;
                        var remove = options.remove;
                        var sort = false;
                        var sortable = this.comparator && at == null && options.sort !== false;
                        var sortAttr = _.isString(this.comparator) ? this.comparator : null;
                        var model;
                        for (var i = 0; i < models.length; i++) {
                            model = models[i];
                            var existing = this.get(model);
                            if (existing) {
                                if (merge && model !== existing) {
                                    var attrs = this._isModel(model) ? model.attributes : model;
                                    if (options.parse) attrs = existing.parse(attrs, options);
                                    existing.set(attrs, options);
                                    if (sortable && !sort) sort = existing.hasChanged(sortAttr)
                                }
                                if (!modelMap[existing.cid]) {
                                    modelMap[existing.cid] = true;
                                    set.push(existing)
                                }
                                models[i] = existing
                            } else if (add) {
                                model = models[i] = this._prepareModel(model, options);
                                if (model) {
                                    toAdd.push(model);
                                    this._addReference(model, options);
                                    modelMap[model.cid] = true;
                                    set.push(model)
                                }
                            }
                        }
                        if (remove) {
                            for (i = 0; i < this.length; i++) {
                                model = this.models[i];
                                if (!modelMap[model.cid]) toRemove.push(model)
                            }
                            if (toRemove.length) this._removeModels(toRemove, options)
                        }
                        var orderChanged = false;
                        var replace = !sortable && add && remove;
                        if (set.length && replace) {
                            orderChanged = this.length != set.length || _.some(this.models, function(model, index) {
                                return model !== set[index]
                            });
                            this.models.length = 0;
                            splice(this.models, set, 0);
                            this.length = this.models.length
                        } else if (toAdd.length) {
                            if (sortable) sort = true;
                            splice(this.models, toAdd, at == null ? this.length : at);
                            this.length = this.models.length
                        }
                        if (sort) this.sort({
                            silent: true
                        });
                        if (!options.silent) {
                            for (i = 0; i < toAdd.length; i++) {
                                if (at != null) options.index = at + i;
                                model = toAdd[i];
                                model.trigger("add", model, this, options)
                            }
                            if (sort || orderChanged) this.trigger("sort", this, options);
                            if (toAdd.length || toRemove.length) this.trigger("update", this, options)
                        }
                        return singular ? models[0] : models
                    },
                    reset: function(models, options) {
                        options = options ? _.clone(options) : {};
                        for (var i = 0; i < this.models.length; i++) {
                            this._removeReference(this.models[i], options)
                        }
                        options.previousModels = this.models;
                        this._reset();
                        models = this.add(models, _.extend({
                            silent: true
                        }, options));
                        if (!options.silent) this.trigger("reset", this, options);
                        return models
                    },
                    push: function(model, options) {
                        return this.add(model, _.extend({
                            at: this.length
                        }, options))
                    },
                    pop: function(options) {
                        var model = this.at(this.length - 1);
                        return this.remove(model, options)
                    },
                    unshift: function(model, options) {
                        return this.add(model, _.extend({
                            at: 0
                        }, options))
                    },
                    shift: function(options) {
                        var model = this.at(0);
                        return this.remove(model, options)
                    },
                    slice: function() {
                        return slice.apply(this.models, arguments)
                    },
                    get: function(obj) {
                        if (obj == null) return void 0;
                        var id = this.modelId(this._isModel(obj) ? obj.attributes : obj);
                        return this._byId[obj] || this._byId[id] || this._byId[obj.cid]
                    },
                    at: function(index) {
                        if (index < 0) index += this.length;
                        return this.models[index]
                    },
                    where: function(attrs, first) {
                        return this[first ? "find" : "filter"](attrs)
                    },
                    findWhere: function(attrs) {
                        return this.where(attrs, true)
                    },
                    sort: function(options) {
                        var comparator = this.comparator;
                        if (!comparator) throw new Error("Cannot sort a set without a comparator");
                        options || (options = {});
                        var length = comparator.length;
                        if (_.isFunction(comparator)) comparator = _.bind(comparator, this);
                        if (length === 1 || _.isString(comparator)) {
                            this.models = this.sortBy(comparator)
                        } else {
                            this.models.sort(comparator)
                        }
                        if (!options.silent) this.trigger("sort", this, options);
                        return this
                    },
                    pluck: function(attr) {
                        return _.invoke(this.models, "get", attr)
                    },
                    fetch: function(options) {
                        options = _.extend({
                            parse: true
                        }, options);
                        var success = options.success;
                        var collection = this;
                        options.success = function(resp) {
                            var method = options.reset ? "reset" : "set";
                            collection[method](resp, options);
                            if (success) success.call(options.context, collection, resp, options);
                            collection.trigger("sync", collection, resp, options)
                        };
                        wrapError(this, options);
                        return this.sync("read", this, options)
                    },
                    create: function(model, options) {
                        options = options ? _.clone(options) : {};
                        var wait = options.wait;
                        model = this._prepareModel(model, options);
                        if (!model) return false;
                        if (!wait) this.add(model, options);
                        var collection = this;
                        var success = options.success;
                        options.success = function(model, resp, callbackOpts) {
                            if (wait) collection.add(model, callbackOpts);
                            if (success) success.call(callbackOpts.context, model, resp, callbackOpts)
                        };
                        model.save(null, options);
                        return model
                    },
                    parse: function(resp, options) {
                        return resp
                    },
                    clone: function() {
                        return new this.constructor(this.models, {
                            model: this.model,
                            comparator: this.comparator
                        })
                    },
                    modelId: function(attrs) {
                        return attrs[this.model.prototype.idAttribute || "id"]
                    },
                    _reset: function() {
                        this.length = 0;
                        this.models = [];
                        this._byId = {}
                    },
                    _prepareModel: function(attrs, options) {
                        if (this._isModel(attrs)) {
                            if (!attrs.collection) attrs.collection = this;
                            return attrs
                        }
                        options = options ? _.clone(options) : {};
                        options.collection = this;
                        var model = new this.model(attrs, options);
                        if (!model.validationError) return model;
                        this.trigger("invalid", this, model.validationError, options);
                        return false
                    },
                    _removeModels: function(models, options) {
                        var removed = [];
                        for (var i = 0; i < models.length; i++) {
                            var model = this.get(models[i]);
                            if (!model) continue;
                            var index = this.indexOf(model);
                            this.models.splice(index, 1);
                            this.length--;
                            if (!options.silent) {
                                options.index = index;
                                model.trigger("remove", model, this, options)
                            }
                            removed.push(model);
                            this._removeReference(model, options)
                        }
                        return removed.length ? removed : false
                    },
                    _isModel: function(model) {
                        return model instanceof Model
                    },
                    _addReference: function(model, options) {
                        this._byId[model.cid] = model;
                        var id = this.modelId(model.attributes);
                        if (id != null) this._byId[id] = model;
                        model.on("all", this._onModelEvent, this)
                    },
                    _removeReference: function(model, options) {
                        delete this._byId[model.cid];
                        var id = this.modelId(model.attributes);
                        if (id != null) delete this._byId[id];
                        if (this === model.collection) delete model.collection;
                        model.off("all", this._onModelEvent, this)
                    },
                    _onModelEvent: function(event, model, collection, options) {
                        if ((event === "add" || event === "remove") && collection !== this) return;
                        if (event === "destroy") this.remove(model, options);
                        if (event === "change") {
                            var prevId = this.modelId(model.previousAttributes());
                            var id = this.modelId(model.attributes);
                            if (prevId !== id) {
                                if (prevId != null) delete this._byId[prevId];
                                if (id != null) this._byId[id] = model
                            }
                        }
                        this.trigger.apply(this, arguments)
                    }
                });
                var collectionMethods = {
                    forEach: 3,
                    each: 3,
                    map: 3,
                    collect: 3,
                    reduce: 4,
                    foldl: 4,
                    inject: 4,
                    reduceRight: 4,
                    foldr: 4,
                    find: 3,
                    detect: 3,
                    filter: 3,
                    select: 3,
                    reject: 3,
                    every: 3,
                    all: 3,
                    some: 3,
                    any: 3,
                    include: 3,
                    includes: 3,
                    contains: 3,
                    invoke: 0,
                    max: 3,
                    min: 3,
                    toArray: 1,
                    size: 1,
                    first: 3,
                    head: 3,
                    take: 3,
                    initial: 3,
                    rest: 3,
                    tail: 3,
                    drop: 3,
                    last: 3,
                    without: 0,
                    difference: 0,
                    indexOf: 3,
                    shuffle: 1,
                    lastIndexOf: 3,
                    isEmpty: 1,
                    chain: 1,
                    sample: 3,
                    partition: 3,
                    groupBy: 3,
                    countBy: 3,
                    sortBy: 3,
                    indexBy: 3
                };
                addUnderscoreMethods(Collection, collectionMethods, "models");
                var View = Backbone.View = function(options) {
                    this.cid = _.uniqueId("view");
                    _.extend(this, _.pick(options, viewOptions));
                    this._ensureElement();
                    this.initialize.apply(this, arguments)
                };
                var delegateEventSplitter = /^(\S+)\s*(.*)$/;
                var viewOptions = ["model", "collection", "el", "id", "attributes", "className", "tagName", "events"];
                _.extend(View.prototype, Events, {
                    tagName: "div",
                    $: function(selector) {
                        return this.$el.find(selector)
                    },
                    initialize: function() {},
                    render: function() {
                        return this
                    },
                    remove: function() {
                        this._removeElement();
                        this.stopListening();
                        return this
                    },
                    _removeElement: function() {
                        this.$el.remove()
                    },
                    setElement: function(element) {
                        this.undelegateEvents();
                        this._setElement(element);
                        this.delegateEvents();
                        return this
                    },
                    _setElement: function(el) {
                        this.$el = el instanceof Backbone.$ ? el : Backbone.$(el);
                        this.el = this.$el[0]
                    },
                    delegateEvents: function(events) {
                        events || (events = _.result(this, "events"));
                        if (!events) return this;
                        this.undelegateEvents();
                        for (var key in events) {
                            var method = events[key];
                            if (!_.isFunction(method)) method = this[method];
                            if (!method) continue;
                            var match = key.match(delegateEventSplitter);
                            this.delegate(match[1], match[2], _.bind(method, this))
                        }
                        return this
                    },
                    delegate: function(eventName, selector, listener) {
                        this.$el.on(eventName + ".delegateEvents" + this.cid, selector, listener);
                        return this
                    },
                    undelegateEvents: function() {
                        if (this.$el) this.$el.off(".delegateEvents" + this.cid);
                        return this
                    },
                    undelegate: function(eventName, selector, listener) {
                        this.$el.off(eventName + ".delegateEvents" + this.cid, selector, listener);
                        return this
                    },
                    _createElement: function(tagName) {
                        return document.createElement(tagName)
                    },
                    _ensureElement: function() {
                        if (!this.el) {
                            var attrs = _.extend({}, _.result(this, "attributes"));
                            if (this.id) attrs.id = _.result(this, "id");
                            if (this.className) attrs["class"] = _.result(this, "className");
                            this.setElement(this._createElement(_.result(this, "tagName")));
                            this._setAttributes(attrs)
                        } else {
                            this.setElement(_.result(this, "el"))
                        }
                    },
                    _setAttributes: function(attributes) {
                        this.$el.attr(attributes)
                    }
                });
                Backbone.sync = function(method, model, options) {
                    var type = methodMap[method];
                    _.defaults(options || (options = {}), {
                        emulateHTTP: Backbone.emulateHTTP,
                        emulateJSON: Backbone.emulateJSON
                    });
                    var params = {
                        type: type,
                        dataType: "json"
                    };
                    if (!options.url) {
                        params.url = _.result(model, "url") || urlError()
                    }
                    if (options.data == null && model && (method === "create" || method === "update" || method === "patch")) {
                        params.contentType = "application/json";
                        params.data = JSON.stringify(options.attrs || model.toJSON(options))
                    }
                    if (options.emulateJSON) {
                        params.contentType = "application/x-www-form-urlencoded";
                        params.data = params.data ? {
                            model: params.data
                        } : {}
                    }
                    if (options.emulateHTTP && (type === "PUT" || type === "DELETE" || type === "PATCH")) {
                        params.type = "POST";
                        if (options.emulateJSON) params.data._method = type;
                        var beforeSend = options.beforeSend;
                        options.beforeSend = function(xhr) {
                            xhr.setRequestHeader("X-HTTP-Method-Override", type);
                            if (beforeSend) return beforeSend.apply(this, arguments)
                        }
                    }
                    if (params.type !== "GET" && !options.emulateJSON) {
                        params.processData = false
                    }
                    var error = options.error;
                    options.error = function(xhr, textStatus, errorThrown) {
                        options.textStatus = textStatus;
                        options.errorThrown = errorThrown;
                        if (error) error.call(options.context, xhr, textStatus, errorThrown)
                    };
                    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
                    model.trigger("request", model, xhr, options);
                    return xhr
                };
                var methodMap = {
                    create: "POST",
                    update: "PUT",
                    patch: "PATCH",
                    delete: "DELETE",
                    read: "GET"
                };
                Backbone.ajax = function() {
                    return Backbone.$.ajax.apply(Backbone.$, arguments)
                };
                var Router = Backbone.Router = function(options) {
                    options || (options = {});
                    if (options.routes) this.routes = options.routes;
                    this._bindRoutes();
                    this.initialize.apply(this, arguments)
                };
                var optionalParam = /\((.*?)\)/g;
                var namedParam = /(\(\?)?:\w+/g;
                var splatParam = /\*\w+/g;
                var escapeRegExp = /[\-{}\[\]+?.,\\\^$|#\s]/g;
                _.extend(Router.prototype, Events, {
                    initialize: function() {},
                    route: function(route, name, callback) {
                        if (!_.isRegExp(route)) route = this._routeToRegExp(route);
                        if (_.isFunction(name)) {
                            callback = name;
                            name = ""
                        }
                        if (!callback) callback = this[name];
                        var router = this;
                        Backbone.history.route(route, function(fragment) {
                            var args = router._extractParameters(route, fragment);
                            if (router.execute(callback, args, name) !== false) {
                                router.trigger.apply(router, ["route:" + name].concat(args));
                                router.trigger("route", name, args);
                                Backbone.history.trigger("route", router, name, args)
                            }
                        });
                        return this
                    },
                    execute: function(callback, args, name) {
                        if (callback) callback.apply(this, args)
                    },
                    navigate: function(fragment, options) {
                        Backbone.history.navigate(fragment, options);
                        return this
                    },
                    _bindRoutes: function() {
                        if (!this.routes) return;
                        this.routes = _.result(this, "routes");
                        var route, routes = _.keys(this.routes);
                        while ((route = routes.pop()) != null) {
                            this.route(route, this.routes[route])
                        }
                    },
                    _routeToRegExp: function(route) {
                        route = route.replace(escapeRegExp, "\\$&").replace(optionalParam, "(?:$1)?").replace(namedParam, function(match, optional) {
                            return optional ? match : "([^/?]+)"
                        }).replace(splatParam, "([^?]*?)");
                        return new RegExp("^" + route + "(?:\\?([\\s\\S]*))?$")
                    },
                    _extractParameters: function(route, fragment) {
                        var params = route.exec(fragment).slice(1);
                        return _.map(params, function(param, i) {
                            if (i === params.length - 1) return param || null;
                            return param ? decodeURIComponent(param) : null
                        })
                    }
                });
                var History = Backbone.History = function() {
                    this.handlers = [];
                    this.checkUrl = _.bind(this.checkUrl, this);
                    if (typeof window !== "undefined") {
                        this.location = window.location;
                        this.history = window.history
                    }
                };
                var routeStripper = /^[#\/]|\s+$/g;
                var rootStripper = /^\/+|\/+$/g;
                var pathStripper = /#.*$/;
                History.started = false;
                _.extend(History.prototype, Events, {
                    interval: 50,
                    atRoot: function() {
                        var path = this.location.pathname.replace(/[^\/]$/, "$&/");
                        return path === this.root && !this.getSearch()
                    },
                    matchRoot: function() {
                        var path = this.decodeFragment(this.location.pathname);
                        var root = path.slice(0, this.root.length - 1) + "/";
                        return root === this.root
                    },
                    decodeFragment: function(fragment) {
                        return decodeURI(fragment.replace(/%25/g, "%2525"))
                    },
                    getSearch: function() {
                        var match = this.location.href.replace(/#.*/, "").match(/\?.+/);
                        return match ? match[0] : ""
                    },
                    getHash: function(window) {
                        var match = (window || this).location.href.match(/#(.*)$/);
                        return match ? match[1] : ""
                    },
                    getPath: function() {
                        var path = this.decodeFragment(this.location.pathname + this.getSearch()).slice(this.root.length - 1);
                        return path.charAt(0) === "/" ? path.slice(1) : path
                    },
                    getFragment: function(fragment) {
                        if (fragment == null) {
                            if (this._usePushState || !this._wantsHashChange) {
                                fragment = this.getPath()
                            } else {
                                fragment = this.getHash()
                            }
                        }
                        return fragment.replace(routeStripper, "")
                    },
                    start: function(options) {
                        if (History.started) throw new Error("Backbone.history has already been started");
                        History.started = true;
                        this.options = _.extend({
                            root: "/"
                        }, this.options, options);
                        this.root = this.options.root;
                        this._wantsHashChange = this.options.hashChange !== false;
                        this._hasHashChange = "onhashchange" in window && (document.documentMode === void 0 || document.documentMode > 7);
                        this._useHashChange = this._wantsHashChange && this._hasHashChange;
                        this._wantsPushState = !!this.options.pushState;
                        this._hasPushState = !!(this.history && this.history.pushState);
                        this._usePushState = this._wantsPushState && this._hasPushState;
                        this.fragment = this.getFragment();
                        this.root = ("/" + this.root + "/").replace(rootStripper, "/");
                        if (this._wantsHashChange && this._wantsPushState) {
                            if (!this._hasPushState && !this.atRoot()) {
                                var root = this.root.slice(0, -1) || "/";
                                this.location.replace(root + "#" + this.getPath());
                                return true
                            } else if (this._hasPushState && this.atRoot()) {
                                this.navigate(this.getHash(), {
                                    replace: true
                                })
                            }
                        }
                        if (!this._hasHashChange && this._wantsHashChange && !this._usePushState) {
                            this.iframe = document.createElement("iframe");
                            this.iframe.src = "javascript:0";
                            this.iframe.style.display = "none";
                            this.iframe.tabIndex = -1;
                            var body = document.body;
                            var iWindow = body.insertBefore(this.iframe, body.firstChild).contentWindow;
                            iWindow.document.open();
                            iWindow.document.close();
                            iWindow.location.hash = "#" + this.fragment
                        }
                        var addEventListener = window.addEventListener || function(eventName, listener) {
                            return attachEvent("on" + eventName, listener)
                        };
                        if (this._usePushState) {
                            addEventListener("popstate", this.checkUrl, false)
                        } else if (this._useHashChange && !this.iframe) {
                            addEventListener("hashchange", this.checkUrl, false)
                        } else if (this._wantsHashChange) {
                            this._checkUrlInterval = setInterval(this.checkUrl, this.interval)
                        }
                        if (!this.options.silent) return this.loadUrl()
                    },
                    stop: function() {
                        var removeEventListener = window.removeEventListener || function(eventName, listener) {
                            return detachEvent("on" + eventName, listener)
                        };
                        if (this._usePushState) {
                            removeEventListener("popstate", this.checkUrl, false)
                        } else if (this._useHashChange && !this.iframe) {
                            removeEventListener("hashchange", this.checkUrl, false)
                        }
                        if (this.iframe) {
                            document.body.removeChild(this.iframe);
                            this.iframe = null
                        }
                        if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);
                        History.started = false
                    },
                    route: function(route, callback) {
                        this.handlers.unshift({
                            route: route,
                            callback: callback
                        })
                    },
                    checkUrl: function(e) {
                        var current = this.getFragment();
                        if (current === this.fragment && this.iframe) {
                            current = this.getHash(this.iframe.contentWindow)
                        }
                        if (current === this.fragment) return false;
                        if (this.iframe) this.navigate(current);
                        this.loadUrl()
                    },
                    loadUrl: function(fragment) {
                        if (!this.matchRoot()) return false;
                        fragment = this.fragment = this.getFragment(fragment);
                        return _.some(this.handlers, function(handler) {
                            if (handler.route.test(fragment)) {
                                handler.callback(fragment);
                                return true
                            }
                        })
                    },
                    navigate: function(fragment, options) {
                        if (!History.started) return false;
                        if (!options || options === true) options = {
                            trigger: !!options
                        };
                        fragment = this.getFragment(fragment || "");
                        var root = this.root;
                        if (fragment === "" || fragment.charAt(0) === "?") {
                            root = root.slice(0, -1) || "/"
                        }
                        var url = root + fragment;
                        fragment = this.decodeFragment(fragment.replace(pathStripper, ""));
                        if (this.fragment === fragment) return;
                        this.fragment = fragment;
                        if (this._usePushState) {
                            this.history[options.replace ? "replaceState" : "pushState"]({}, document.title, url)
                        } else if (this._wantsHashChange) {
                            this._updateHash(this.location, fragment, options.replace);
                            if (this.iframe && fragment !== this.getHash(this.iframe.contentWindow)) {
                                var iWindow = this.iframe.contentWindow;
                                if (!options.replace) {
                                    iWindow.document.open();
                                    iWindow.document.close()
                                }
                                this._updateHash(iWindow.location, fragment, options.replace)
                            }
                        } else {
                            return this.location.assign(url)
                        }
                        if (options.trigger) return this.loadUrl(fragment)
                    },
                    _updateHash: function(location, fragment, replace) {
                        if (replace) {
                            var href = location.href.replace(/(javascript:|#).*$/, "");
                            location.replace(href + "#" + fragment)
                        } else {
                            location.hash = "#" + fragment
                        }
                    }
                });
                Backbone.history = new History;
                var extend = function(protoProps, staticProps) {
                    var parent = this;
                    var child;
                    if (protoProps && _.has(protoProps, "constructor")) {
                        child = protoProps.constructor
                    } else {
                        child = function() {
                            return parent.apply(this, arguments)
                        }
                    }
                    _.extend(child, parent, staticProps);
                    var Surrogate = function() {
                        this.constructor = child
                    };
                    Surrogate.prototype = parent.prototype;
                    child.prototype = new Surrogate;
                    if (protoProps) _.extend(child.prototype, protoProps);
                    child.__super__ = parent.prototype;
                    return child
                };
                Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;
                var urlError = function() {
                    throw new Error('A "url" property or function must be specified')
                };
                var wrapError = function(model, options) {
                    var error = options.error;
                    options.error = function(resp) {
                        if (error) error.call(options.context, model, resp, options);
                        model.trigger("error", model, resp, options)
                    }
                };
                return Backbone
            })
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {
        jquery: 36,
        underscore: 26
    }],
    26: [function(require, module, exports) {
        arguments[4][6][0].apply(exports, arguments)
    }, {
        dup: 6
    }],
    27: [function(require, module, exports) {
        (function(window, document, exportName, undefined) {
            "use strict";
            var VENDOR_PREFIXES = ["", "webkit", "moz", "MS", "ms", "o"];
            var TEST_ELEMENT = document.createElement("div");
            var TYPE_FUNCTION = "function";
            var round = Math.round;
            var abs = Math.abs;
            var now = Date.now;

            function setTimeoutContext(fn, timeout, context) {
                return setTimeout(bindFn(fn, context), timeout)
            }

            function invokeArrayArg(arg, fn, context) {
                if (Array.isArray(arg)) {
                    each(arg, context[fn], context);
                    return true
                }
                return false
            }

            function each(obj, iterator, context) {
                var i;
                if (!obj) {
                    return
                }
                if (obj.forEach) {
                    obj.forEach(iterator, context)
                } else if (obj.length !== undefined) {
                    i = 0;
                    while (i < obj.length) {
                        iterator.call(context, obj[i], i, obj);
                        i++
                    }
                } else {
                    for (i in obj) {
                        obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj)
                    }
                }
            }

            function extend(dest, src, merge) {
                var keys = Object.keys(src);
                var i = 0;
                while (i < keys.length) {
                    if (!merge || merge && dest[keys[i]] === undefined) {
                        dest[keys[i]] = src[keys[i]]
                    }
                    i++
                }
                return dest
            }

            function merge(dest, src) {
                return extend(dest, src, true)
            }

            function inherit(child, base, properties) {
                var baseP = base.prototype,
                    childP;
                childP = child.prototype = Object.create(baseP);
                childP.constructor = child;
                childP._super = baseP;
                if (properties) {
                    extend(childP, properties)
                }
            }

            function bindFn(fn, context) {
                return function boundFn() {
                    return fn.apply(context, arguments)
                }
            }

            function boolOrFn(val, args) {
                if (typeof val == TYPE_FUNCTION) {
                    return val.apply(args ? args[0] || undefined : undefined, args)
                }
                return val
            }

            function ifUndefined(val1, val2) {
                return val1 === undefined ? val2 : val1
            }

            function addEventListeners(target, types, handler) {
                each(splitStr(types), function(type) {
                    target.addEventListener(type, handler, false)
                })
            }

            function removeEventListeners(target, types, handler) {
                each(splitStr(types), function(type) {
                    target.removeEventListener(type, handler, false)
                })
            }

            function hasParent(node, parent) {
                while (node) {
                    if (node == parent) {
                        return true
                    }
                    node = node.parentNode
                }
                return false
            }

            function inStr(str, find) {
                return str.indexOf(find) > -1
            }

            function splitStr(str) {
                return str.trim().split(/\s+/g)
            }

            function inArray(src, find, findByKey) {
                if (src.indexOf && !findByKey) {
                    return src.indexOf(find)
                } else {
                    var i = 0;
                    while (i < src.length) {
                        if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) {
                            return i
                        }
                        i++
                    }
                    return -1
                }
            }

            function toArray(obj) {
                return Array.prototype.slice.call(obj, 0)
            }

            function uniqueArray(src, key, sort) {
                var results = [];
                var values = [];
                var i = 0;
                while (i < src.length) {
                    var val = key ? src[i][key] : src[i];
                    if (inArray(values, val) < 0) {
                        results.push(src[i])
                    }
                    values[i] = val;
                    i++
                }
                if (sort) {
                    if (!key) {
                        results = results.sort()
                    } else {
                        results = results.sort(function sortUniqueArray(a, b) {
                            return a[key] > b[key]
                        })
                    }
                }
                return results
            }

            function prefixed(obj, property) {
                var prefix, prop;
                var camelProp = property[0].toUpperCase() + property.slice(1);
                var i = 0;
                while (i < VENDOR_PREFIXES.length) {
                    prefix = VENDOR_PREFIXES[i];
                    prop = prefix ? prefix + camelProp : property;
                    if (prop in obj) {
                        return prop
                    }
                    i++
                }
                return undefined
            }
            var _uniqueId = 1;

            function uniqueId() {
                return _uniqueId++
            }

            function getWindowForElement(element) {
                var doc = element.ownerDocument;
                return doc.defaultView || doc.parentWindow
            }
            var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;
            var SUPPORT_TOUCH = "ontouchstart" in window;
            var SUPPORT_POINTER_EVENTS = prefixed(window, "PointerEvent") !== undefined;
            var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);
            var INPUT_TYPE_TOUCH = "touch";
            var INPUT_TYPE_PEN = "pen";
            var INPUT_TYPE_MOUSE = "mouse";
            var INPUT_TYPE_KINECT = "kinect";
            var COMPUTE_INTERVAL = 25;
            var INPUT_START = 1;
            var INPUT_MOVE = 2;
            var INPUT_END = 4;
            var INPUT_CANCEL = 8;
            var DIRECTION_NONE = 1;
            var DIRECTION_LEFT = 2;
            var DIRECTION_RIGHT = 4;
            var DIRECTION_UP = 8;
            var DIRECTION_DOWN = 16;
            var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
            var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
            var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;
            var PROPS_XY = ["x", "y"];
            var PROPS_CLIENT_XY = ["clientX", "clientY"];

            function Input(manager, callback) {
                var self = this;
                this.manager = manager;
                this.callback = callback;
                this.element = manager.element;
                this.target = manager.options.inputTarget;
                this.domHandler = function(ev) {
                    if (boolOrFn(manager.options.enable, [manager])) {
                        self.handler(ev)
                    }
                };
                this.init()
            }
            Input.prototype = {
                handler: function() {},
                init: function() {
                    this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
                    this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
                    this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler)
                },
                destroy: function() {
                    this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
                    this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
                    this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler)
                }
            };

            function createInputInstance(manager) {
                var Type;
                var inputClass = manager.options.inputClass;
                if (inputClass) {
                    Type = inputClass
                } else if (SUPPORT_POINTER_EVENTS) {
                    Type = PointerEventInput
                } else if (SUPPORT_ONLY_TOUCH) {
                    Type = TouchInput
                } else if (!SUPPORT_TOUCH) {
                    Type = MouseInput
                } else {
                    Type = TouchMouseInput
                }
                return new Type(manager, inputHandler)
            }

            function inputHandler(manager, eventType, input) {
                var pointersLen = input.pointers.length;
                var changedPointersLen = input.changedPointers.length;
                var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;
                var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;
                input.isFirst = !!isFirst;
                input.isFinal = !!isFinal;
                if (isFirst) {
                    manager.session = {}
                }
                input.eventType = eventType;
                computeInputData(manager, input);
                manager.emit("hammer.input", input);
                manager.recognize(input);
                manager.session.prevInput = input
            }

            function computeInputData(manager, input) {
                var session = manager.session;
                var pointers = input.pointers;
                var pointersLength = pointers.length;
                if (!session.firstInput) {
                    session.firstInput = simpleCloneInputData(input)
                }
                if (pointersLength > 1 && !session.firstMultiple) {
                    session.firstMultiple = simpleCloneInputData(input)
                } else if (pointersLength === 1) {
                    session.firstMultiple = false
                }
                var firstInput = session.firstInput;
                var firstMultiple = session.firstMultiple;
                var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
                var center = input.center = getCenter(pointers);
                input.timeStamp = now();
                input.deltaTime = input.timeStamp - firstInput.timeStamp;
                input.angle = getAngle(offsetCenter, center);
                input.distance = getDistance(offsetCenter, center);
                computeDeltaXY(session, input);
                input.offsetDirection = getDirection(input.deltaX, input.deltaY);
                input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
                input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;
                computeIntervalInputData(session, input);
                var target = manager.element;
                if (hasParent(input.srcEvent.target, target)) {
                    target = input.srcEvent.target
                }
                input.target = target
            }

            function computeDeltaXY(session, input) {
                var center = input.center;
                var offset = session.offsetDelta || {};
                var prevDelta = session.prevDelta || {};
                var prevInput = session.prevInput || {};
                if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
                    prevDelta = session.prevDelta = {
                        x: prevInput.deltaX || 0,
                        y: prevInput.deltaY || 0
                    };
                    offset = session.offsetDelta = {
                        x: center.x,
                        y: center.y
                    }
                }
                input.deltaX = prevDelta.x + (center.x - offset.x);
                input.deltaY = prevDelta.y + (center.y - offset.y)
            }

            function computeIntervalInputData(session, input) {
                var last = session.lastInterval || input,
                    deltaTime = input.timeStamp - last.timeStamp,
                    velocity, velocityX, velocityY, direction;
                if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
                    var deltaX = last.deltaX - input.deltaX;
                    var deltaY = last.deltaY - input.deltaY;
                    var v = getVelocity(deltaTime, deltaX, deltaY);
                    velocityX = v.x;
                    velocityY = v.y;
                    velocity = abs(v.x) > abs(v.y) ? v.x : v.y;
                    direction = getDirection(deltaX, deltaY);
                    session.lastInterval = input
                } else {
                    velocity = last.velocity;
                    velocityX = last.velocityX;
                    velocityY = last.velocityY;
                    direction = last.direction
                }
                input.velocity = velocity;
                input.velocityX = velocityX;
                input.velocityY = velocityY;
                input.direction = direction
            }

            function simpleCloneInputData(input) {
                var pointers = [];
                var i = 0;
                while (i < input.pointers.length) {
                    pointers[i] = {
                        clientX: round(input.pointers[i].clientX),
                        clientY: round(input.pointers[i].clientY)
                    };
                    i++
                }
                return {
                    timeStamp: now(),
                    pointers: pointers,
                    center: getCenter(pointers),
                    deltaX: input.deltaX,
                    deltaY: input.deltaY
                }
            }

            function getCenter(pointers) {
                var pointersLength = pointers.length;
                if (pointersLength === 1) {
                    return {
                        x: round(pointers[0].clientX),
                        y: round(pointers[0].clientY)
                    }
                }
                var x = 0,
                    y = 0,
                    i = 0;
                while (i < pointersLength) {
                    x += pointers[i].clientX;
                    y += pointers[i].clientY;
                    i++
                }
                return {
                    x: round(x / pointersLength),
                    y: round(y / pointersLength)
                }
            }

            function getVelocity(deltaTime, x, y) {
                return {
                    x: x / deltaTime || 0,
                    y: y / deltaTime || 0
                }
            }

            function getDirection(x, y) {
                if (x === y) {
                    return DIRECTION_NONE
                }
                if (abs(x) >= abs(y)) {
                    return x > 0 ? DIRECTION_LEFT : DIRECTION_RIGHT
                }
                return y > 0 ? DIRECTION_UP : DIRECTION_DOWN
            }

            function getDistance(p1, p2, props) {
                if (!props) {
                    props = PROPS_XY
                }
                var x = p2[props[0]] - p1[props[0]],
                    y = p2[props[1]] - p1[props[1]];
                return Math.sqrt(x * x + y * y)
            }

            function getAngle(p1, p2, props) {
                if (!props) {
                    props = PROPS_XY
                }
                var x = p2[props[0]] - p1[props[0]],
                    y = p2[props[1]] - p1[props[1]];
                return Math.atan2(y, x) * 180 / Math.PI
            }

            function getRotation(start, end) {
                return getAngle(end[1], end[0], PROPS_CLIENT_XY) - getAngle(start[1], start[0], PROPS_CLIENT_XY)
            }

            function getScale(start, end) {
                return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY)
            }
            var MOUSE_INPUT_MAP = {
                mousedown: INPUT_START,
                mousemove: INPUT_MOVE,
                mouseup: INPUT_END
            };
            var MOUSE_ELEMENT_EVENTS = "mousedown";
            var MOUSE_WINDOW_EVENTS = "mousemove mouseup";

            function MouseInput() {
                this.evEl = MOUSE_ELEMENT_EVENTS;
                this.evWin = MOUSE_WINDOW_EVENTS;
                this.allow = true;
                this.pressed = false;
                Input.apply(this, arguments)
            }
            inherit(MouseInput, Input, {
                handler: function MEhandler(ev) {
                    var eventType = MOUSE_INPUT_MAP[ev.type];
                    if (eventType & INPUT_START && ev.button === 0) {
                        this.pressed = true
                    }
                    if (eventType & INPUT_MOVE && ev.which !== 1) {
                        eventType = INPUT_END
                    }
                    if (!this.pressed || !this.allow) {
                        return
                    }
                    if (eventType & INPUT_END) {
                        this.pressed = false
                    }
                    this.callback(this.manager, eventType, {
                        pointers: [ev],
                        changedPointers: [ev],
                        pointerType: INPUT_TYPE_MOUSE,
                        srcEvent: ev
                    })
                }
            });
            var POINTER_INPUT_MAP = {
                pointerdown: INPUT_START,
                pointermove: INPUT_MOVE,
                pointerup: INPUT_END,
                pointercancel: INPUT_CANCEL,
                pointerout: INPUT_CANCEL
            };
            var IE10_POINTER_TYPE_ENUM = {
                2: INPUT_TYPE_TOUCH,
                3: INPUT_TYPE_PEN,
                4: INPUT_TYPE_MOUSE,
                5: INPUT_TYPE_KINECT
            };
            var POINTER_ELEMENT_EVENTS = "pointerdown";
            var POINTER_WINDOW_EVENTS = "pointermove pointerup pointercancel";
            if (window.MSPointerEvent) {
                POINTER_ELEMENT_EVENTS = "MSPointerDown";
                POINTER_WINDOW_EVENTS = "MSPointerMove MSPointerUp MSPointerCancel"
            }

            function PointerEventInput() {
                this.evEl = POINTER_ELEMENT_EVENTS;
                this.evWin = POINTER_WINDOW_EVENTS;
                Input.apply(this, arguments);
                this.store = this.manager.session.pointerEvents = []
            }
            inherit(PointerEventInput, Input, {
                handler: function PEhandler(ev) {
                    var store = this.store;
                    var removePointer = false;
                    var eventTypeNormalized = ev.type.toLowerCase().replace("ms", "");
                    var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
                    var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;
                    var isTouch = pointerType == INPUT_TYPE_TOUCH;
                    var storeIndex = inArray(store, ev.pointerId, "pointerId");
                    if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
                        if (storeIndex < 0) {
                            store.push(ev);
                            storeIndex = store.length - 1
                        }
                    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
                        removePointer = true
                    }
                    if (storeIndex < 0) {
                        return
                    }
                    store[storeIndex] = ev;
                    this.callback(this.manager, eventType, {
                        pointers: store,
                        changedPointers: [ev],
                        pointerType: pointerType,
                        srcEvent: ev
                    });
                    if (removePointer) {
                        store.splice(storeIndex, 1)
                    }
                }
            });
            var SINGLE_TOUCH_INPUT_MAP = {
                touchstart: INPUT_START,
                touchmove: INPUT_MOVE,
                touchend: INPUT_END,
                touchcancel: INPUT_CANCEL
            };
            var SINGLE_TOUCH_TARGET_EVENTS = "touchstart";
            var SINGLE_TOUCH_WINDOW_EVENTS = "touchstart touchmove touchend touchcancel";

            function SingleTouchInput() {
                this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
                this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
                this.started = false;
                Input.apply(this, arguments)
            }
            inherit(SingleTouchInput, Input, {
                handler: function TEhandler(ev) {
                    var type = SINGLE_TOUCH_INPUT_MAP[ev.type];
                    if (type === INPUT_START) {
                        this.started = true
                    }
                    if (!this.started) {
                        return
                    }
                    var touches = normalizeSingleTouches.call(this, ev, type);
                    if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
                        this.started = false
                    }
                    this.callback(this.manager, type, {
                        pointers: touches[0],
                        changedPointers: touches[1],
                        pointerType: INPUT_TYPE_TOUCH,
                        srcEvent: ev
                    })
                }
            });

            function normalizeSingleTouches(ev, type) {
                var all = toArray(ev.touches);
                var changed = toArray(ev.changedTouches);
                if (type & (INPUT_END | INPUT_CANCEL)) {
                    all = uniqueArray(all.concat(changed), "identifier", true)
                }
                return [all, changed]
            }
            var TOUCH_INPUT_MAP = {
                touchstart: INPUT_START,
                touchmove: INPUT_MOVE,
                touchend: INPUT_END,
                touchcancel: INPUT_CANCEL
            };
            var TOUCH_TARGET_EVENTS = "touchstart touchmove touchend touchcancel";

            function TouchInput() {
                this.evTarget = TOUCH_TARGET_EVENTS;
                this.targetIds = {};
                Input.apply(this, arguments)
            }
            inherit(TouchInput, Input, {
                handler: function MTEhandler(ev) {
                    var type = TOUCH_INPUT_MAP[ev.type];
                    var touches = getTouches.call(this, ev, type);
                    if (!touches) {
                        return
                    }
                    this.callback(this.manager, type, {
                        pointers: touches[0],
                        changedPointers: touches[1],
                        pointerType: INPUT_TYPE_TOUCH,
                        srcEvent: ev
                    })
                }
            });

            function getTouches(ev, type) {
                var allTouches = toArray(ev.touches);
                var targetIds = this.targetIds;
                if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
                    targetIds[allTouches[0].identifier] = true;
                    return [allTouches, allTouches]
                }
                var i, targetTouches, changedTouches = toArray(ev.changedTouches),
                    changedTargetTouches = [],
                    target = this.target;
                targetTouches = allTouches.filter(function(touch) {
                    return hasParent(touch.target, target)
                });
                if (type === INPUT_START) {
                    i = 0;
                    while (i < targetTouches.length) {
                        targetIds[targetTouches[i].identifier] = true;
                        i++
                    }
                }
                i = 0;
                while (i < changedTouches.length) {
                    if (targetIds[changedTouches[i].identifier]) {
                        changedTargetTouches.push(changedTouches[i])
                    }
                    if (type & (INPUT_END | INPUT_CANCEL)) {
                        delete targetIds[changedTouches[i].identifier]
                    }
                    i++
                }
                if (!changedTargetTouches.length) {
                    return
                }
                return [uniqueArray(targetTouches.concat(changedTargetTouches), "identifier", true), changedTargetTouches]
            }

            function TouchMouseInput() {
                Input.apply(this, arguments);
                var handler = bindFn(this.handler, this);
                this.touch = new TouchInput(this.manager, handler);
                this.mouse = new MouseInput(this.manager, handler)
            }
            inherit(TouchMouseInput, Input, {
                handler: function TMEhandler(manager, inputEvent, inputData) {
                    var isTouch = inputData.pointerType == INPUT_TYPE_TOUCH,
                        isMouse = inputData.pointerType == INPUT_TYPE_MOUSE;
                    if (isTouch) {
                        this.mouse.allow = false
                    } else if (isMouse && !this.mouse.allow) {
                        return
                    }
                    if (inputEvent & (INPUT_END | INPUT_CANCEL)) {
                        this.mouse.allow = true
                    }
                    this.callback(manager, inputEvent, inputData)
                },
                destroy: function destroy() {
                    this.touch.destroy();
                    this.mouse.destroy()
                }
            });
            var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, "touchAction");
            var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;
            var TOUCH_ACTION_COMPUTE = "compute";
            var TOUCH_ACTION_AUTO = "auto";
            var TOUCH_ACTION_MANIPULATION = "manipulation";
            var TOUCH_ACTION_NONE = "none";
            var TOUCH_ACTION_PAN_X = "pan-x";
            var TOUCH_ACTION_PAN_Y = "pan-y";

            function TouchAction(manager, value) {
                this.manager = manager;
                this.set(value)
            }
            TouchAction.prototype = {
                set: function(value) {
                    if (value == TOUCH_ACTION_COMPUTE) {
                        value = this.compute()
                    }
                    if (NATIVE_TOUCH_ACTION) {
                        this.manager.element.style[PREFIXED_TOUCH_ACTION] = value
                    }
                    this.actions = value.toLowerCase().trim()
                },
                update: function() {
                    this.set(this.manager.options.touchAction)
                },
                compute: function() {
                    var actions = [];
                    each(this.manager.recognizers, function(recognizer) {
                        if (boolOrFn(recognizer.options.enable, [recognizer])) {
                            actions = actions.concat(recognizer.getTouchAction())
                        }
                    });
                    return cleanTouchActions(actions.join(" "))
                },
                preventDefaults: function(input) {
                    if (NATIVE_TOUCH_ACTION) {
                        return
                    }
                    var srcEvent = input.srcEvent;
                    var direction = input.offsetDirection;
                    if (this.manager.session.prevented) {
                        srcEvent.preventDefault();
                        return
                    }
                    var actions = this.actions;
                    var hasNone = inStr(actions, TOUCH_ACTION_NONE);
                    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);
                    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
                    if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) {
                        return this.preventSrc(srcEvent)
                    }
                },
                preventSrc: function(srcEvent) {
                    this.manager.session.prevented = true;
                    srcEvent.preventDefault()
                }
            };

            function cleanTouchActions(actions) {
                if (inStr(actions, TOUCH_ACTION_NONE)) {
                    return TOUCH_ACTION_NONE
                }
                var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
                var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);
                if (hasPanX && hasPanY) {
                    return TOUCH_ACTION_PAN_X + " " + TOUCH_ACTION_PAN_Y
                }
                if (hasPanX || hasPanY) {
                    return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y
                }
                if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
                    return TOUCH_ACTION_MANIPULATION
                }
                return TOUCH_ACTION_AUTO
            }
            var STATE_POSSIBLE = 1;
            var STATE_BEGAN = 2;
            var STATE_CHANGED = 4;
            var STATE_ENDED = 8;
            var STATE_RECOGNIZED = STATE_ENDED;
            var STATE_CANCELLED = 16;
            var STATE_FAILED = 32;

            function Recognizer(options) {
                this.id = uniqueId();
                this.manager = null;
                this.options = merge(options || {}, this.defaults);
                this.options.enable = ifUndefined(this.options.enable, true);
                this.state = STATE_POSSIBLE;
                this.simultaneous = {};
                this.requireFail = []
            }
            Recognizer.prototype = {
                defaults: {},
                set: function(options) {
                    extend(this.options, options);
                    this.manager && this.manager.touchAction.update();
                    return this
                },
                recognizeWith: function(otherRecognizer) {
                    if (invokeArrayArg(otherRecognizer, "recognizeWith", this)) {
                        return this
                    }
                    var simultaneous = this.simultaneous;
                    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
                    if (!simultaneous[otherRecognizer.id]) {
                        simultaneous[otherRecognizer.id] = otherRecognizer;
                        otherRecognizer.recognizeWith(this)
                    }
                    return this
                },
                dropRecognizeWith: function(otherRecognizer) {
                    if (invokeArrayArg(otherRecognizer, "dropRecognizeWith", this)) {
                        return this
                    }
                    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
                    delete this.simultaneous[otherRecognizer.id];
                    return this
                },
                requireFailure: function(otherRecognizer) {
                    if (invokeArrayArg(otherRecognizer, "requireFailure", this)) {
                        return this
                    }
                    var requireFail = this.requireFail;
                    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
                    if (inArray(requireFail, otherRecognizer) === -1) {
                        requireFail.push(otherRecognizer);
                        otherRecognizer.requireFailure(this)
                    }
                    return this
                },
                dropRequireFailure: function(otherRecognizer) {
                    if (invokeArrayArg(otherRecognizer, "dropRequireFailure", this)) {
                        return this
                    }
                    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
                    var index = inArray(this.requireFail, otherRecognizer);
                    if (index > -1) {
                        this.requireFail.splice(index, 1)
                    }
                    return this
                },
                hasRequireFailures: function() {
                    return this.requireFail.length > 0
                },
                canRecognizeWith: function(otherRecognizer) {
                    return !!this.simultaneous[otherRecognizer.id]
                },
                emit: function(input) {
                    var self = this;
                    var state = this.state;

                    function emit(withState) {
                        self.manager.emit(self.options.event + (withState ? stateStr(state) : ""), input)
                    }
                    if (state < STATE_ENDED) {
                        emit(true)
                    }
                    emit();
                    if (state >= STATE_ENDED) {
                        emit(true)
                    }
                },
                tryEmit: function(input) {
                    if (this.canEmit()) {
                        return this.emit(input)
                    }
                    this.state = STATE_FAILED
                },
                canEmit: function() {
                    var i = 0;
                    while (i < this.requireFail.length) {
                        if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
                            return false
                        }
                        i++
                    }
                    return true
                },
                recognize: function(inputData) {
                    var inputDataClone = extend({}, inputData);
                    if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
                        this.reset();
                        this.state = STATE_FAILED;
                        return
                    }
                    if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
                        this.state = STATE_POSSIBLE
                    }
                    this.state = this.process(inputDataClone);
                    if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
                        this.tryEmit(inputDataClone)
                    }
                },
                process: function(inputData) {},
                getTouchAction: function() {},
                reset: function() {}
            };

            function stateStr(state) {
                if (state & STATE_CANCELLED) {
                    return "cancel"
                } else if (state & STATE_ENDED) {
                    return "end"
                } else if (state & STATE_CHANGED) {
                    return "move"
                } else if (state & STATE_BEGAN) {
                    return "start"
                }
                return ""
            }

            function directionStr(direction) {
                if (direction == DIRECTION_DOWN) {
                    return "down"
                } else if (direction == DIRECTION_UP) {
                    return "up"
                } else if (direction == DIRECTION_LEFT) {
                    return "left"
                } else if (direction == DIRECTION_RIGHT) {
                    return "right"
                }
                return ""
            }

            function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
                var manager = recognizer.manager;
                if (manager) {
                    return manager.get(otherRecognizer)
                }
                return otherRecognizer
            }

            function AttrRecognizer() {
                Recognizer.apply(this, arguments)
            }
            inherit(AttrRecognizer, Recognizer, {
                defaults: {
                    pointers: 1
                },
                attrTest: function(input) {
                    var optionPointers = this.options.pointers;
                    return optionPointers === 0 || input.pointers.length === optionPointers
                },
                process: function(input) {
                    var state = this.state;
                    var eventType = input.eventType;
                    var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
                    var isValid = this.attrTest(input);
                    if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
                        return state | STATE_CANCELLED
                    } else if (isRecognized || isValid) {
                        if (eventType & INPUT_END) {
                            return state | STATE_ENDED
                        } else if (!(state & STATE_BEGAN)) {
                            return STATE_BEGAN
                        }
                        return state | STATE_CHANGED
                    }
                    return STATE_FAILED
                }
            });

            function PanRecognizer() {
                AttrRecognizer.apply(this, arguments);
                this.pX = null;
                this.pY = null
            }
            inherit(PanRecognizer, AttrRecognizer, {
                defaults: {
                    event: "pan",
                    threshold: 10,
                    pointers: 1,
                    direction: DIRECTION_ALL
                },
                getTouchAction: function() {
                    var direction = this.options.direction;
                    var actions = [];
                    if (direction & DIRECTION_HORIZONTAL) {
                        actions.push(TOUCH_ACTION_PAN_Y)
                    }
                    if (direction & DIRECTION_VERTICAL) {
                        actions.push(TOUCH_ACTION_PAN_X)
                    }
                    return actions
                },
                directionTest: function(input) {
                    var options = this.options;
                    var hasMoved = true;
                    var distance = input.distance;
                    var direction = input.direction;
                    var x = input.deltaX;
                    var y = input.deltaY;
                    if (!(direction & options.direction)) {
                        if (options.direction & DIRECTION_HORIZONTAL) {
                            direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
                            hasMoved = x != this.pX;
                            distance = Math.abs(input.deltaX)
                        } else {
                            direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
                            hasMoved = y != this.pY;
                            distance = Math.abs(input.deltaY)
                        }
                    }
                    input.direction = direction;
                    return hasMoved && distance > options.threshold && direction & options.direction
                },
                attrTest: function(input) {
                    return AttrRecognizer.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input))
                },
                emit: function(input) {
                    this.pX = input.deltaX;
                    this.pY = input.deltaY;
                    var direction = directionStr(input.direction);
                    if (direction) {
                        this.manager.emit(this.options.event + direction, input)
                    }
                    this._super.emit.call(this, input)
                }
            });

            function PinchRecognizer() {
                AttrRecognizer.apply(this, arguments)
            }
            inherit(PinchRecognizer, AttrRecognizer, {
                defaults: {
                    event: "pinch",
                    threshold: 0,
                    pointers: 2
                },
                getTouchAction: function() {
                    return [TOUCH_ACTION_NONE]
                },
                attrTest: function(input) {
                    return this._super.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN)
                },
                emit: function(input) {
                    this._super.emit.call(this, input);
                    if (input.scale !== 1) {
                        var inOut = input.scale < 1 ? "in" : "out";
                        this.manager.emit(this.options.event + inOut, input)
                    }
                }
            });

            function PressRecognizer() {
                Recognizer.apply(this, arguments);
                this._timer = null;
                this._input = null
            }
            inherit(PressRecognizer, Recognizer, {
                defaults: {
                    event: "press",
                    pointers: 1,
                    time: 500,
                    threshold: 5
                },
                getTouchAction: function() {
                    return [TOUCH_ACTION_AUTO]
                },
                process: function(input) {
                    var options = this.options;
                    var validPointers = input.pointers.length === options.pointers;
                    var validMovement = input.distance < options.threshold;
                    var validTime = input.deltaTime > options.time;
                    this._input = input;
                    if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {
                        this.reset()
                    } else if (input.eventType & INPUT_START) {
                        this.reset();
                        this._timer = setTimeoutContext(function() {
                            this.state = STATE_RECOGNIZED;
                            this.tryEmit()
                        }, options.time, this)
                    } else if (input.eventType & INPUT_END) {
                        return STATE_RECOGNIZED
                    }
                    return STATE_FAILED
                },
                reset: function() {
                    clearTimeout(this._timer)
                },
                emit: function(input) {
                    if (this.state !== STATE_RECOGNIZED) {
                        return
                    }
                    if (input && input.eventType & INPUT_END) {
                        this.manager.emit(this.options.event + "up", input)
                    } else {
                        this._input.timeStamp = now();
                        this.manager.emit(this.options.event, this._input)
                    }
                }
            });

            function RotateRecognizer() {
                AttrRecognizer.apply(this, arguments)
            }
            inherit(RotateRecognizer, AttrRecognizer, {
                defaults: {
                    event: "rotate",
                    threshold: 0,
                    pointers: 2
                },
                getTouchAction: function() {
                    return [TOUCH_ACTION_NONE]
                },
                attrTest: function(input) {
                    return this._super.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN)
                }
            });

            function SwipeRecognizer() {
                AttrRecognizer.apply(this, arguments)
            }
            inherit(SwipeRecognizer, AttrRecognizer, {
                defaults: {
                    event: "swipe",
                    threshold: 10,
                    velocity: .65,
                    direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
                    pointers: 1
                },
                getTouchAction: function() {
                    return PanRecognizer.prototype.getTouchAction.call(this)
                },
                attrTest: function(input) {
                    var direction = this.options.direction;
                    var velocity;
                    if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
                        velocity = input.velocity
                    } else if (direction & DIRECTION_HORIZONTAL) {
                        velocity = input.velocityX
                    } else if (direction & DIRECTION_VERTICAL) {
                        velocity = input.velocityY
                    }
                    return this._super.attrTest.call(this, input) && direction & input.direction && input.distance > this.options.threshold && abs(velocity) > this.options.velocity && input.eventType & INPUT_END
                },
                emit: function(input) {
                    var direction = directionStr(input.direction);
                    if (direction) {
                        this.manager.emit(this.options.event + direction, input)
                    }
                    this.manager.emit(this.options.event, input)
                }
            });

            function TapRecognizer() {
                Recognizer.apply(this, arguments);
                this.pTime = false;
                this.pCenter = false;
                this._timer = null;
                this._input = null;
                this.count = 0
            }
            inherit(TapRecognizer, Recognizer, {
                defaults: {
                    event: "tap",
                    pointers: 1,
                    taps: 1,
                    interval: 300,
                    time: 250,
                    threshold: 2,
                    posThreshold: 10
                },
                getTouchAction: function() {
                    return [TOUCH_ACTION_MANIPULATION]
                },
                process: function(input) {
                    var options = this.options;
                    var validPointers = input.pointers.length === options.pointers;
                    var validMovement = input.distance < options.threshold;
                    var validTouchTime = input.deltaTime < options.time;
                    this.reset();
                    if (input.eventType & INPUT_START && this.count === 0) {
                        return this.failTimeout()
                    }
                    if (validMovement && validTouchTime && validPointers) {
                        if (input.eventType != INPUT_END) {
                            return this.failTimeout()
                        }
                        var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;
                        var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;
                        this.pTime = input.timeStamp;
                        this.pCenter = input.center;
                        if (!validMultiTap || !validInterval) {
                            this.count = 1
                        } else {
                            this.count += 1
                        }
                        this._input = input;
                        var tapCount = this.count % options.taps;
                        if (tapCount === 0) {
                            if (!this.hasRequireFailures()) {
                                return STATE_RECOGNIZED
                            } else {
                                this._timer = setTimeoutContext(function() {
                                    this.state = STATE_RECOGNIZED;
                                    this.tryEmit()
                                }, options.interval, this);
                                return STATE_BEGAN
                            }
                        }
                    }
                    return STATE_FAILED
                },
                failTimeout: function() {
                    this._timer = setTimeoutContext(function() {
                        this.state = STATE_FAILED
                    }, this.options.interval, this);
                    return STATE_FAILED
                },
                reset: function() {
                    clearTimeout(this._timer)
                },
                emit: function() {
                    if (this.state == STATE_RECOGNIZED) {
                        this._input.tapCount = this.count;
                        this.manager.emit(this.options.event, this._input)
                    }
                }
            });

            function Hammer(element, options) {
                options = options || {};
                options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
                return new Manager(element, options)
            }
            Hammer.VERSION = "2.0.4";
            Hammer.defaults = {
                domEvents: false,
                touchAction: TOUCH_ACTION_COMPUTE,
                enable: true,
                inputTarget: null,
                inputClass: null,
                preset: [
                    [RotateRecognizer, {
                        enable: false
                    }],
                    [PinchRecognizer, {
                            enable: false
                        },
                        ["rotate"]
                    ],
                    [SwipeRecognizer, {
                        direction: DIRECTION_HORIZONTAL
                    }],
                    [PanRecognizer, {
                            direction: DIRECTION_HORIZONTAL
                        },
                        ["swipe"]
                    ],
                    [TapRecognizer],
                    [TapRecognizer, {
                            event: "doubletap",
                            taps: 2
                        },
                        ["tap"]
                    ],
                    [PressRecognizer]
                ],
                cssProps: {
                    userSelect: "none",
                    touchSelect: "none",
                    touchCallout: "none",
                    contentZooming: "none",
                    userDrag: "none",
                    tapHighlightColor: "rgba(0,0,0,0)"
                }
            };
            var STOP = 1;
            var FORCED_STOP = 2;

            function Manager(element, options) {
                options = options || {};
                this.options = merge(options, Hammer.defaults);
                this.options.inputTarget = this.options.inputTarget || element;
                this.handlers = {};
                this.session = {};
                this.recognizers = [];
                this.element = element;
                this.input = createInputInstance(this);
                this.touchAction = new TouchAction(this, this.options.touchAction);
                toggleCssProps(this, true);
                each(options.recognizers, function(item) {
                    var recognizer = this.add(new item[0](item[1]));
                    item[2] && recognizer.recognizeWith(item[2]);
                    item[3] && recognizer.requireFailure(item[3])
                }, this)
            }
            Manager.prototype = {
                set: function(options) {
                    extend(this.options, options);
                    if (options.touchAction) {
                        this.touchAction.update()
                    }
                    if (options.inputTarget) {
                        this.input.destroy();
                        this.input.target = options.inputTarget;
                        this.input.init()
                    }
                    return this
                },
                stop: function(force) {
                    this.session.stopped = force ? FORCED_STOP : STOP
                },
                recognize: function(inputData) {
                    var session = this.session;
                    if (session.stopped) {
                        return
                    }
                    this.touchAction.preventDefaults(inputData);
                    var recognizer;
                    var recognizers = this.recognizers;
                    var curRecognizer = session.curRecognizer;
                    if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {
                        curRecognizer = session.curRecognizer = null
                    }
                    var i = 0;
                    while (i < recognizers.length) {
                        recognizer = recognizers[i];
                        if (session.stopped !== FORCED_STOP && (!curRecognizer || recognizer == curRecognizer || recognizer.canRecognizeWith(curRecognizer))) {
                            recognizer.recognize(inputData)
                        } else {
                            recognizer.reset()
                        }
                        if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
                            curRecognizer = session.curRecognizer = recognizer
                        }
                        i++
                    }
                },
                get: function(recognizer) {
                    if (recognizer instanceof Recognizer) {
                        return recognizer
                    }
                    var recognizers = this.recognizers;
                    for (var i = 0; i < recognizers.length; i++) {
                        if (recognizers[i].options.event == recognizer) {
                            return recognizers[i]
                        }
                    }
                    return null
                },
                add: function(recognizer) {
                    if (invokeArrayArg(recognizer, "add", this)) {
                        return this
                    }
                    var existing = this.get(recognizer.options.event);
                    if (existing) {
                        this.remove(existing)
                    }
                    this.recognizers.push(recognizer);
                    recognizer.manager = this;
                    this.touchAction.update();
                    return recognizer
                },
                remove: function(recognizer) {
                    if (invokeArrayArg(recognizer, "remove", this)) {
                        return this
                    }
                    var recognizers = this.recognizers;
                    recognizer = this.get(recognizer);
                    recognizers.splice(inArray(recognizers, recognizer), 1);
                    this.touchAction.update();
                    return this
                },
                on: function(events, handler) {
                    var handlers = this.handlers;
                    each(splitStr(events), function(event) {
                        handlers[event] = handlers[event] || [];
                        handlers[event].push(handler)
                    });
                    return this
                },
                off: function(events, handler) {
                    var handlers = this.handlers;
                    each(splitStr(events), function(event) {
                        if (!handler) {
                            delete handlers[event]
                        } else {
                            handlers[event].splice(inArray(handlers[event], handler), 1)
                        }
                    });
                    return this
                },
                emit: function(event, data) {
                    if (this.options.domEvents) {
                        triggerDomEvent(event, data)
                    }
                    var handlers = this.handlers[event] && this.handlers[event].slice();
                    if (!handlers || !handlers.length) {
                        return
                    }
                    data.type = event;
                    data.preventDefault = function() {
                        data.srcEvent.preventDefault()
                    };
                    var i = 0;
                    while (i < handlers.length) {
                        handlers[i](data);
                        i++
                    }
                },
                destroy: function() {
                    this.element && toggleCssProps(this, false);
                    this.handlers = {};
                    this.session = {};
                    this.input.destroy();
                    this.element = null
                }
            };

            function toggleCssProps(manager, add) {
                var element = manager.element;
                each(manager.options.cssProps, function(value, name) {
                    element.style[prefixed(element.style, name)] = add ? value : ""
                })
            }

            function triggerDomEvent(event, data) {
                var gestureEvent = document.createEvent("Event");
                gestureEvent.initEvent(event, true, true);
                gestureEvent.gesture = data;
                data.target.dispatchEvent(gestureEvent)
            }
            extend(Hammer, {
                INPUT_START: INPUT_START,
                INPUT_MOVE: INPUT_MOVE,
                INPUT_END: INPUT_END,
                INPUT_CANCEL: INPUT_CANCEL,
                STATE_POSSIBLE: STATE_POSSIBLE,
                STATE_BEGAN: STATE_BEGAN,
                STATE_CHANGED: STATE_CHANGED,
                STATE_ENDED: STATE_ENDED,
                STATE_RECOGNIZED: STATE_RECOGNIZED,
                STATE_CANCELLED: STATE_CANCELLED,
                STATE_FAILED: STATE_FAILED,
                DIRECTION_NONE: DIRECTION_NONE,
                DIRECTION_LEFT: DIRECTION_LEFT,
                DIRECTION_RIGHT: DIRECTION_RIGHT,
                DIRECTION_UP: DIRECTION_UP,
                DIRECTION_DOWN: DIRECTION_DOWN,
                DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
                DIRECTION_VERTICAL: DIRECTION_VERTICAL,
                DIRECTION_ALL: DIRECTION_ALL,
                Manager: Manager,
                Input: Input,
                TouchAction: TouchAction,
                TouchInput: TouchInput,
                MouseInput: MouseInput,
                PointerEventInput: PointerEventInput,
                TouchMouseInput: TouchMouseInput,
                SingleTouchInput: SingleTouchInput,
                Recognizer: Recognizer,
                AttrRecognizer: AttrRecognizer,
                Tap: TapRecognizer,
                Pan: PanRecognizer,
                Swipe: SwipeRecognizer,
                Pinch: PinchRecognizer,
                Rotate: RotateRecognizer,
                Press: PressRecognizer,
                on: addEventListeners,
                off: removeEventListeners,
                each: each,
                merge: merge,
                extend: extend,
                inherit: inherit,
                bindFn: bindFn,
                prefixed: prefixed
            });
            if (typeof define == TYPE_FUNCTION && define.amd) {
                define(function() {
                    return Hammer
                })
            } else if (typeof module != "undefined" && module.exports) {
                module.exports = Hammer
            } else {
                window[exportName] = Hammer
            }
        })(window, document, "Hammer")
    }, {}],
    28: [function(require, module, exports) {
        "use strict";
        var base = require("./handlebars/base");
        var SafeString = require("./handlebars/safe-string")["default"];
        var Exception = require("./handlebars/exception")["default"];
        var Utils = require("./handlebars/utils");
        var runtime = require("./handlebars/runtime");
        var create = function() {
            var hb = new base.HandlebarsEnvironment;
            Utils.extend(hb, base);
            hb.SafeString = SafeString;
            hb.Exception = Exception;
            hb.Utils = Utils;
            hb.VM = runtime;
            hb.template = function(spec) {
                return runtime.template(spec, hb)
            };
            return hb
        };
        var Handlebars = create();
        Handlebars.create = create;
        exports["default"] = Handlebars
    }, {
        "./handlebars/base": 29,
        "./handlebars/exception": 30,
        "./handlebars/runtime": 31,
        "./handlebars/safe-string": 32,
        "./handlebars/utils": 33
    }],
    29: [function(require, module, exports) {
        "use strict";
        var Utils = require("./utils");
        var Exception = require("./exception")["default"];
        var VERSION = "1.3.0";
        exports.VERSION = VERSION;
        var COMPILER_REVISION = 4;
        exports.COMPILER_REVISION = COMPILER_REVISION;
        var REVISION_CHANGES = {
            1: "<= 1.0.rc.2",
            2: "== 1.0.0-rc.3",
            3: "== 1.0.0-rc.4",
            4: ">= 1.0.0"
        };
        exports.REVISION_CHANGES = REVISION_CHANGES;
        var isArray = Utils.isArray,
            isFunction = Utils.isFunction,
            toString = Utils.toString,
            objectType = "[object Object]";

        function HandlebarsEnvironment(helpers, partials) {
            this.helpers = helpers || {};
            this.partials = partials || {};
            registerDefaultHelpers(this)
        }
        exports.HandlebarsEnvironment = HandlebarsEnvironment;
        HandlebarsEnvironment.prototype = {
            constructor: HandlebarsEnvironment,
            logger: logger,
            log: log,
            registerHelper: function(name, fn, inverse) {
                if (toString.call(name) === objectType) {
                    if (inverse || fn) {
                        throw new Exception("Arg not supported with multiple helpers")
                    }
                    Utils.extend(this.helpers, name)
                } else {
                    if (inverse) {
                        fn.not = inverse
                    }
                    this.helpers[name] = fn
                }
            },
            registerPartial: function(name, str) {
                if (toString.call(name) === objectType) {
                    Utils.extend(this.partials, name)
                } else {
                    this.partials[name] = str
                }
            }
        };

        function registerDefaultHelpers(instance) {
            instance.registerHelper("helperMissing", function(arg) {
                if (arguments.length === 2) {
                    return undefined
                } else {
                    throw new Exception("Missing helper: '" + arg + "'")
                }
            });
            instance.registerHelper("blockHelperMissing", function(context, options) {
                var inverse = options.inverse || function() {},
                    fn = options.fn;
                if (isFunction(context)) {
                    context = context.call(this)
                }
                if (context === true) {
                    return fn(this)
                } else if (context === false || context == null) {
                    return inverse(this)
                } else if (isArray(context)) {
                    if (context.length > 0) {
                        return instance.helpers.each(context, options)
                    } else {
                        return inverse(this)
                    }
                } else {
                    return fn(context)
                }
            });
            instance.registerHelper("each", function(context, options) {
                var fn = options.fn,
                    inverse = options.inverse;
                var i = 0,
                    ret = "",
                    data;
                if (isFunction(context)) {
                    context = context.call(this)
                }
                if (options.data) {
                    data = createFrame(options.data)
                }
                if (context && typeof context === "object") {
                    if (isArray(context)) {
                        for (var j = context.length; i < j; i++) {
                            if (data) {
                                data.index = i;
                                data.first = i === 0;
                                data.last = i === context.length - 1
                            }
                            ret = ret + fn(context[i], {
                                data: data
                            })
                        }
                    } else {
                        for (var key in context) {
                            if (context.hasOwnProperty(key)) {
                                if (data) {
                                    data.key = key;
                                    data.index = i;
                                    data.first = i === 0
                                }
                                ret = ret + fn(context[key], {
                                    data: data
                                });
                                i++
                            }
                        }
                    }
                }
                if (i === 0) {
                    ret = inverse(this)
                }
                return ret
            });
            instance.registerHelper("if", function(conditional, options) {
                if (isFunction(conditional)) {
                    conditional = conditional.call(this)
                }
                if (!options.hash.includeZero && !conditional || Utils.isEmpty(conditional)) {
                    return options.inverse(this)
                } else {
                    return options.fn(this)
                }
            });
            instance.registerHelper("unless", function(conditional, options) {
                return instance.helpers["if"].call(this, conditional, {
                    fn: options.inverse,
                    inverse: options.fn,
                    hash: options.hash
                })
            });
            instance.registerHelper("with", function(context, options) {
                if (isFunction(context)) {
                    context = context.call(this)
                }
                if (!Utils.isEmpty(context)) return options.fn(context)
            });
            instance.registerHelper("log", function(context, options) {
                var level = options.data && options.data.level != null ? parseInt(options.data.level, 10) : 1;
                instance.log(level, context)
            })
        }
        var logger = {
            methodMap: {
                0: "debug",
                1: "info",
                2: "warn",
                3: "error"
            },
            DEBUG: 0,
            INFO: 1,
            WARN: 2,
            ERROR: 3,
            level: 3,
            log: function(level, obj) {
                if (logger.level <= level) {
                    var method = logger.methodMap[level];
                    if (typeof console !== "undefined" && console[method]) {
                        console[method].call(console, obj)
                    }
                }
            }
        };
        exports.logger = logger;

        function log(level, obj) {
            logger.log(level, obj)
        }
        exports.log = log;
        var createFrame = function(object) {
            var obj = {};
            Utils.extend(obj, object);
            return obj
        };
        exports.createFrame = createFrame
    }, {
        "./exception": 30,
        "./utils": 33
    }],
    30: [function(require, module, exports) {
        "use strict";
        var errorProps = ["description", "fileName", "lineNumber", "message", "name", "number", "stack"];

        function Exception(message, node) {
            var line;
            if (node && node.firstLine) {
                line = node.firstLine;
                message += " - " + line + ":" + node.firstColumn
            }
            var tmp = Error.prototype.constructor.call(this, message);
            for (var idx = 0; idx < errorProps.length; idx++) {
                this[errorProps[idx]] = tmp[errorProps[idx]]
            }
            if (line) {
                this.lineNumber = line;
                this.column = node.firstColumn
            }
        }
        Exception.prototype = new Error;
        exports["default"] = Exception
    }, {}],
    31: [function(require, module, exports) {
        "use strict";
        var Utils = require("./utils");
        var Exception = require("./exception")["default"];
        var COMPILER_REVISION = require("./base").COMPILER_REVISION;
        var REVISION_CHANGES = require("./base").REVISION_CHANGES;

        function checkRevision(compilerInfo) {
            var compilerRevision = compilerInfo && compilerInfo[0] || 1,
                currentRevision = COMPILER_REVISION;
            if (compilerRevision !== currentRevision) {
                if (compilerRevision < currentRevision) {
                    var runtimeVersions = REVISION_CHANGES[currentRevision],
                        compilerVersions = REVISION_CHANGES[compilerRevision];
                    throw new Exception("Template was precompiled with an older version of Handlebars than the current runtime. " + "Please update your precompiler to a newer version (" + runtimeVersions + ") or downgrade your runtime to an older version (" + compilerVersions + ").")
                } else {
                    throw new Exception("Template was precompiled with a newer version of Handlebars than the current runtime. " + "Please update your runtime to a newer version (" + compilerInfo[1] + ").")
                }
            }
        }
        exports.checkRevision = checkRevision;

        function template(templateSpec, env) {
            if (!env) {
                throw new Exception("No environment passed to template")
            }
            var invokePartialWrapper = function(partial, name, context, helpers, partials, data) {
                var result = env.VM.invokePartial.apply(this, arguments);
                if (result != null) {
                    return result
                }
                if (env.compile) {
                    var options = {
                        helpers: helpers,
                        partials: partials,
                        data: data
                    };
                    partials[name] = env.compile(partial, {
                        data: data !== undefined
                    }, env);
                    return partials[name](context, options)
                } else {
                    throw new Exception("The partial " + name + " could not be compiled when running in runtime-only mode")
                }
            };
            var container = {
                escapeExpression: Utils.escapeExpression,
                invokePartial: invokePartialWrapper,
                programs: [],
                program: function(i, fn, data) {
                    var programWrapper = this.programs[i];
                    if (data) {
                        programWrapper = program(i, fn, data)
                    } else if (!programWrapper) {
                        programWrapper = this.programs[i] = program(i, fn)
                    }
                    return programWrapper
                },
                merge: function(param, common) {
                    var ret = param || common;
                    if (param && common && param !== common) {
                        ret = {};
                        Utils.extend(ret, common);
                        Utils.extend(ret, param)
                    }
                    return ret
                },
                programWithDepth: env.VM.programWithDepth,
                noop: env.VM.noop,
                compilerInfo: null
            };
            return function(context, options) {
                options = options || {};
                var namespace = options.partial ? options : env,
                    helpers, partials;
                if (!options.partial) {
                    helpers = options.helpers;
                    partials = options.partials
                }
                var result = templateSpec.call(container, namespace, context, helpers, partials, options.data);
                if (!options.partial) {
                    env.VM.checkRevision(container.compilerInfo)
                }
                return result
            }
        }
        exports.template = template;

        function programWithDepth(i, fn, data) {
            var args = Array.prototype.slice.call(arguments, 3);
            var prog = function(context, options) {
                options = options || {};
                return fn.apply(this, [context, options.data || data].concat(args))
            };
            prog.program = i;
            prog.depth = args.length;
            return prog
        }
        exports.programWithDepth = programWithDepth;

        function program(i, fn, data) {
            var prog = function(context, options) {
                options = options || {};
                return fn(context, options.data || data)
            };
            prog.program = i;
            prog.depth = 0;
            return prog
        }
        exports.program = program;

        function invokePartial(partial, name, context, helpers, partials, data) {
            var options = {
                partial: true,
                helpers: helpers,
                partials: partials,
                data: data
            };
            if (partial === undefined) {
                throw new Exception("The partial " + name + " could not be found")
            } else if (partial instanceof Function) {
                return partial(context, options)
            }
        }
        exports.invokePartial = invokePartial;

        function noop() {
            return ""
        }
        exports.noop = noop
    }, {
        "./base": 29,
        "./exception": 30,
        "./utils": 33
    }],
    32: [function(require, module, exports) {
        "use strict";

        function SafeString(string) {
            this.string = string
        }
        SafeString.prototype.toString = function() {
            return "" + this.string
        };
        exports["default"] = SafeString
    }, {}],
    33: [function(require, module, exports) {
        "use strict";
        var SafeString = require("./safe-string")["default"];
        var escape = {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#x27;",
            "`": "&#x60;"
        };
        var badChars = /[&<>"'`]/g;
        var possible = /[&<>"'`]/;

        function escapeChar(chr) {
            return escape[chr] || "&amp;"
        }

        function extend(obj, value) {
            for (var key in value) {
                if (Object.prototype.hasOwnProperty.call(value, key)) {
                    obj[key] = value[key]
                }
            }
        }
        exports.extend = extend;
        var toString = Object.prototype.toString;
        exports.toString = toString;
        var isFunction = function(value) {
            return typeof value === "function"
        };
        if (isFunction(/x/)) {
            isFunction = function(value) {
                return typeof value === "function" && toString.call(value) === "[object Function]"
            }
        }
        var isFunction;
        exports.isFunction = isFunction;
        var isArray = Array.isArray || function(value) {
            return value && typeof value === "object" ? toString.call(value) === "[object Array]" : false
        };
        exports.isArray = isArray;

        function escapeExpression(string) {
            if (string instanceof SafeString) {
                return string.toString()
            } else if (!string && string !== 0) {
                return ""
            }
            string = "" + string;
            if (!possible.test(string)) {
                return string
            }
            return string.replace(badChars, escapeChar)
        }
        exports.escapeExpression = escapeExpression;

        function isEmpty(value) {
            if (!value && value !== 0) {
                return true
            } else if (isArray(value) && value.length === 0) {
                return true
            } else {
                return false
            }
        }
        exports.isEmpty = isEmpty
    }, {
        "./safe-string": 32
    }],
    34: [function(require, module, exports) {
        module.exports = require("./dist/cjs/handlebars.runtime")
    }, {
        "./dist/cjs/handlebars.runtime": 28
    }],
    35: [function(require, module, exports) {
        (function(root) {
            if (!Array.prototype.indexOf) {
                Array.prototype.indexOf = function(searchElement) {
                    "use strict";
                    if (this == null) {
                        throw new TypeError
                    }
                    var t = Object(this);
                    var len = t.length >>> 0;
                    if (len === 0) {
                        return -1
                    }
                    var n = 0;
                    if (arguments.length > 0) {
                        n = Number(arguments[1]);
                        if (n != n) {
                            n = 0
                        } else if (n != 0 && n != Infinity && n != -Infinity) {
                            n = (n > 0 || -1) * Math.floor(Math.abs(n))
                        }
                    }
                    if (n >= len) {
                        return -1
                    }
                    var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);
                    for (; k < len; k++) {
                        if (k in t && t[k] === searchElement) {
                            return k
                        }
                    }
                    return -1
                }
            }
            if (!Array.prototype.lastIndexOf) {
                Array.prototype.lastIndexOf = function(searchElement) {
                    "use strict";
                    if (this == null) {
                        throw new TypeError
                    }
                    var t = Object(this);
                    var len = t.length >>> 0;
                    if (len === 0) {
                        return -1
                    }
                    var n = len;
                    if (arguments.length > 1) {
                        n = Number(arguments[1]);
                        if (n != n) {
                            n = 0
                        } else if (n != 0 && n != 1 / 0 && n != -(1 / 0)) {
                            n = (n > 0 || -1) * Math.floor(Math.abs(n))
                        }
                    }
                    var k = n >= 0 ? Math.min(n, len - 1) : len - Math.abs(n);
                    for (; k >= 0; k--) {
                        if (k in t && t[k] === searchElement) {
                            return k
                        }
                    }
                    return -1
                }
            }
            if (typeof String.prototype.trim !== "function") {
                String.prototype.trim = function() {
                    return this.replace(/^\s+|\s+$/g, "")
                }
            }
            var $ = root.jQuery || root.Zepto,
                i18n = {},
                resStore = {},
                currentLng, replacementCounter = 0,
                languages = [],
                initialized = false,
                sync = {},
                conflictReference = null;
            if (typeof module !== "undefined" && module.exports) {
                module.exports = i18n
            } else {
                if ($) {
                    $.i18n = $.i18n || i18n
                }
                if (root.i18n) {
                    conflictReference = root.i18n
                }
                root.i18n = i18n
            }
            sync = {
                load: function(lngs, options, cb) {
                    if (options.useLocalStorage) {
                        sync._loadLocal(lngs, options, function(err, store) {
                            var missingLngs = [];
                            for (var i = 0, len = lngs.length; i < len; i++) {
                                if (!store[lngs[i]]) missingLngs.push(lngs[i])
                            }
                            if (missingLngs.length > 0) {
                                sync._fetch(missingLngs, options, function(err, fetched) {
                                    f.extend(store, fetched);
                                    sync._storeLocal(fetched);
                                    cb(err, store)
                                })
                            } else {
                                cb(err, store)
                            }
                        })
                    } else {
                        sync._fetch(lngs, options, function(err, store) {
                            cb(err, store)
                        })
                    }
                },
                _loadLocal: function(lngs, options, cb) {
                    var store = {},
                        nowMS = (new Date).getTime();
                    if (window.localStorage) {
                        var todo = lngs.length;
                        f.each(lngs, function(key, lng) {
                            var local = f.localStorage.getItem("res_" + lng);
                            if (local) {
                                local = JSON.parse(local);
                                if (local.i18nStamp && local.i18nStamp + options.localStorageExpirationTime > nowMS) {
                                    store[lng] = local
                                }
                            }
                            todo--;
                            if (todo === 0) cb(null, store)
                        })
                    }
                },
                _storeLocal: function(store) {
                    if (window.localStorage) {
                        for (var m in store) {
                            store[m].i18nStamp = (new Date).getTime();
                            f.localStorage.setItem("res_" + m, JSON.stringify(store[m]))
                        }
                    }
                    return
                },
                _fetch: function(lngs, options, cb) {
                    var ns = options.ns,
                        store = {};
                    if (!options.dynamicLoad) {
                        var todo = ns.namespaces.length * lngs.length,
                            errors;
                        f.each(ns.namespaces, function(nsIndex, nsValue) {
                            f.each(lngs, function(lngIndex, lngValue) {
                                var loadComplete = function(err, data) {
                                    if (err) {
                                        errors = errors || [];
                                        errors.push(err)
                                    }
                                    store[lngValue] = store[lngValue] || {};
                                    store[lngValue][nsValue] = data;
                                    todo--;
                                    if (todo === 0) cb(errors, store)
                                };
                                if (typeof options.customLoad == "function") {
                                    options.customLoad(lngValue, nsValue, options, loadComplete)
                                } else {
                                    sync._fetchOne(lngValue, nsValue, options, loadComplete)
                                }
                            })
                        })
                    } else {
                        var loadComplete = function(err, data) {
                            cb(err, data)
                        };
                        if (typeof options.customLoad == "function") {
                            options.customLoad(lngs, ns.namespaces, options, loadComplete)
                        } else {
                            var url = applyReplacement(options.resGetPath, {
                                lng: lngs.join("+"),
                                ns: ns.namespaces.join("+")
                            });
                            f.ajax({
                                url: url,
                                cache: options.cache,
                                success: function(data, status, xhr) {
                                    f.log("loaded: " + url);
                                    loadComplete(null, data)
                                },
                                error: function(xhr, status, error) {
                                    f.log("failed loading: " + url);
                                    loadComplete("failed loading resource.json error: " + error)
                                },
                                dataType: "json",
                                async: options.getAsync,
                                timeout: options.ajaxTimeout
                            })
                        }
                    }
                },
                _fetchOne: function(lng, ns, options, done) {
                    var url = applyReplacement(options.resGetPath, {
                        lng: lng,
                        ns: ns
                    });
                    f.ajax({
                        url: url,
                        cache: options.cache,
                        success: function(data, status, xhr) {
                            f.log("loaded: " + url);
                            done(null, data)
                        },
                        error: function(xhr, status, error) {
                            if (status && status == 200 || xhr && xhr.status && xhr.status == 200) {
                                f.error("There is a typo in: " + url)
                            } else if (status && status == 404 || xhr && xhr.status && xhr.status == 404) {
                                f.log("Does not exist: " + url)
                            } else {
                                var theStatus = status ? status : xhr && xhr.status ? xhr.status : null;
                                f.log(theStatus + " when loading " + url)
                            }
                            done(error, {})
                        },
                        dataType: "json",
                        async: options.getAsync,
                        timeout: options.ajaxTimeout
                    })
                },
                postMissing: function(lng, ns, key, defaultValue, lngs) {
                    var payload = {};
                    payload[key] = defaultValue;
                    var urls = [];
                    if (o.sendMissingTo === "fallback" && o.fallbackLng[0] !== false) {
                        for (var i = 0; i < o.fallbackLng.length; i++) {
                            urls.push({
                                lng: o.fallbackLng[i],
                                url: applyReplacement(o.resPostPath, {
                                    lng: o.fallbackLng[i],
                                    ns: ns
                                })
                            })
                        }
                    } else if (o.sendMissingTo === "current" || o.sendMissingTo === "fallback" && o.fallbackLng[0] === false) {
                        urls.push({
                            lng: lng,
                            url: applyReplacement(o.resPostPath, {
                                lng: lng,
                                ns: ns
                            })
                        })
                    } else if (o.sendMissingTo === "all") {
                        for (var i = 0, l = lngs.length; i < l; i++) {
                            urls.push({
                                lng: lngs[i],
                                url: applyReplacement(o.resPostPath, {
                                    lng: lngs[i],
                                    ns: ns
                                })
                            })
                        }
                    }
                    for (var y = 0, len = urls.length; y < len; y++) {
                        var item = urls[y];
                        f.ajax({
                            url: item.url,
                            type: o.sendType,
                            data: payload,
                            success: function(data, status, xhr) {
                                f.log("posted missing key '" + key + "' to: " + item.url);
                                var keys = key.split(".");
                                var x = 0;
                                var value = resStore[item.lng][ns];
                                while (keys[x]) {
                                    if (x === keys.length - 1) {
                                        value = value[keys[x]] = defaultValue
                                    } else {
                                        value = value[keys[x]] = value[keys[x]] || {}
                                    }
                                    x++
                                }
                            },
                            error: function(xhr, status, error) {
                                f.log("failed posting missing key '" + key + "' to: " + item.url)
                            },
                            dataType: "json",
                            async: o.postAsync,
                            timeout: o.ajaxTimeout
                        })
                    }
                },
                reload: reload
            };
            var o = {
                lng: undefined,
                load: "all",
                preload: [],
                lowerCaseLng: false,
                returnObjectTrees: false,
                fallbackLng: ["dev"],
                fallbackNS: [],
                detectLngQS: "setLng",
                detectLngFromLocalStorage: false,
                ns: {
                    namespaces: ["translation"],
                    defaultNs: "translation"
                },
                fallbackOnNull: true,
                fallbackOnEmpty: false,
                fallbackToDefaultNS: false,
                showKeyIfEmpty: false,
                nsseparator: ":",
                keyseparator: ".",
                selectorAttr: "data-i18n",
                debug: false,
                resGetPath: "locales/__lng__/__ns__.json",
                resPostPath: "locales/add/__lng__/__ns__",
                getAsync: true,
                postAsync: true,
                resStore: undefined,
                useLocalStorage: false,
                localStorageExpirationTime: 7 * 24 * 60 * 60 * 1e3,
                dynamicLoad: false,
                sendMissing: false,
                sendMissingTo: "fallback",
                sendType: "POST",
                interpolationPrefix: "__",
                interpolationSuffix: "__",
                defaultVariables: false,
                reusePrefix: "$t(",
                reuseSuffix: ")",
                pluralSuffix: "_plural",
                pluralNotFound: ["plural_not_found", Math.random()].join(""),
                contextNotFound: ["context_not_found", Math.random()].join(""),
                escapeInterpolation: false,
                indefiniteSuffix: "_indefinite",
                indefiniteNotFound: ["indefinite_not_found", Math.random()].join(""),
                setJqueryExt: true,
                defaultValueFromContent: true,
                useDataAttrOptions: false,
                cookieExpirationTime: undefined,
                useCookie: true,
                cookieName: "i18next",
                cookieDomain: undefined,
                objectTreeKeyHandler: undefined,
                postProcess: undefined,
                parseMissingKey: undefined,
                missingKeyHandler: sync.postMissing,
                ajaxTimeout: 0,
                shortcutFunction: "sprintf"
            };

            function _extend(target, source) {
                if (!source || typeof source === "function") {
                    return target
                }
                for (var attr in source) {
                    target[attr] = source[attr]
                }
                return target
            }

            function _deepExtend(target, source) {
                for (var prop in source)
                    if (prop in target) _deepExtend(target[prop], source[prop]);
                    else target[prop] = source[prop];
                return target
            }

            function _each(object, callback, args) {
                var name, i = 0,
                    length = object.length,
                    isObj = length === undefined || Object.prototype.toString.apply(object) !== "[object Array]" || typeof object === "function";
                if (args) {
                    if (isObj) {
                        for (name in object) {
                            if (callback.apply(object[name], args) === false) {
                                break
                            }
                        }
                    } else {
                        for (; i < length;) {
                            if (callback.apply(object[i++], args) === false) {
                                break
                            }
                        }
                    }
                } else {
                    if (isObj) {
                        for (name in object) {
                            if (callback.call(object[name], name, object[name]) === false) {
                                break
                            }
                        }
                    } else {
                        for (; i < length;) {
                            if (callback.call(object[i], i, object[i++]) === false) {
                                break
                            }
                        }
                    }
                }
                return object
            }
            var _entityMap = {
                "&": "&amp;",
                "<": "&lt;",
                ">": "&gt;",
                '"': "&quot;",
                "'": "&#39;",
                "/": "&#x2F;"
            };

            function _escape(data) {
                if (typeof data === "string") {
                    return data.replace(/[&<>"'\/]/g, function(s) {
                        return _entityMap[s]
                    })
                } else {
                    return data
                }
            }

            function _ajax(options) {
                var getXhr = function(callback) {
                    if (window.XMLHttpRequest) {
                        return callback(null, new XMLHttpRequest)
                    } else if (window.ActiveXObject) {
                        try {
                            return callback(null, new ActiveXObject("Msxml2.XMLHTTP"))
                        } catch (e) {
                            return callback(null, new ActiveXObject("Microsoft.XMLHTTP"))
                        }
                    }
                    return callback(new Error)
                };
                var encodeUsingUrlEncoding = function(data) {
                    if (typeof data === "string") {
                        return data
                    }
                    var result = [];
                    for (var dataItem in data) {
                        if (data.hasOwnProperty(dataItem)) {
                            result.push(encodeURIComponent(dataItem) + "=" + encodeURIComponent(data[dataItem]))
                        }
                    }
                    return result.join("&")
                };
                var utf8 = function(text) {
                    text = text.replace(/\r\n/g, "\n");
                    var result = "";
                    for (var i = 0; i < text.length; i++) {
                        var c = text.charCodeAt(i);
                        if (c < 128) {
                            result += String.fromCharCode(c)
                        } else if (c > 127 && c < 2048) {
                            result += String.fromCharCode(c >> 6 | 192);
                            result += String.fromCharCode(c & 63 | 128)
                        } else {
                            result += String.fromCharCode(c >> 12 | 224);
                            result += String.fromCharCode(c >> 6 & 63 | 128);
                            result += String.fromCharCode(c & 63 | 128)
                        }
                    }
                    return result
                };
                var base64 = function(text) {
                    var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
                    text = utf8(text);
                    var result = "",
                        chr1, chr2, chr3, enc1, enc2, enc3, enc4, i = 0;
                    do {
                        chr1 = text.charCodeAt(i++);
                        chr2 = text.charCodeAt(i++);
                        chr3 = text.charCodeAt(i++);
                        enc1 = chr1 >> 2;
                        enc2 = (chr1 & 3) << 4 | chr2 >> 4;
                        enc3 = (chr2 & 15) << 2 | chr3 >> 6;
                        enc4 = chr3 & 63;
                        if (isNaN(chr2)) {
                            enc3 = enc4 = 64
                        } else if (isNaN(chr3)) {
                            enc4 = 64
                        }
                        result += keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);
                        chr1 = chr2 = chr3 = "";
                        enc1 = enc2 = enc3 = enc4 = ""
                    } while (i < text.length);
                    return result
                };
                var mergeHeaders = function() {
                    var result = arguments[0];
                    for (var i = 1; i < arguments.length; i++) {
                        var currentHeaders = arguments[i];
                        for (var header in currentHeaders) {
                            if (currentHeaders.hasOwnProperty(header)) {
                                result[header] = currentHeaders[header]
                            }
                        }
                    }
                    return result
                };
                var ajax = function(method, url, options, callback) {
                    if (typeof options === "function") {
                        callback = options;
                        options = {}
                    }
                    options.cache = options.cache || false;
                    options.data = options.data || {};
                    options.headers = options.headers || {};
                    options.jsonp = options.jsonp || false;
                    options.async = options.async === undefined ? true : options.async;
                    var headers = mergeHeaders({
                        accept: "*/*",
                        "content-type": "application/x-www-form-urlencoded;charset=UTF-8"
                    }, ajax.headers, options.headers);
                    var payload;
                    if (headers["content-type"] === "application/json") {
                        payload = JSON.stringify(options.data)
                    } else {
                        payload = encodeUsingUrlEncoding(options.data)
                    }
                    if (method === "GET") {
                        var queryString = [];
                        if (payload) {
                            queryString.push(payload);
                            payload = null
                        }
                        if (!options.cache) {
                            queryString.push("_=" + (new Date).getTime())
                        }
                        if (options.jsonp) {
                            queryString.push("callback=" + options.jsonp);
                            queryString.push("jsonp=" + options.jsonp)
                        }
                        queryString = queryString.join("&");
                        if (queryString.length > 1) {
                            if (url.indexOf("?") > -1) {
                                url += "&" + queryString
                            } else {
                                url += "?" + queryString
                            }
                        }
                        if (options.jsonp) {
                            var head = document.getElementsByTagName("head")[0];
                            var script = document.createElement("script");
                            script.type = "text/javascript";
                            script.src = url;
                            head.appendChild(script);
                            return
                        }
                    }
                    getXhr(function(err, xhr) {
                        if (err) return callback(err);
                        xhr.open(method, url, options.async);
                        for (var header in headers) {
                            if (headers.hasOwnProperty(header)) {
                                xhr.setRequestHeader(header, headers[header])
                            }
                        }
                        xhr.onreadystatechange = function() {
                            if (xhr.readyState === 4) {
                                var data = xhr.responseText || "";
                                if (!callback) {
                                    return
                                }
                                callback(xhr.status, {
                                    text: function() {
                                        return data
                                    },
                                    json: function() {
                                        try {
                                            return JSON.parse(data)
                                        } catch (e) {
                                            f.error("Can not parse JSON. URL: " + url);
                                            return {}
                                        }
                                    }
                                })
                            }
                        };
                        xhr.send(payload)
                    })
                };
                var http = {
                    authBasic: function(username, password) {
                        ajax.headers["Authorization"] = "Basic " + base64(username + ":" + password)
                    },
                    connect: function(url, options, callback) {
                        return ajax("CONNECT", url, options, callback)
                    },
                    del: function(url, options, callback) {
                        return ajax("DELETE", url, options, callback)
                    },
                    get: function(url, options, callback) {
                        return ajax("GET", url, options, callback)
                    },
                    head: function(url, options, callback) {
                        return ajax("HEAD", url, options, callback)
                    },
                    headers: function(headers) {
                        ajax.headers = headers || {}
                    },
                    isAllowed: function(url, verb, callback) {
                        this.options(url, function(status, data) {
                            callback(data.text().indexOf(verb) !== -1)
                        })
                    },
                    options: function(url, options, callback) {
                        return ajax("OPTIONS", url, options, callback)
                    },
                    patch: function(url, options, callback) {
                        return ajax("PATCH", url, options, callback)
                    },
                    post: function(url, options, callback) {
                        return ajax("POST", url, options, callback)
                    },
                    put: function(url, options, callback) {
                        return ajax("PUT", url, options, callback)
                    },
                    trace: function(url, options, callback) {
                        return ajax("TRACE", url, options, callback)
                    }
                };
                var methode = options.type ? options.type.toLowerCase() : "get";
                http[methode](options.url, options, function(status, data) {
                    if (status === 200 || status === 0 && data.text()) {
                        options.success(data.json(), status, null)
                    } else {
                        options.error(data.text(), status, null)
                    }
                })
            }
            var _cookie = {
                create: function(name, value, minutes, domain) {
                    var expires;
                    if (minutes) {
                        var date = new Date;
                        date.setTime(date.getTime() + minutes * 60 * 1e3);
                        expires = "; expires=" + date.toGMTString()
                    } else expires = "";
                    domain = domain ? "domain=" + domain + ";" : "";
                    document.cookie = name + "=" + value + expires + ";" + domain + "path=/"
                },
                read: function(name) {
                    var nameEQ = name + "=";
                    var ca = document.cookie.split(";");
                    for (var i = 0; i < ca.length; i++) {
                        var c = ca[i];
                        while (c.charAt(0) == " ") c = c.substring(1, c.length);
                        if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length)
                    }
                    return null
                },
                remove: function(name) {
                    this.create(name, "", -1)
                }
            };
            var cookie_noop = {
                create: function(name, value, minutes, domain) {},
                read: function(name) {
                    return null
                },
                remove: function(name) {}
            };
            var f = {
                extend: $ ? $.extend : _extend,
                deepExtend: _deepExtend,
                each: $ ? $.each : _each,
                ajax: $ ? $.ajax : typeof document !== "undefined" ? _ajax : function() {},
                cookie: typeof document !== "undefined" ? _cookie : cookie_noop,
                detectLanguage: detectLanguage,
                escape: _escape,
                log: function(str) {
                    if (o.debug && typeof console !== "undefined") console.log(str)
                },
                error: function(str) {
                    if (typeof console !== "undefined") console.error(str)
                },
                getCountyIndexOfLng: function(lng) {
                    var lng_index = 0;
                    if (lng === "nb-NO" || lng === "nn-NO" || lng === "nb-no" || lng === "nn-no") lng_index = 1;
                    return lng_index
                },
                toLanguages: function(lng, fallbackLng) {
                    var log = this.log;
                    fallbackLng = fallbackLng || o.fallbackLng;
                    if (typeof fallbackLng === "string") fallbackLng = [fallbackLng];

                    function applyCase(l) {
                        var ret = l;
                        if (typeof l === "string" && l.indexOf("-") > -1) {
                            var parts = l.split("-");
                            ret = o.lowerCaseLng ? parts[0].toLowerCase() + "-" + parts[1].toLowerCase() : parts[0].toLowerCase() + "-" + parts[1].toUpperCase()
                        } else {
                            ret = o.lowerCaseLng ? l.toLowerCase() : l
                        }
                        return ret
                    }
                    var languages = [];
                    var whitelist = o.lngWhitelist || false;
                    var addLanguage = function(language) {
                        if (!whitelist || whitelist.indexOf(language) > -1) {
                            languages.push(language)
                        } else {
                            log("rejecting non-whitelisted language: " + language)
                        }
                    };
                    if (typeof lng === "string" && lng.indexOf("-") > -1) {
                        var parts = lng.split("-");
                        if (o.load !== "unspecific") addLanguage(applyCase(lng));
                        if (o.load !== "current") addLanguage(applyCase(parts[this.getCountyIndexOfLng(lng)]))
                    } else {
                        addLanguage(applyCase(lng))
                    }
                    for (var i = 0; i < fallbackLng.length; i++) {
                        if (languages.indexOf(fallbackLng[i]) === -1 && fallbackLng[i]) languages.push(applyCase(fallbackLng[i]))
                    }
                    return languages
                },
                regexEscape: function(str) {
                    return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&")
                },
                regexReplacementEscape: function(strOrFn) {
                    if (typeof strOrFn === "string") {
                        return strOrFn.replace(/\$/g, "$$$$")
                    } else {
                        return strOrFn
                    }
                },
                localStorage: {
                    setItem: function(key, value) {
                        if (window.localStorage) {
                            try {
                                window.localStorage.setItem(key, value)
                            } catch (e) {
                                f.log('failed to set value for key "' + key + '" to localStorage.')
                            }
                        }
                    },
                    getItem: function(key, value) {
                        if (window.localStorage) {
                            try {
                                return window.localStorage.getItem(key, value)
                            } catch (e) {
                                f.log('failed to get value for key "' + key + '" from localStorage.');
                                return undefined
                            }
                        }
                    }
                }
            };

            function init(options, cb) {
                if (typeof options === "function") {
                    cb = options;
                    options = {}
                }
                options = options || {};
                f.extend(o, options);
                delete o.fixLng;
                if (o.functions) {
                    delete o.functions;
                    f.extend(f, options.functions)
                }
                if (typeof o.ns == "string") {
                    o.ns = {
                        namespaces: [o.ns],
                        defaultNs: o.ns
                    }
                }
                if (typeof o.fallbackNS == "string") {
                    o.fallbackNS = [o.fallbackNS]
                }
                if (typeof o.fallbackLng == "string" || typeof o.fallbackLng == "boolean") {
                    o.fallbackLng = [o.fallbackLng]
                }
                o.interpolationPrefixEscaped = f.regexEscape(o.interpolationPrefix);
                o.interpolationSuffixEscaped = f.regexEscape(o.interpolationSuffix);
                if (!o.lng) o.lng = f.detectLanguage();
                languages = f.toLanguages(o.lng);
                currentLng = languages[0];
                f.log("currentLng set to: " + currentLng);
                if (o.useCookie && f.cookie.read(o.cookieName) !== currentLng) {
                    f.cookie.create(o.cookieName, currentLng, o.cookieExpirationTime, o.cookieDomain)
                }
                if (o.detectLngFromLocalStorage && typeof document !== "undefined" && window.localStorage) {
                    f.localStorage.setItem("i18next_lng", currentLng)
                }
                var lngTranslate = translate;
                if (options.fixLng) {
                    lngTranslate = function(key, options) {
                        options = options || {};
                        options.lng = options.lng || lngTranslate.lng;
                        return translate(key, options)
                    };
                    lngTranslate.lng = currentLng
                }
                pluralExtensions.setCurrentLng(currentLng);
                if ($ && o.setJqueryExt) {
                    addJqueryFunct && addJqueryFunct()
                } else {
                    addJqueryLikeFunctionality && addJqueryLikeFunctionality()
                }
                var deferred;
                if ($ && $.Deferred) {
                    deferred = $.Deferred()
                }
                if (o.resStore) {
                    resStore = o.resStore;
                    initialized = true;
                    if (cb) cb(null, lngTranslate);
                    if (deferred) deferred.resolve(lngTranslate);
                    if (deferred) return deferred.promise();
                    return
                }
                var lngsToLoad = f.toLanguages(o.lng);
                if (typeof o.preload === "string") o.preload = [o.preload];
                for (var i = 0, l = o.preload.length; i < l; i++) {
                    var pres = f.toLanguages(o.preload[i]);
                    for (var y = 0, len = pres.length; y < len; y++) {
                        if (lngsToLoad.indexOf(pres[y]) < 0) {
                            lngsToLoad.push(pres[y])
                        }
                    }
                }
                i18n.sync.load(lngsToLoad, o, function(err, store) {
                    resStore = store;
                    initialized = true;
                    if (cb) cb(err, lngTranslate);
                    if (deferred)(!err ? deferred.resolve : deferred.reject)(err || lngTranslate)
                });
                if (deferred) return deferred.promise()
            }

            function isInitialized() {
                return initialized
            }

            function preload(lngs, cb) {
                if (typeof lngs === "string") lngs = [lngs];
                for (var i = 0, l = lngs.length; i < l; i++) {
                    if (o.preload.indexOf(lngs[i]) < 0) {
                        o.preload.push(lngs[i])
                    }
                }
                return init(cb)
            }

            function addResourceBundle(lng, ns, resources, deep) {
                if (typeof ns !== "string") {
                    resources = ns;
                    ns = o.ns.defaultNs
                } else if (o.ns.namespaces.indexOf(ns) < 0) {
                    o.ns.namespaces.push(ns)
                }
                resStore[lng] = resStore[lng] || {};
                resStore[lng][ns] = resStore[lng][ns] || {};
                if (deep) {
                    f.deepExtend(resStore[lng][ns], resources)
                } else {
                    f.extend(resStore[lng][ns], resources)
                }
                if (o.useLocalStorage) {
                    sync._storeLocal(resStore)
                }
            }

            function hasResourceBundle(lng, ns) {
                if (typeof ns !== "string") {
                    ns = o.ns.defaultNs
                }
                resStore[lng] = resStore[lng] || {};
                var res = resStore[lng][ns] || {};
                var hasValues = false;
                for (var prop in res) {
                    if (res.hasOwnProperty(prop)) {
                        hasValues = true
                    }
                }
                return hasValues
            }

            function getResourceBundle(lng, ns) {
                if (typeof ns !== "string") {
                    ns = o.ns.defaultNs
                }
                resStore[lng] = resStore[lng] || {};
                return f.extend({}, resStore[lng][ns])
            }

            function removeResourceBundle(lng, ns) {
                if (typeof ns !== "string") {
                    ns = o.ns.defaultNs
                }
                resStore[lng] = resStore[lng] || {};
                resStore[lng][ns] = {};
                if (o.useLocalStorage) {
                    sync._storeLocal(resStore)
                }
            }

            function addResource(lng, ns, key, value) {
                if (typeof ns !== "string") {
                    resource = ns;
                    ns = o.ns.defaultNs
                } else if (o.ns.namespaces.indexOf(ns) < 0) {
                    o.ns.namespaces.push(ns)
                }
                resStore[lng] = resStore[lng] || {};
                resStore[lng][ns] = resStore[lng][ns] || {};
                var keys = key.split(o.keyseparator);
                var x = 0;
                var node = resStore[lng][ns];
                var origRef = node;
                while (keys[x]) {
                    if (x == keys.length - 1) node[keys[x]] = value;
                    else {
                        if (node[keys[x]] == null) node[keys[x]] = {};
                        node = node[keys[x]]
                    }
                    x++
                }
                if (o.useLocalStorage) {
                    sync._storeLocal(resStore)
                }
            }

            function addResources(lng, ns, resources) {
                if (typeof ns !== "string") {
                    resource = ns;
                    ns = o.ns.defaultNs
                } else if (o.ns.namespaces.indexOf(ns) < 0) {
                    o.ns.namespaces.push(ns)
                }
                for (var m in resources) {
                    if (typeof resources[m] === "string") addResource(lng, ns, m, resources[m])
                }
            }

            function setDefaultNamespace(ns) {
                o.ns.defaultNs = ns
            }

            function loadNamespace(namespace, cb) {
                loadNamespaces([namespace], cb)
            }

            function loadNamespaces(namespaces, cb) {
                var opts = {
                    dynamicLoad: o.dynamicLoad,
                    resGetPath: o.resGetPath,
                    getAsync: o.getAsync,
                    customLoad: o.customLoad,
                    ns: {
                        namespaces: namespaces,
                        defaultNs: ""
                    }
                };
                var lngsToLoad = f.toLanguages(o.lng);
                if (typeof o.preload === "string") o.preload = [o.preload];
                for (var i = 0, l = o.preload.length; i < l; i++) {
                    var pres = f.toLanguages(o.preload[i]);
                    for (var y = 0, len = pres.length; y < len; y++) {
                        if (lngsToLoad.indexOf(pres[y]) < 0) {
                            lngsToLoad.push(pres[y])
                        }
                    }
                }
                var lngNeedLoad = [];
                for (var a = 0, lenA = lngsToLoad.length; a < lenA; a++) {
                    var needLoad = false;
                    var resSet = resStore[lngsToLoad[a]];
                    if (resSet) {
                        for (var b = 0, lenB = namespaces.length; b < lenB; b++) {
                            if (!resSet[namespaces[b]]) needLoad = true
                        }
                    } else {
                        needLoad = true
                    }
                    if (needLoad) lngNeedLoad.push(lngsToLoad[a])
                }
                if (lngNeedLoad.length) {
                    i18n.sync._fetch(lngNeedLoad, opts, function(err, store) {
                        var todo = namespaces.length * lngNeedLoad.length;
                        f.each(namespaces, function(nsIndex, nsValue) {
                            if (o.ns.namespaces.indexOf(nsValue) < 0) {
                                o.ns.namespaces.push(nsValue)
                            }
                            f.each(lngNeedLoad, function(lngIndex, lngValue) {
                                resStore[lngValue] = resStore[lngValue] || {};
                                resStore[lngValue][nsValue] = store[lngValue][nsValue];
                                todo--;
                                if (todo === 0 && cb) {
                                    if (o.useLocalStorage) i18n.sync._storeLocal(resStore);
                                    cb()
                                }
                            })
                        })
                    })
                } else {
                    if (cb) cb()
                }
            }

            function setLng(lng, options, cb) {
                if (typeof options === "function") {
                    cb = options;
                    options = {}
                } else if (!options) {
                    options = {}
                }
                options.lng = lng;
                return init(options, cb)
            }

            function lng() {
                return currentLng
            }

            function reload(cb) {
                resStore = {};
                setLng(currentLng, cb)
            }

            function noConflict() {
                window.i18next = window.i18n;
                if (conflictReference) {
                    window.i18n = conflictReference
                } else {
                    delete window.i18n
                }
            }

            function addJqueryFunct() {
                $.t = $.t || translate;

                function parse(ele, key, options) {
                    if (key.length === 0) return;
                    var attr = "text";
                    if (key.indexOf("[") === 0) {
                        var parts = key.split("]");
                        key = parts[1];
                        attr = parts[0].substr(1, parts[0].length - 1)
                    }
                    if (key.indexOf(";") === key.length - 1) {
                        key = key.substr(0, key.length - 2)
                    }
                    var optionsToUse;
                    if (attr === "html") {
                        optionsToUse = o.defaultValueFromContent ? $.extend({
                            defaultValue: ele.html()
                        }, options) : options;
                        ele.html($.t(key, optionsToUse))
                    } else if (attr === "text") {
                        optionsToUse = o.defaultValueFromContent ? $.extend({
                            defaultValue: ele.text()
                        }, options) : options;
                        ele.text($.t(key, optionsToUse))
                    } else if (attr === "prepend") {
                        optionsToUse = o.defaultValueFromContent ? $.extend({
                            defaultValue: ele.html()
                        }, options) : options;
                        ele.prepend($.t(key, optionsToUse))
                    } else if (attr === "append") {
                        optionsToUse = o.defaultValueFromContent ? $.extend({
                            defaultValue: ele.html()
                        }, options) : options;
                        ele.append($.t(key, optionsToUse))
                    } else if (attr.indexOf("data-") === 0) {
                        var dataAttr = attr.substr("data-".length);
                        optionsToUse = o.defaultValueFromContent ? $.extend({
                            defaultValue: ele.data(dataAttr)
                        }, options) : options;
                        var translated = $.t(key, optionsToUse);
                        ele.data(dataAttr, translated);
                        ele.attr(attr, translated)
                    } else {
                        optionsToUse = o.defaultValueFromContent ? $.extend({
                            defaultValue: ele.attr(attr)
                        }, options) : options;
                        ele.attr(attr, $.t(key, optionsToUse))
                    }
                }

                function localize(ele, options) {
                    var key = ele.attr(o.selectorAttr);
                    if (!key && typeof key !== "undefined" && key !== false) key = ele.text() || ele.val();
                    if (!key) return;
                    var target = ele,
                        targetSelector = ele.data("i18n-target");
                    if (targetSelector) {
                        target = ele.find(targetSelector) || ele
                    }
                    if (!options && o.useDataAttrOptions === true) {
                        options = ele.data("i18n-options")
                    }
                    options = options || {};
                    if (key.indexOf(";") >= 0) {
                        var keys = key.split(";");
                        $.each(keys, function(m, k) {
                            if (k !== "") parse(target, k, options)
                        })
                    } else {
                        parse(target, key, options)
                    }
                    if (o.useDataAttrOptions === true) ele.data("i18n-options", options)
                }
                $.fn.i18n = function(options) {
                    return this.each(function() {
                        localize($(this), options);
                        var elements = $(this).find("[" + o.selectorAttr + "]");
                        elements.each(function() {
                            localize($(this), options)
                        })
                    })
                }
            }

            function addJqueryLikeFunctionality() {
                function parse(ele, key, options) {
                    if (key.length === 0) return;
                    var attr = "text";
                    if (key.indexOf("[") === 0) {
                        var parts = key.split("]");
                        key = parts[1];
                        attr = parts[0].substr(1, parts[0].length - 1)
                    }
                    if (key.indexOf(";") === key.length - 1) {
                        key = key.substr(0, key.length - 2)
                    }
                    if (attr === "html") {
                        ele.innerHTML = translate(key, options)
                    } else if (attr === "text") {
                        ele.textContent = translate(key, options)
                    } else if (attr === "prepend") {
                        ele.insertAdjacentHTML(translate(key, options), "afterbegin")
                    } else if (attr === "append") {
                        ele.insertAdjacentHTML(translate(key, options), "beforeend")
                    } else {
                        ele.setAttribute(attr, translate(key, options))
                    }
                }

                function localize(ele, options) {
                    var key = ele.getAttribute(o.selectorAttr);
                    if (!key && typeof key !== "undefined" && key !== false) key = ele.textContent || ele.value;
                    if (!key) return;
                    var target = ele,
                        targetSelector = ele.getAttribute("i18n-target");
                    if (targetSelector) {
                        target = ele.querySelector(targetSelector) || ele
                    }
                    if (key.indexOf(";") >= 0) {
                        var keys = key.split(";"),
                            index = 0,
                            length = keys.length;
                        for (; index < length; index++) {
                            if (keys[index] !== "") parse(target, keys[index], options)
                        }
                    } else {
                        parse(target, key, options)
                    }
                }
                i18n.translateObject = function(object, options) {
                    var elements = object.querySelectorAll("[" + o.selectorAttr + "]");
                    var index = 0,
                        length = elements.length;
                    for (; index < length; index++) {
                        localize(elements[index], options)
                    }
                }
            }

            function applyReplacement(str, replacementHash, nestedKey, options) {
                if (!str) return str;
                options = options || replacementHash;
                if (str.indexOf(options.interpolationPrefix || o.interpolationPrefix) < 0) return str;
                var prefix = options.interpolationPrefix ? f.regexEscape(options.interpolationPrefix) : o.interpolationPrefixEscaped,
                    suffix = options.interpolationSuffix ? f.regexEscape(options.interpolationSuffix) : o.interpolationSuffixEscaped,
                    unEscapingSuffix = "HTML" + suffix;
                var hash = replacementHash.replace && typeof replacementHash.replace === "object" ? replacementHash.replace : replacementHash;
                f.each(hash, function(key, value) {
                    var nextKey = nestedKey ? nestedKey + o.keyseparator + key : key;
                    if (typeof value === "object" && value !== null) {
                        str = applyReplacement(str, value, nextKey, options)
                    } else {
                        if (options.escapeInterpolation || o.escapeInterpolation) {
                            str = str.replace(new RegExp([prefix, nextKey, unEscapingSuffix].join(""), "g"), f.regexReplacementEscape(value));
                            str = str.replace(new RegExp([prefix, nextKey, suffix].join(""), "g"), f.regexReplacementEscape(f.escape(value)))
                        } else {
                            str = str.replace(new RegExp([prefix, nextKey, suffix].join(""), "g"), f.regexReplacementEscape(value))
                        }
                    }
                });
                return str
            }
            f.applyReplacement = applyReplacement;

            function applyReuse(translated, options) {
                var comma = ",";
                var options_open = "{";
                var options_close = "}";
                var opts = f.extend({}, options);
                delete opts.postProcess;
                while (translated.indexOf(o.reusePrefix) != -1) {
                    replacementCounter++;
                    if (replacementCounter > o.maxRecursion) {
                        break
                    }
                    var index_of_opening = translated.lastIndexOf(o.reusePrefix);
                    var index_of_end_of_closing = translated.indexOf(o.reuseSuffix, index_of_opening) + o.reuseSuffix.length;
                    var token = translated.substring(index_of_opening, index_of_end_of_closing);
                    var token_without_symbols = token.replace(o.reusePrefix, "").replace(o.reuseSuffix, "");
                    if (index_of_end_of_closing <= index_of_opening) {
                        f.error("there is an missing closing in following translation value", translated);
                        return ""
                    }
                    if (token_without_symbols.indexOf(comma) != -1) {
                        var index_of_token_end_of_closing = token_without_symbols.indexOf(comma);
                        if (token_without_symbols.indexOf(options_open, index_of_token_end_of_closing) != -1 && token_without_symbols.indexOf(options_close, index_of_token_end_of_closing) != -1) {
                            var index_of_opts_opening = token_without_symbols.indexOf(options_open, index_of_token_end_of_closing);
                            var index_of_opts_end_of_closing = token_without_symbols.indexOf(options_close, index_of_opts_opening) + options_close.length;
                            try {
                                opts = f.extend(opts, JSON.parse(token_without_symbols.substring(index_of_opts_opening, index_of_opts_end_of_closing)));
                                token_without_symbols = token_without_symbols.substring(0, index_of_token_end_of_closing)
                            } catch (e) {}
                        }
                    }
                    var translated_token = _translate(token_without_symbols, opts);
                    translated = translated.replace(token, f.regexReplacementEscape(translated_token))
                }
                return translated
            }

            function hasContext(options) {
                return options.context && (typeof options.context == "string" || typeof options.context == "number")
            }

            function needsPlural(options, lng) {
                return options.count !== undefined && typeof options.count != "string"
            }

            function needsIndefiniteArticle(options) {
                return options.indefinite_article !== undefined && typeof options.indefinite_article != "string" && options.indefinite_article
            }

            function exists(key, options) {
                options = options || {};
                var notFound = _getDefaultValue(key, options),
                    found = _find(key, options);
                return found !== undefined || found === notFound
            }

            function translate(key, options) {
                options = options || {};
                if (!initialized) {
                    f.log("i18next not finished initialization. you might have called t function before loading resources finished.");
                    return options.defaultValue || ""
                }
                replacementCounter = 0;
                return _translate.apply(null, arguments)
            }

            function _getDefaultValue(key, options) {
                return options.defaultValue !== undefined ? options.defaultValue : key
            }

            function _injectSprintfProcessor() {
                var values = [];
                for (var i = 1; i < arguments.length; i++) {
                    values.push(arguments[i])
                }
                return {
                    postProcess: "sprintf",
                    sprintf: values
                }
            }

            function _translate(potentialKeys, options) {
                if (options && typeof options !== "object") {
                    if (o.shortcutFunction === "sprintf") {
                        options = _injectSprintfProcessor.apply(null, arguments)
                    } else if (o.shortcutFunction === "defaultValue") {
                        options = {
                            defaultValue: options
                        }
                    }
                } else {
                    options = options || {}
                }
                if (typeof o.defaultVariables === "object") {
                    options = f.extend({}, o.defaultVariables, options)
                }
                if (potentialKeys === undefined || potentialKeys === null || potentialKeys === "") return "";
                if (typeof potentialKeys === "number") {
                    potentialKeys = String(potentialKeys)
                }
                if (typeof potentialKeys === "string") {
                    potentialKeys = [potentialKeys]
                }
                var key = potentialKeys[0];
                if (potentialKeys.length > 1) {
                    for (var i = 0; i < potentialKeys.length; i++) {
                        key = potentialKeys[i];
                        if (exists(key, options)) {
                            break
                        }
                    }
                }
                var notFound = _getDefaultValue(key, options),
                    found = _find(key, options),
                    lngs = options.lng ? f.toLanguages(options.lng, options.fallbackLng) : languages,
                    ns = options.ns || o.ns.defaultNs,
                    parts;
                if (key.indexOf(o.nsseparator) > -1) {
                    parts = key.split(o.nsseparator);
                    ns = parts[0];
                    key = parts[1]
                }
                if (found === undefined && o.sendMissing && typeof o.missingKeyHandler === "function") {
                    if (options.lng) {
                        o.missingKeyHandler(lngs[0], ns, key, notFound, lngs)
                    } else {
                        o.missingKeyHandler(o.lng, ns, key, notFound, lngs)
                    }
                }
                var postProcessorsToApply;
                if (typeof o.postProcess === "string" && o.postProcess !== "") {
                    postProcessorsToApply = [o.postProcess]
                } else if (typeof o.postProcess === "array" || typeof o.postProcess === "object") {
                    postProcessorsToApply = o.postProcess
                } else {
                    postProcessorsToApply = []
                }
                if (typeof options.postProcess === "string" && options.postProcess !== "") {
                    postProcessorsToApply = postProcessorsToApply.concat([options.postProcess])
                } else if (typeof options.postProcess === "array" || typeof options.postProcess === "object") {
                    postProcessorsToApply = postProcessorsToApply.concat(options.postProcess)
                }
                if (found !== undefined && postProcessorsToApply.length) {
                    postProcessorsToApply.forEach(function(postProcessor) {
                        if (postProcessors[postProcessor]) {
                            found = postProcessors[postProcessor](found, key, options)
                        }
                    })
                }
                var splitNotFound = notFound;
                if (notFound.indexOf(o.nsseparator) > -1) {
                    parts = notFound.split(o.nsseparator);
                    splitNotFound = parts[1]
                }
                if (splitNotFound === key && o.parseMissingKey) {
                    notFound = o.parseMissingKey(notFound)
                }
                if (found === undefined) {
                    notFound = applyReplacement(notFound, options);
                    notFound = applyReuse(notFound, options);
                    if (postProcessorsToApply.length) {
                        var val = _getDefaultValue(key, options);
                        postProcessorsToApply.forEach(function(postProcessor) {
                            if (postProcessors[postProcessor]) {
                                found = postProcessors[postProcessor](val, key, options)
                            }
                        })
                    }
                }
                return found !== undefined ? found : notFound
            }

            function _find(key, options) {
                options = options || {};
                var optionWithoutCount, translated, notFound = _getDefaultValue(key, options),
                    lngs = languages;
                if (!resStore) {
                    return notFound
                }
                if (lngs[0].toLowerCase() === "cimode") return notFound;
                if (options.lngs) lngs = options.lngs;
                if (options.lng) {
                    lngs = f.toLanguages(options.lng, options.fallbackLng);
                    if (!resStore[lngs[0]]) {
                        var oldAsync = o.getAsync;
                        o.getAsync = false;
                        i18n.sync.load(lngs, o, function(err, store) {
                            f.extend(resStore, store);
                            o.getAsync = oldAsync
                        })
                    }
                }
                var ns = options.ns || o.ns.defaultNs;
                if (key.indexOf(o.nsseparator) > -1) {
                    var parts = key.split(o.nsseparator);
                    ns = parts[0];
                    key = parts[1]
                }
                if (hasContext(options)) {
                    optionWithoutCount = f.extend({}, options);
                    delete optionWithoutCount.context;
                    optionWithoutCount.defaultValue = o.contextNotFound;
                    var contextKey = ns + o.nsseparator + key + "_" + options.context;
                    translated = translate(contextKey, optionWithoutCount);
                    if (translated != o.contextNotFound) {
                        return applyReplacement(translated, {
                            context: options.context
                        })
                    }
                }
                if (needsPlural(options, lngs[0])) {
                    optionWithoutCount = f.extend({
                        lngs: [lngs[0]]
                    }, options);
                    delete optionWithoutCount.count;
                    optionWithoutCount._origLng = optionWithoutCount._origLng || optionWithoutCount.lng || lngs[0];
                    delete optionWithoutCount.lng;
                    optionWithoutCount.defaultValue = o.pluralNotFound;
                    var pluralKey;
                    if (!pluralExtensions.needsPlural(lngs[0], options.count)) {
                        pluralKey = ns + o.nsseparator + key
                    } else {
                        pluralKey = ns + o.nsseparator + key + o.pluralSuffix;
                        var pluralExtension = pluralExtensions.get(lngs[0], options.count);
                        if (pluralExtension >= 0) {
                            pluralKey = pluralKey + "_" + pluralExtension
                        } else if (pluralExtension === 1) {
                            pluralKey = ns + o.nsseparator + key
                        }
                    }
                    translated = translate(pluralKey, optionWithoutCount);
                    if (translated != o.pluralNotFound) {
                        return applyReplacement(translated, {
                            count: options.count,
                            interpolationPrefix: options.interpolationPrefix,
                            interpolationSuffix: options.interpolationSuffix
                        })
                    } else if (lngs.length > 1) {
                        var clone = lngs.slice();
                        clone.shift();
                        options = f.extend(options, {
                            lngs: clone
                        });
                        options._origLng = optionWithoutCount._origLng;
                        delete options.lng;
                        translated = translate(ns + o.nsseparator + key, options);
                        if (translated != o.pluralNotFound) return translated
                    } else {
                        optionWithoutCount.lng = optionWithoutCount._origLng;
                        delete optionWithoutCount._origLng;
                        translated = translate(ns + o.nsseparator + key, optionWithoutCount);
                        return applyReplacement(translated, {
                            count: options.count,
                            interpolationPrefix: options.interpolationPrefix,
                            interpolationSuffix: options.interpolationSuffix
                        })
                    }
                }
                if (needsIndefiniteArticle(options)) {
                    var optionsWithoutIndef = f.extend({}, options);
                    delete optionsWithoutIndef.indefinite_article;
                    optionsWithoutIndef.defaultValue = o.indefiniteNotFound;
                    var indefiniteKey = ns + o.nsseparator + key + (options.count && !needsPlural(options, lngs[0]) || !options.count ? o.indefiniteSuffix : "");
                    translated = translate(indefiniteKey, optionsWithoutIndef);
                    if (translated != o.indefiniteNotFound) {
                        return translated
                    }
                }
                var found;
                var keys = key.split(o.keyseparator);
                for (var i = 0, len = lngs.length; i < len; i++) {
                    if (found !== undefined) break;
                    var l = lngs[i];
                    var x = 0;
                    var value = resStore[l] && resStore[l][ns];
                    while (keys[x]) {
                        value = value && value[keys[x]];
                        x++
                    }
                    if (value !== undefined && (!o.showKeyIfEmpty || value !== "")) {
                        var valueType = Object.prototype.toString.apply(value);
                        if (typeof value === "string") {
                            value = applyReplacement(value, options);
                            value = applyReuse(value, options)
                        } else if (valueType === "[object Array]" && !o.returnObjectTrees && !options.returnObjectTrees) {
                            value = value.join("\n");
                            value = applyReplacement(value, options);
                            value = applyReuse(value, options)
                        } else if (value === null && o.fallbackOnNull === true) {
                            value = undefined
                        } else if (value !== null) {
                            if (!o.returnObjectTrees && !options.returnObjectTrees) {
                                if (o.objectTreeKeyHandler && typeof o.objectTreeKeyHandler == "function") {
                                    value = o.objectTreeKeyHandler(key, value, l, ns, options)
                                } else {
                                    value = "key '" + ns + ":" + key + " (" + l + ")' " + "returned an object instead of string.";
                                    f.log(value)
                                }
                            } else if (valueType !== "[object Number]" && valueType !== "[object Function]" && valueType !== "[object RegExp]") {
                                var copy = valueType === "[object Array]" ? [] : {};
                                f.each(value, function(m) {
                                    copy[m] = _translate(ns + o.nsseparator + key + o.keyseparator + m, options)
                                });
                                value = copy
                            }
                        }
                        if (typeof value === "string" && value.trim() === "" && o.fallbackOnEmpty === true) value = undefined;
                        found = value
                    }
                }
                if (found === undefined && !options.isFallbackLookup && (o.fallbackToDefaultNS === true || o.fallbackNS && o.fallbackNS.length > 0)) {
                    options.isFallbackLookup = true;
                    if (o.fallbackNS.length) {
                        for (var y = 0, lenY = o.fallbackNS.length; y < lenY; y++) {
                            found = _find(o.fallbackNS[y] + o.nsseparator + key, options);
                            if (found || found === "" && o.fallbackOnEmpty === false) {
                                var foundValue = found.indexOf(o.nsseparator) > -1 ? found.split(o.nsseparator)[1] : found,
                                    notFoundValue = notFound.indexOf(o.nsseparator) > -1 ? notFound.split(o.nsseparator)[1] : notFound;
                                if (foundValue !== notFoundValue) break
                            }
                        }
                    } else {
                        options.ns = o.ns.defaultNs;
                        found = _find(key, options)
                    }
                    options.isFallbackLookup = false
                }
                return found
            }

            function detectLanguage() {
                var detectedLng;
                var whitelist = o.lngWhitelist || [];
                var userLngChoices = [];
                var qsParm = [];
                if (typeof window !== "undefined") {
                    (function() {
                        var query = window.location.search.substring(1);
                        var params = query.split("&");
                        for (var i = 0; i < params.length; i++) {
                            var pos = params[i].indexOf("=");
                            if (pos > 0) {
                                var key = params[i].substring(0, pos);
                                if (key == o.detectLngQS) {
                                    userLngChoices.push(params[i].substring(pos + 1))
                                }
                            }
                        }
                    })()
                }
                if (o.useCookie && typeof document !== "undefined") {
                    var c = f.cookie.read(o.cookieName);
                    if (c) userLngChoices.push(c)
                }
                if (o.detectLngFromLocalStorage && typeof window !== "undefined" && window.localStorage) {
                    var lang = f.localStorage.getItem("i18next_lng");
                    if (lang) {
                        userLngChoices.push(lang)
                    }
                }
                if (typeof navigator !== "undefined") {
                    if (navigator.languages) {
                        for (var i = 0; i < navigator.languages.length; i++) {
                            userLngChoices.push(navigator.languages[i])
                        }
                    }
                    if (navigator.userLanguage) {
                        userLngChoices.push(navigator.userLanguage)
                    }
                    if (navigator.language) {
                        userLngChoices.push(navigator.language)
                    }
                }(function() {
                    for (var i = 0; i < userLngChoices.length; i++) {
                        var lng = userLngChoices[i];
                        if (lng.indexOf("-") > -1) {
                            var parts = lng.split("-");
                            lng = o.lowerCaseLng ? parts[0].toLowerCase() + "-" + parts[1].toLowerCase() : parts[0].toLowerCase() + "-" + parts[1].toUpperCase()
                        }
                        if (whitelist.length === 0 || whitelist.indexOf(lng) > -1) {
                            detectedLng = lng;
                            break
                        }
                    }
                })();
                if (!detectedLng) {
                    detectedLng = o.fallbackLng[0]
                }
                return detectedLng
            }
            var _rules = [
                ["ach", "Acholi", [1, 2], 1],
                ["af", "Afrikaans", [1, 2], 2],
                ["ak", "Akan", [1, 2], 1],
                ["am", "Amharic", [1, 2], 1],
                ["an", "Aragonese", [1, 2], 2],
                ["ar", "Arabic", [0, 1, 2, 3, 11, 100], 5],
                ["arn", "Mapudungun", [1, 2], 1],
                ["ast", "Asturian", [1, 2], 2],
                ["ay", "Aymará", [1], 3],
                ["az", "Azerbaijani", [1, 2], 2],
                ["be", "Belarusian", [1, 2, 5], 4],
                ["bg", "Bulgarian", [1, 2], 2],
                ["bn", "Bengali", [1, 2], 2],
                ["bo", "Tibetan", [1], 3],
                ["br", "Breton", [1, 2], 1],
                ["bs", "Bosnian", [1, 2, 5], 4],
                ["ca", "Catalan", [1, 2], 2],
                ["cgg", "Chiga", [1], 3],
                ["cs", "Czech", [1, 2, 5], 6],
                ["csb", "Kashubian", [1, 2, 5], 7],
                ["cy", "Welsh", [1, 2, 3, 8], 8],
                ["da", "Danish", [1, 2], 2],
                ["de", "German", [1, 2], 2],
                ["dev", "Development Fallback", [1, 2], 2],
                ["dz", "Dzongkha", [1], 3],
                ["el", "Greek", [1, 2], 2],
                ["en", "English", [1, 2], 2],
                ["eo", "Esperanto", [1, 2], 2],
                ["es", "Spanish", [1, 2], 2],
                ["es_ar", "Argentinean Spanish", [1, 2], 2],
                ["et", "Estonian", [1, 2], 2],
                ["eu", "Basque", [1, 2], 2],
                ["fa", "Persian", [1], 3],
                ["fi", "Finnish", [1, 2], 2],
                ["fil", "Filipino", [1, 2], 1],
                ["fo", "Faroese", [1, 2], 2],
                ["fr", "French", [1, 2], 9],
                ["fur", "Friulian", [1, 2], 2],
                ["fy", "Frisian", [1, 2], 2],
                ["ga", "Irish", [1, 2, 3, 7, 11], 10],
                ["gd", "Scottish Gaelic", [1, 2, 3, 20], 11],
                ["gl", "Galician", [1, 2], 2],
                ["gu", "Gujarati", [1, 2], 2],
                ["gun", "Gun", [1, 2], 1],
                ["ha", "Hausa", [1, 2], 2],
                ["he", "Hebrew", [1, 2], 2],
                ["hi", "Hindi", [1, 2], 2],
                ["hr", "Croatian", [1, 2, 5], 4],
                ["hu", "Hungarian", [1, 2], 2],
                ["hy", "Armenian", [1, 2], 2],
                ["ia", "Interlingua", [1, 2], 2],
                ["id", "Indonesian", [1], 3],
                ["is", "Icelandic", [1, 2], 12],
                ["it", "Italian", [1, 2], 2],
                ["ja", "Japanese", [1], 3],
                ["jbo", "Lojban", [1], 3],
                ["jv", "Javanese", [0, 1], 13],
                ["ka", "Georgian", [1], 3],
                ["kk", "Kazakh", [1], 3],
                ["km", "Khmer", [1], 3],
                ["kn", "Kannada", [1, 2], 2],
                ["ko", "Korean", [1], 3],
                ["ku", "Kurdish", [1, 2], 2],
                ["kw", "Cornish", [1, 2, 3, 4], 14],
                ["ky", "Kyrgyz", [1], 3],
                ["lb", "Letzeburgesch", [1, 2], 2],
                ["ln", "Lingala", [1, 2], 1],
                ["lo", "Lao", [1], 3],
                ["lt", "Lithuanian", [1, 2, 10], 15],
                ["lv", "Latvian", [1, 2, 0], 16],
                ["mai", "Maithili", [1, 2], 2],
                ["mfe", "Mauritian Creole", [1, 2], 1],
                ["mg", "Malagasy", [1, 2], 1],
                ["mi", "Maori", [1, 2], 1],
                ["mk", "Macedonian", [1, 2], 17],
                ["ml", "Malayalam", [1, 2], 2],
                ["mn", "Mongolian", [1, 2], 2],
                ["mnk", "Mandinka", [0, 1, 2], 18],
                ["mr", "Marathi", [1, 2], 2],
                ["ms", "Malay", [1], 3],
                ["mt", "Maltese", [1, 2, 11, 20], 19],
                ["nah", "Nahuatl", [1, 2], 2],
                ["nap", "Neapolitan", [1, 2], 2],
                ["nb", "Norwegian Bokmal", [1, 2], 2],
                ["ne", "Nepali", [1, 2], 2],
                ["nl", "Dutch", [1, 2], 2],
                ["nn", "Norwegian Nynorsk", [1, 2], 2],
                ["no", "Norwegian", [1, 2], 2],
                ["nso", "Northern Sotho", [1, 2], 2],
                ["oc", "Occitan", [1, 2], 1],
                ["or", "Oriya", [2, 1], 2],
                ["pa", "Punjabi", [1, 2], 2],
                ["pap", "Papiamento", [1, 2], 2],
                ["pl", "Polish", [1, 2, 5], 7],
                ["pms", "Piemontese", [1, 2], 2],
                ["ps", "Pashto", [1, 2], 2],
                ["pt", "Portuguese", [1, 2], 2],
                ["pt_br", "Brazilian Portuguese", [1, 2], 2],
                ["rm", "Romansh", [1, 2], 2],
                ["ro", "Romanian", [1, 2, 20], 20],
                ["ru", "Russian", [1, 2, 5], 4],
                ["sah", "Yakut", [1], 3],
                ["sco", "Scots", [1, 2], 2],
                ["se", "Northern Sami", [1, 2], 2],
                ["si", "Sinhala", [1, 2], 2],
                ["sk", "Slovak", [1, 2, 5], 6],
                ["sl", "Slovenian", [5, 1, 2, 3], 21],
                ["so", "Somali", [1, 2], 2],
                ["son", "Songhay", [1, 2], 2],
                ["sq", "Albanian", [1, 2], 2],
                ["sr", "Serbian", [1, 2, 5], 4],
                ["su", "Sundanese", [1], 3],
                ["sv", "Swedish", [1, 2], 2],
                ["sw", "Swahili", [1, 2], 2],
                ["ta", "Tamil", [1, 2], 2],
                ["te", "Telugu", [1, 2], 2],
                ["tg", "Tajik", [1, 2], 1],
                ["th", "Thai", [1], 3],
                ["ti", "Tigrinya", [1, 2], 1],
                ["tk", "Turkmen", [1, 2], 2],
                ["tr", "Turkish", [1, 2], 1],
                ["tt", "Tatar", [1], 3],
                ["ug", "Uyghur", [1], 3],
                ["uk", "Ukrainian", [1, 2, 5], 4],
                ["ur", "Urdu", [1, 2], 2],
                ["uz", "Uzbek", [1, 2], 1],
                ["vi", "Vietnamese", [1], 3],
                ["wa", "Walloon", [1, 2], 1],
                ["wo", "Wolof", [1], 3],
                ["yo", "Yoruba", [1, 2], 2],
                ["zh", "Chinese", [1], 3]
            ];
            var _rulesPluralsTypes = {
                1: function(n) {
                    return Number(n > 1)
                },
                2: function(n) {
                    return Number(n != 1)
                },
                3: function(n) {
                    return 0
                },
                4: function(n) {
                    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2)
                },
                5: function(n) {
                    return Number(n === 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5)
                },
                6: function(n) {
                    return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2)
                },
                7: function(n) {
                    return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2)
                },
                8: function(n) {
                    return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3)
                },
                9: function(n) {
                    return Number(n >= 2)
                },
                10: function(n) {
                    return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4)
                },
                11: function(n) {
                    return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3)
                },
                12: function(n) {
                    return Number(n % 10 != 1 || n % 100 == 11)
                },
                13: function(n) {
                    return Number(n !== 0)
                },
                14: function(n) {
                    return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3)
                },
                15: function(n) {
                    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2)
                },
                16: function(n) {
                    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2)
                },
                17: function(n) {
                    return Number(n == 1 || n % 10 == 1 ? 0 : 1)
                },
                18: function(n) {
                    return Number(0 ? 0 : n == 1 ? 1 : 2)
                },
                19: function(n) {
                    return Number(n == 1 ? 0 : n === 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3)
                },
                20: function(n) {
                    return Number(n == 1 ? 0 : n === 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2)
                },
                21: function(n) {
                    return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0)
                }
            };
            var pluralExtensions = {
                rules: function() {
                    var l, rules = {};
                    for (l = _rules.length; l--;) {
                        rules[_rules[l][0]] = {
                            name: _rules[l][1],
                            numbers: _rules[l][2],
                            plurals: _rulesPluralsTypes[_rules[l][3]]
                        }
                    }
                    return rules
                }(),
                addRule: function(lng, obj) {
                    pluralExtensions.rules[lng] = obj
                },
                setCurrentLng: function(lng) {
                    if (!pluralExtensions.currentRule || pluralExtensions.currentRule.lng !== lng) {
                        var parts = lng.split("-");
                        pluralExtensions.currentRule = {
                            lng: lng,
                            rule: pluralExtensions.rules[parts[0]]
                        }
                    }
                },
                needsPlural: function(lng, count) {
                    var parts = lng.split("-");
                    var ext;
                    if (pluralExtensions.currentRule && pluralExtensions.currentRule.lng === lng) {
                        ext = pluralExtensions.currentRule.rule
                    } else {
                        ext = pluralExtensions.rules[parts[f.getCountyIndexOfLng(lng)]]
                    }
                    if (ext && ext.numbers.length <= 1) {
                        return false
                    } else {
                        return this.get(lng, count) !== 1
                    }
                },
                get: function(lng, count) {
                    var parts = lng.split("-");

                    function getResult(l, c) {
                        var ext;
                        if (pluralExtensions.currentRule && pluralExtensions.currentRule.lng === lng) {
                            ext = pluralExtensions.currentRule.rule
                        } else {
                            ext = pluralExtensions.rules[l]
                        }
                        if (ext) {
                            var i;
                            if (ext.noAbs) {
                                i = ext.plurals(c)
                            } else {
                                i = ext.plurals(Math.abs(c))
                            }
                            var number = ext.numbers[i];
                            if (ext.numbers.length === 2 && ext.numbers[0] === 1) {
                                if (number === 2) {
                                    number = -1
                                } else if (number === 1) {
                                    number = 1
                                }
                            }
                            return number
                        } else {
                            return c === 1 ? "1" : "-1"
                        }
                    }
                    return getResult(parts[f.getCountyIndexOfLng(lng)], count)
                }
            };
            var postProcessors = {};
            var addPostProcessor = function(name, fc) {
                postProcessors[name] = fc
            };
            var sprintf = function() {
                function get_type(variable) {
                    return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase()
                }

                function str_repeat(input, multiplier) {
                    for (var output = []; multiplier > 0; output[--multiplier] = input) {}
                    return output.join("")
                }
                var str_format = function() {
                    if (!str_format.cache.hasOwnProperty(arguments[0])) {
                        str_format.cache[arguments[0]] = str_format.parse(arguments[0])
                    }
                    return str_format.format.call(null, str_format.cache[arguments[0]], arguments)
                };
                str_format.format = function(parse_tree, argv) {
                    var cursor = 1,
                        tree_length = parse_tree.length,
                        node_type = "",
                        arg, output = [],
                        i, k, match, pad, pad_character, pad_length;
                    for (i = 0; i < tree_length; i++) {
                        node_type = get_type(parse_tree[i]);
                        if (node_type === "string") {
                            output.push(parse_tree[i])
                        } else if (node_type === "array") {
                            match = parse_tree[i];
                            if (match[2]) {
                                arg = argv[cursor];
                                for (k = 0; k < match[2].length; k++) {
                                    if (!arg.hasOwnProperty(match[2][k])) {
                                        throw sprintf('[sprintf] property "%s" does not exist', match[2][k])
                                    }
                                    arg = arg[match[2][k]]
                                }
                            } else if (match[1]) {
                                arg = argv[match[1]]
                            } else {
                                arg = argv[cursor++]
                            }
                            if (/[^s]/.test(match[8]) && get_type(arg) != "number") {
                                throw sprintf("[sprintf] expecting number but found %s", get_type(arg))
                            }
                            switch (match[8]) {
                                case "b":
                                    arg = arg.toString(2);
                                    break;
                                case "c":
                                    arg = String.fromCharCode(arg);
                                    break;
                                case "d":
                                    arg = parseInt(arg, 10);
                                    break;
                                case "e":
                                    arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential();
                                    break;
                                case "f":
                                    arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg);
                                    break;
                                case "o":
                                    arg = arg.toString(8);
                                    break;
                                case "s":
                                    arg = (arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg;
                                    break;
                                case "u":
                                    arg = Math.abs(arg);
                                    break;
                                case "x":
                                    arg = arg.toString(16);
                                    break;
                                case "X":
                                    arg = arg.toString(16).toUpperCase();
                                    break
                            }
                            arg = /[def]/.test(match[8]) && match[3] && arg >= 0 ? "+" + arg : arg;
                            pad_character = match[4] ? match[4] == "0" ? "0" : match[4].charAt(1) : " ";
                            pad_length = match[6] - String(arg).length;
                            pad = match[6] ? str_repeat(pad_character, pad_length) : "";
                            output.push(match[5] ? arg + pad : pad + arg)
                        }
                    }
                    return output.join("")
                };
                str_format.cache = {};
                str_format.parse = function(fmt) {
                    var _fmt = fmt,
                        match = [],
                        parse_tree = [],
                        arg_names = 0;
                    while (_fmt) {
                        if ((match = /^[^\x25]+/.exec(_fmt)) !== null) {
                            parse_tree.push(match[0])
                        } else if ((match = /^\x25{2}/.exec(_fmt)) !== null) {
                            parse_tree.push("%")
                        } else if ((match = /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {
                            if (match[2]) {
                                arg_names |= 1;
                                var field_list = [],
                                    replacement_field = match[2],
                                    field_match = [];
                                if ((field_match = /^([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
                                    field_list.push(field_match[1]);
                                    while ((replacement_field = replacement_field.substring(field_match[0].length)) !== "") {
                                        if ((field_match = /^\.([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
                                            field_list.push(field_match[1])
                                        } else if ((field_match = /^\[(\d+)\]/.exec(replacement_field)) !== null) {
                                            field_list.push(field_match[1])
                                        } else {
                                            throw "[sprintf] huh?"
                                        }
                                    }
                                } else {
                                    throw "[sprintf] huh?"
                                }
                                match[2] = field_list
                            } else {
                                arg_names |= 2
                            }
                            if (arg_names === 3) {
                                throw "[sprintf] mixing positional and named placeholders is not (yet) supported"
                            }
                            parse_tree.push(match)
                        } else {
                            throw "[sprintf] huh?"
                        }
                        _fmt = _fmt.substring(match[0].length)
                    }
                    return parse_tree
                };
                return str_format
            }();
            var vsprintf = function(fmt, argv) {
                argv.unshift(fmt);
                return sprintf.apply(null, argv)
            };
            addPostProcessor("sprintf", function(val, key, opts) {
                if (!opts.sprintf) return val;
                if (Object.prototype.toString.apply(opts.sprintf) === "[object Array]") {
                    return vsprintf(val, opts.sprintf)
                } else if (typeof opts.sprintf === "object") {
                    return sprintf(val, opts.sprintf)
                }
                return val
            });
            i18n.init = init;
            i18n.isInitialized = isInitialized;
            i18n.setLng = setLng;
            i18n.preload = preload;
            i18n.addResourceBundle = addResourceBundle;
            i18n.hasResourceBundle = hasResourceBundle;
            i18n.getResourceBundle = getResourceBundle;
            i18n.addResource = addResource;
            i18n.addResources = addResources;
            i18n.removeResourceBundle = removeResourceBundle;
            i18n.loadNamespace = loadNamespace;
            i18n.loadNamespaces = loadNamespaces;
            i18n.setDefaultNamespace = setDefaultNamespace;
            i18n.t = translate;
            i18n.translate = translate;
            i18n.exists = exists;
            i18n.detectLanguage = f.detectLanguage;
            i18n.pluralExtensions = pluralExtensions;
            i18n.sync = sync;
            i18n.functions = f;
            i18n.lng = lng;
            i18n.addPostProcessor = addPostProcessor;
            i18n.applyReplacement = f.applyReplacement;
            i18n.options = o;
            i18n.noConflict = noConflict
        })(typeof exports === "undefined" ? window : exports)
    }, {}],
    36: [function(require, module, exports) {
        (function(global, factory) {
            if (typeof module === "object" && typeof module.exports === "object") {
                module.exports = global.document ? factory(global, true) : function(w) {
                    if (!w.document) {
                        throw new Error("jQuery requires a window with a document")
                    }
                    return factory(w)
                }
            } else {
                factory(global)
            }
        })(typeof window !== "undefined" ? window : this, function(window, noGlobal) {
            var arr = [];
            var slice = arr.slice;
            var concat = arr.concat;
            var push = arr.push;
            var indexOf = arr.indexOf;
            var class2type = {};
            var toString = class2type.toString;
            var hasOwn = class2type.hasOwnProperty;
            var support = {};
            var document = window.document,
                version = "2.1.1",
                jQuery = function(selector, context) {
                    return new jQuery.fn.init(selector, context)
                },
                rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
                rmsPrefix = /^-ms-/,
                rdashAlpha = /-([\da-z])/gi,
                fcamelCase = function(all, letter) {
                    return letter.toUpperCase()
                };
            jQuery.fn = jQuery.prototype = {
                jquery: version,
                constructor: jQuery,
                selector: "",
                length: 0,
                toArray: function() {
                    return slice.call(this)
                },
                get: function(num) {
                    return num != null ? num < 0 ? this[num + this.length] : this[num] : slice.call(this)
                },
                pushStack: function(elems) {
                    var ret = jQuery.merge(this.constructor(), elems);
                    ret.prevObject = this;
                    ret.context = this.context;
                    return ret
                },
                each: function(callback, args) {
                    return jQuery.each(this, callback, args)
                },
                map: function(callback) {
                    return this.pushStack(jQuery.map(this, function(elem, i) {
                        return callback.call(elem, i, elem)
                    }))
                },
                slice: function() {
                    return this.pushStack(slice.apply(this, arguments))
                },
                first: function() {
                    return this.eq(0)
                },
                last: function() {
                    return this.eq(-1)
                },
                eq: function(i) {
                    var len = this.length,
                        j = +i + (i < 0 ? len : 0);
                    return this.pushStack(j >= 0 && j < len ? [this[j]] : [])
                },
                end: function() {
                    return this.prevObject || this.constructor(null)
                },
                push: push,
                sort: arr.sort,
                splice: arr.splice
            };
            jQuery.extend = jQuery.fn.extend = function() {
                var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {},
                    i = 1,
                    length = arguments.length,
                    deep = false;
                if (typeof target === "boolean") {
                    deep = target;
                    target = arguments[i] || {};
                    i++
                }
                if (typeof target !== "object" && !jQuery.isFunction(target)) {
                    target = {}
                }
                if (i === length) {
                    target = this;
                    i--
                }
                for (; i < length; i++) {
                    if ((options = arguments[i]) != null) {
                        for (name in options) {
                            src = target[name];
                            copy = options[name];
                            if (target === copy) {
                                continue
                            }
                            if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                                if (copyIsArray) {
                                    copyIsArray = false;
                                    clone = src && jQuery.isArray(src) ? src : []
                                } else {
                                    clone = src && jQuery.isPlainObject(src) ? src : {}
                                }
                                target[name] = jQuery.extend(deep, clone, copy)
                            } else if (copy !== undefined) {
                                target[name] = copy
                            }
                        }
                    }
                }
                return target
            };
            jQuery.extend({
                expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
                isReady: true,
                error: function(msg) {
                    throw new Error(msg)
                },
                noop: function() {},
                isFunction: function(obj) {
                    return jQuery.type(obj) === "function"
                },
                isArray: Array.isArray,
                isWindow: function(obj) {
                    return obj != null && obj === obj.window
                },
                isNumeric: function(obj) {
                    return !jQuery.isArray(obj) && obj - parseFloat(obj) >= 0
                },
                isPlainObject: function(obj) {
                    if (jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
                        return false
                    }
                    if (obj.constructor && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
                        return false
                    }
                    return true
                },
                isEmptyObject: function(obj) {
                    var name;
                    for (name in obj) {
                        return false
                    }
                    return true
                },
                type: function(obj) {
                    if (obj == null) {
                        return obj + ""
                    }
                    return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj
                },
                globalEval: function(code) {
                    var script, indirect = eval;
                    code = jQuery.trim(code);
                    if (code) {
                        if (code.indexOf("use strict") === 1) {
                            script = document.createElement("script");
                            script.text = code;
                            document.head.appendChild(script).parentNode.removeChild(script)
                        } else {
                            indirect(code)
                        }
                    }
                },
                camelCase: function(string) {
                    return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase)
                },
                nodeName: function(elem, name) {
                    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase()
                },
                each: function(obj, callback, args) {
                    var value, i = 0,
                        length = obj.length,
                        isArray = isArraylike(obj);
                    if (args) {
                        if (isArray) {
                            for (; i < length; i++) {
                                value = callback.apply(obj[i], args);
                                if (value === false) {
                                    break
                                }
                            }
                        } else {
                            for (i in obj) {
                                value = callback.apply(obj[i], args);
                                if (value === false) {
                                    break
                                }
                            }
                        }
                    } else {
                        if (isArray) {
                            for (; i < length; i++) {
                                value = callback.call(obj[i], i, obj[i]);
                                if (value === false) {
                                    break
                                }
                            }
                        } else {
                            for (i in obj) {
                                value = callback.call(obj[i], i, obj[i]);
                                if (value === false) {
                                    break
                                }
                            }
                        }
                    }
                    return obj
                },
                trim: function(text) {
                    return text == null ? "" : (text + "").replace(rtrim, "")
                },
                makeArray: function(arr, results) {
                    var ret = results || [];
                    if (arr != null) {
                        if (isArraylike(Object(arr))) {
                            jQuery.merge(ret, typeof arr === "string" ? [arr] : arr)
                        } else {
                            push.call(ret, arr)
                        }
                    }
                    return ret
                },
                inArray: function(elem, arr, i) {
                    return arr == null ? -1 : indexOf.call(arr, elem, i)
                },
                merge: function(first, second) {
                    var len = +second.length,
                        j = 0,
                        i = first.length;
                    for (; j < len; j++) {
                        first[i++] = second[j]
                    }
                    first.length = i;
                    return first
                },
                grep: function(elems, callback, invert) {
                    var callbackInverse, matches = [],
                        i = 0,
                        length = elems.length,
                        callbackExpect = !invert;
                    for (; i < length; i++) {
                        callbackInverse = !callback(elems[i], i);
                        if (callbackInverse !== callbackExpect) {
                            matches.push(elems[i])
                        }
                    }
                    return matches
                },
                map: function(elems, callback, arg) {
                    var value, i = 0,
                        length = elems.length,
                        isArray = isArraylike(elems),
                        ret = [];
                    if (isArray) {
                        for (; i < length; i++) {
                            value = callback(elems[i], i, arg);
                            if (value != null) {
                                ret.push(value)
                            }
                        }
                    } else {
                        for (i in elems) {
                            value = callback(elems[i], i, arg);
                            if (value != null) {
                                ret.push(value)
                            }
                        }
                    }
                    return concat.apply([], ret)
                },
                guid: 1,
                proxy: function(fn, context) {
                    var tmp, args, proxy;
                    if (typeof context === "string") {
                        tmp = fn[context];
                        context = fn;
                        fn = tmp
                    }
                    if (!jQuery.isFunction(fn)) {
                        return undefined
                    }
                    args = slice.call(arguments, 2);
                    proxy = function() {
                        return fn.apply(context || this, args.concat(slice.call(arguments)))
                    };
                    proxy.guid = fn.guid = fn.guid || jQuery.guid++;
                    return proxy
                },
                now: Date.now,
                support: support
            });
            jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
                class2type["[object " + name + "]"] = name.toLowerCase()
            });

            function isArraylike(obj) {
                var length = obj.length,
                    type = jQuery.type(obj);
                if (type === "function" || jQuery.isWindow(obj)) {
                    return false
                }
                if (obj.nodeType === 1 && length) {
                    return true
                }
                return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj
            }
            var Sizzle = function(window) {
                var i, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = "sizzle" + -new Date,
                    preferredDoc = window.document,
                    dirruns = 0,
                    done = 0,
                    classCache = createCache(),
                    tokenCache = createCache(),
                    compilerCache = createCache(),
                    sortOrder = function(a, b) {
                        if (a === b) {
                            hasDuplicate = true
                        }
                        return 0
                    },
                    strundefined = typeof undefined,
                    MAX_NEGATIVE = 1 << 31,
                    hasOwn = {}.hasOwnProperty,
                    arr = [],
                    pop = arr.pop,
                    push_native = arr.push,
                    push = arr.push,
                    slice = arr.slice,
                    indexOf = arr.indexOf || function(elem) {
                        var i = 0,
                            len = this.length;
                        for (; i < len; i++) {
                            if (this[i] === elem) {
                                return i
                            }
                        }
                        return -1
                    },
                    booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
                    whitespace = "[\\x20\\t\\r\\n\\f]",
                    characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
                    identifier = characterEncoding.replace("w", "w#"),
                    attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace + "*([*^$|!~]?=)" + whitespace + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
                    pseudos = ":(" + characterEncoding + ")(?:\\((" + "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + ".*" + ")\\)|)",
                    rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
                    rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
                    rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
                    rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
                    rpseudo = new RegExp(pseudos),
                    ridentifier = new RegExp("^" + identifier + "$"),
                    matchExpr = {
                        ID: new RegExp("^#(" + characterEncoding + ")"),
                        CLASS: new RegExp("^\\.(" + characterEncoding + ")"),
                        TAG: new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
                        ATTR: new RegExp("^" + attributes),
                        PSEUDO: new RegExp("^" + pseudos),
                        CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
                        bool: new RegExp("^(?:" + booleans + ")$", "i"),
                        needsContext: new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
                    },
                    rinputs = /^(?:input|select|textarea|button)$/i,
                    rheader = /^h\d$/i,
                    rnative = /^[^{]+\{\s*\[native \w/,
                    rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
                    rsibling = /[+~]/,
                    rescape = /'|\\/g,
                    runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
                    funescape = function(_, escaped, escapedWhitespace) {
                        var high = "0x" + escaped - 65536;
                        return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320)
                    };
                try {
                    push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
                    arr[preferredDoc.childNodes.length].nodeType
                } catch (e) {
                    push = {
                        apply: arr.length ? function(target, els) {
                            push_native.apply(target, slice.call(els))
                        } : function(target, els) {
                            var j = target.length,
                                i = 0;
                            while (target[j++] = els[i++]) {}
                            target.length = j - 1
                        }
                    }
                }

                function Sizzle(selector, context, results, seed) {
                    var match, elem, m, nodeType, i, groups, old, nid, newContext, newSelector;
                    if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
                        setDocument(context)
                    }
                    context = context || document;
                    results = results || [];
                    if (!selector || typeof selector !== "string") {
                        return results
                    }
                    if ((nodeType = context.nodeType) !== 1 && nodeType !== 9) {
                        return []
                    }
                    if (documentIsHTML && !seed) {
                        if (match = rquickExpr.exec(selector)) {
                            if (m = match[1]) {
                                if (nodeType === 9) {
                                    elem = context.getElementById(m);
                                    if (elem && elem.parentNode) {
                                        if (elem.id === m) {
                                            results.push(elem);
                                            return results
                                        }
                                    } else {
                                        return results
                                    }
                                } else {
                                    if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
                                        results.push(elem);
                                        return results
                                    }
                                }
                            } else if (match[2]) {
                                push.apply(results, context.getElementsByTagName(selector));
                                return results
                            } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
                                push.apply(results, context.getElementsByClassName(m));
                                return results
                            }
                        }
                        if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                            nid = old = expando;
                            newContext = context;
                            newSelector = nodeType === 9 && selector;
                            if (nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
                                groups = tokenize(selector);
                                if (old = context.getAttribute("id")) {
                                    nid = old.replace(rescape, "\\$&")
                                } else {
                                    context.setAttribute("id", nid)
                                }
                                nid = "[id='" + nid + "'] ";
                                i = groups.length;
                                while (i--) {
                                    groups[i] = nid + toSelector(groups[i])
                                }
                                newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                                newSelector = groups.join(",")
                            }
                            if (newSelector) {
                                try {
                                    push.apply(results, newContext.querySelectorAll(newSelector));
                                    return results
                                } catch (qsaError) {} finally {
                                    if (!old) {
                                        context.removeAttribute("id")
                                    }
                                }
                            }
                        }
                    }
                    return select(selector.replace(rtrim, "$1"), context, results, seed)
                }

                function createCache() {
                    var keys = [];

                    function cache(key, value) {
                        if (keys.push(key + " ") > Expr.cacheLength) {
                            delete cache[keys.shift()]
                        }
                        return cache[key + " "] = value
                    }
                    return cache
                }

                function markFunction(fn) {
                    fn[expando] = true;
                    return fn
                }

                function assert(fn) {
                    var div = document.createElement("div");
                    try {
                        return !!fn(div)
                    } catch (e) {
                        return false
                    } finally {
                        if (div.parentNode) {
                            div.parentNode.removeChild(div)
                        }
                        div = null
                    }
                }

                function addHandle(attrs, handler) {
                    var arr = attrs.split("|"),
                        i = attrs.length;
                    while (i--) {
                        Expr.attrHandle[arr[i]] = handler
                    }
                }

                function siblingCheck(a, b) {
                    var cur = b && a,
                        diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);
                    if (diff) {
                        return diff
                    }
                    if (cur) {
                        while (cur = cur.nextSibling) {
                            if (cur === b) {
                                return -1
                            }
                        }
                    }
                    return a ? 1 : -1
                }

                function createInputPseudo(type) {
                    return function(elem) {
                        var name = elem.nodeName.toLowerCase();
                        return name === "input" && elem.type === type
                    }
                }

                function createButtonPseudo(type) {
                    return function(elem) {
                        var name = elem.nodeName.toLowerCase();
                        return (name === "input" || name === "button") && elem.type === type
                    }
                }

                function createPositionalPseudo(fn) {
                    return markFunction(function(argument) {
                        argument = +argument;
                        return markFunction(function(seed, matches) {
                            var j, matchIndexes = fn([], seed.length, argument),
                                i = matchIndexes.length;
                            while (i--) {
                                if (seed[j = matchIndexes[i]]) {
                                    seed[j] = !(matches[j] = seed[j])
                                }
                            }
                        })
                    })
                }

                function testContext(context) {
                    return context && typeof context.getElementsByTagName !== strundefined && context
                }
                support = Sizzle.support = {};
                isXML = Sizzle.isXML = function(elem) {
                    var documentElement = elem && (elem.ownerDocument || elem).documentElement;
                    return documentElement ? documentElement.nodeName !== "HTML" : false
                };
                setDocument = Sizzle.setDocument = function(node) {
                    var hasCompare, doc = node ? node.ownerDocument || node : preferredDoc,
                        parent = doc.defaultView;
                    if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
                        return document
                    }
                    document = doc;
                    docElem = doc.documentElement;
                    documentIsHTML = !isXML(doc);
                    if (parent && parent !== parent.top) {
                        if (parent.addEventListener) {
                            parent.addEventListener("unload", function() {
                                setDocument()
                            }, false)
                        } else if (parent.attachEvent) {
                            parent.attachEvent("onunload", function() {
                                setDocument()
                            })
                        }
                    }
                    support.attributes = assert(function(div) {
                        div.className = "i";
                        return !div.getAttribute("className")
                    });
                    support.getElementsByTagName = assert(function(div) {
                        div.appendChild(doc.createComment(""));
                        return !div.getElementsByTagName("*").length
                    });
                    support.getElementsByClassName = rnative.test(doc.getElementsByClassName) && assert(function(div) {
                        div.innerHTML = "<div class='a'></div><div class='a i'></div>";
                        div.firstChild.className = "i";
                        return div.getElementsByClassName("i").length === 2
                    });
                    support.getById = assert(function(div) {
                        docElem.appendChild(div).id = expando;
                        return !doc.getElementsByName || !doc.getElementsByName(expando).length
                    });
                    if (support.getById) {
                        Expr.find["ID"] = function(id, context) {
                            if (typeof context.getElementById !== strundefined && documentIsHTML) {
                                var m = context.getElementById(id);
                                return m && m.parentNode ? [m] : []
                            }
                        };
                        Expr.filter["ID"] = function(id) {
                            var attrId = id.replace(runescape, funescape);
                            return function(elem) {
                                return elem.getAttribute("id") === attrId
                            }
                        }
                    } else {
                        delete Expr.find["ID"];
                        Expr.filter["ID"] = function(id) {
                            var attrId = id.replace(runescape, funescape);
                            return function(elem) {
                                var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
                                return node && node.value === attrId
                            }
                        }
                    }
                    Expr.find["TAG"] = support.getElementsByTagName ? function(tag, context) {
                        if (typeof context.getElementsByTagName !== strundefined) {
                            return context.getElementsByTagName(tag)
                        }
                    } : function(tag, context) {
                        var elem, tmp = [],
                            i = 0,
                            results = context.getElementsByTagName(tag);
                        if (tag === "*") {
                            while (elem = results[i++]) {
                                if (elem.nodeType === 1) {
                                    tmp.push(elem)
                                }
                            }
                            return tmp
                        }
                        return results
                    };
                    Expr.find["CLASS"] = support.getElementsByClassName && function(className, context) {
                        if (typeof context.getElementsByClassName !== strundefined && documentIsHTML) {
                            return context.getElementsByClassName(className)
                        }
                    };
                    rbuggyMatches = [];
                    rbuggyQSA = [];
                    if (support.qsa = rnative.test(doc.querySelectorAll)) {
                        assert(function(div) {
                            div.innerHTML = "<select msallowclip=''><option selected=''></option></select>";
                            if (div.querySelectorAll("[msallowclip^='']").length) {
                                rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")")
                            }
                            if (!div.querySelectorAll("[selected]").length) {
                                rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")")
                            }
                            if (!div.querySelectorAll(":checked").length) {
                                rbuggyQSA.push(":checked")
                            }
                        });
                        assert(function(div) {
                            var input = doc.createElement("input");
                            input.setAttribute("type", "hidden");
                            div.appendChild(input).setAttribute("name", "D");
                            if (div.querySelectorAll("[name=d]").length) {
                                rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=")
                            }
                            if (!div.querySelectorAll(":enabled").length) {
                                rbuggyQSA.push(":enabled", ":disabled")
                            }
                            div.querySelectorAll("*,:x");
                            rbuggyQSA.push(",.*:")
                        })
                    }
                    if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
                        assert(function(div) {
                            support.disconnectedMatch = matches.call(div, "div");
                            matches.call(div, "[s!='']:x");
                            rbuggyMatches.push("!=", pseudos)
                        })
                    }
                    rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
                    rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
                    hasCompare = rnative.test(docElem.compareDocumentPosition);
                    contains = hasCompare || rnative.test(docElem.contains) ? function(a, b) {
                        var adown = a.nodeType === 9 ? a.documentElement : a,
                            bup = b && b.parentNode;
                        return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16))
                    } : function(a, b) {
                        if (b) {
                            while (b = b.parentNode) {
                                if (b === a) {
                                    return true
                                }
                            }
                        }
                        return false
                    };
                    sortOrder = hasCompare ? function(a, b) {
                        if (a === b) {
                            hasDuplicate = true;
                            return 0
                        }
                        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                        if (compare) {
                            return compare
                        }
                        compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
                        if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
                            if (a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
                                return -1
                            }
                            if (b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
                                return 1
                            }
                            return sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0
                        }
                        return compare & 4 ? -1 : 1
                    } : function(a, b) {
                        if (a === b) {
                            hasDuplicate = true;
                            return 0
                        }
                        var cur, i = 0,
                            aup = a.parentNode,
                            bup = b.parentNode,
                            ap = [a],
                            bp = [b];
                        if (!aup || !bup) {
                            return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0
                        } else if (aup === bup) {
                            return siblingCheck(a, b)
                        }
                        cur = a;
                        while (cur = cur.parentNode) {
                            ap.unshift(cur)
                        }
                        cur = b;
                        while (cur = cur.parentNode) {
                            bp.unshift(cur)
                        }
                        while (ap[i] === bp[i]) {
                            i++
                        }
                        return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0
                    };
                    return doc
                };
                Sizzle.matches = function(expr, elements) {
                    return Sizzle(expr, null, null, elements)
                };
                Sizzle.matchesSelector = function(elem, expr) {
                    if ((elem.ownerDocument || elem) !== document) {
                        setDocument(elem)
                    }
                    expr = expr.replace(rattributeQuotes, "='$1']");
                    if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
                        try {
                            var ret = matches.call(elem, expr);
                            if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
                                return ret
                            }
                        } catch (e) {}
                    }
                    return Sizzle(expr, document, null, [elem]).length > 0
                };
                Sizzle.contains = function(context, elem) {
                    if ((context.ownerDocument || context) !== document) {
                        setDocument(context)
                    }
                    return contains(context, elem)
                };
                Sizzle.attr = function(elem, name) {
                    if ((elem.ownerDocument || elem) !== document) {
                        setDocument(elem)
                    }
                    var fn = Expr.attrHandle[name.toLowerCase()],
                        val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
                    return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null
                };
                Sizzle.error = function(msg) {
                    throw new Error("Syntax error, unrecognized expression: " + msg)
                };
                Sizzle.uniqueSort = function(results) {
                    var elem, duplicates = [],
                        j = 0,
                        i = 0;
                    hasDuplicate = !support.detectDuplicates;
                    sortInput = !support.sortStable && results.slice(0);
                    results.sort(sortOrder);
                    if (hasDuplicate) {
                        while (elem = results[i++]) {
                            if (elem === results[i]) {
                                j = duplicates.push(i)
                            }
                        }
                        while (j--) {
                            results.splice(duplicates[j], 1)
                        }
                    }
                    sortInput = null;
                    return results
                };
                getText = Sizzle.getText = function(elem) {
                    var node, ret = "",
                        i = 0,
                        nodeType = elem.nodeType;
                    if (!nodeType) {
                        while (node = elem[i++]) {
                            ret += getText(node)
                        }
                    } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                        if (typeof elem.textContent === "string") {
                            return elem.textContent
                        } else {
                            for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                                ret += getText(elem)
                            }
                        }
                    } else if (nodeType === 3 || nodeType === 4) {
                        return elem.nodeValue
                    }
                    return ret
                };
                Expr = Sizzle.selectors = {
                    cacheLength: 50,
                    createPseudo: markFunction,
                    match: matchExpr,
                    attrHandle: {},
                    find: {},
                    relative: {
                        ">": {
                            dir: "parentNode",
                            first: true
                        },
                        " ": {
                            dir: "parentNode"
                        },
                        "+": {
                            dir: "previousSibling",
                            first: true
                        },
                        "~": {
                            dir: "previousSibling"
                        }
                    },
                    preFilter: {
                        ATTR: function(match) {
                            match[1] = match[1].replace(runescape, funescape);
                            match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
                            if (match[2] === "~=") {
                                match[3] = " " + match[3] + " "
                            }
                            return match.slice(0, 4)
                        },
                        CHILD: function(match) {
                            match[1] = match[1].toLowerCase();
                            if (match[1].slice(0, 3) === "nth") {
                                if (!match[3]) {
                                    Sizzle.error(match[0])
                                }
                                match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                                match[5] = +(match[7] + match[8] || match[3] === "odd")
                            } else if (match[3]) {
                                Sizzle.error(match[0])
                            }
                            return match
                        },
                        PSEUDO: function(match) {
                            var excess, unquoted = !match[6] && match[2];
                            if (matchExpr["CHILD"].test(match[0])) {
                                return null
                            }
                            if (match[3]) {
                                match[2] = match[4] || match[5] || ""
                            } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                                match[0] = match[0].slice(0, excess);
                                match[2] = unquoted.slice(0, excess)
                            }
                            return match.slice(0, 3)
                        }
                    },
                    filter: {
                        TAG: function(nodeNameSelector) {
                            var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                            return nodeNameSelector === "*" ? function() {
                                return true
                            } : function(elem) {
                                return elem.nodeName && elem.nodeName.toLowerCase() === nodeName
                            }
                        },
                        CLASS: function(className) {
                            var pattern = classCache[className + " "];
                            return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
                                return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "")
                            })
                        },
                        ATTR: function(name, operator, check) {
                            return function(elem) {
                                var result = Sizzle.attr(elem, name);
                                if (result == null) {
                                    return operator === "!="
                                }
                                if (!operator) {
                                    return true
                                }
                                result += "";
                                return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false
                            }
                        },
                        CHILD: function(type, what, argument, first, last) {
                            var simple = type.slice(0, 3) !== "nth",
                                forward = type.slice(-4) !== "last",
                                ofType = what === "of-type";
                            return first === 1 && last === 0 ? function(elem) {
                                return !!elem.parentNode
                            } : function(elem, context, xml) {
                                var cache, outerCache, node, diff, nodeIndex, start, dir = simple !== forward ? "nextSibling" : "previousSibling",
                                    parent = elem.parentNode,
                                    name = ofType && elem.nodeName.toLowerCase(),
                                    useCache = !xml && !ofType;
                                if (parent) {
                                    if (simple) {
                                        while (dir) {
                                            node = elem;
                                            while (node = node[dir]) {
                                                if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                                                    return false
                                                }
                                            }
                                            start = dir = type === "only" && !start && "nextSibling"
                                        }
                                        return true
                                    }
                                    start = [forward ? parent.firstChild : parent.lastChild];
                                    if (forward && useCache) {
                                        outerCache = parent[expando] || (parent[expando] = {});
                                        cache = outerCache[type] || [];
                                        nodeIndex = cache[0] === dirruns && cache[1];
                                        diff = cache[0] === dirruns && cache[2];
                                        node = nodeIndex && parent.childNodes[nodeIndex];
                                        while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                            if (node.nodeType === 1 && ++diff && node === elem) {
                                                outerCache[type] = [dirruns, nodeIndex, diff];
                                                break
                                            }
                                        }
                                    } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
                                        diff = cache[1]
                                    } else {
                                        while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                            if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                                                if (useCache) {
                                                    (node[expando] || (node[expando] = {}))[type] = [dirruns, diff]
                                                }
                                                if (node === elem) {
                                                    break
                                                }
                                            }
                                        }
                                    }
                                    diff -= last;
                                    return diff === first || diff % first === 0 && diff / first >= 0
                                }
                            }
                        },
                        PSEUDO: function(pseudo, argument) {
                            var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);
                            if (fn[expando]) {
                                return fn(argument)
                            }
                            if (fn.length > 1) {
                                args = [pseudo, pseudo, "", argument];
                                return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches) {
                                    var idx, matched = fn(seed, argument),
                                        i = matched.length;
                                    while (i--) {
                                        idx = indexOf.call(seed, matched[i]);
                                        seed[idx] = !(matches[idx] = matched[i])
                                    }
                                }) : function(elem) {
                                    return fn(elem, 0, args)
                                }
                            }
                            return fn
                        }
                    },
                    pseudos: {
                        not: markFunction(function(selector) {
                            var input = [],
                                results = [],
                                matcher = compile(selector.replace(rtrim, "$1"));
                            return matcher[expando] ? markFunction(function(seed, matches, context, xml) {
                                var elem, unmatched = matcher(seed, null, xml, []),
                                    i = seed.length;
                                while (i--) {
                                    if (elem = unmatched[i]) {
                                        seed[i] = !(matches[i] = elem)
                                    }
                                }
                            }) : function(elem, context, xml) {
                                input[0] = elem;
                                matcher(input, null, xml, results);
                                return !results.pop()
                            }
                        }),
                        has: markFunction(function(selector) {
                            return function(elem) {
                                return Sizzle(selector, elem).length > 0
                            }
                        }),
                        contains: markFunction(function(text) {
                            return function(elem) {
                                return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1
                            }
                        }),
                        lang: markFunction(function(lang) {
                            if (!ridentifier.test(lang || "")) {
                                Sizzle.error("unsupported lang: " + lang)
                            }
                            lang = lang.replace(runescape, funescape).toLowerCase();
                            return function(elem) {
                                var elemLang;
                                do {
                                    if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                                        elemLang = elemLang.toLowerCase();
                                        return elemLang === lang || elemLang.indexOf(lang + "-") === 0
                                    }
                                } while ((elem = elem.parentNode) && elem.nodeType === 1);
                                return false
                            }
                        }),
                        target: function(elem) {
                            var hash = window.location && window.location.hash;
                            return hash && hash.slice(1) === elem.id
                        },
                        root: function(elem) {
                            return elem === docElem
                        },
                        focus: function(elem) {
                            return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex)
                        },
                        enabled: function(elem) {
                            return elem.disabled === false
                        },
                        disabled: function(elem) {
                            return elem.disabled === true
                        },
                        checked: function(elem) {
                            var nodeName = elem.nodeName.toLowerCase();
                            return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected
                        },
                        selected: function(elem) {
                            if (elem.parentNode) {
                                elem.parentNode.selectedIndex
                            }
                            return elem.selected === true
                        },
                        empty: function(elem) {
                            for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                                if (elem.nodeType < 6) {
                                    return false
                                }
                            }
                            return true
                        },
                        parent: function(elem) {
                            return !Expr.pseudos["empty"](elem)
                        },
                        header: function(elem) {
                            return rheader.test(elem.nodeName)
                        },
                        input: function(elem) {
                            return rinputs.test(elem.nodeName)
                        },
                        button: function(elem) {
                            var name = elem.nodeName.toLowerCase();
                            return name === "input" && elem.type === "button" || name === "button"
                        },
                        text: function(elem) {
                            var attr;
                            return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text")
                        },
                        first: createPositionalPseudo(function() {
                            return [0]
                        }),
                        last: createPositionalPseudo(function(matchIndexes, length) {
                            return [length - 1]
                        }),
                        eq: createPositionalPseudo(function(matchIndexes, length, argument) {
                            return [argument < 0 ? argument + length : argument]
                        }),
                        even: createPositionalPseudo(function(matchIndexes, length) {
                            var i = 0;
                            for (; i < length; i += 2) {
                                matchIndexes.push(i)
                            }
                            return matchIndexes
                        }),
                        odd: createPositionalPseudo(function(matchIndexes, length) {
                            var i = 1;
                            for (; i < length; i += 2) {
                                matchIndexes.push(i)
                            }
                            return matchIndexes
                        }),
                        lt: createPositionalPseudo(function(matchIndexes, length, argument) {
                            var i = argument < 0 ? argument + length : argument;
                            for (; --i >= 0;) {
                                matchIndexes.push(i)
                            }
                            return matchIndexes
                        }),
                        gt: createPositionalPseudo(function(matchIndexes, length, argument) {
                            var i = argument < 0 ? argument + length : argument;
                            for (; ++i < length;) {
                                matchIndexes.push(i)
                            }
                            return matchIndexes
                        })
                    }
                };
                Expr.pseudos["nth"] = Expr.pseudos["eq"];
                for (i in {
                        radio: true,
                        checkbox: true,
                        file: true,
                        password: true,
                        image: true
                    }) {
                    Expr.pseudos[i] = createInputPseudo(i)
                }
                for (i in {
                        submit: true,
                        reset: true
                    }) {
                    Expr.pseudos[i] = createButtonPseudo(i)
                }

                function setFilters() {}
                setFilters.prototype = Expr.filters = Expr.pseudos;
                Expr.setFilters = new setFilters;
                tokenize = Sizzle.tokenize = function(selector, parseOnly) {
                    var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
                    if (cached) {
                        return parseOnly ? 0 : cached.slice(0)
                    }
                    soFar = selector;
                    groups = [];
                    preFilters = Expr.preFilter;
                    while (soFar) {
                        if (!matched || (match = rcomma.exec(soFar))) {
                            if (match) {
                                soFar = soFar.slice(match[0].length) || soFar
                            }
                            groups.push(tokens = [])
                        }
                        matched = false;
                        if (match = rcombinators.exec(soFar)) {
                            matched = match.shift();
                            tokens.push({
                                value: matched,
                                type: match[0].replace(rtrim, " ")
                            });
                            soFar = soFar.slice(matched.length)
                        }
                        for (type in Expr.filter) {
                            if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                                matched = match.shift();
                                tokens.push({
                                    value: matched,
                                    type: type,
                                    matches: match
                                });
                                soFar = soFar.slice(matched.length)
                            }
                        }
                        if (!matched) {
                            break
                        }
                    }
                    return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0)
                };

                function toSelector(tokens) {
                    var i = 0,
                        len = tokens.length,
                        selector = "";
                    for (; i < len; i++) {
                        selector += tokens[i].value
                    }
                    return selector
                }

                function addCombinator(matcher, combinator, base) {
                    var dir = combinator.dir,
                        checkNonElements = base && dir === "parentNode",
                        doneName = done++;
                    return combinator.first ? function(elem, context, xml) {
                        while (elem = elem[dir]) {
                            if (elem.nodeType === 1 || checkNonElements) {
                                return matcher(elem, context, xml)
                            }
                        }
                    } : function(elem, context, xml) {
                        var oldCache, outerCache, newCache = [dirruns, doneName];
                        if (xml) {
                            while (elem = elem[dir]) {
                                if (elem.nodeType === 1 || checkNonElements) {
                                    if (matcher(elem, context, xml)) {
                                        return true
                                    }
                                }
                            }
                        } else {
                            while (elem = elem[dir]) {
                                if (elem.nodeType === 1 || checkNonElements) {
                                    outerCache = elem[expando] || (elem[expando] = {});
                                    if ((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                                        return newCache[2] = oldCache[2]
                                    } else {
                                        outerCache[dir] = newCache;
                                        if (newCache[2] = matcher(elem, context, xml)) {
                                            return true
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                function elementMatcher(matchers) {
                    return matchers.length > 1 ? function(elem, context, xml) {
                        var i = matchers.length;
                        while (i--) {
                            if (!matchers[i](elem, context, xml)) {
                                return false
                            }
                        }
                        return true
                    } : matchers[0]
                }

                function multipleContexts(selector, contexts, results) {
                    var i = 0,
                        len = contexts.length;
                    for (; i < len; i++) {
                        Sizzle(selector, contexts[i], results)
                    }
                    return results
                }

                function condense(unmatched, map, filter, context, xml) {
                    var elem, newUnmatched = [],
                        i = 0,
                        len = unmatched.length,
                        mapped = map != null;
                    for (; i < len; i++) {
                        if (elem = unmatched[i]) {
                            if (!filter || filter(elem, context, xml)) {
                                newUnmatched.push(elem);
                                if (mapped) {
                                    map.push(i)
                                }
                            }
                        }
                    }
                    return newUnmatched
                }

                function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
                    if (postFilter && !postFilter[expando]) {
                        postFilter = setMatcher(postFilter)
                    }
                    if (postFinder && !postFinder[expando]) {
                        postFinder = setMatcher(postFinder, postSelector)
                    }
                    return markFunction(function(seed, results, context, xml) {
                        var temp, i, elem, preMap = [],
                            postMap = [],
                            preexisting = results.length,
                            elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
                            matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
                            matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
                        if (matcher) {
                            matcher(matcherIn, matcherOut, context, xml)
                        }
                        if (postFilter) {
                            temp = condense(matcherOut, postMap);
                            postFilter(temp, [], context, xml);
                            i = temp.length;
                            while (i--) {
                                if (elem = temp[i]) {
                                    matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem)
                                }
                            }
                        }
                        if (seed) {
                            if (postFinder || preFilter) {
                                if (postFinder) {
                                    temp = [];
                                    i = matcherOut.length;
                                    while (i--) {
                                        if (elem = matcherOut[i]) {
                                            temp.push(matcherIn[i] = elem)
                                        }
                                    }
                                    postFinder(null, matcherOut = [], temp, xml)
                                }
                                i = matcherOut.length;
                                while (i--) {
                                    if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) {
                                        seed[temp] = !(results[temp] = elem)
                                    }
                                }
                            }
                        } else {
                            matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                            if (postFinder) {
                                postFinder(null, results, matcherOut, xml)
                            } else {
                                push.apply(results, matcherOut)
                            }
                        }
                    })
                }

                function matcherFromTokens(tokens) {
                    var checkContext, matcher, j, len = tokens.length,
                        leadingRelative = Expr.relative[tokens[0].type],
                        implicitRelative = leadingRelative || Expr.relative[" "],
                        i = leadingRelative ? 1 : 0,
                        matchContext = addCombinator(function(elem) {
                            return elem === checkContext
                        }, implicitRelative, true),
                        matchAnyContext = addCombinator(function(elem) {
                            return indexOf.call(checkContext, elem) > -1
                        }, implicitRelative, true),
                        matchers = [function(elem, context, xml) {
                            return !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml))
                        }];
                    for (; i < len; i++) {
                        if (matcher = Expr.relative[tokens[i].type]) {
                            matchers = [addCombinator(elementMatcher(matchers), matcher)]
                        } else {
                            matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
                            if (matcher[expando]) {
                                j = ++i;
                                for (; j < len; j++) {
                                    if (Expr.relative[tokens[j].type]) {
                                        break
                                    }
                                }
                                return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({
                                    value: tokens[i - 2].type === " " ? "*" : ""
                                })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens))
                            }
                            matchers.push(matcher)
                        }
                    }
                    return elementMatcher(matchers)
                }

                function matcherFromGroupMatchers(elementMatchers, setMatchers) {
                    var bySet = setMatchers.length > 0,
                        byElement = elementMatchers.length > 0,
                        superMatcher = function(seed, context, xml, results, outermost) {
                            var elem, j, matcher, matchedCount = 0,
                                i = "0",
                                unmatched = seed && [],
                                setMatched = [],
                                contextBackup = outermostContext,
                                elems = seed || byElement && Expr.find["TAG"]("*", outermost),
                                dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || .1,
                                len = elems.length;
                            if (outermost) {
                                outermostContext = context !== document && context
                            }
                            for (; i !== len && (elem = elems[i]) != null; i++) {
                                if (byElement && elem) {
                                    j = 0;
                                    while (matcher = elementMatchers[j++]) {
                                        if (matcher(elem, context, xml)) {
                                            results.push(elem);
                                            break
                                        }
                                    }
                                    if (outermost) {
                                        dirruns = dirrunsUnique
                                    }
                                }
                                if (bySet) {
                                    if (elem = !matcher && elem) {
                                        matchedCount--
                                    }
                                    if (seed) {
                                        unmatched.push(elem)
                                    }
                                }
                            }
                            matchedCount += i;
                            if (bySet && i !== matchedCount) {
                                j = 0;
                                while (matcher = setMatchers[j++]) {
                                    matcher(unmatched, setMatched, context, xml)
                                }
                                if (seed) {
                                    if (matchedCount > 0) {
                                        while (i--) {
                                            if (!(unmatched[i] || setMatched[i])) {
                                                setMatched[i] = pop.call(results)
                                            }
                                        }
                                    }
                                    setMatched = condense(setMatched)
                                }
                                push.apply(results, setMatched);
                                if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                                    Sizzle.uniqueSort(results)
                                }
                            }
                            if (outermost) {
                                dirruns = dirrunsUnique;
                                outermostContext = contextBackup
                            }
                            return unmatched
                        };
                    return bySet ? markFunction(superMatcher) : superMatcher
                }
                compile = Sizzle.compile = function(selector, match) {
                    var i, setMatchers = [],
                        elementMatchers = [],
                        cached = compilerCache[selector + " "];
                    if (!cached) {
                        if (!match) {
                            match = tokenize(selector)
                        }
                        i = match.length;
                        while (i--) {
                            cached = matcherFromTokens(match[i]);
                            if (cached[expando]) {
                                setMatchers.push(cached)
                            } else {
                                elementMatchers.push(cached)
                            }
                        }
                        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
                        cached.selector = selector
                    }
                    return cached
                };
                select = Sizzle.select = function(selector, context, results, seed) {
                    var i, tokens, token, type, find, compiled = typeof selector === "function" && selector,
                        match = !seed && tokenize(selector = compiled.selector || selector);
                    results = results || [];
                    if (match.length === 1) {
                        tokens = match[0] = match[0].slice(0);
                        if (tokens.length > 2 && (token = tokens[0]).type === "ID" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                            context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
                            if (!context) {
                                return results
                            } else if (compiled) {
                                context = context.parentNode
                            }
                            selector = selector.slice(tokens.shift().value.length)
                        }
                        i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
                        while (i--) {
                            token = tokens[i];
                            if (Expr.relative[type = token.type]) {
                                break
                            }
                            if (find = Expr.find[type]) {
                                if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                                    tokens.splice(i, 1);
                                    selector = seed.length && toSelector(tokens);
                                    if (!selector) {
                                        push.apply(results, seed);
                                        return results
                                    }
                                    break
                                }
                            }
                        }
                    }(compiled || compile(selector, match))(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);
                    return results
                };
                support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
                support.detectDuplicates = !!hasDuplicate;
                setDocument();
                support.sortDetached = assert(function(div1) {
                    return div1.compareDocumentPosition(document.createElement("div")) & 1
                });
                if (!assert(function(div) {
                        div.innerHTML = "<a href='#'></a>";
                        return div.firstChild.getAttribute("href") === "#"
                    })) {
                    addHandle("type|href|height|width", function(elem, name, isXML) {
                        if (!isXML) {
                            return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2)
                        }
                    })
                }
                if (!support.attributes || !assert(function(div) {
                        div.innerHTML = "<input/>";
                        div.firstChild.setAttribute("value", "");
                        return div.firstChild.getAttribute("value") === ""
                    })) {
                    addHandle("value", function(elem, name, isXML) {
                        if (!isXML && elem.nodeName.toLowerCase() === "input") {
                            return elem.defaultValue
                        }
                    })
                }
                if (!assert(function(div) {
                        return div.getAttribute("disabled") == null
                    })) {
                    addHandle(booleans, function(elem, name, isXML) {
                        var val;
                        if (!isXML) {
                            return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null
                        }
                    })
                }
                return Sizzle
            }(window);
            jQuery.find = Sizzle;
            jQuery.expr = Sizzle.selectors;
            jQuery.expr[":"] = jQuery.expr.pseudos;
            jQuery.unique = Sizzle.uniqueSort;
            jQuery.text = Sizzle.getText;
            jQuery.isXMLDoc = Sizzle.isXML;
            jQuery.contains = Sizzle.contains;
            var rneedsContext = jQuery.expr.match.needsContext;
            var rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
            var risSimple = /^.[^:#\[\.,]*$/;

            function winnow(elements, qualifier, not) {
                if (jQuery.isFunction(qualifier)) {
                    return jQuery.grep(elements, function(elem, i) {
                        return !!qualifier.call(elem, i, elem) !== not
                    })
                }
                if (qualifier.nodeType) {
                    return jQuery.grep(elements, function(elem) {
                        return elem === qualifier !== not
                    })
                }
                if (typeof qualifier === "string") {
                    if (risSimple.test(qualifier)) {
                        return jQuery.filter(qualifier, elements, not)
                    }
                    qualifier = jQuery.filter(qualifier, elements)
                }
                return jQuery.grep(elements, function(elem) {
                    return indexOf.call(qualifier, elem) >= 0 !== not
                })
            }
            jQuery.filter = function(expr, elems, not) {
                var elem = elems[0];
                if (not) {
                    expr = ":not(" + expr + ")"
                }
                return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function(elem) {
                    return elem.nodeType === 1
                }))
            };
            jQuery.fn.extend({
                find: function(selector) {
                    var i, len = this.length,
                        ret = [],
                        self = this;
                    if (typeof selector !== "string") {
                        return this.pushStack(jQuery(selector).filter(function() {
                            for (i = 0; i < len; i++) {
                                if (jQuery.contains(self[i], this)) {
                                    return true
                                }
                            }
                        }))
                    }
                    for (i = 0; i < len; i++) {
                        jQuery.find(selector, self[i], ret)
                    }
                    ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
                    ret.selector = this.selector ? this.selector + " " + selector : selector;
                    return ret
                },
                filter: function(selector) {
                    return this.pushStack(winnow(this, selector || [], false))
                },
                not: function(selector) {
                    return this.pushStack(winnow(this, selector || [], true))
                },
                is: function(selector) {
                    return !!winnow(this, typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length
                }
            });
            var rootjQuery, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
                init = jQuery.fn.init = function(selector, context) {
                    var match, elem;
                    if (!selector) {
                        return this
                    }
                    if (typeof selector === "string") {
                        if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
                            match = [null, selector, null]
                        } else {
                            match = rquickExpr.exec(selector)
                        }
                        if (match && (match[1] || !context)) {
                            if (match[1]) {
                                context = context instanceof jQuery ? context[0] : context;
                                jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
                                if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                                    for (match in context) {
                                        if (jQuery.isFunction(this[match])) {
                                            this[match](context[match])
                                        } else {
                                            this.attr(match, context[match])
                                        }
                                    }
                                }
                                return this
                            } else {
                                elem = document.getElementById(match[2]);
                                if (elem && elem.parentNode) {
                                    this.length = 1;
                                    this[0] = elem
                                }
                                this.context = document;
                                this.selector = selector;
                                return this
                            }
                        } else if (!context || context.jquery) {
                            return (context || rootjQuery).find(selector)
                        } else {
                            return this.constructor(context).find(selector)
                        }
                    } else if (selector.nodeType) {
                        this.context = this[0] = selector;
                        this.length = 1;
                        return this
                    } else if (jQuery.isFunction(selector)) {
                        return typeof rootjQuery.ready !== "undefined" ? rootjQuery.ready(selector) : selector(jQuery)
                    }
                    if (selector.selector !== undefined) {
                        this.selector = selector.selector;
                        this.context = selector.context
                    }
                    return jQuery.makeArray(selector, this)
                };
            init.prototype = jQuery.fn;
            rootjQuery = jQuery(document);
            var rparentsprev = /^(?:parents|prev(?:Until|All))/,
                guaranteedUnique = {
                    children: true,
                    contents: true,
                    next: true,
                    prev: true
                };
            jQuery.extend({
                dir: function(elem, dir, until) {
                    var matched = [],
                        truncate = until !== undefined;
                    while ((elem = elem[dir]) && elem.nodeType !== 9) {
                        if (elem.nodeType === 1) {
                            if (truncate && jQuery(elem).is(until)) {
                                break
                            }
                            matched.push(elem)
                        }
                    }
                    return matched
                },
                sibling: function(n, elem) {
                    var matched = [];
                    for (; n; n = n.nextSibling) {
                        if (n.nodeType === 1 && n !== elem) {
                            matched.push(n)
                        }
                    }
                    return matched
                }
            });
            jQuery.fn.extend({
                has: function(target) {
                    var targets = jQuery(target, this),
                        l = targets.length;
                    return this.filter(function() {
                        var i = 0;
                        for (; i < l; i++) {
                            if (jQuery.contains(this, targets[i])) {
                                return true
                            }
                        }
                    })
                },
                closest: function(selectors, context) {
                    var cur, i = 0,
                        l = this.length,
                        matched = [],
                        pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;
                    for (; i < l; i++) {
                        for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                            if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                                matched.push(cur);
                                break
                            }
                        }
                    }
                    return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched)
                },
                index: function(elem) {
                    if (!elem) {
                        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1
                    }
                    if (typeof elem === "string") {
                        return indexOf.call(jQuery(elem), this[0])
                    }
                    return indexOf.call(this, elem.jquery ? elem[0] : elem)
                },
                add: function(selector, context) {
                    return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))))
                },
                addBack: function(selector) {
                    return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector))
                }
            });

            function sibling(cur, dir) {
                while ((cur = cur[dir]) && cur.nodeType !== 1) {}
                return cur
            }
            jQuery.each({
                parent: function(elem) {
                    var parent = elem.parentNode;
                    return parent && parent.nodeType !== 11 ? parent : null
                },
                parents: function(elem) {
                    return jQuery.dir(elem, "parentNode")
                },
                parentsUntil: function(elem, i, until) {
                    return jQuery.dir(elem, "parentNode", until)
                },
                next: function(elem) {
                    return sibling(elem, "nextSibling")
                },
                prev: function(elem) {
                    return sibling(elem, "previousSibling")
                },
                nextAll: function(elem) {
                    return jQuery.dir(elem, "nextSibling")
                },
                prevAll: function(elem) {
                    return jQuery.dir(elem, "previousSibling")
                },
                nextUntil: function(elem, i, until) {
                    return jQuery.dir(elem, "nextSibling", until)
                },
                prevUntil: function(elem, i, until) {
                    return jQuery.dir(elem, "previousSibling", until)
                },
                siblings: function(elem) {
                    return jQuery.sibling((elem.parentNode || {}).firstChild, elem)
                },
                children: function(elem) {
                    return jQuery.sibling(elem.firstChild)
                },
                contents: function(elem) {
                    return elem.contentDocument || jQuery.merge([], elem.childNodes)
                }
            }, function(name, fn) {
                jQuery.fn[name] = function(until, selector) {
                    var matched = jQuery.map(this, fn, until);
                    if (name.slice(-5) !== "Until") {
                        selector = until
                    }
                    if (selector && typeof selector === "string") {
                        matched = jQuery.filter(selector, matched)
                    }
                    if (this.length > 1) {
                        if (!guaranteedUnique[name]) {
                            jQuery.unique(matched)
                        }
                        if (rparentsprev.test(name)) {
                            matched.reverse()
                        }
                    }
                    return this.pushStack(matched)
                }
            });
            var rnotwhite = /\S+/g;
            var optionsCache = {};

            function createOptions(options) {
                var object = optionsCache[options] = {};
                jQuery.each(options.match(rnotwhite) || [], function(_, flag) {
                    object[flag] = true
                });
                return object
            }
            jQuery.Callbacks = function(options) {
                options = typeof options === "string" ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);
                var memory, fired, firing, firingStart, firingLength, firingIndex, list = [],
                    stack = !options.once && [],
                    fire = function(data) {
                        memory = options.memory && data;
                        fired = true;
                        firingIndex = firingStart || 0;
                        firingStart = 0;
                        firingLength = list.length;
                        firing = true;
                        for (; list && firingIndex < firingLength; firingIndex++) {
                            if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
                                memory = false;
                                break
                            }
                        }
                        firing = false;
                        if (list) {
                            if (stack) {
                                if (stack.length) {
                                    fire(stack.shift())
                                }
                            } else if (memory) {
                                list = []
                            } else {
                                self.disable()
                            }
                        }
                    },
                    self = {
                        add: function() {
                            if (list) {
                                var start = list.length;
                                (function add(args) {
                                    jQuery.each(args, function(_, arg) {
                                        var type = jQuery.type(arg);
                                        if (type === "function") {
                                            if (!options.unique || !self.has(arg)) {
                                                list.push(arg)
                                            }
                                        } else if (arg && arg.length && type !== "string") {
                                            add(arg)
                                        }
                                    })
                                })(arguments);
                                if (firing) {
                                    firingLength = list.length
                                } else if (memory) {
                                    firingStart = start;
                                    fire(memory)
                                }
                            }
                            return this
                        },
                        remove: function() {
                            if (list) {
                                jQuery.each(arguments, function(_, arg) {
                                    var index;
                                    while ((index = jQuery.inArray(arg, list, index)) > -1) {
                                        list.splice(index, 1);
                                        if (firing) {
                                            if (index <= firingLength) {
                                                firingLength--
                                            }
                                            if (index <= firingIndex) {
                                                firingIndex--
                                            }
                                        }
                                    }
                                })
                            }
                            return this
                        },
                        has: function(fn) {
                            return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length)
                        },
                        empty: function() {
                            list = [];
                            firingLength = 0;
                            return this
                        },
                        disable: function() {
                            list = stack = memory = undefined;
                            return this
                        },
                        disabled: function() {
                            return !list
                        },
                        lock: function() {
                            stack = undefined;
                            if (!memory) {
                                self.disable()
                            }
                            return this
                        },
                        locked: function() {
                            return !stack
                        },
                        fireWith: function(context, args) {
                            if (list && (!fired || stack)) {
                                args = args || [];
                                args = [context, args.slice ? args.slice() : args];
                                if (firing) {
                                    stack.push(args)
                                } else {
                                    fire(args)
                                }
                            }
                            return this
                        },
                        fire: function() {
                            self.fireWith(this, arguments);
                            return this
                        },
                        fired: function() {
                            return !!fired
                        }
                    };
                return self
            };
            jQuery.extend({
                Deferred: function(func) {
                    var tuples = [
                            ["resolve", "done", jQuery.Callbacks("once memory"), "resolved"],
                            ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"],
                            ["notify", "progress", jQuery.Callbacks("memory")]
                        ],
                        state = "pending",
                        promise = {
                            state: function() {
                                return state
                            },
                            always: function() {
                                deferred.done(arguments).fail(arguments);
                                return this
                            },
                            then: function() {
                                var fns = arguments;
                                return jQuery.Deferred(function(newDefer) {
                                    jQuery.each(tuples, function(i, tuple) {
                                        var fn = jQuery.isFunction(fns[i]) && fns[i];
                                        deferred[tuple[1]](function() {
                                            var returned = fn && fn.apply(this, arguments);
                                            if (returned && jQuery.isFunction(returned.promise)) {
                                                returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify)
                                            } else {
                                                newDefer[tuple[0] + "With"](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments)
                                            }
                                        })
                                    });
                                    fns = null
                                }).promise()
                            },
                            promise: function(obj) {
                                return obj != null ? jQuery.extend(obj, promise) : promise
                            }
                        },
                        deferred = {};
                    promise.pipe = promise.then;
                    jQuery.each(tuples, function(i, tuple) {
                        var list = tuple[2],
                            stateString = tuple[3];
                        promise[tuple[1]] = list.add;
                        if (stateString) {
                            list.add(function() {
                                state = stateString
                            }, tuples[i ^ 1][2].disable, tuples[2][2].lock)
                        }
                        deferred[tuple[0]] = function() {
                            deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments);
                            return this
                        };
                        deferred[tuple[0] + "With"] = list.fireWith
                    });
                    promise.promise(deferred);
                    if (func) {
                        func.call(deferred, deferred)
                    }
                    return deferred
                },
                when: function(subordinate) {
                    var i = 0,
                        resolveValues = slice.call(arguments),
                        length = resolveValues.length,
                        remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,
                        deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
                        updateFunc = function(i, contexts, values) {
                            return function(value) {
                                contexts[i] = this;
                                values[i] = arguments.length > 1 ? slice.call(arguments) : value;
                                if (values === progressValues) {
                                    deferred.notifyWith(contexts, values)
                                } else if (!--remaining) {
                                    deferred.resolveWith(contexts, values)
                                }
                            }
                        },
                        progressValues, progressContexts, resolveContexts;
                    if (length > 1) {
                        progressValues = new Array(length);
                        progressContexts = new Array(length);
                        resolveContexts = new Array(length);
                        for (; i < length; i++) {
                            if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
                                resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues))
                            } else {
                                --remaining
                            }
                        }
                    }
                    if (!remaining) {
                        deferred.resolveWith(resolveContexts, resolveValues)
                    }
                    return deferred.promise()
                }
            });
            var readyList;
            jQuery.fn.ready = function(fn) {
                jQuery.ready.promise().done(fn);
                return this
            };
            jQuery.extend({
                isReady: false,
                readyWait: 1,
                holdReady: function(hold) {
                    if (hold) {
                        jQuery.readyWait++
                    } else {
                        jQuery.ready(true)
                    }
                },
                ready: function(wait) {
                    if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                        return
                    }
                    jQuery.isReady = true;
                    if (wait !== true && --jQuery.readyWait > 0) {
                        return
                    }
                    readyList.resolveWith(document, [jQuery]);
                    if (jQuery.fn.triggerHandler) {
                        jQuery(document).triggerHandler("ready");
                        jQuery(document).off("ready")
                    }
                }
            });

            function completed() {
                document.removeEventListener("DOMContentLoaded", completed, false);
                window.removeEventListener("load", completed, false);
                jQuery.ready()
            }
            jQuery.ready.promise = function(obj) {
                if (!readyList) {
                    readyList = jQuery.Deferred();
                    if (document.readyState === "complete") {
                        setTimeout(jQuery.ready)
                    } else {
                        document.addEventListener("DOMContentLoaded", completed, false);
                        window.addEventListener("load", completed, false)
                    }
                }
                return readyList.promise(obj)
            };
            jQuery.ready.promise();
            var access = jQuery.access = function(elems, fn, key, value, chainable, emptyGet, raw) {
                var i = 0,
                    len = elems.length,
                    bulk = key == null;
                if (jQuery.type(key) === "object") {
                    chainable = true;
                    for (i in key) {
                        jQuery.access(elems, fn, i, key[i], true, emptyGet, raw)
                    }
                } else if (value !== undefined) {
                    chainable = true;
                    if (!jQuery.isFunction(value)) {
                        raw = true
                    }
                    if (bulk) {
                        if (raw) {
                            fn.call(elems, value);
                            fn = null
                        } else {
                            bulk = fn;
                            fn = function(elem, key, value) {
                                return bulk.call(jQuery(elem), value)
                            }
                        }
                    }
                    if (fn) {
                        for (; i < len; i++) {
                            fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)))
                        }
                    }
                }
                return chainable ? elems : bulk ? fn.call(elems) : len ? fn(elems[0], key) : emptyGet
            };
            jQuery.acceptData = function(owner) {
                return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType
            };

            function Data() {
                Object.defineProperty(this.cache = {}, 0, {
                    get: function() {
                        return {}
                    }
                });
                this.expando = jQuery.expando + Math.random()
            }
            Data.uid = 1;
            Data.accepts = jQuery.acceptData;
            Data.prototype = {
                key: function(owner) {
                    if (!Data.accepts(owner)) {
                        return 0
                    }
                    var descriptor = {},
                        unlock = owner[this.expando];
                    if (!unlock) {
                        unlock = Data.uid++;
                        try {
                            descriptor[this.expando] = {
                                value: unlock
                            };
                            Object.defineProperties(owner, descriptor)
                        } catch (e) {
                            descriptor[this.expando] = unlock;
                            jQuery.extend(owner, descriptor)
                        }
                    }
                    if (!this.cache[unlock]) {
                        this.cache[unlock] = {}
                    }
                    return unlock
                },
                set: function(owner, data, value) {
                    var prop, unlock = this.key(owner),
                        cache = this.cache[unlock];
                    if (typeof data === "string") {
                        cache[data] = value
                    } else {
                        if (jQuery.isEmptyObject(cache)) {
                            jQuery.extend(this.cache[unlock], data)
                        } else {
                            for (prop in data) {
                                cache[prop] = data[prop]
                            }
                        }
                    }
                    return cache
                },
                get: function(owner, key) {
                    var cache = this.cache[this.key(owner)];
                    return key === undefined ? cache : cache[key]
                },
                access: function(owner, key, value) {
                    var stored;
                    if (key === undefined || key && typeof key === "string" && value === undefined) {
                        stored = this.get(owner, key);
                        return stored !== undefined ? stored : this.get(owner, jQuery.camelCase(key))
                    }
                    this.set(owner, key, value);
                    return value !== undefined ? value : key
                },
                remove: function(owner, key) {
                    var i, name, camel, unlock = this.key(owner),
                        cache = this.cache[unlock];
                    if (key === undefined) {
                        this.cache[unlock] = {}
                    } else {
                        if (jQuery.isArray(key)) {
                            name = key.concat(key.map(jQuery.camelCase))
                        } else {
                            camel = jQuery.camelCase(key);
                            if (key in cache) {
                                name = [key, camel]
                            } else {
                                name = camel;
                                name = name in cache ? [name] : name.match(rnotwhite) || []
                            }
                        }
                        i = name.length;
                        while (i--) {
                            delete cache[name[i]]
                        }
                    }
                },
                hasData: function(owner) {
                    return !jQuery.isEmptyObject(this.cache[owner[this.expando]] || {})
                },
                discard: function(owner) {
                    if (owner[this.expando]) {
                        delete this.cache[owner[this.expando]]
                    }
                }
            };
            var data_priv = new Data;
            var data_user = new Data;
            var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
                rmultiDash = /([A-Z])/g;

            function dataAttr(elem, key, data) {
                var name;
                if (data === undefined && elem.nodeType === 1) {
                    name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
                    data = elem.getAttribute(name);
                    if (typeof data === "string") {
                        try {
                            data = data === "true" ? true : data === "false" ? false : data === "null" ? null : +data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data
                        } catch (e) {}
                        data_user.set(elem, key, data)
                    } else {
                        data = undefined
                    }
                }
                return data
            }
            jQuery.extend({
                hasData: function(elem) {
                    return data_user.hasData(elem) || data_priv.hasData(elem)
                },
                data: function(elem, name, data) {
                    return data_user.access(elem, name, data)
                },
                removeData: function(elem, name) {
                    data_user.remove(elem, name)
                },
                _data: function(elem, name, data) {
                    return data_priv.access(elem, name, data)
                },
                _removeData: function(elem, name) {
                    data_priv.remove(elem, name)
                }
            });
            jQuery.fn.extend({
                data: function(key, value) {
                    var i, name, data, elem = this[0],
                        attrs = elem && elem.attributes;
                    if (key === undefined) {
                        if (this.length) {
                            data = data_user.get(elem);
                            if (elem.nodeType === 1 && !data_priv.get(elem, "hasDataAttrs")) {
                                i = attrs.length;
                                while (i--) {
                                    if (attrs[i]) {
                                        name = attrs[i].name;
                                        if (name.indexOf("data-") === 0) {
                                            name = jQuery.camelCase(name.slice(5));
                                            dataAttr(elem, name, data[name])
                                        }
                                    }
                                }
                                data_priv.set(elem, "hasDataAttrs", true)
                            }
                        }
                        return data
                    }
                    if (typeof key === "object") {
                        return this.each(function() {
                            data_user.set(this, key)
                        })
                    }
                    return access(this, function(value) {
                        var data, camelKey = jQuery.camelCase(key);
                        if (elem && value === undefined) {
                            data = data_user.get(elem, key);
                            if (data !== undefined) {
                                return data
                            }
                            data = data_user.get(elem, camelKey);
                            if (data !== undefined) {
                                return data
                            }
                            data = dataAttr(elem, camelKey, undefined);
                            if (data !== undefined) {
                                return data
                            }
                            return
                        }
                        this.each(function() {
                            var data = data_user.get(this, camelKey);
                            data_user.set(this, camelKey, value);
                            if (key.indexOf("-") !== -1 && data !== undefined) {
                                data_user.set(this, key, value)
                            }
                        })
                    }, null, value, arguments.length > 1, null, true)
                },
                removeData: function(key) {
                    return this.each(function() {
                        data_user.remove(this, key)
                    })
                }
            });
            jQuery.extend({
                queue: function(elem, type, data) {
                    var queue;
                    if (elem) {
                        type = (type || "fx") + "queue";
                        queue = data_priv.get(elem, type);
                        if (data) {
                            if (!queue || jQuery.isArray(data)) {
                                queue = data_priv.access(elem, type, jQuery.makeArray(data))
                            } else {
                                queue.push(data)
                            }
                        }
                        return queue || []
                    }
                },
                dequeue: function(elem, type) {
                    type = type || "fx";
                    var queue = jQuery.queue(elem, type),
                        startLength = queue.length,
                        fn = queue.shift(),
                        hooks = jQuery._queueHooks(elem, type),
                        next = function() {
                            jQuery.dequeue(elem, type)
                        };
                    if (fn === "inprogress") {
                        fn = queue.shift();
                        startLength--
                    }
                    if (fn) {
                        if (type === "fx") {
                            queue.unshift("inprogress")
                        }
                        delete hooks.stop;
                        fn.call(elem, next, hooks)
                    }
                    if (!startLength && hooks) {
                        hooks.empty.fire()
                    }
                },
                _queueHooks: function(elem, type) {
                    var key = type + "queueHooks";
                    return data_priv.get(elem, key) || data_priv.access(elem, key, {
                        empty: jQuery.Callbacks("once memory").add(function() {
                            data_priv.remove(elem, [type + "queue", key])
                        })
                    })
                }
            });
            jQuery.fn.extend({
                queue: function(type, data) {
                    var setter = 2;
                    if (typeof type !== "string") {
                        data = type;
                        type = "fx";
                        setter--
                    }
                    if (arguments.length < setter) {
                        return jQuery.queue(this[0], type)
                    }
                    return data === undefined ? this : this.each(function() {
                        var queue = jQuery.queue(this, type, data);
                        jQuery._queueHooks(this, type);
                        if (type === "fx" && queue[0] !== "inprogress") {
                            jQuery.dequeue(this, type)
                        }
                    })
                },
                dequeue: function(type) {
                    return this.each(function() {
                        jQuery.dequeue(this, type)
                    })
                },
                clearQueue: function(type) {
                    return this.queue(type || "fx", [])
                },
                promise: function(type, obj) {
                    var tmp, count = 1,
                        defer = jQuery.Deferred(),
                        elements = this,
                        i = this.length,
                        resolve = function() {
                            if (!--count) {
                                defer.resolveWith(elements, [elements])
                            }
                        };
                    if (typeof type !== "string") {
                        obj = type;
                        type = undefined
                    }
                    type = type || "fx";
                    while (i--) {
                        tmp = data_priv.get(elements[i], type + "queueHooks");
                        if (tmp && tmp.empty) {
                            count++;
                            tmp.empty.add(resolve)
                        }
                    }
                    resolve();
                    return defer.promise(obj)
                }
            });
            var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
            var cssExpand = ["Top", "Right", "Bottom", "Left"];
            var isHidden = function(elem, el) {
                elem = el || elem;
                return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem)
            };
            var rcheckableType = /^(?:checkbox|radio)$/i;
            (function() {
                var fragment = document.createDocumentFragment(),
                    div = fragment.appendChild(document.createElement("div")),
                    input = document.createElement("input");
                input.setAttribute("type", "radio");
                input.setAttribute("checked", "checked");
                input.setAttribute("name", "t");
                div.appendChild(input);
                support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
                div.innerHTML = "<textarea>x</textarea>";
                support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue
            })();
            var strundefined = typeof undefined;
            support.focusinBubbles = "onfocusin" in window;
            var rkeyEvent = /^key/,
                rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
                rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
                rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

            function returnTrue() {
                return true
            }

            function returnFalse() {
                return false
            }

            function safeActiveElement() {
                try {
                    return document.activeElement
                } catch (err) {}
            }
            jQuery.event = {
                global: {},
                add: function(elem, types, handler, data, selector) {
                    var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = data_priv.get(elem);
                    if (!elemData) {
                        return
                    }
                    if (handler.handler) {
                        handleObjIn = handler;
                        handler = handleObjIn.handler;
                        selector = handleObjIn.selector
                    }
                    if (!handler.guid) {
                        handler.guid = jQuery.guid++
                    }
                    if (!(events = elemData.events)) {
                        events = elemData.events = {}
                    }
                    if (!(eventHandle = elemData.handle)) {
                        eventHandle = elemData.handle = function(e) {
                            return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined
                        }
                    }
                    types = (types || "").match(rnotwhite) || [""];
                    t = types.length;
                    while (t--) {
                        tmp = rtypenamespace.exec(types[t]) || [];
                        type = origType = tmp[1];
                        namespaces = (tmp[2] || "").split(".").sort();
                        if (!type) {
                            continue
                        }
                        special = jQuery.event.special[type] || {};
                        type = (selector ? special.delegateType : special.bindType) || type;
                        special = jQuery.event.special[type] || {};
                        handleObj = jQuery.extend({
                            type: type,
                            origType: origType,
                            data: data,
                            handler: handler,
                            guid: handler.guid,
                            selector: selector,
                            needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                            namespace: namespaces.join(".")
                        }, handleObjIn);
                        if (!(handlers = events[type])) {
                            handlers = events[type] = [];
                            handlers.delegateCount = 0;
                            if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                                if (elem.addEventListener) {
                                    elem.addEventListener(type, eventHandle, false)
                                }
                            }
                        }
                        if (special.add) {
                            special.add.call(elem, handleObj);
                            if (!handleObj.handler.guid) {
                                handleObj.handler.guid = handler.guid
                            }
                        }
                        if (selector) {
                            handlers.splice(handlers.delegateCount++, 0, handleObj)
                        } else {
                            handlers.push(handleObj)
                        }
                        jQuery.event.global[type] = true
                    }
                },
                remove: function(elem, types, handler, selector, mappedTypes) {
                    var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = data_priv.hasData(elem) && data_priv.get(elem);
                    if (!elemData || !(events = elemData.events)) {
                        return
                    }
                    types = (types || "").match(rnotwhite) || [""];
                    t = types.length;
                    while (t--) {
                        tmp = rtypenamespace.exec(types[t]) || [];
                        type = origType = tmp[1];
                        namespaces = (tmp[2] || "").split(".").sort();
                        if (!type) {
                            for (type in events) {
                                jQuery.event.remove(elem, type + types[t], handler, selector, true)
                            }
                            continue
                        }
                        special = jQuery.event.special[type] || {};
                        type = (selector ? special.delegateType : special.bindType) || type;
                        handlers = events[type] || [];
                        tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
                        origCount = j = handlers.length;
                        while (j--) {
                            handleObj = handlers[j];
                            if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                                handlers.splice(j, 1);
                                if (handleObj.selector) {
                                    handlers.delegateCount--
                                }
                                if (special.remove) {
                                    special.remove.call(elem, handleObj)
                                }
                            }
                        }
                        if (origCount && !handlers.length) {
                            if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                                jQuery.removeEvent(elem, type, elemData.handle)
                            }
                            delete events[type]
                        }
                    }
                    if (jQuery.isEmptyObject(events)) {
                        delete elemData.handle;
                        data_priv.remove(elem, "events")
                    }
                },
                trigger: function(event, data, elem, onlyHandlers) {
                    var i, cur, tmp, bubbleType, ontype, handle, special, eventPath = [elem || document],
                        type = hasOwn.call(event, "type") ? event.type : event,
                        namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
                    cur = tmp = elem = elem || document;
                    if (elem.nodeType === 3 || elem.nodeType === 8) {
                        return
                    }
                    if (rfocusMorph.test(type + jQuery.event.triggered)) {
                        return
                    }
                    if (type.indexOf(".") >= 0) {
                        namespaces = type.split(".");
                        type = namespaces.shift();
                        namespaces.sort()
                    }
                    ontype = type.indexOf(":") < 0 && "on" + type;
                    event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);
                    event.isTrigger = onlyHandlers ? 2 : 3;
                    event.namespace = namespaces.join(".");
                    event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
                    event.result = undefined;
                    if (!event.target) {
                        event.target = elem
                    }
                    data = data == null ? [event] : jQuery.makeArray(data, [event]);
                    special = jQuery.event.special[type] || {};
                    if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
                        return
                    }
                    if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
                        bubbleType = special.delegateType || type;
                        if (!rfocusMorph.test(bubbleType + type)) {
                            cur = cur.parentNode
                        }
                        for (; cur; cur = cur.parentNode) {
                            eventPath.push(cur);
                            tmp = cur
                        }
                        if (tmp === (elem.ownerDocument || document)) {
                            eventPath.push(tmp.defaultView || tmp.parentWindow || window)
                        }
                    }
                    i = 0;
                    while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                        event.type = i > 1 ? bubbleType : special.bindType || type;
                        handle = (data_priv.get(cur, "events") || {})[event.type] && data_priv.get(cur, "handle");
                        if (handle) {
                            handle.apply(cur, data)
                        }
                        handle = ontype && cur[ontype];
                        if (handle && handle.apply && jQuery.acceptData(cur)) {
                            event.result = handle.apply(cur, data);
                            if (event.result === false) {
                                event.preventDefault()
                            }
                        }
                    }
                    event.type = type;
                    if (!onlyHandlers && !event.isDefaultPrevented()) {
                        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {
                            if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {
                                tmp = elem[ontype];
                                if (tmp) {
                                    elem[ontype] = null
                                }
                                jQuery.event.triggered = type;
                                elem[type]();
                                jQuery.event.triggered = undefined;
                                if (tmp) {
                                    elem[ontype] = tmp
                                }
                            }
                        }
                    }
                    return event.result
                },
                dispatch: function(event) {
                    event = jQuery.event.fix(event);
                    var i, j, ret, matched, handleObj, handlerQueue = [],
                        args = slice.call(arguments),
                        handlers = (data_priv.get(this, "events") || {})[event.type] || [],
                        special = jQuery.event.special[event.type] || {};
                    args[0] = event;
                    event.delegateTarget = this;
                    if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                        return
                    }
                    handlerQueue = jQuery.event.handlers.call(this, event, handlers);
                    i = 0;
                    while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                        event.currentTarget = matched.elem;
                        j = 0;
                        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
                            if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
                                event.handleObj = handleObj;
                                event.data = handleObj.data;
                                ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                                if (ret !== undefined) {
                                    if ((event.result = ret) === false) {
                                        event.preventDefault();
                                        event.stopPropagation()
                                    }
                                }
                            }
                        }
                    }
                    if (special.postDispatch) {
                        special.postDispatch.call(this, event)
                    }
                    return event.result
                },
                handlers: function(event, handlers) {
                    var i, matches, sel, handleObj, handlerQueue = [],
                        delegateCount = handlers.delegateCount,
                        cur = event.target;
                    if (delegateCount && cur.nodeType && (!event.button || event.type !== "click")) {
                        for (; cur !== this; cur = cur.parentNode || this) {
                            if (cur.disabled !== true || event.type !== "click") {
                                matches = [];
                                for (i = 0; i < delegateCount; i++) {
                                    handleObj = handlers[i];
                                    sel = handleObj.selector + " ";
                                    if (matches[sel] === undefined) {
                                        matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length
                                    }
                                    if (matches[sel]) {
                                        matches.push(handleObj)
                                    }
                                }
                                if (matches.length) {
                                    handlerQueue.push({
                                        elem: cur,
                                        handlers: matches
                                    })
                                }
                            }
                        }
                    }
                    if (delegateCount < handlers.length) {
                        handlerQueue.push({
                            elem: this,
                            handlers: handlers.slice(delegateCount)
                        })
                    }
                    return handlerQueue
                },
                props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
                fixHooks: {},
                keyHooks: {
                    props: "char charCode key keyCode".split(" "),
                    filter: function(event, original) {
                        if (event.which == null) {
                            event.which = original.charCode != null ? original.charCode : original.keyCode
                        }
                        return event
                    }
                },
                mouseHooks: {
                    props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
                    filter: function(event, original) {
                        var eventDoc, doc, body, button = original.button;
                        if (event.pageX == null && original.clientX != null) {
                            eventDoc = event.target.ownerDocument || document;
                            doc = eventDoc.documentElement;
                            body = eventDoc.body;
                            event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                            event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0)
                        }
                        if (!event.which && button !== undefined) {
                            event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0
                        }
                        return event
                    }
                },
                fix: function(event) {
                    if (event[jQuery.expando]) {
                        return event
                    }
                    var i, prop, copy, type = event.type,
                        originalEvent = event,
                        fixHook = this.fixHooks[type];
                    if (!fixHook) {
                        this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {}
                    }
                    copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
                    event = new jQuery.Event(originalEvent);
                    i = copy.length;
                    while (i--) {
                        prop = copy[i];
                        event[prop] = originalEvent[prop]
                    }
                    if (!event.target) {
                        event.target = document
                    }
                    if (event.target.nodeType === 3) {
                        event.target = event.target.parentNode
                    }
                    return fixHook.filter ? fixHook.filter(event, originalEvent) : event
                },
                special: {
                    load: {
                        noBubble: true
                    },
                    focus: {
                        trigger: function() {
                            if (this !== safeActiveElement() && this.focus) {
                                this.focus();
                                return false
                            }
                        },
                        delegateType: "focusin"
                    },
                    blur: {
                        trigger: function() {
                            if (this === safeActiveElement() && this.blur) {
                                this.blur();
                                return false
                            }
                        },
                        delegateType: "focusout"
                    },
                    click: {
                        trigger: function() {
                            if (this.type === "checkbox" && this.click && jQuery.nodeName(this, "input")) {
                                this.click();
                                return false
                            }
                        },
                        _default: function(event) {
                            return jQuery.nodeName(event.target, "a")
                        }
                    },
                    beforeunload: {
                        postDispatch: function(event) {
                            if (event.result !== undefined && event.originalEvent) {
                                event.originalEvent.returnValue = event.result
                            }
                        }
                    }
                },
                simulate: function(type, elem, event, bubble) {
                    var e = jQuery.extend(new jQuery.Event, event, {
                        type: type,
                        isSimulated: true,
                        originalEvent: {}
                    });
                    if (bubble) {
                        jQuery.event.trigger(e, null, elem)
                    } else {
                        jQuery.event.dispatch.call(elem, e)
                    }
                    if (e.isDefaultPrevented()) {
                        event.preventDefault()
                    }
                }
            };
            jQuery.removeEvent = function(elem, type, handle) {
                if (elem.removeEventListener) {
                    elem.removeEventListener(type, handle, false)
                }
            };
            jQuery.Event = function(src, props) {
                if (!(this instanceof jQuery.Event)) {
                    return new jQuery.Event(src, props)
                }
                if (src && src.type) {
                    this.originalEvent = src;
                    this.type = src.type;
                    this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && src.returnValue === false ? returnTrue : returnFalse
                } else {
                    this.type = src
                }
                if (props) {
                    jQuery.extend(this, props)
                }
                this.timeStamp = src && src.timeStamp || jQuery.now();
                this[jQuery.expando] = true
            };
            jQuery.Event.prototype = {
                isDefaultPrevented: returnFalse,
                isPropagationStopped: returnFalse,
                isImmediatePropagationStopped: returnFalse,
                preventDefault: function() {
                    var e = this.originalEvent;
                    this.isDefaultPrevented = returnTrue;
                    if (e && e.preventDefault) {
                        e.preventDefault()
                    }
                },
                stopPropagation: function() {
                    var e = this.originalEvent;
                    this.isPropagationStopped = returnTrue;
                    if (e && e.stopPropagation) {
                        e.stopPropagation()
                    }
                },
                stopImmediatePropagation: function() {
                    var e = this.originalEvent;
                    this.isImmediatePropagationStopped = returnTrue;
                    if (e && e.stopImmediatePropagation) {
                        e.stopImmediatePropagation()
                    }
                    this.stopPropagation()
                }
            };
            jQuery.each({
                mouseenter: "mouseover",
                mouseleave: "mouseout",
                pointerenter: "pointerover",
                pointerleave: "pointerout"
            }, function(orig, fix) {
                jQuery.event.special[orig] = {
                    delegateType: fix,
                    bindType: fix,
                    handle: function(event) {
                        var ret, target = this,
                            related = event.relatedTarget,
                            handleObj = event.handleObj;
                        if (!related || related !== target && !jQuery.contains(target, related)) {
                            event.type = handleObj.origType;
                            ret = handleObj.handler.apply(this, arguments);
                            event.type = fix
                        }
                        return ret
                    }
                }
            });
            if (!support.focusinBubbles) {
                jQuery.each({
                    focus: "focusin",
                    blur: "focusout"
                }, function(orig, fix) {
                    var handler = function(event) {
                        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true)
                    };
                    jQuery.event.special[fix] = {
                        setup: function() {
                            var doc = this.ownerDocument || this,
                                attaches = data_priv.access(doc, fix);
                            if (!attaches) {
                                doc.addEventListener(orig, handler, true)
                            }
                            data_priv.access(doc, fix, (attaches || 0) + 1)
                        },
                        teardown: function() {
                            var doc = this.ownerDocument || this,
                                attaches = data_priv.access(doc, fix) - 1;
                            if (!attaches) {
                                doc.removeEventListener(orig, handler, true);
                                data_priv.remove(doc, fix)
                            } else {
                                data_priv.access(doc, fix, attaches)
                            }
                        }
                    }
                })
            }
            jQuery.fn.extend({
                on: function(types, selector, data, fn, one) {
                    var origFn, type;
                    if (typeof types === "object") {
                        if (typeof selector !== "string") {
                            data = data || selector;
                            selector = undefined
                        }
                        for (type in types) {
                            this.on(type, selector, data, types[type], one)
                        }
                        return this
                    }
                    if (data == null && fn == null) {
                        fn = selector;
                        data = selector = undefined
                    } else if (fn == null) {
                        if (typeof selector === "string") {
                            fn = data;
                            data = undefined
                        } else {
                            fn = data;
                            data = selector;
                            selector = undefined
                        }
                    }
                    if (fn === false) {
                        fn = returnFalse
                    } else if (!fn) {
                        return this
                    }
                    if (one === 1) {
                        origFn = fn;
                        fn = function(event) {
                            jQuery().off(event);
                            return origFn.apply(this, arguments)
                        };
                        fn.guid = origFn.guid || (origFn.guid = jQuery.guid++)
                    }
                    return this.each(function() {
                        jQuery.event.add(this, types, fn, data, selector)
                    })
                },
                one: function(types, selector, data, fn) {
                    return this.on(types, selector, data, fn, 1)
                },
                off: function(types, selector, fn) {
                    var handleObj, type;
                    if (types && types.preventDefault && types.handleObj) {
                        handleObj = types.handleObj;
                        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
                        return this
                    }
                    if (typeof types === "object") {
                        for (type in types) {
                            this.off(type, selector, types[type])
                        }
                        return this
                    }
                    if (selector === false || typeof selector === "function") {
                        fn = selector;
                        selector = undefined
                    }
                    if (fn === false) {
                        fn = returnFalse
                    }
                    return this.each(function() {
                        jQuery.event.remove(this, types, fn, selector)
                    })
                },
                trigger: function(type, data) {
                    return this.each(function() {
                        jQuery.event.trigger(type, data, this)
                    })
                },
                triggerHandler: function(type, data) {
                    var elem = this[0];
                    if (elem) {
                        return jQuery.event.trigger(type, data, elem, true)
                    }
                }
            });
            var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
                rtagName = /<([\w:]+)/,
                rhtml = /<|&#?\w+;/,
                rnoInnerhtml = /<(?:script|style|link)/i,
                rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
                rscriptType = /^$|\/(?:java|ecma)script/i,
                rscriptTypeMasked = /^true\/(.*)/,
                rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
                wrapMap = {
                    option: [1, "<select multiple='multiple'>", "</select>"],
                    thead: [1, "<table>", "</table>"],
                    col: [2, "<table><colgroup>", "</colgroup></table>"],
                    tr: [2, "<table><tbody>", "</tbody></table>"],
                    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
                    _default: [0, "", ""]
                };
            wrapMap.optgroup = wrapMap.option;
            wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
            wrapMap.th = wrapMap.td;

            function manipulationTarget(elem, content) {
                return jQuery.nodeName(elem, "table") && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem
            }

            function disableScript(elem) {
                elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
                return elem
            }

            function restoreScript(elem) {
                var match = rscriptTypeMasked.exec(elem.type);
                if (match) {
                    elem.type = match[1]
                } else {
                    elem.removeAttribute("type")
                }
                return elem
            }

            function setGlobalEval(elems, refElements) {
                var i = 0,
                    l = elems.length;
                for (; i < l; i++) {
                    data_priv.set(elems[i], "globalEval", !refElements || data_priv.get(refElements[i], "globalEval"))
                }
            }

            function cloneCopyEvent(src, dest) {
                var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
                if (dest.nodeType !== 1) {
                    return
                }
                if (data_priv.hasData(src)) {
                    pdataOld = data_priv.access(src);
                    pdataCur = data_priv.set(dest, pdataOld);
                    events = pdataOld.events;
                    if (events) {
                        delete pdataCur.handle;
                        pdataCur.events = {};
                        for (type in events) {
                            for (i = 0, l = events[type].length; i < l; i++) {
                                jQuery.event.add(dest, type, events[type][i])
                            }
                        }
                    }
                }
                if (data_user.hasData(src)) {
                    udataOld = data_user.access(src);
                    udataCur = jQuery.extend({}, udataOld);
                    data_user.set(dest, udataCur)
                }
            }

            function getAll(context, tag) {
                var ret = context.getElementsByTagName ? context.getElementsByTagName(tag || "*") : context.querySelectorAll ? context.querySelectorAll(tag || "*") : [];
                return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret
            }

            function fixInput(src, dest) {
                var nodeName = dest.nodeName.toLowerCase();
                if (nodeName === "input" && rcheckableType.test(src.type)) {
                    dest.checked = src.checked
                } else if (nodeName === "input" || nodeName === "textarea") {
                    dest.defaultValue = src.defaultValue
                }
            }
            jQuery.extend({
                clone: function(elem, dataAndEvents, deepDataAndEvents) {
                    var i, l, srcElements, destElements, clone = elem.cloneNode(true),
                        inPage = jQuery.contains(elem.ownerDocument, elem);
                    if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
                        destElements = getAll(clone);
                        srcElements = getAll(elem);
                        for (i = 0, l = srcElements.length; i < l; i++) {
                            fixInput(srcElements[i], destElements[i])
                        }
                    }
                    if (dataAndEvents) {
                        if (deepDataAndEvents) {
                            srcElements = srcElements || getAll(elem);
                            destElements = destElements || getAll(clone);
                            for (i = 0, l = srcElements.length; i < l; i++) {
                                cloneCopyEvent(srcElements[i], destElements[i])
                            }
                        } else {
                            cloneCopyEvent(elem, clone)
                        }
                    }
                    destElements = getAll(clone, "script");
                    if (destElements.length > 0) {
                        setGlobalEval(destElements, !inPage && getAll(elem, "script"))
                    }
                    return clone
                },
                buildFragment: function(elems, context, scripts, selection) {
                    var elem, tmp, tag, wrap, contains, j, fragment = context.createDocumentFragment(),
                        nodes = [],
                        i = 0,
                        l = elems.length;
                    for (; i < l; i++) {
                        elem = elems[i];
                        if (elem || elem === 0) {
                            if (jQuery.type(elem) === "object") {
                                jQuery.merge(nodes, elem.nodeType ? [elem] : elem)
                            } else if (!rhtml.test(elem)) {
                                nodes.push(context.createTextNode(elem))
                            } else {
                                tmp = tmp || fragment.appendChild(context.createElement("div"));
                                tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
                                wrap = wrapMap[tag] || wrapMap._default;
                                tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];
                                j = wrap[0];
                                while (j--) {
                                    tmp = tmp.lastChild
                                }
                                jQuery.merge(nodes, tmp.childNodes);
                                tmp = fragment.firstChild;
                                tmp.textContent = ""
                            }
                        }
                    }
                    fragment.textContent = "";
                    i = 0;
                    while (elem = nodes[i++]) {
                        if (selection && jQuery.inArray(elem, selection) !== -1) {
                            continue
                        }
                        contains = jQuery.contains(elem.ownerDocument, elem);
                        tmp = getAll(fragment.appendChild(elem), "script");
                        if (contains) {
                            setGlobalEval(tmp)
                        }
                        if (scripts) {
                            j = 0;
                            while (elem = tmp[j++]) {
                                if (rscriptType.test(elem.type || "")) {
                                    scripts.push(elem)
                                }
                            }
                        }
                    }
                    return fragment
                },
                cleanData: function(elems) {
                    var data, elem, type, key, special = jQuery.event.special,
                        i = 0;
                    for (;
                        (elem = elems[i]) !== undefined; i++) {
                        if (jQuery.acceptData(elem)) {
                            key = elem[data_priv.expando];
                            if (key && (data = data_priv.cache[key])) {
                                if (data.events) {
                                    for (type in data.events) {
                                        if (special[type]) {
                                            jQuery.event.remove(elem, type)
                                        } else {
                                            jQuery.removeEvent(elem, type, data.handle)
                                        }
                                    }
                                }
                                if (data_priv.cache[key]) {
                                    delete data_priv.cache[key]
                                }
                            }
                        }
                        delete data_user.cache[elem[data_user.expando]]
                    }
                }
            });
            jQuery.fn.extend({
                text: function(value) {
                    return access(this, function(value) {
                        return value === undefined ? jQuery.text(this) : this.empty().each(function() {
                            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                                this.textContent = value
                            }
                        })
                    }, null, value, arguments.length)
                },
                append: function() {
                    return this.domManip(arguments, function(elem) {
                        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                            var target = manipulationTarget(this, elem);
                            target.appendChild(elem)
                        }
                    })
                },
                prepend: function() {
                    return this.domManip(arguments, function(elem) {
                        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                            var target = manipulationTarget(this, elem);
                            target.insertBefore(elem, target.firstChild)
                        }
                    })
                },
                before: function() {
                    return this.domManip(arguments, function(elem) {
                        if (this.parentNode) {
                            this.parentNode.insertBefore(elem, this)
                        }
                    })
                },
                after: function() {
                    return this.domManip(arguments, function(elem) {
                        if (this.parentNode) {
                            this.parentNode.insertBefore(elem, this.nextSibling)
                        }
                    })
                },
                remove: function(selector, keepData) {
                    var elem, elems = selector ? jQuery.filter(selector, this) : this,
                        i = 0;
                    for (;
                        (elem = elems[i]) != null; i++) {
                        if (!keepData && elem.nodeType === 1) {
                            jQuery.cleanData(getAll(elem))
                        }
                        if (elem.parentNode) {
                            if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
                                setGlobalEval(getAll(elem, "script"))
                            }
                            elem.parentNode.removeChild(elem)
                        }
                    }
                    return this
                },
                empty: function() {
                    var elem, i = 0;
                    for (;
                        (elem = this[i]) != null; i++) {
                        if (elem.nodeType === 1) {
                            jQuery.cleanData(getAll(elem, false));
                            elem.textContent = ""
                        }
                    }
                    return this
                },
                clone: function(dataAndEvents, deepDataAndEvents) {
                    dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
                    deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
                    return this.map(function() {
                        return jQuery.clone(this, dataAndEvents, deepDataAndEvents)
                    })
                },
                html: function(value) {
                    return access(this, function(value) {
                        var elem = this[0] || {},
                            i = 0,
                            l = this.length;
                        if (value === undefined && elem.nodeType === 1) {
                            return elem.innerHTML
                        }
                        if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
                            value = value.replace(rxhtmlTag, "<$1></$2>");
                            try {
                                for (; i < l; i++) {
                                    elem = this[i] || {};
                                    if (elem.nodeType === 1) {
                                        jQuery.cleanData(getAll(elem, false));
                                        elem.innerHTML = value
                                    }
                                }
                                elem = 0
                            } catch (e) {}
                        }
                        if (elem) {
                            this.empty().append(value)
                        }
                    }, null, value, arguments.length)
                },
                replaceWith: function() {
                    var arg = arguments[0];
                    this.domManip(arguments, function(elem) {
                        arg = this.parentNode;
                        jQuery.cleanData(getAll(this));
                        if (arg) {
                            arg.replaceChild(elem, this)
                        }
                    });
                    return arg && (arg.length || arg.nodeType) ? this : this.remove()
                },
                detach: function(selector) {
                    return this.remove(selector, true)
                },
                domManip: function(args, callback) {
                    args = concat.apply([], args);
                    var fragment, first, scripts, hasScripts, node, doc, i = 0,
                        l = this.length,
                        set = this,
                        iNoClone = l - 1,
                        value = args[0],
                        isFunction = jQuery.isFunction(value);
                    if (isFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
                        return this.each(function(index) {
                            var self = set.eq(index);
                            if (isFunction) {
                                args[0] = value.call(this, index, self.html())
                            }
                            self.domManip(args, callback)
                        })
                    }
                    if (l) {
                        fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);
                        first = fragment.firstChild;
                        if (fragment.childNodes.length === 1) {
                            fragment = first
                        }
                        if (first) {
                            scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                            hasScripts = scripts.length;
                            for (; i < l; i++) {
                                node = fragment;
                                if (i !== iNoClone) {
                                    node = jQuery.clone(node, true, true);
                                    if (hasScripts) {
                                        jQuery.merge(scripts, getAll(node, "script"))
                                    }
                                }
                                callback.call(this[i], node, i)
                            }
                            if (hasScripts) {
                                doc = scripts[scripts.length - 1].ownerDocument;
                                jQuery.map(scripts, restoreScript);
                                for (i = 0; i < hasScripts; i++) {
                                    node = scripts[i];
                                    if (rscriptType.test(node.type || "") && !data_priv.access(node, "globalEval") && jQuery.contains(doc, node)) {
                                        if (node.src) {
                                            if (jQuery._evalUrl) {
                                                jQuery._evalUrl(node.src)
                                            }
                                        } else {
                                            jQuery.globalEval(node.textContent.replace(rcleanScript, ""))
                                        }
                                    }
                                }
                            }
                        }
                    }
                    return this
                }
            });
            jQuery.each({
                appendTo: "append",
                prependTo: "prepend",
                insertBefore: "before",
                insertAfter: "after",
                replaceAll: "replaceWith"
            }, function(name, original) {
                jQuery.fn[name] = function(selector) {
                    var elems, ret = [],
                        insert = jQuery(selector),
                        last = insert.length - 1,
                        i = 0;
                    for (; i <= last; i++) {
                        elems = i === last ? this : this.clone(true);
                        jQuery(insert[i])[original](elems);
                        push.apply(ret, elems.get())
                    }
                    return this.pushStack(ret)
                }
            });
            var iframe, elemdisplay = {};

            function actualDisplay(name, doc) {
                var style, elem = jQuery(doc.createElement(name)).appendTo(doc.body),
                    display = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ? style.display : jQuery.css(elem[0], "display");
                elem.detach();
                return display
            }

            function defaultDisplay(nodeName) {
                var doc = document,
                    display = elemdisplay[nodeName];
                if (!display) {
                    display = actualDisplay(nodeName, doc);
                    if (display === "none" || !display) {
                        iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement);
                        doc = iframe[0].contentDocument;
                        doc.write();
                        doc.close();
                        display = actualDisplay(nodeName, doc);
                        iframe.detach()
                    }
                    elemdisplay[nodeName] = display
                }
                return display
            }
            var rmargin = /^margin/;
            var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
            var getStyles = function(elem) {
                return elem.ownerDocument.defaultView.getComputedStyle(elem, null)
            };

            function curCSS(elem, name, computed) {
                var width, minWidth, maxWidth, ret, style = elem.style;
                computed = computed || getStyles(elem);
                if (computed) {
                    ret = computed.getPropertyValue(name) || computed[name]
                }
                if (computed) {
                    if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
                        ret = jQuery.style(elem, name)
                    }
                    if (rnumnonpx.test(ret) && rmargin.test(name)) {
                        width = style.width;
                        minWidth = style.minWidth;
                        maxWidth = style.maxWidth;
                        style.minWidth = style.maxWidth = style.width = ret;
                        ret = computed.width;
                        style.width = width;
                        style.minWidth = minWidth;
                        style.maxWidth = maxWidth
                    }
                }
                return ret !== undefined ? ret + "" : ret
            }

            function addGetHookIf(conditionFn, hookFn) {
                return {
                    get: function() {
                        if (conditionFn()) {
                            delete this.get;
                            return
                        }
                        return (this.get = hookFn).apply(this, arguments)
                    }
                }
            }(function() {
                var pixelPositionVal, boxSizingReliableVal, docElem = document.documentElement,
                    container = document.createElement("div"),
                    div = document.createElement("div");
                if (!div.style) {
                    return
                }
                div.style.backgroundClip = "content-box";
                div.cloneNode(true).style.backgroundClip = "";
                support.clearCloneStyle = div.style.backgroundClip === "content-box";
                container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" + "position:absolute";
                container.appendChild(div);

                function computePixelPositionAndBoxSizingReliable() {
                    div.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" + "box-sizing:border-box;display:block;margin-top:1%;top:1%;" + "border:1px;padding:1px;width:4px;position:absolute";
                    div.innerHTML = "";
                    docElem.appendChild(container);
                    var divStyle = window.getComputedStyle(div, null);
                    pixelPositionVal = divStyle.top !== "1%";
                    boxSizingReliableVal = divStyle.width === "4px";
                    docElem.removeChild(container)
                }
                if (window.getComputedStyle) {
                    jQuery.extend(support, {
                        pixelPosition: function() {
                            computePixelPositionAndBoxSizingReliable();
                            return pixelPositionVal
                        },
                        boxSizingReliable: function() {
                            if (boxSizingReliableVal == null) {
                                computePixelPositionAndBoxSizingReliable()
                            }
                            return boxSizingReliableVal
                        },
                        reliableMarginRight: function() {
                            var ret, marginDiv = div.appendChild(document.createElement("div"));
                            marginDiv.style.cssText = div.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + "box-sizing:content-box;display:block;margin:0;border:0;padding:0";
                            marginDiv.style.marginRight = marginDiv.style.width = "0";
                            div.style.width = "1px";
                            docElem.appendChild(container);
                            ret = !parseFloat(window.getComputedStyle(marginDiv, null).marginRight);
                            docElem.removeChild(container);
                            return ret
                        }
                    })
                }
            })();
            jQuery.swap = function(elem, options, callback, args) {
                var ret, name, old = {};
                for (name in options) {
                    old[name] = elem.style[name];
                    elem.style[name] = options[name]
                }
                ret = callback.apply(elem, args || []);
                for (name in options) {
                    elem.style[name] = old[name]
                }
                return ret
            };
            var rdisplayswap = /^(none|table(?!-c[ea]).+)/,
                rnumsplit = new RegExp("^(" + pnum + ")(.*)$", "i"),
                rrelNum = new RegExp("^([+-])=(" + pnum + ")", "i"),
                cssShow = {
                    position: "absolute",
                    visibility: "hidden",
                    display: "block"
                },
                cssNormalTransform = {
                    letterSpacing: "0",
                    fontWeight: "400"
                },
                cssPrefixes = ["Webkit", "O", "Moz", "ms"];

            function vendorPropName(style, name) {
                if (name in style) {
                    return name
                }
                var capName = name[0].toUpperCase() + name.slice(1),
                    origName = name,
                    i = cssPrefixes.length;
                while (i--) {
                    name = cssPrefixes[i] + capName;
                    if (name in style) {
                        return name
                    }
                }
                return origName
            }

            function setPositiveNumber(elem, value, subtract) {
                var matches = rnumsplit.exec(value);
                return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value
            }

            function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
                var i = extra === (isBorderBox ? "border" : "content") ? 4 : name === "width" ? 1 : 0,
                    val = 0;
                for (; i < 4; i += 2) {
                    if (extra === "margin") {
                        val += jQuery.css(elem, extra + cssExpand[i], true, styles)
                    }
                    if (isBorderBox) {
                        if (extra === "content") {
                            val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles)
                        }
                        if (extra !== "margin") {
                            val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles)
                        }
                    } else {
                        val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                        if (extra !== "padding") {
                            val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles)
                        }
                    }
                }
                return val
            }

            function getWidthOrHeight(elem, name, extra) {
                var valueIsBorderBox = true,
                    val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
                    styles = getStyles(elem),
                    isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";
                if (val <= 0 || val == null) {
                    val = curCSS(elem, name, styles);
                    if (val < 0 || val == null) {
                        val = elem.style[name]
                    }
                    if (rnumnonpx.test(val)) {
                        return val
                    }
                    valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);
                    val = parseFloat(val) || 0
                }
                return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px"
            }

            function showHide(elements, show) {
                var display, elem, hidden, values = [],
                    index = 0,
                    length = elements.length;
                for (; index < length; index++) {
                    elem = elements[index];
                    if (!elem.style) {
                        continue
                    }
                    values[index] = data_priv.get(elem, "olddisplay");
                    display = elem.style.display;
                    if (show) {
                        if (!values[index] && display === "none") {
                            elem.style.display = ""
                        }
                        if (elem.style.display === "" && isHidden(elem)) {
                            values[index] = data_priv.access(elem, "olddisplay", defaultDisplay(elem.nodeName))
                        }
                    } else {
                        hidden = isHidden(elem);
                        if (display !== "none" || !hidden) {
                            data_priv.set(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"))
                        }
                    }
                }
                for (index = 0; index < length; index++) {
                    elem = elements[index];
                    if (!elem.style) {
                        continue
                    }
                    if (!show || elem.style.display === "none" || elem.style.display === "") {
                        elem.style.display = show ? values[index] || "" : "none"
                    }
                }
                return elements
            }
            jQuery.extend({
                cssHooks: {
                    opacity: {
                        get: function(elem, computed) {
                            if (computed) {
                                var ret = curCSS(elem, "opacity");
                                return ret === "" ? "1" : ret
                            }
                        }
                    }
                },
                cssNumber: {
                    columnCount: true,
                    fillOpacity: true,
                    flexGrow: true,
                    flexShrink: true,
                    fontWeight: true,
                    lineHeight: true,
                    opacity: true,
                    order: true,
                    orphans: true,
                    widows: true,
                    zIndex: true,
                    zoom: true
                },
                cssProps: {
                    float: "cssFloat"
                },
                style: function(elem, name, value, extra) {
                    if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                        return
                    }
                    var ret, type, hooks, origName = jQuery.camelCase(name),
                        style = elem.style;
                    name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
                    hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
                    if (value !== undefined) {
                        type = typeof value;
                        if (type === "string" && (ret = rrelNum.exec(value))) {
                            value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
                            type = "number"
                        }
                        if (value == null || value !== value) {
                            return
                        }
                        if (type === "number" && !jQuery.cssNumber[origName]) {
                            value += "px"
                        }
                        if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
                            style[name] = "inherit"
                        }
                        if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
                            style[name] = value
                        }
                    } else {
                        if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                            return ret
                        }
                        return style[name]
                    }
                },
                css: function(elem, name, extra, styles) {
                    var val, num, hooks, origName = jQuery.camelCase(name);
                    name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
                    hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
                    if (hooks && "get" in hooks) {
                        val = hooks.get(elem, true, extra)
                    }
                    if (val === undefined) {
                        val = curCSS(elem, name, styles)
                    }
                    if (val === "normal" && name in cssNormalTransform) {
                        val = cssNormalTransform[name]
                    }
                    if (extra === "" || extra) {
                        num = parseFloat(val);
                        return extra === true || jQuery.isNumeric(num) ? num || 0 : val
                    }
                    return val
                }
            });
            jQuery.each(["height", "width"], function(i, name) {
                jQuery.cssHooks[name] = {
                    get: function(elem, computed, extra) {
                        if (computed) {
                            return rdisplayswap.test(jQuery.css(elem, "display")) && elem.offsetWidth === 0 ? jQuery.swap(elem, cssShow, function() {
                                return getWidthOrHeight(elem, name, extra)
                            }) : getWidthOrHeight(elem, name, extra)
                        }
                    },
                    set: function(elem, value, extra) {
                        var styles = extra && getStyles(elem);
                        return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles) : 0)
                    }
                }
            });
            jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function(elem, computed) {
                if (computed) {
                    return jQuery.swap(elem, {
                        display: "inline-block"
                    }, curCSS, [elem, "marginRight"])
                }
            });
            jQuery.each({
                margin: "",
                padding: "",
                border: "Width"
            }, function(prefix, suffix) {
                jQuery.cssHooks[prefix + suffix] = {
                    expand: function(value) {
                        var i = 0,
                            expanded = {},
                            parts = typeof value === "string" ? value.split(" ") : [value];
                        for (; i < 4; i++) {
                            expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0]
                        }
                        return expanded
                    }
                };
                if (!rmargin.test(prefix)) {
                    jQuery.cssHooks[prefix + suffix].set = setPositiveNumber
                }
            });
            jQuery.fn.extend({
                css: function(name, value) {
                    return access(this, function(elem, name, value) {
                        var styles, len, map = {},
                            i = 0;
                        if (jQuery.isArray(name)) {
                            styles = getStyles(elem);
                            len = name.length;
                            for (; i < len; i++) {
                                map[name[i]] = jQuery.css(elem, name[i], false, styles)
                            }
                            return map
                        }
                        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name)
                    }, name, value, arguments.length > 1)
                },
                show: function() {
                    return showHide(this, true)
                },
                hide: function() {
                    return showHide(this)
                },
                toggle: function(state) {
                    if (typeof state === "boolean") {
                        return state ? this.show() : this.hide()
                    }
                    return this.each(function() {
                        if (isHidden(this)) {
                            jQuery(this).show()
                        } else {
                            jQuery(this).hide()
                        }
                    })
                }
            });

            function Tween(elem, options, prop, end, easing) {
                return new Tween.prototype.init(elem, options, prop, end, easing)
            }
            jQuery.Tween = Tween;
            Tween.prototype = {
                constructor: Tween,
                init: function(elem, options, prop, end, easing, unit) {
                    this.elem = elem;
                    this.prop = prop;
                    this.easing = easing || "swing";
                    this.options = options;
                    this.start = this.now = this.cur();
                    this.end = end;
                    this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px")
                },
                cur: function() {
                    var hooks = Tween.propHooks[this.prop];
                    return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this)
                },
                run: function(percent) {
                    var eased, hooks = Tween.propHooks[this.prop];
                    if (this.options.duration) {
                        this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration)
                    } else {
                        this.pos = eased = percent
                    }
                    this.now = (this.end - this.start) * eased + this.start;
                    if (this.options.step) {
                        this.options.step.call(this.elem, this.now, this)
                    }
                    if (hooks && hooks.set) {
                        hooks.set(this)
                    } else {
                        Tween.propHooks._default.set(this)
                    }
                    return this
                }
            };
            Tween.prototype.init.prototype = Tween.prototype;
            Tween.propHooks = {
                _default: {
                    get: function(tween) {
                        var result;
                        if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
                            return tween.elem[tween.prop]
                        }
                        result = jQuery.css(tween.elem, tween.prop, "");
                        return !result || result === "auto" ? 0 : result
                    },
                    set: function(tween) {
                        if (jQuery.fx.step[tween.prop]) {
                            jQuery.fx.step[tween.prop](tween)
                        } else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
                            jQuery.style(tween.elem, tween.prop, tween.now + tween.unit)
                        } else {
                            tween.elem[tween.prop] = tween.now
                        }
                    }
                }
            };
            Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
                set: function(tween) {
                    if (tween.elem.nodeType && tween.elem.parentNode) {
                        tween.elem[tween.prop] = tween.now
                    }
                }
            };
            jQuery.easing = {
                linear: function(p) {
                    return p
                },
                swing: function(p) {
                    return .5 - Math.cos(p * Math.PI) / 2
                }
            };
            jQuery.fx = Tween.prototype.init;
            jQuery.fx.step = {};
            var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/,
                rfxnum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i"),
                rrun = /queueHooks$/,
                animationPrefilters = [defaultPrefilter],
                tweeners = {
                    "*": [function(prop, value) {
                        var tween = this.createTween(prop, value),
                            target = tween.cur(),
                            parts = rfxnum.exec(value),
                            unit = parts && parts[3] || (jQuery.cssNumber[prop] ? "" : "px"),
                            start = (jQuery.cssNumber[prop] || unit !== "px" && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)),
                            scale = 1,
                            maxIterations = 20;
                        if (start && start[3] !== unit) {
                            unit = unit || start[3];
                            parts = parts || [];
                            start = +target || 1;
                            do {
                                scale = scale || ".5";
                                start = start / scale;
                                jQuery.style(tween.elem, prop, start + unit)
                            } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations)
                        }
                        if (parts) {
                            start = tween.start = +start || +target || 0;
                            tween.unit = unit;
                            tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2]
                        }
                        return tween
                    }]
                };

            function createFxNow() {
                setTimeout(function() {
                    fxNow = undefined
                });
                return fxNow = jQuery.now()
            }

            function genFx(type, includeWidth) {
                var which, i = 0,
                    attrs = {
                        height: type
                    };
                includeWidth = includeWidth ? 1 : 0;
                for (; i < 4; i += 2 - includeWidth) {
                    which = cssExpand[i];
                    attrs["margin" + which] = attrs["padding" + which] = type
                }
                if (includeWidth) {
                    attrs.opacity = attrs.width = type
                }
                return attrs
            }

            function createTween(value, prop, animation) {
                var tween, collection = (tweeners[prop] || []).concat(tweeners["*"]),
                    index = 0,
                    length = collection.length;
                for (; index < length; index++) {
                    if (tween = collection[index].call(animation, prop, value)) {
                        return tween
                    }
                }
            }

            function defaultPrefilter(elem, props, opts) {
                var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay, anim = this,
                    orig = {},
                    style = elem.style,
                    hidden = elem.nodeType && isHidden(elem),
                    dataShow = data_priv.get(elem, "fxshow");
                if (!opts.queue) {
                    hooks = jQuery._queueHooks(elem, "fx");
                    if (hooks.unqueued == null) {
                        hooks.unqueued = 0;
                        oldfire = hooks.empty.fire;
                        hooks.empty.fire = function() {
                            if (!hooks.unqueued) {
                                oldfire()
                            }
                        }
                    }
                    hooks.unqueued++;
                    anim.always(function() {
                        anim.always(function() {
                            hooks.unqueued--;
                            if (!jQuery.queue(elem, "fx").length) {
                                hooks.empty.fire()
                            }
                        })
                    })
                }
                if (elem.nodeType === 1 && ("height" in props || "width" in props)) {
                    opts.overflow = [style.overflow, style.overflowX, style.overflowY];
                    display = jQuery.css(elem, "display");
                    checkDisplay = display === "none" ? data_priv.get(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;
                    if (checkDisplay === "inline" && jQuery.css(elem, "float") === "none") {
                        style.display = "inline-block"
                    }
                }
                if (opts.overflow) {
                    style.overflow = "hidden";
                    anim.always(function() {
                        style.overflow = opts.overflow[0];
                        style.overflowX = opts.overflow[1];
                        style.overflowY = opts.overflow[2]
                    })
                }
                for (prop in props) {
                    value = props[prop];
                    if (rfxtypes.exec(value)) {
                        delete props[prop];
                        toggle = toggle || value === "toggle";
                        if (value === (hidden ? "hide" : "show")) {
                            if (value === "show" && dataShow && dataShow[prop] !== undefined) {
                                hidden = true
                            } else {
                                continue
                            }
                        }
                        orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop)
                    } else {
                        display = undefined
                    }
                }
                if (!jQuery.isEmptyObject(orig)) {
                    if (dataShow) {
                        if ("hidden" in dataShow) {
                            hidden = dataShow.hidden
                        }
                    } else {
                        dataShow = data_priv.access(elem, "fxshow", {})
                    }
                    if (toggle) {
                        dataShow.hidden = !hidden
                    }
                    if (hidden) {
                        jQuery(elem).show()
                    } else {
                        anim.done(function() {
                            jQuery(elem).hide()
                        })
                    }
                    anim.done(function() {
                        var prop;
                        data_priv.remove(elem, "fxshow");
                        for (prop in orig) {
                            jQuery.style(elem, prop, orig[prop])
                        }
                    });
                    for (prop in orig) {
                        tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
                        if (!(prop in dataShow)) {
                            dataShow[prop] = tween.start;
                            if (hidden) {
                                tween.end = tween.start;
                                tween.start = prop === "width" || prop === "height" ? 1 : 0
                            }
                        }
                    }
                } else if ((display === "none" ? defaultDisplay(elem.nodeName) : display) === "inline") {
                    style.display = display
                }
            }

            function propFilter(props, specialEasing) {
                var index, name, easing, value, hooks;
                for (index in props) {
                    name = jQuery.camelCase(index);
                    easing = specialEasing[name];
                    value = props[index];
                    if (jQuery.isArray(value)) {
                        easing = value[1];
                        value = props[index] = value[0]
                    }
                    if (index !== name) {
                        props[name] = value;
                        delete props[index]
                    }
                    hooks = jQuery.cssHooks[name];
                    if (hooks && "expand" in hooks) {
                        value = hooks.expand(value);
                        delete props[name];
                        for (index in value) {
                            if (!(index in props)) {
                                props[index] = value[index];
                                specialEasing[index] = easing
                            }
                        }
                    } else {
                        specialEasing[name] = easing
                    }
                }
            }

            function Animation(elem, properties, options) {
                var result, stopped, index = 0,
                    length = animationPrefilters.length,
                    deferred = jQuery.Deferred().always(function() {
                        delete tick.elem
                    }),
                    tick = function() {
                        if (stopped) {
                            return false
                        }
                        var currentTime = fxNow || createFxNow(),
                            remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
                            temp = remaining / animation.duration || 0,
                            percent = 1 - temp,
                            index = 0,
                            length = animation.tweens.length;
                        for (; index < length; index++) {
                            animation.tweens[index].run(percent)
                        }
                        deferred.notifyWith(elem, [animation, percent, remaining]);
                        if (percent < 1 && length) {
                            return remaining
                        } else {
                            deferred.resolveWith(elem, [animation]);
                            return false
                        }
                    },
                    animation = deferred.promise({
                        elem: elem,
                        props: jQuery.extend({}, properties),
                        opts: jQuery.extend(true, {
                            specialEasing: {}
                        }, options),
                        originalProperties: properties,
                        originalOptions: options,
                        startTime: fxNow || createFxNow(),
                        duration: options.duration,
                        tweens: [],
                        createTween: function(prop, end) {
                            var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                            animation.tweens.push(tween);
                            return tween
                        },
                        stop: function(gotoEnd) {
                            var index = 0,
                                length = gotoEnd ? animation.tweens.length : 0;
                            if (stopped) {
                                return this
                            }
                            stopped = true;
                            for (; index < length; index++) {
                                animation.tweens[index].run(1)
                            }
                            if (gotoEnd) {
                                deferred.resolveWith(elem, [animation, gotoEnd])
                            } else {
                                deferred.rejectWith(elem, [animation, gotoEnd])
                            }
                            return this
                        }
                    }),
                    props = animation.props;
                propFilter(props, animation.opts.specialEasing);
                for (; index < length; index++) {
                    result = animationPrefilters[index].call(animation, elem, props, animation.opts);
                    if (result) {
                        return result
                    }
                }
                jQuery.map(props, createTween, animation);
                if (jQuery.isFunction(animation.opts.start)) {
                    animation.opts.start.call(elem, animation)
                }
                jQuery.fx.timer(jQuery.extend(tick, {
                    elem: elem,
                    anim: animation,
                    queue: animation.opts.queue
                }));
                return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always)
            }
            jQuery.Animation = jQuery.extend(Animation, {
                tweener: function(props, callback) {
                    if (jQuery.isFunction(props)) {
                        callback = props;
                        props = ["*"]
                    } else {
                        props = props.split(" ")
                    }
                    var prop, index = 0,
                        length = props.length;
                    for (; index < length; index++) {
                        prop = props[index];
                        tweeners[prop] = tweeners[prop] || [];
                        tweeners[prop].unshift(callback)
                    }
                },
                prefilter: function(callback, prepend) {
                    if (prepend) {
                        animationPrefilters.unshift(callback)
                    } else {
                        animationPrefilters.push(callback)
                    }
                }
            });
            jQuery.speed = function(speed, easing, fn) {
                var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
                    complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
                    duration: speed,
                    easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
                };
                opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
                if (opt.queue == null || opt.queue === true) {
                    opt.queue = "fx"
                }
                opt.old = opt.complete;
                opt.complete = function() {
                    if (jQuery.isFunction(opt.old)) {
                        opt.old.call(this)
                    }
                    if (opt.queue) {
                        jQuery.dequeue(this, opt.queue)
                    }
                };
                return opt
            };
            jQuery.fn.extend({
                fadeTo: function(speed, to, easing, callback) {
                    return this.filter(isHidden).css("opacity", 0).show().end().animate({
                        opacity: to
                    }, speed, easing, callback)
                },
                animate: function(prop, speed, easing, callback) {
                    var empty = jQuery.isEmptyObject(prop),
                        optall = jQuery.speed(speed, easing, callback),
                        doAnimation = function() {
                            var anim = Animation(this, jQuery.extend({}, prop), optall);
                            if (empty || data_priv.get(this, "finish")) {
                                anim.stop(true)
                            }
                        };
                    doAnimation.finish = doAnimation;
                    return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation)
                },
                stop: function(type, clearQueue, gotoEnd) {
                    var stopQueue = function(hooks) {
                        var stop = hooks.stop;
                        delete hooks.stop;
                        stop(gotoEnd)
                    };
                    if (typeof type !== "string") {
                        gotoEnd = clearQueue;
                        clearQueue = type;
                        type = undefined
                    }
                    if (clearQueue && type !== false) {
                        this.queue(type || "fx", [])
                    }
                    return this.each(function() {
                        var dequeue = true,
                            index = type != null && type + "queueHooks",
                            timers = jQuery.timers,
                            data = data_priv.get(this);
                        if (index) {
                            if (data[index] && data[index].stop) {
                                stopQueue(data[index])
                            }
                        } else {
                            for (index in data) {
                                if (data[index] && data[index].stop && rrun.test(index)) {
                                    stopQueue(data[index])
                                }
                            }
                        }
                        for (index = timers.length; index--;) {
                            if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                                timers[index].anim.stop(gotoEnd);
                                dequeue = false;
                                timers.splice(index, 1)
                            }
                        }
                        if (dequeue || !gotoEnd) {
                            jQuery.dequeue(this, type)
                        }
                    })
                },
                finish: function(type) {
                    if (type !== false) {
                        type = type || "fx"
                    }
                    return this.each(function() {
                        var index, data = data_priv.get(this),
                            queue = data[type + "queue"],
                            hooks = data[type + "queueHooks"],
                            timers = jQuery.timers,
                            length = queue ? queue.length : 0;
                        data.finish = true;
                        jQuery.queue(this, type, []);
                        if (hooks && hooks.stop) {
                            hooks.stop.call(this, true)
                        }
                        for (index = timers.length; index--;) {
                            if (timers[index].elem === this && timers[index].queue === type) {
                                timers[index].anim.stop(true);
                                timers.splice(index, 1)
                            }
                        }
                        for (index = 0; index < length; index++) {
                            if (queue[index] && queue[index].finish) {
                                queue[index].finish.call(this)
                            }
                        }
                        delete data.finish
                    })
                }
            });
            jQuery.each(["toggle", "show", "hide"], function(i, name) {
                var cssFn = jQuery.fn[name];
                jQuery.fn[name] = function(speed, easing, callback) {
                    return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback)
                }
            });
            jQuery.each({
                slideDown: genFx("show"),
                slideUp: genFx("hide"),
                slideToggle: genFx("toggle"),
                fadeIn: {
                    opacity: "show"
                },
                fadeOut: {
                    opacity: "hide"
                },
                fadeToggle: {
                    opacity: "toggle"
                }
            }, function(name, props) {
                jQuery.fn[name] = function(speed, easing, callback) {
                    return this.animate(props, speed, easing, callback)
                }
            });
            jQuery.timers = [];
            jQuery.fx.tick = function() {
                var timer, i = 0,
                    timers = jQuery.timers;
                fxNow = jQuery.now();
                for (; i < timers.length; i++) {
                    timer = timers[i];
                    if (!timer() && timers[i] === timer) {
                        timers.splice(i--, 1)
                    }
                }
                if (!timers.length) {
                    jQuery.fx.stop()
                }
                fxNow = undefined
            };
            jQuery.fx.timer = function(timer) {
                jQuery.timers.push(timer);
                if (timer()) {
                    jQuery.fx.start()
                } else {
                    jQuery.timers.pop()
                }
            };
            jQuery.fx.interval = 13;
            jQuery.fx.start = function() {
                if (!timerId) {
                    timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval)
                }
            };
            jQuery.fx.stop = function() {
                clearInterval(timerId);
                timerId = null
            };
            jQuery.fx.speeds = {
                slow: 600,
                fast: 200,
                _default: 400
            };
            jQuery.fn.delay = function(time, type) {
                time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
                type = type || "fx";
                return this.queue(type, function(next, hooks) {
                    var timeout = setTimeout(next, time);
                    hooks.stop = function() {
                        clearTimeout(timeout)
                    }
                })
            };
            (function() {
                var input = document.createElement("input"),
                    select = document.createElement("select"),
                    opt = select.appendChild(document.createElement("option"));
                input.type = "checkbox";
                support.checkOn = input.value !== "";
                support.optSelected = opt.selected;
                select.disabled = true;
                support.optDisabled = !opt.disabled;
                input = document.createElement("input");
                input.value = "t";
                input.type = "radio";
                support.radioValue = input.value === "t"
            })();
            var nodeHook, boolHook, attrHandle = jQuery.expr.attrHandle;
            jQuery.fn.extend({
                attr: function(name, value) {
                    return access(this, jQuery.attr, name, value, arguments.length > 1)
                },
                removeAttr: function(name) {
                    return this.each(function() {
                        jQuery.removeAttr(this, name)
                    })
                }
            });
            jQuery.extend({
                attr: function(elem, name, value) {
                    var hooks, ret, nType = elem.nodeType;
                    if (!elem || nType === 3 || nType === 8 || nType === 2) {
                        return
                    }
                    if (typeof elem.getAttribute === strundefined) {
                        return jQuery.prop(elem, name, value)
                    }
                    if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                        name = name.toLowerCase();
                        hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook)
                    }
                    if (value !== undefined) {
                        if (value === null) {
                            jQuery.removeAttr(elem, name)
                        } else if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                            return ret
                        } else {
                            elem.setAttribute(name, value + "");
                            return value
                        }
                    } else if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                        return ret
                    } else {
                        ret = jQuery.find.attr(elem, name);
                        return ret == null ? undefined : ret
                    }
                },
                removeAttr: function(elem, value) {
                    var name, propName, i = 0,
                        attrNames = value && value.match(rnotwhite);
                    if (attrNames && elem.nodeType === 1) {
                        while (name = attrNames[i++]) {
                            propName = jQuery.propFix[name] || name;
                            if (jQuery.expr.match.bool.test(name)) {
                                elem[propName] = false
                            }
                            elem.removeAttribute(name)
                        }
                    }
                },
                attrHooks: {
                    type: {
                        set: function(elem, value) {
                            if (!support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
                                var val = elem.value;
                                elem.setAttribute("type", value);
                                if (val) {
                                    elem.value = val
                                }
                                return value
                            }
                        }
                    }
                }
            });
            boolHook = {
                set: function(elem, value, name) {
                    if (value === false) {
                        jQuery.removeAttr(elem, name)
                    } else {
                        elem.setAttribute(name, name)
                    }
                    return name
                }
            };
            jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(i, name) {
                var getter = attrHandle[name] || jQuery.find.attr;
                attrHandle[name] = function(elem, name, isXML) {
                    var ret, handle;
                    if (!isXML) {
                        handle = attrHandle[name];
                        attrHandle[name] = ret;
                        ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
                        attrHandle[name] = handle
                    }
                    return ret
                }
            });
            var rfocusable = /^(?:input|select|textarea|button)$/i;
            jQuery.fn.extend({
                prop: function(name, value) {
                    return access(this, jQuery.prop, name, value, arguments.length > 1)
                },
                removeProp: function(name) {
                    return this.each(function() {
                        delete this[jQuery.propFix[name] || name]
                    })
                }
            });
            jQuery.extend({
                propFix: {
                    for: "htmlFor",
                    class: "className"
                },
                prop: function(elem, name, value) {
                    var ret, hooks, notxml, nType = elem.nodeType;
                    if (!elem || nType === 3 || nType === 8 || nType === 2) {
                        return
                    }
                    notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
                    if (notxml) {
                        name = jQuery.propFix[name] || name;
                        hooks = jQuery.propHooks[name]
                    }
                    if (value !== undefined) {
                        return hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : elem[name] = value
                    } else {
                        return hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name]
                    }
                },
                propHooks: {
                    tabIndex: {
                        get: function(elem) {
                            return elem.hasAttribute("tabindex") || rfocusable.test(elem.nodeName) || elem.href ? elem.tabIndex : -1
                        }
                    }
                }
            });
            if (!support.optSelected) {
                jQuery.propHooks.selected = {
                    get: function(elem) {
                        var parent = elem.parentNode;
                        if (parent && parent.parentNode) {
                            parent.parentNode.selectedIndex
                        }
                        return null
                    }
                }
            }
            jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function() {
                jQuery.propFix[this.toLowerCase()] = this
            });
            var rclass = /[\t\r\n\f]/g;
            jQuery.fn.extend({
                addClass: function(value) {
                    var classes, elem, cur, clazz, j, finalValue, proceed = typeof value === "string" && value,
                        i = 0,
                        len = this.length;
                    if (jQuery.isFunction(value)) {
                        return this.each(function(j) {
                            jQuery(this).addClass(value.call(this, j, this.className))
                        })
                    }
                    if (proceed) {
                        classes = (value || "").match(rnotwhite) || [];
                        for (; i < len; i++) {
                            elem = this[i];
                            cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : " ");
                            if (cur) {
                                j = 0;
                                while (clazz = classes[j++]) {
                                    if (cur.indexOf(" " + clazz + " ") < 0) {
                                        cur += clazz + " "
                                    }
                                }
                                finalValue = jQuery.trim(cur);
                                if (elem.className !== finalValue) {
                                    elem.className = finalValue
                                }
                            }
                        }
                    }
                    return this
                },
                removeClass: function(value) {
                    var classes, elem, cur, clazz, j, finalValue, proceed = arguments.length === 0 || typeof value === "string" && value,
                        i = 0,
                        len = this.length;
                    if (jQuery.isFunction(value)) {
                        return this.each(function(j) {
                            jQuery(this).removeClass(value.call(this, j, this.className))
                        })
                    }
                    if (proceed) {
                        classes = (value || "").match(rnotwhite) || [];
                        for (; i < len; i++) {
                            elem = this[i];
                            cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "");
                            if (cur) {
                                j = 0;
                                while (clazz = classes[j++]) {
                                    while (cur.indexOf(" " + clazz + " ") >= 0) {
                                        cur = cur.replace(" " + clazz + " ", " ")
                                    }
                                }
                                finalValue = value ? jQuery.trim(cur) : "";
                                if (elem.className !== finalValue) {
                                    elem.className = finalValue
                                }
                            }
                        }
                    }
                    return this
                },
                toggleClass: function(value, stateVal) {
                    var type = typeof value;
                    if (typeof stateVal === "boolean" && type === "string") {
                        return stateVal ? this.addClass(value) : this.removeClass(value)
                    }
                    if (jQuery.isFunction(value)) {
                        return this.each(function(i) {
                            jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal)
                        })
                    }
                    return this.each(function() {
                        if (type === "string") {
                            var className, i = 0,
                                self = jQuery(this),
                                classNames = value.match(rnotwhite) || [];
                            while (className = classNames[i++]) {
                                if (self.hasClass(className)) {
                                    self.removeClass(className)
                                } else {
                                    self.addClass(className)
                                }
                            }
                        } else if (type === strundefined || type === "boolean") {
                            if (this.className) {
                                data_priv.set(this, "__className__", this.className)
                            }
                            this.className = this.className || value === false ? "" : data_priv.get(this, "__className__") || ""
                        }
                    })
                },
                hasClass: function(selector) {
                    var className = " " + selector + " ",
                        i = 0,
                        l = this.length;
                    for (; i < l; i++) {
                        if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) {
                            return true
                        }
                    }
                    return false
                }
            });
            var rreturn = /\r/g;
            jQuery.fn.extend({
                val: function(value) {
                    var hooks, ret, isFunction, elem = this[0];
                    if (!arguments.length) {
                        if (elem) {
                            hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                            if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
                                return ret
                            }
                            ret = elem.value;
                            return typeof ret === "string" ? ret.replace(rreturn, "") : ret == null ? "" : ret
                        }
                        return
                    }
                    isFunction = jQuery.isFunction(value);
                    return this.each(function(i) {
                        var val;
                        if (this.nodeType !== 1) {
                            return
                        }
                        if (isFunction) {
                            val = value.call(this, i, jQuery(this).val())
                        } else {
                            val = value
                        }
                        if (val == null) {
                            val = ""
                        } else if (typeof val === "number") {
                            val += ""
                        } else if (jQuery.isArray(val)) {
                            val = jQuery.map(val, function(value) {
                                return value == null ? "" : value + ""
                            })
                        }
                        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
                        if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
                            this.value = val
                        }
                    })
                }
            });
            jQuery.extend({
                valHooks: {
                    option: {
                        get: function(elem) {
                            var val = jQuery.find.attr(elem, "value");
                            return val != null ? val : jQuery.trim(jQuery.text(elem))
                        }
                    },
                    select: {
                        get: function(elem) {
                            var value, option, options = elem.options,
                                index = elem.selectedIndex,
                                one = elem.type === "select-one" || index < 0,
                                values = one ? null : [],
                                max = one ? index + 1 : options.length,
                                i = index < 0 ? max : one ? index : 0;
                            for (; i < max; i++) {
                                option = options[i];
                                if ((option.selected || i === index) && (support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
                                    value = jQuery(option).val();
                                    if (one) {
                                        return value
                                    }
                                    values.push(value)
                                }
                            }
                            return values
                        },
                        set: function(elem, value) {
                            var optionSet, option, options = elem.options,
                                values = jQuery.makeArray(value),
                                i = options.length;
                            while (i--) {
                                option = options[i];
                                if (option.selected = jQuery.inArray(option.value, values) >= 0) {
                                    optionSet = true
                                }
                            }
                            if (!optionSet) {
                                elem.selectedIndex = -1
                            }
                            return values
                        }
                    }
                }
            });
            jQuery.each(["radio", "checkbox"], function() {
                jQuery.valHooks[this] = {
                    set: function(elem, value) {
                        if (jQuery.isArray(value)) {
                            return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0
                        }
                    }
                };
                if (!support.checkOn) {
                    jQuery.valHooks[this].get = function(elem) {
                        return elem.getAttribute("value") === null ? "on" : elem.value
                    }
                }
            });
            jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function(i, name) {
                jQuery.fn[name] = function(data, fn) {
                    return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name)
                }
            });
            jQuery.fn.extend({
                hover: function(fnOver, fnOut) {
                    return this.mouseenter(fnOver).mouseleave(fnOut || fnOver)
                },
                bind: function(types, data, fn) {
                    return this.on(types, null, data, fn)
                },
                unbind: function(types, fn) {
                    return this.off(types, null, fn)
                },
                delegate: function(selector, types, data, fn) {
                    return this.on(types, selector, data, fn)
                },
                undelegate: function(selector, types, fn) {
                    return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn)
                }
            });
            var nonce = jQuery.now();
            var rquery = /\?/;
            jQuery.parseJSON = function(data) {
                return JSON.parse(data + "")
            };
            jQuery.parseXML = function(data) {
                var xml, tmp;
                if (!data || typeof data !== "string") {
                    return null
                }
                try {
                    tmp = new DOMParser;
                    xml = tmp.parseFromString(data, "text/xml")
                } catch (e) {
                    xml = undefined
                }
                if (!xml || xml.getElementsByTagName("parsererror").length) {
                    jQuery.error("Invalid XML: " + data)
                }
                return xml
            };
            var ajaxLocParts, ajaxLocation, rhash = /#.*$/,
                rts = /([?&])_=[^&]*/,
                rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm,
                rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
                rnoContent = /^(?:GET|HEAD)$/,
                rprotocol = /^\/\//,
                rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,
                prefilters = {},
                transports = {},
                allTypes = "*/".concat("*");
            try {
                ajaxLocation = location.href
            } catch (e) {
                ajaxLocation = document.createElement("a");
                ajaxLocation.href = "";
                ajaxLocation = ajaxLocation.href
            }
            ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];

            function addToPrefiltersOrTransports(structure) {
                return function(dataTypeExpression, func) {
                    if (typeof dataTypeExpression !== "string") {
                        func = dataTypeExpression;
                        dataTypeExpression = "*"
                    }
                    var dataType, i = 0,
                        dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];
                    if (jQuery.isFunction(func)) {
                        while (dataType = dataTypes[i++]) {
                            if (dataType[0] === "+") {
                                dataType = dataType.slice(1) || "*";
                                (structure[dataType] = structure[dataType] || []).unshift(func)
                            } else {
                                (structure[dataType] = structure[dataType] || []).push(func)
                            }
                        }
                    }
                }
            }

            function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
                var inspected = {},
                    seekingTransport = structure === transports;

                function inspect(dataType) {
                    var selected;
                    inspected[dataType] = true;
                    jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
                        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                        if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
                            options.dataTypes.unshift(dataTypeOrTransport);
                            inspect(dataTypeOrTransport);
                            return false
                        } else if (seekingTransport) {
                            return !(selected = dataTypeOrTransport)
                        }
                    });
                    return selected
                }
                return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*")
            }

            function ajaxExtend(target, src) {
                var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
                for (key in src) {
                    if (src[key] !== undefined) {
                        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key]
                    }
                }
                if (deep) {
                    jQuery.extend(true, target, deep)
                }
                return target
            }

            function ajaxHandleResponses(s, jqXHR, responses) {
                var ct, type, finalDataType, firstDataType, contents = s.contents,
                    dataTypes = s.dataTypes;
                while (dataTypes[0] === "*") {
                    dataTypes.shift();
                    if (ct === undefined) {
                        ct = s.mimeType || jqXHR.getResponseHeader("Content-Type")
                    }
                }
                if (ct) {
                    for (type in contents) {
                        if (contents[type] && contents[type].test(ct)) {
                            dataTypes.unshift(type);
                            break
                        }
                    }
                }
                if (dataTypes[0] in responses) {
                    finalDataType = dataTypes[0]
                } else {
                    for (type in responses) {
                        if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                            finalDataType = type;
                            break
                        }
                        if (!firstDataType) {
                            firstDataType = type
                        }
                    }
                    finalDataType = finalDataType || firstDataType
                }
                if (finalDataType) {
                    if (finalDataType !== dataTypes[0]) {
                        dataTypes.unshift(finalDataType)
                    }
                    return responses[finalDataType]
                }
            }

            function ajaxConvert(s, response, jqXHR, isSuccess) {
                var conv2, current, conv, tmp, prev, converters = {},
                    dataTypes = s.dataTypes.slice();
                if (dataTypes[1]) {
                    for (conv in s.converters) {
                        converters[conv.toLowerCase()] = s.converters[conv]
                    }
                }
                current = dataTypes.shift();
                while (current) {
                    if (s.responseFields[current]) {
                        jqXHR[s.responseFields[current]] = response
                    }
                    if (!prev && isSuccess && s.dataFilter) {
                        response = s.dataFilter(response, s.dataType)
                    }
                    prev = current;
                    current = dataTypes.shift();
                    if (current) {
                        if (current === "*") {
                            current = prev
                        } else if (prev !== "*" && prev !== current) {
                            conv = converters[prev + " " + current] || converters["* " + current];
                            if (!conv) {
                                for (conv2 in converters) {
                                    tmp = conv2.split(" ");
                                    if (tmp[1] === current) {
                                        conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                                        if (conv) {
                                            if (conv === true) {
                                                conv = converters[conv2]
                                            } else if (converters[conv2] !== true) {
                                                current = tmp[0];
                                                dataTypes.unshift(tmp[1])
                                            }
                                            break
                                        }
                                    }
                                }
                            }
                            if (conv !== true) {
                                if (conv && s["throws"]) {
                                    response = conv(response)
                                } else {
                                    try {
                                        response = conv(response)
                                    } catch (e) {
                                        return {
                                            state: "parsererror",
                                            error: conv ? e : "No conversion from " + prev + " to " + current
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return {
                    state: "success",
                    data: response
                }
            }
            jQuery.extend({
                active: 0,
                lastModified: {},
                etag: {},
                ajaxSettings: {
                    url: ajaxLocation,
                    type: "GET",
                    isLocal: rlocalProtocol.test(ajaxLocParts[1]),
                    global: true,
                    processData: true,
                    async: true,
                    contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                    accepts: {
                        "*": allTypes,
                        text: "text/plain",
                        html: "text/html",
                        xml: "application/xml, text/xml",
                        json: "application/json, text/javascript"
                    },
                    contents: {
                        xml: /xml/,
                        html: /html/,
                        json: /json/
                    },
                    responseFields: {
                        xml: "responseXML",
                        text: "responseText",
                        json: "responseJSON"
                    },
                    converters: {
                        "* text": String,
                        "text html": true,
                        "text json": jQuery.parseJSON,
                        "text xml": jQuery.parseXML
                    },
                    flatOptions: {
                        url: true,
                        context: true
                    }
                },
                ajaxSetup: function(target, settings) {
                    return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target)
                },
                ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
                ajaxTransport: addToPrefiltersOrTransports(transports),
                ajax: function(url, options) {
                    if (typeof url === "object") {
                        options = url;
                        url = undefined
                    }
                    options = options || {};
                    var transport, cacheURL, responseHeadersString, responseHeaders, timeoutTimer, parts, fireGlobals, i, s = jQuery.ajaxSetup({}, options),
                        callbackContext = s.context || s,
                        globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
                        deferred = jQuery.Deferred(),
                        completeDeferred = jQuery.Callbacks("once memory"),
                        statusCode = s.statusCode || {},
                        requestHeaders = {},
                        requestHeadersNames = {},
                        state = 0,
                        strAbort = "canceled",
                        jqXHR = {
                            readyState: 0,
                            getResponseHeader: function(key) {
                                var match;
                                if (state === 2) {
                                    if (!responseHeaders) {
                                        responseHeaders = {};
                                        while (match = rheaders.exec(responseHeadersString)) {
                                            responseHeaders[match[1].toLowerCase()] = match[2]
                                        }
                                    }
                                    match = responseHeaders[key.toLowerCase()]
                                }
                                return match == null ? null : match
                            },
                            getAllResponseHeaders: function() {
                                return state === 2 ? responseHeadersString : null
                            },
                            setRequestHeader: function(name, value) {
                                var lname = name.toLowerCase();
                                if (!state) {
                                    name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                                    requestHeaders[name] = value
                                }
                                return this
                            },
                            overrideMimeType: function(type) {
                                if (!state) {
                                    s.mimeType = type
                                }
                                return this
                            },
                            statusCode: function(map) {
                                var code;
                                if (map) {
                                    if (state < 2) {
                                        for (code in map) {
                                            statusCode[code] = [statusCode[code], map[code]]
                                        }
                                    } else {
                                        jqXHR.always(map[jqXHR.status])
                                    }
                                }
                                return this
                            },
                            abort: function(statusText) {
                                var finalText = statusText || strAbort;
                                if (transport) {
                                    transport.abort(finalText)
                                }
                                done(0, finalText);
                                return this
                            }
                        };
                    deferred.promise(jqXHR).complete = completeDeferred.add;
                    jqXHR.success = jqXHR.done;
                    jqXHR.error = jqXHR.fail;
                    s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");
                    s.type = options.method || options.type || s.method || s.type;
                    s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""];
                    if (s.crossDomain == null) {
                        parts = rurl.exec(s.url.toLowerCase());
                        s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? "80" : "443")) !== (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? "80" : "443"))))
                    }
                    if (s.data && s.processData && typeof s.data !== "string") {
                        s.data = jQuery.param(s.data, s.traditional)
                    }
                    inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
                    if (state === 2) {
                        return jqXHR
                    }
                    fireGlobals = s.global;
                    if (fireGlobals && jQuery.active++ === 0) {
                        jQuery.event.trigger("ajaxStart")
                    }
                    s.type = s.type.toUpperCase();
                    s.hasContent = !rnoContent.test(s.type);
                    cacheURL = s.url;
                    if (!s.hasContent) {
                        if (s.data) {
                            cacheURL = s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data;
                            delete s.data
                        }
                        if (s.cache === false) {
                            s.url = rts.test(cacheURL) ? cacheURL.replace(rts, "$1_=" + nonce++) : cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++
                        }
                    }
                    if (s.ifModified) {
                        if (jQuery.lastModified[cacheURL]) {
                            jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL])
                        }
                        if (jQuery.etag[cacheURL]) {
                            jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL])
                        }
                    }
                    if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                        jqXHR.setRequestHeader("Content-Type", s.contentType)
                    }
                    jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
                    for (i in s.headers) {
                        jqXHR.setRequestHeader(i, s.headers[i])
                    }
                    if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
                        return jqXHR.abort()
                    }
                    strAbort = "abort";
                    for (i in {
                            success: 1,
                            error: 1,
                            complete: 1
                        }) {
                        jqXHR[i](s[i])
                    }
                    transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
                    if (!transport) {
                        done(-1, "No Transport")
                    } else {
                        jqXHR.readyState = 1;
                        if (fireGlobals) {
                            globalEventContext.trigger("ajaxSend", [jqXHR, s])
                        }
                        if (s.async && s.timeout > 0) {
                            timeoutTimer = setTimeout(function() {
                                jqXHR.abort("timeout")
                            }, s.timeout)
                        }
                        try {
                            state = 1;
                            transport.send(requestHeaders, done)
                        } catch (e) {
                            if (state < 2) {
                                done(-1, e)
                            } else {
                                throw e
                            }
                        }
                    }

                    function done(status, nativeStatusText, responses, headers) {
                        var isSuccess, success, error, response, modified, statusText = nativeStatusText;
                        if (state === 2) {
                            return
                        }
                        state = 2;
                        if (timeoutTimer) {
                            clearTimeout(timeoutTimer)
                        }
                        transport = undefined;
                        responseHeadersString = headers || "";
                        jqXHR.readyState = status > 0 ? 4 : 0;
                        isSuccess = status >= 200 && status < 300 || status === 304;
                        if (responses) {
                            response = ajaxHandleResponses(s, jqXHR, responses)
                        }
                        response = ajaxConvert(s, response, jqXHR, isSuccess);
                        if (isSuccess) {
                            if (s.ifModified) {
                                modified = jqXHR.getResponseHeader("Last-Modified");
                                if (modified) {
                                    jQuery.lastModified[cacheURL] = modified
                                }
                                modified = jqXHR.getResponseHeader("etag");
                                if (modified) {
                                    jQuery.etag[cacheURL] = modified
                                }
                            }
                            if (status === 204 || s.type === "HEAD") {
                                statusText = "nocontent"
                            } else if (status === 304) {
                                statusText = "notmodified"
                            } else {
                                statusText = response.state;
                                success = response.data;
                                error = response.error;
                                isSuccess = !error
                            }
                        } else {
                            error = statusText;
                            if (status || !statusText) {
                                statusText = "error";
                                if (status < 0) {
                                    status = 0
                                }
                            }
                        }
                        jqXHR.status = status;
                        jqXHR.statusText = (nativeStatusText || statusText) + "";
                        if (isSuccess) {
                            deferred.resolveWith(callbackContext, [success, statusText, jqXHR])
                        } else {
                            deferred.rejectWith(callbackContext, [jqXHR, statusText, error])
                        }
                        jqXHR.statusCode(statusCode);
                        statusCode = undefined;
                        if (fireGlobals) {
                            globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error])
                        }
                        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
                        if (fireGlobals) {
                            globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
                            if (!--jQuery.active) {
                                jQuery.event.trigger("ajaxStop")
                            }
                        }
                    }
                    return jqXHR
                },
                getJSON: function(url, data, callback) {
                    return jQuery.get(url, data, callback, "json")
                },
                getScript: function(url, callback) {
                    return jQuery.get(url, undefined, callback, "script")
                }
            });
            jQuery.each(["get", "post"], function(i, method) {
                jQuery[method] = function(url, data, callback, type) {
                    if (jQuery.isFunction(data)) {
                        type = type || callback;
                        callback = data;
                        data = undefined
                    }
                    return jQuery.ajax({
                        url: url,
                        type: method,
                        dataType: type,
                        data: data,
                        success: callback
                    })
                }
            });
            jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function(i, type) {
                jQuery.fn[type] = function(fn) {
                    return this.on(type, fn)
                }
            });
            jQuery._evalUrl = function(url) {
                return jQuery.ajax({
                    url: url,
                    type: "GET",
                    dataType: "script",
                    async: false,
                    global: false,
                    throws: true
                })
            };
            jQuery.fn.extend({
                wrapAll: function(html) {
                    var wrap;
                    if (jQuery.isFunction(html)) {
                        return this.each(function(i) {
                            jQuery(this).wrapAll(html.call(this, i))
                        })
                    }
                    if (this[0]) {
                        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                        if (this[0].parentNode) {
                            wrap.insertBefore(this[0])
                        }
                        wrap.map(function() {
                            var elem = this;
                            while (elem.firstElementChild) {
                                elem = elem.firstElementChild
                            }
                            return elem
                        }).append(this)
                    }
                    return this
                },
                wrapInner: function(html) {
                    if (jQuery.isFunction(html)) {
                        return this.each(function(i) {
                            jQuery(this).wrapInner(html.call(this, i))
                        })
                    }
                    return this.each(function() {
                        var self = jQuery(this),
                            contents = self.contents();
                        if (contents.length) {
                            contents.wrapAll(html)
                        } else {
                            self.append(html)
                        }
                    })
                },
                wrap: function(html) {
                    var isFunction = jQuery.isFunction(html);
                    return this.each(function(i) {
                        jQuery(this).wrapAll(isFunction ? html.call(this, i) : html)
                    })
                },
                unwrap: function() {
                    return this.parent().each(function() {
                        if (!jQuery.nodeName(this, "body")) {
                            jQuery(this).replaceWith(this.childNodes)
                        }
                    }).end()
                }
            });
            jQuery.expr.filters.hidden = function(elem) {
                return elem.offsetWidth <= 0 && elem.offsetHeight <= 0
            };
            jQuery.expr.filters.visible = function(elem) {
                return !jQuery.expr.filters.hidden(elem)
            };
            var r20 = /%20/g,
                rbracket = /\[\]$/,
                rCRLF = /\r?\n/g,
                rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
                rsubmittable = /^(?:input|select|textarea|keygen)/i;

            function buildParams(prefix, obj, traditional, add) {
                var name;
                if (jQuery.isArray(obj)) {
                    jQuery.each(obj, function(i, v) {
                        if (traditional || rbracket.test(prefix)) {
                            add(prefix, v)
                        } else {
                            buildParams(prefix + "[" + (typeof v === "object" ? i : "") + "]", v, traditional, add)
                        }
                    })
                } else if (!traditional && jQuery.type(obj) === "object") {
                    for (name in obj) {
                        buildParams(prefix + "[" + name + "]", obj[name], traditional, add)
                    }
                } else {
                    add(prefix, obj)
                }
            }
            jQuery.param = function(a, traditional) {
                var prefix, s = [],
                    add = function(key, value) {
                        value = jQuery.isFunction(value) ? value() : value == null ? "" : value;
                        s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value)
                    };
                if (traditional === undefined) {
                    traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional
                }
                if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
                    jQuery.each(a, function() {
                        add(this.name, this.value)
                    })
                } else {
                    for (prefix in a) {
                        buildParams(prefix, a[prefix], traditional, add)
                    }
                }
                return s.join("&").replace(r20, "+")
            };
            jQuery.fn.extend({
                serialize: function() {
                    return jQuery.param(this.serializeArray())
                },
                serializeArray: function() {
                    return this.map(function() {
                        var elements = jQuery.prop(this, "elements");
                        return elements ? jQuery.makeArray(elements) : this
                    }).filter(function() {
                        var type = this.type;
                        return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type))
                    }).map(function(i, elem) {
                        var val = jQuery(this).val();
                        return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function(val) {
                            return {
                                name: elem.name,
                                value: val.replace(rCRLF, "\r\n")
                            }
                        }) : {
                            name: elem.name,
                            value: val.replace(rCRLF, "\r\n")
                        }
                    }).get()
                }
            });
            jQuery.ajaxSettings.xhr = function() {
                try {
                    return new XMLHttpRequest
                } catch (e) {}
            };
            var xhrId = 0,
                xhrCallbacks = {},
                xhrSuccessStatus = {
                    0: 200,
                    1223: 204
                },
                xhrSupported = jQuery.ajaxSettings.xhr();
            if (window.ActiveXObject) {
                jQuery(window).on("unload", function() {
                    for (var key in xhrCallbacks) {
                        xhrCallbacks[key]()
                    }
                })
            }
            support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
            support.ajax = xhrSupported = !!xhrSupported;
            jQuery.ajaxTransport(function(options) {
                var callback;
                if (support.cors || xhrSupported && !options.crossDomain) {
                    return {
                        send: function(headers, complete) {
                            var i, xhr = options.xhr(),
                                id = ++xhrId;
                            xhr.open(options.type, options.url, options.async, options.username, options.password);
                            if (options.xhrFields) {
                                for (i in options.xhrFields) {
                                    xhr[i] = options.xhrFields[i]
                                }
                            }
                            if (options.mimeType && xhr.overrideMimeType) {
                                xhr.overrideMimeType(options.mimeType)
                            }
                            if (!options.crossDomain && !headers["X-Requested-With"]) {
                                headers["X-Requested-With"] = "XMLHttpRequest"
                            }
                            for (i in headers) {
                                xhr.setRequestHeader(i, headers[i])
                            }
                            callback = function(type) {
                                return function() {
                                    if (callback) {
                                        delete xhrCallbacks[id];
                                        callback = xhr.onload = xhr.onerror = null;
                                        if (type === "abort") {
                                            xhr.abort()
                                        } else if (type === "error") {
                                            complete(xhr.status, xhr.statusText)
                                        } else {
                                            complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, typeof xhr.responseText === "string" ? {
                                                text: xhr.responseText
                                            } : undefined, xhr.getAllResponseHeaders())
                                        }
                                    }
                                }
                            };
                            xhr.onload = callback();
                            xhr.onerror = callback("error");
                            callback = xhrCallbacks[id] = callback("abort");
                            try {
                                xhr.send(options.hasContent && options.data || null)
                            } catch (e) {
                                if (callback) {
                                    throw e
                                }
                            }
                        },
                        abort: function() {
                            if (callback) {
                                callback()
                            }
                        }
                    }
                }
            });
            jQuery.ajaxSetup({
                accepts: {
                    script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
                },
                contents: {
                    script: /(?:java|ecma)script/
                },
                converters: {
                    "text script": function(text) {
                        jQuery.globalEval(text);
                        return text
                    }
                }
            });
            jQuery.ajaxPrefilter("script", function(s) {
                if (s.cache === undefined) {
                    s.cache = false
                }
                if (s.crossDomain) {
                    s.type = "GET"
                }
            });
            jQuery.ajaxTransport("script", function(s) {
                if (s.crossDomain) {
                    var script, callback;
                    return {
                        send: function(_, complete) {
                            script = jQuery("<script>").prop({
                                async: true,
                                charset: s.scriptCharset,
                                src: s.url
                            }).on("load error", callback = function(evt) {
                                script.remove();
                                callback = null;
                                if (evt) {
                                    complete(evt.type === "error" ? 404 : 200, evt.type)
                                }
                            });
                            document.head.appendChild(script[0])
                        },
                        abort: function() {
                            if (callback) {
                                callback()
                            }
                        }
                    }
                }
            });
            var oldCallbacks = [],
                rjsonp = /(=)\?(?=&|$)|\?\?/;
            jQuery.ajaxSetup({
                jsonp: "callback",
                jsonpCallback: function() {
                    var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
                    this[callback] = true;
                    return callback
                }
            });
            jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
                var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data");
                if (jsonProp || s.dataTypes[0] === "jsonp") {
                    callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
                    if (jsonProp) {
                        s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName)
                    } else if (s.jsonp !== false) {
                        s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName
                    }
                    s.converters["script json"] = function() {
                        if (!responseContainer) {
                            jQuery.error(callbackName + " was not called")
                        }
                        return responseContainer[0]
                    };
                    s.dataTypes[0] = "json";
                    overwritten = window[callbackName];
                    window[callbackName] = function() {
                        responseContainer = arguments
                    };
                    jqXHR.always(function() {
                        window[callbackName] = overwritten;
                        if (s[callbackName]) {
                            s.jsonpCallback = originalSettings.jsonpCallback;
                            oldCallbacks.push(callbackName)
                        }
                        if (responseContainer && jQuery.isFunction(overwritten)) {
                            overwritten(responseContainer[0])
                        }
                        responseContainer = overwritten = undefined
                    });
                    return "script"
                }
            });
            jQuery.parseHTML = function(data, context, keepScripts) {
                if (!data || typeof data !== "string") {
                    return null
                }
                if (typeof context === "boolean") {
                    keepScripts = context;
                    context = false
                }
                context = context || document;
                var parsed = rsingleTag.exec(data),
                    scripts = !keepScripts && [];
                if (parsed) {
                    return [context.createElement(parsed[1])]
                }
                parsed = jQuery.buildFragment([data], context, scripts);
                if (scripts && scripts.length) {
                    jQuery(scripts).remove()
                }
                return jQuery.merge([], parsed.childNodes)
            };
            var _load = jQuery.fn.load;
            jQuery.fn.load = function(url, params, callback) {
                if (typeof url !== "string" && _load) {
                    return _load.apply(this, arguments)
                }
                var selector, type, response, self = this,
                    off = url.indexOf(" ");
                if (off >= 0) {
                    selector = jQuery.trim(url.slice(off));
                    url = url.slice(0, off)
                }
                if (jQuery.isFunction(params)) {
                    callback = params;
                    params = undefined
                } else if (params && typeof params === "object") {
                    type = "POST"
                }
                if (self.length > 0) {
                    jQuery.ajax({
                        url: url,
                        type: type,
                        dataType: "html",
                        data: params
                    }).done(function(responseText) {
                        response = arguments;
                        self.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : responseText)
                    }).complete(callback && function(jqXHR, status) {
                        self.each(callback, response || [jqXHR.responseText, status, jqXHR])
                    })
                }
                return this
            };
            jQuery.expr.filters.animated = function(elem) {
                return jQuery.grep(jQuery.timers, function(fn) {
                    return elem === fn.elem
                }).length
            };
            var docElem = window.document.documentElement;

            function getWindow(elem) {
                return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView
            }
            jQuery.offset = {
                setOffset: function(elem, options, i) {
                    var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, "position"),
                        curElem = jQuery(elem),
                        props = {};
                    if (position === "static") {
                        elem.style.position = "relative"
                    }
                    curOffset = curElem.offset();
                    curCSSTop = jQuery.css(elem, "top");
                    curCSSLeft = jQuery.css(elem, "left");
                    calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;
                    if (calculatePosition) {
                        curPosition = curElem.position();
                        curTop = curPosition.top;
                        curLeft = curPosition.left
                    } else {
                        curTop = parseFloat(curCSSTop) || 0;
                        curLeft = parseFloat(curCSSLeft) || 0
                    }
                    if (jQuery.isFunction(options)) {
                        options = options.call(elem, i, curOffset)
                    }
                    if (options.top != null) {
                        props.top = options.top - curOffset.top + curTop
                    }
                    if (options.left != null) {
                        props.left = options.left - curOffset.left + curLeft
                    }
                    if ("using" in options) {
                        options.using.call(elem, props)
                    } else {
                        curElem.css(props)
                    }
                }
            };
            jQuery.fn.extend({
                offset: function(options) {
                    if (arguments.length) {
                        return options === undefined ? this : this.each(function(i) {
                            jQuery.offset.setOffset(this, options, i)
                        })
                    }
                    var docElem, win, elem = this[0],
                        box = {
                            top: 0,
                            left: 0
                        },
                        doc = elem && elem.ownerDocument;
                    if (!doc) {
                        return
                    }
                    docElem = doc.documentElement;
                    if (!jQuery.contains(docElem, elem)) {
                        return box
                    }
                    if (typeof elem.getBoundingClientRect !== strundefined) {
                        box = elem.getBoundingClientRect()
                    }
                    win = getWindow(doc);
                    return {
                        top: box.top + win.pageYOffset - docElem.clientTop,
                        left: box.left + win.pageXOffset - docElem.clientLeft
                    }
                },
                position: function() {
                    if (!this[0]) {
                        return
                    }
                    var offsetParent, offset, elem = this[0],
                        parentOffset = {
                            top: 0,
                            left: 0
                        };
                    if (jQuery.css(elem, "position") === "fixed") {
                        offset = elem.getBoundingClientRect()
                    } else {
                        offsetParent = this.offsetParent();
                        offset = this.offset();
                        if (!jQuery.nodeName(offsetParent[0], "html")) {
                            parentOffset = offsetParent.offset()
                        }
                        parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
                        parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true)
                    }
                    return {
                        top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
                        left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
                    }
                },
                offsetParent: function() {
                    return this.map(function() {
                        var offsetParent = this.offsetParent || docElem;
                        while (offsetParent && (!jQuery.nodeName(offsetParent, "html") && jQuery.css(offsetParent, "position") === "static")) {
                            offsetParent = offsetParent.offsetParent
                        }
                        return offsetParent || docElem
                    })
                }
            });
            jQuery.each({
                scrollLeft: "pageXOffset",
                scrollTop: "pageYOffset"
            }, function(method, prop) {
                var top = "pageYOffset" === prop;
                jQuery.fn[method] = function(val) {
                    return access(this, function(elem, method, val) {
                        var win = getWindow(elem);
                        if (val === undefined) {
                            return win ? win[prop] : elem[method]
                        }
                        if (win) {
                            win.scrollTo(!top ? val : window.pageXOffset, top ? val : window.pageYOffset)
                        } else {
                            elem[method] = val
                        }
                    }, method, val, arguments.length, null)
                }
            });
            jQuery.each(["top", "left"], function(i, prop) {
                jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function(elem, computed) {
                    if (computed) {
                        computed = curCSS(elem, prop);
                        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed
                    }
                })
            });
            jQuery.each({
                Height: "height",
                Width: "width"
            }, function(name, type) {
                jQuery.each({
                    padding: "inner" + name,
                    content: type,
                    "": "outer" + name
                }, function(defaultExtra, funcName) {
                    jQuery.fn[funcName] = function(margin, value) {
                        var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
                            extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
                        return access(this, function(elem, type, value) {
                            var doc;
                            if (jQuery.isWindow(elem)) {
                                return elem.document.documentElement["client" + name]
                            }
                            if (elem.nodeType === 9) {
                                doc = elem.documentElement;
                                return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name])
                            }
                            return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra)
                        }, type, chainable ? margin : undefined, chainable, null)
                    }
                })
            });
            jQuery.fn.size = function() {
                return this.length
            };
            jQuery.fn.andSelf = jQuery.fn.addBack;
            if (typeof define === "function" && define.amd) {
                define("jquery", [], function() {
                    return jQuery
                })
            }
            var _jQuery = window.jQuery,
                _$ = window.$;
            jQuery.noConflict = function(deep) {
                if (window.$ === jQuery) {
                    window.$ = _$
                }
                if (deep && window.jQuery === jQuery) {
                    window.jQuery = _jQuery
                }
                return jQuery
            };
            if (typeof noGlobal === strundefined) {
                window.jQuery = window.$ = jQuery
            }
            return jQuery
        })
    }, {}],
    37: [function(require, module, exports) {
        (function() {
            var numeral, VERSION = "1.5.3",
                languages = {},
                currentLanguage = "en",
                zeroFormat = null,
                defaultFormat = "0,0",
                hasModule = typeof module !== "undefined" && module.exports;

            function Numeral(number) {
                this._value = number
            }

            function toFixed(value, precision, roundingFunction, optionals) {
                var power = Math.pow(10, precision),
                    optionalsRegExp, output;
                output = (roundingFunction(value * power) / power).toFixed(precision);
                if (optionals) {
                    optionalsRegExp = new RegExp("0{1," + optionals + "}$");
                    output = output.replace(optionalsRegExp, "")
                }
                return output
            }

            function formatNumeral(n, format, roundingFunction) {
                var output;
                if (format.indexOf("$") > -1) {
                    output = formatCurrency(n, format, roundingFunction)
                } else if (format.indexOf("%") > -1) {
                    output = formatPercentage(n, format, roundingFunction)
                } else if (format.indexOf(":") > -1) {
                    output = formatTime(n, format)
                } else {
                    output = formatNumber(n._value, format, roundingFunction)
                }
                return output
            }

            function unformatNumeral(n, string) {
                var stringOriginal = string,
                    thousandRegExp, millionRegExp, billionRegExp, trillionRegExp, suffixes = ["KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"],
                    bytesMultiplier = false,
                    power;
                if (string.indexOf(":") > -1) {
                    n._value = unformatTime(string)
                } else {
                    if (string === zeroFormat) {
                        n._value = 0
                    } else {
                        if (languages[currentLanguage].delimiters.decimal !== ".") {
                            string = string.replace(/\./g, "").replace(languages[currentLanguage].delimiters.decimal, ".")
                        }
                        thousandRegExp = new RegExp("[^a-zA-Z]" + languages[currentLanguage].abbreviations.thousand + "(?:\\)|(\\" + languages[currentLanguage].currency.symbol + ")?(?:\\))?)?$");
                        millionRegExp = new RegExp("[^a-zA-Z]" + languages[currentLanguage].abbreviations.million + "(?:\\)|(\\" + languages[currentLanguage].currency.symbol + ")?(?:\\))?)?$");
                        billionRegExp = new RegExp("[^a-zA-Z]" + languages[currentLanguage].abbreviations.billion + "(?:\\)|(\\" + languages[currentLanguage].currency.symbol + ")?(?:\\))?)?$");
                        trillionRegExp = new RegExp("[^a-zA-Z]" + languages[currentLanguage].abbreviations.trillion + "(?:\\)|(\\" + languages[currentLanguage].currency.symbol + ")?(?:\\))?)?$");
                        for (power = 0; power <= suffixes.length; power++) {
                            bytesMultiplier = string.indexOf(suffixes[power]) > -1 ? Math.pow(1024, power + 1) : false;
                            if (bytesMultiplier) {
                                break
                            }
                        }
                        n._value = (bytesMultiplier ? bytesMultiplier : 1) * (stringOriginal.match(thousandRegExp) ? Math.pow(10, 3) : 1) * (stringOriginal.match(millionRegExp) ? Math.pow(10, 6) : 1) * (stringOriginal.match(billionRegExp) ? Math.pow(10, 9) : 1) * (stringOriginal.match(trillionRegExp) ? Math.pow(10, 12) : 1) * (string.indexOf("%") > -1 ? .01 : 1) * ((string.split("-").length + Math.min(string.split("(").length - 1, string.split(")").length - 1)) % 2 ? 1 : -1) * Number(string.replace(/[^0-9\.]+/g, ""));
                        n._value = bytesMultiplier ? Math.ceil(n._value) : n._value
                    }
                }
                return n._value
            }

            function formatCurrency(n, format, roundingFunction) {
                var symbolIndex = format.indexOf("$"),
                    openParenIndex = format.indexOf("("),
                    minusSignIndex = format.indexOf("-"),
                    space = "",
                    spliceIndex, output;
                if (format.indexOf(" $") > -1) {
                    space = " ";
                    format = format.replace(" $", "")
                } else if (format.indexOf("$ ") > -1) {
                    space = " ";
                    format = format.replace("$ ", "")
                } else {
                    format = format.replace("$", "")
                }
                output = formatNumber(n._value, format, roundingFunction);
                if (symbolIndex <= 1) {
                    if (output.indexOf("(") > -1 || output.indexOf("-") > -1) {
                        output = output.split("");
                        spliceIndex = 1;
                        if (symbolIndex < openParenIndex || symbolIndex < minusSignIndex) {
                            spliceIndex = 0
                        }
                        output.splice(spliceIndex, 0, languages[currentLanguage].currency.symbol + space);
                        output = output.join("")
                    } else {
                        output = languages[currentLanguage].currency.symbol + space + output
                    }
                } else {
                    if (output.indexOf(")") > -1) {
                        output = output.split("");
                        output.splice(-1, 0, space + languages[currentLanguage].currency.symbol);
                        output = output.join("")
                    } else {
                        output = output + space + languages[currentLanguage].currency.symbol
                    }
                }
                return output
            }

            function formatPercentage(n, format, roundingFunction) {
                var space = "",
                    output, value = n._value * 100;
                if (format.indexOf(" %") > -1) {
                    space = " ";
                    format = format.replace(" %", "")
                } else {
                    format = format.replace("%", "")
                }
                output = formatNumber(value, format, roundingFunction);
                if (output.indexOf(")") > -1) {
                    output = output.split("");
                    output.splice(-1, 0, space + "%");
                    output = output.join("")
                } else {
                    output = output + space + "%"
                }
                return output
            }

            function formatTime(n) {
                var hours = Math.floor(n._value / 60 / 60),
                    minutes = Math.floor((n._value - hours * 60 * 60) / 60),
                    seconds = Math.round(n._value - hours * 60 * 60 - minutes * 60);
                return hours + ":" + (minutes < 10 ? "0" + minutes : minutes) + ":" + (seconds < 10 ? "0" + seconds : seconds)
            }

            function unformatTime(string) {
                var timeArray = string.split(":"),
                    seconds = 0;
                if (timeArray.length === 3) {
                    seconds = seconds + Number(timeArray[0]) * 60 * 60;
                    seconds = seconds + Number(timeArray[1]) * 60;
                    seconds = seconds + Number(timeArray[2])
                } else if (timeArray.length === 2) {
                    seconds = seconds + Number(timeArray[0]) * 60;
                    seconds = seconds + Number(timeArray[1])
                }
                return Number(seconds)
            }

            function formatNumber(value, format, roundingFunction) {
                var negP = false,
                    signed = false,
                    optDec = false,
                    abbr = "",
                    abbrK = false,
                    abbrM = false,
                    abbrB = false,
                    abbrT = false,
                    abbrForce = false,
                    bytes = "",
                    ord = "",
                    abs = Math.abs(value),
                    suffixes = ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"],
                    min, max, power, w, precision, thousands, d = "",
                    neg = false;
                if (value === 0 && zeroFormat !== null) {
                    return zeroFormat
                } else {
                    if (format.indexOf("(") > -1) {
                        negP = true;
                        format = format.slice(1, -1)
                    } else if (format.indexOf("+") > -1) {
                        signed = true;
                        format = format.replace(/\+/g, "")
                    }
                    if (format.indexOf("a") > -1) {
                        abbrK = format.indexOf("aK") >= 0;
                        abbrM = format.indexOf("aM") >= 0;
                        abbrB = format.indexOf("aB") >= 0;
                        abbrT = format.indexOf("aT") >= 0;
                        abbrForce = abbrK || abbrM || abbrB || abbrT;
                        if (format.indexOf(" a") > -1) {
                            abbr = " ";
                            format = format.replace(" a", "")
                        } else {
                            format = format.replace("a", "")
                        }
                        if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {
                            abbr = abbr + languages[currentLanguage].abbreviations.trillion;
                            value = value / Math.pow(10, 12)
                        } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {
                            abbr = abbr + languages[currentLanguage].abbreviations.billion;
                            value = value / Math.pow(10, 9)
                        } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {
                            abbr = abbr + languages[currentLanguage].abbreviations.million;
                            value = value / Math.pow(10, 6)
                        } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {
                            abbr = abbr + languages[currentLanguage].abbreviations.thousand;
                            value = value / Math.pow(10, 3)
                        }
                    }
                    if (format.indexOf("b") > -1) {
                        if (format.indexOf(" b") > -1) {
                            bytes = " ";
                            format = format.replace(" b", "")
                        } else {
                            format = format.replace("b", "")
                        }
                        for (power = 0; power <= suffixes.length; power++) {
                            min = Math.pow(1024, power);
                            max = Math.pow(1024, power + 1);
                            if (value >= min && value < max) {
                                bytes = bytes + suffixes[power];
                                if (min > 0) {
                                    value = value / min
                                }
                                break
                            }
                        }
                    }
                    if (format.indexOf("o") > -1) {
                        if (format.indexOf(" o") > -1) {
                            ord = " ";
                            format = format.replace(" o", "")
                        } else {
                            format = format.replace("o", "")
                        }
                        ord = ord + languages[currentLanguage].ordinal(value)
                    }
                    if (format.indexOf("[.]") > -1) {
                        optDec = true;
                        format = format.replace("[.]", ".")
                    }
                    w = value.toString().split(".")[0];
                    precision = format.split(".")[1];
                    thousands = format.indexOf(",");
                    if (precision) {
                        if (precision.indexOf("[") > -1) {
                            precision = precision.replace("]", "");
                            precision = precision.split("[");
                            d = toFixed(value, precision[0].length + precision[1].length, roundingFunction, precision[1].length)
                        } else {
                            d = toFixed(value, precision.length, roundingFunction)
                        }
                        w = d.split(".")[0];
                        if (d.split(".")[1].length) {
                            d = languages[currentLanguage].delimiters.decimal + d.split(".")[1]
                        } else {
                            d = ""
                        }
                        if (optDec && Number(d.slice(1)) === 0) {
                            d = ""
                        }
                    } else {
                        w = toFixed(value, null, roundingFunction)
                    }
                    if (w.indexOf("-") > -1) {
                        w = w.slice(1);
                        neg = true
                    }
                    if (thousands > -1) {
                        w = w.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1" + languages[currentLanguage].delimiters.thousands)
                    }
                    if (format.indexOf(".") === 0) {
                        w = ""
                    }
                    return (negP && neg ? "(" : "") + (!negP && neg ? "-" : "") + (!neg && signed ? "+" : "") + w + d + (ord ? ord : "") + (abbr ? abbr : "") + (bytes ? bytes : "") + (negP && neg ? ")" : "")
                }
            }
            numeral = function(input) {
                if (numeral.isNumeral(input)) {
                    input = input.value()
                } else if (input === 0 || typeof input === "undefined") {
                    input = 0
                } else if (!Number(input)) {
                    input = numeral.fn.unformat(input)
                }
                return new Numeral(Number(input))
            };
            numeral.version = VERSION;
            numeral.isNumeral = function(obj) {
                return obj instanceof Numeral
            };
            numeral.language = function(key, values) {
                if (!key) {
                    return currentLanguage
                }
                if (key && !values) {
                    if (!languages[key]) {
                        throw new Error("Unknown language : " + key)
                    }
                    currentLanguage = key
                }
                if (values || !languages[key]) {
                    loadLanguage(key, values)
                }
                return numeral
            };
            numeral.languageData = function(key) {
                if (!key) {
                    return languages[currentLanguage]
                }
                if (!languages[key]) {
                    throw new Error("Unknown language : " + key)
                }
                return languages[key]
            };
            numeral.language("en", {
                delimiters: {
                    thousands: ",",
                    decimal: "."
                },
                abbreviations: {
                    thousand: "k",
                    million: "m",
                    billion: "b",
                    trillion: "t"
                },
                ordinal: function(number) {
                    var b = number % 10;
                    return ~~(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th"
                },
                currency: {
                    symbol: "$"
                }
            });
            numeral.zeroFormat = function(format) {
                zeroFormat = typeof format === "string" ? format : null
            };
            numeral.defaultFormat = function(format) {
                defaultFormat = typeof format === "string" ? format : "0.0"
            };

            function loadLanguage(key, values) {
                languages[key] = values
            }
            if ("function" !== typeof Array.prototype.reduce) {
                Array.prototype.reduce = function(callback, opt_initialValue) {
                    "use strict";
                    if (null === this || "undefined" === typeof this) {
                        throw new TypeError("Array.prototype.reduce called on null or undefined")
                    }
                    if ("function" !== typeof callback) {
                        throw new TypeError(callback + " is not a function")
                    }
                    var index, value, length = this.length >>> 0,
                        isValueSet = false;
                    if (1 < arguments.length) {
                        value = opt_initialValue;
                        isValueSet = true
                    }
                    for (index = 0; length > index; ++index) {
                        if (this.hasOwnProperty(index)) {
                            if (isValueSet) {
                                value = callback(value, this[index], index, this)
                            } else {
                                value = this[index];
                                isValueSet = true
                            }
                        }
                    }
                    if (!isValueSet) {
                        throw new TypeError("Reduce of empty array with no initial value")
                    }
                    return value
                }
            }

            function multiplier(x) {
                var parts = x.toString().split(".");
                if (parts.length < 2) {
                    return 1
                }
                return Math.pow(10, parts[1].length)
            }

            function correctionFactor() {
                var args = Array.prototype.slice.call(arguments);
                return args.reduce(function(prev, next) {
                    var mp = multiplier(prev),
                        mn = multiplier(next);
                    return mp > mn ? mp : mn
                }, -Infinity)
            }
            numeral.fn = Numeral.prototype = {
                clone: function() {
                    return numeral(this)
                },
                format: function(inputString, roundingFunction) {
                    return formatNumeral(this, inputString ? inputString : defaultFormat, roundingFunction !== undefined ? roundingFunction : Math.round)
                },
                unformat: function(inputString) {
                    if (Object.prototype.toString.call(inputString) === "[object Number]") {
                        return inputString
                    }
                    return unformatNumeral(this, inputString ? inputString : defaultFormat)
                },
                value: function() {
                    return this._value
                },
                valueOf: function() {
                    return this._value
                },
                set: function(value) {
                    this._value = Number(value);
                    return this
                },
                add: function(value) {
                    var corrFactor = correctionFactor.call(null, this._value, value);

                    function cback(accum, curr, currI, O) {
                        return accum + corrFactor * curr
                    }
                    this._value = [this._value, value].reduce(cback, 0) / corrFactor;
                    return this
                },
                subtract: function(value) {
                    var corrFactor = correctionFactor.call(null, this._value, value);

                    function cback(accum, curr, currI, O) {
                        return accum - corrFactor * curr
                    }
                    this._value = [value].reduce(cback, this._value * corrFactor) / corrFactor;
                    return this
                },
                multiply: function(value) {
                    function cback(accum, curr, currI, O) {
                        var corrFactor = correctionFactor(accum, curr);
                        return accum * corrFactor * (curr * corrFactor) / (corrFactor * corrFactor)
                    }
                    this._value = [this._value, value].reduce(cback, 1);
                    return this
                },
                divide: function(value) {
                    function cback(accum, curr, currI, O) {
                        var corrFactor = correctionFactor(accum, curr);
                        return accum * corrFactor / (curr * corrFactor)
                    }
                    this._value = [this._value, value].reduce(cback);
                    return this
                },
                difference: function(value) {
                    return Math.abs(numeral(this._value).subtract(value).value())
                }
            };
            if (hasModule) {
                module.exports = numeral
            }
            if (typeof ender === "undefined") {
                this["numeral"] = numeral
            }
            if (typeof define === "function" && define.amd) {
                define([], function() {
                    return numeral
                })
            }
        }).call(this)
    }, {}],
    38: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var _backboneRadio = require("backbone.radio");
        var _backboneRadio2 = _interopRequireDefault(_backboneRadio);
        var _numeral = require("numeral");
        var _numeral2 = _interopRequireDefault(_numeral);
        var channel = _backboneRadio2["default"].channel("global");
        var CurrencyHelper = function() {
            function CurrencyHelper() {
                _classCallCheck(this, CurrencyHelper)
            }
            _createClass(CurrencyHelper, [{
                key: "addLocale",
                value: function addLocale(code, language) {
                    _numeral2["default"].language(code, language)
                }
            }, {
                key: "format",
                value: function format(amount) {
                    var decimals = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
                    var currencyLocale = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
                    var lang = currencyLocale || channel.request("currencyLocale");
                    var format = "$0,0";
                    if (lang) {
                        _numeral2["default"].language(lang);
                        var language = _numeral2["default"].languageData();
                        if (language.format) {
                            format = language.format
                        }
                    }
                    for (var i = 0; i < decimals; i++) {
                        if (i === 0) {
                            format += "."
                        }
                        format += "0"
                    }
                    return (0, _numeral2["default"])(amount).format(format)
                }
            }]);
            return CurrencyHelper
        }();
        exports["default"] = new CurrencyHelper;
        module.exports = exports["default"]
    }, {
        "backbone.radio": 12,
        numeral: 37
    }],
    39: [function(require, module, exports) {
        (function(global) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                }
            }
            var _handlebarsRuntime = require("handlebars/runtime");
            var _handlebarsRuntime2 = _interopRequireDefault(_handlebarsRuntime);
            var _translate = require("./translate");
            var _translate2 = _interopRequireDefault(_translate);
            var _currency = require("./currency");
            var _currency2 = _interopRequireDefault(_currency);
            exports["default"] = function(handlebars) {
                var _this = this;
                var Handlebars = _handlebarsRuntime2["default"]["default"];
                if (global.handlebars) {
                    Handlebars = global.handlebars
                }
                if (handlebars) {
                    Handlebars = handlebars
                }
                Handlebars.registerHelper("debug", function(optionalValue) {
                    console.log("Current Context");
                    console.log("====================");
                    console.log(_this);
                    if (optionalValue) {
                        console.log("Value");
                        console.log("====================");
                        console.log(optionalValue)
                    }
                });
                Handlebars.registerHelper("translate", function() {
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key]
                    }
                    var i18nKey = args.shift();
                    args.pop();
                    args.forEach(function(item, index, array) {
                        if (typeof item === "function") {
                            array[index] = item()
                        }
                    });
                    return new Handlebars.SafeString(_translate2["default"].translate(i18nKey, args))
                });
                Handlebars.registerHelper("currency", function(amount, decimals) {
                    amount = parseFloat(amount);
                    if (decimals) {
                        decimals = parseInt(decimals, 10)
                    }
                    var str = _currency2["default"].format(amount, decimals);
                    return new Handlebars.SafeString(str)
                });
                return Handlebars
            };
            module.exports = exports["default"]
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {
        "./currency": 38,
        "./translate": 42,
        "handlebars/runtime": 34
    }],
    40: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var LocalStorage = function() {
            function LocalStorage() {
                _classCallCheck(this, LocalStorage)
            }
            _createClass(LocalStorage, [{
                key: "setItem",
                value: function setItem(name, item) {
                    if (typeof item === "object") {
                        window.localStorage.setItem(name, window.JSON.stringify(item))
                    } else {
                        window.localStorage.setItem(name, item)
                    }
                }
            }, {
                key: "getItem",
                value: function getItem(name) {
                    var item = window.localStorage.getItem(name);
                    if (typeof item !== "undefined" && item !== null) {
                        try {
                            item = window.JSON.parse(item)
                        } catch (e) {}
                    }
                    return item
                }
            }, {
                key: "removeItem",
                value: function removeItem(name) {
                    window.localStorage.removeItem(name)
                }
            }, {
                key: "clear",
                value: function clear() {
                    window.localStorage.clear()
                }
            }]);
            return LocalStorage
        }();
        exports["default"] = new LocalStorage;
        module.exports = exports["default"]
    }, {}],
    41: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var _lodash = require("lodash");
        var _lodash2 = _interopRequireDefault(_lodash);
        var ModuleHelpers = function() {
            function ModuleHelpers() {
                _classCallCheck(this, ModuleHelpers)
            }
            _createClass(ModuleHelpers, [{
                key: "checkRequiredParams",
                value: function checkRequiredParams(object, params, moduleName) {
                    _lodash2["default"].each(params, function(name) {
                        if (!object[name]) {
                            throw new Error("orchestra:" + moduleName + " required param " + name + " is undefined or null")
                        }
                        return true
                    })
                }
            }]);
            return ModuleHelpers
        }();
        exports["default"] = new ModuleHelpers;
        module.exports = exports["default"]
    }, {
        lodash: 3
    }],
    42: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var _i18nextClient = require("i18next-client");
        var _i18nextClient2 = _interopRequireDefault(_i18nextClient);
        var _backboneRadio = require("backbone.radio");
        var _backboneRadio2 = _interopRequireDefault(_backboneRadio);
        var resources = {};
        var channel = _backboneRadio2["default"].channel("global");
        var TranslateHelpers = function() {
            function TranslateHelpers() {
                _classCallCheck(this, TranslateHelpers)
            }
            _createClass(TranslateHelpers, [{
                key: "getLocale",
                value: function getLocale() {
                    var locale = "en-GB";
                    if (channel.request("config")) {
                        var config = channel.request("config");
                        if (config.app) {
                            locale = config.app.locale || "en-GB"
                        }
                    }
                    return locale
                }
            }, {
                key: "addLocale",
                value: function addLocale(key, resStore) {
                    resources[key] = resStore
                }
            }, {
                key: "translate",
                value: function translate(i18nKey, params) {
                    var locale = this.getLocale();
                    var result = null;
                    _i18nextClient2["default"].init({
                        lng: locale,
                        resStore: resources[locale]
                    }, function(err, translate) {
                        result = translate(i18nKey, {
                            postProcess: "sprintf",
                            sprintf: params
                        })
                    });
                    return result
                }
            }]);
            return TranslateHelpers
        }();
        exports["default"] = new TranslateHelpers;
        module.exports = exports["default"]
    }, {
        "backbone.radio": 12,
        "i18next-client": 35
    }],
    43: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var _jquery = require("jquery");
        var _jquery2 = _interopRequireDefault(_jquery);
        var _backboneRadio = require("backbone.radio");
        var _backboneRadio2 = _interopRequireDefault(_backboneRadio);
        var channel = _backboneRadio2["default"].channel("main");
        var Visibility = function() {
            function Visibility() {
                var _this = this;
                _classCallCheck(this, Visibility);
                var visProp = this.getHiddenProp();
                if (visProp) {
                    var evtname = visProp.replace(/[H|h]idden/, "") + "visibilitychange";
                    (0, _jquery2["default"])(document).on(evtname, function() {
                        if (_this.isHidden()) {
                            channel.request("appHidden")
                        } else {
                            channel.request("appShowing")
                        }
                    })
                }
            }
            _createClass(Visibility, [{
                key: "getHiddenProp",
                value: function getHiddenProp() {
                    var prefixes = ["webkit", "moz", "ms", "o"];
                    if ("hidden" in document) {
                        return "hidden"
                    }
                    for (var i = 0; i < prefixes.length; i++) {
                        if (prefixes[i] + "Hidden" in document) {
                            return prefixes[i] + "Hidden"
                        }
                    }
                    return null
                }
            }, {
                key: "isHidden",
                value: function isHidden() {
                    var prop = this.getHiddenProp();
                    if (!prop) {
                        return false
                    }
                    return document[prop]
                }
            }]);
            return Visibility
        }();
        exports["default"] = new Visibility;
        module.exports = exports["default"]
    }, {
        "backbone.radio": 12,
        jquery: 36
    }],
    44: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _jquery = require("jquery");
        var _jquery2 = _interopRequireDefault(_jquery);
        var _lodash = require("lodash");
        var _lodash2 = _interopRequireDefault(_lodash);
        var _backbone = require("backbone");
        var _backbone2 = _interopRequireDefault(_backbone);
        var _backboneRouting = require("backbone-routing");
        var _backboneCocktail = require("backbone.cocktail");
        var _backboneCocktail2 = _interopRequireDefault(_backboneCocktail);
        var _backboneRadio = require("backbone.radio");
        var _backboneRadio2 = _interopRequireDefault(_backboneRadio);
        var _backboneService = require("backbone.service");
        var _backboneService2 = _interopRequireDefault(_backboneService);
        var _backboneStorage = require("backbone.storage");
        var _backboneStorage2 = _interopRequireDefault(_backboneStorage);
        var _mvcCollection = require("./mvc/collection");
        var _mvcCollection2 = _interopRequireDefault(_mvcCollection);
        var _helpersCurrency = require("./helpers/currency");
        var _helpersCurrency2 = _interopRequireDefault(_helpersCurrency);
        var _helpersLocalStorage = require("./helpers/localStorage");
        var _helpersLocalStorage2 = _interopRequireDefault(_helpersLocalStorage);
        var _helpersTranslate = require("./helpers/translate");
        var _helpersTranslate2 = _interopRequireDefault(_helpersTranslate);
        var _mixinsTouchView = require("./mixins/touch.view");
        var _mixinsTouchView2 = _interopRequireDefault(_mixinsTouchView);
        var _helpersVisibility = require("./helpers/visibility");
        var _helpersVisibility2 = _interopRequireDefault(_helpersVisibility);
        var _helpersModule = require("./helpers/module");
        var _helpersModule2 = _interopRequireDefault(_helpersModule);
        var _helpersHandlebars = require("./helpers/handlebars");
        var _helpersHandlebars2 = _interopRequireDefault(_helpersHandlebars);
        require("backbone.marionette");
        require("backbone.stickit");
        (0, _helpersHandlebars2["default"])();
        var func = _backbone2["default"].Marionette.Module.create;
        _backbone2["default"].Marionette.Module.create = function(app, moduleNames, moduleDefinition) {
            moduleDefinition.namespace = moduleNames;
            func.apply(this, arguments)
        };
        var Orchestra = {};
        _lodash2["default"].extend(Orchestra, _backbone2["default"]);
        _lodash2["default"].extend(Orchestra, _backbone2["default"].Marionette.extend());
        _lodash2["default"].extend(Orchestra, {
            _: _lodash2["default"],
            $: _jquery2["default"],
            Radio: _backboneRadio2["default"],
            Service: _backboneService2["default"],
            Storage: _backboneStorage2["default"],
            Cocktail: _backboneCocktail2["default"],
            Route: _backboneRouting.Route,
            Router: _backboneRouting.Router,
            Collection: _mvcCollection2["default"],
            Currency: _helpersCurrency2["default"],
            LocalStorage: _helpersLocalStorage2["default"],
            Translator: _helpersTranslate2["default"],
            Visibility: _helpersVisibility2["default"],
            ModuleHelper: _helpersModule2["default"],
            TouchView: _mixinsTouchView2["default"],
            instances: {},
            getInstance: function getInstance(namespace) {
                var _this = this;
                namespace = namespace || "main";
                if (!this.instances[namespace]) {
                    this.instances[namespace] = new this.Application({
                        namespace: namespace
                    });
                    this.listenTo(this.instances[namespace], "destroy", function() {
                        delete _this.instances[namespace]
                    })
                }
                return this.instances[namespace]
            }
        });
        exports["default"] = Orchestra;
        module.exports = exports["default"]
    }, {
        "./helpers/currency": 38,
        "./helpers/handlebars": 39,
        "./helpers/localStorage": 40,
        "./helpers/module": 41,
        "./helpers/translate": 42,
        "./helpers/visibility": 43,
        "./mixins/touch.view": 45,
        "./mvc/collection": 46,
        backbone: 25,
        "backbone-routing": 4,
        "backbone.cocktail": 7,
        "backbone.marionette": 9,
        "backbone.radio": 12,
        "backbone.service": 13,
        "backbone.stickit": 21,
        "backbone.storage": 22,
        jquery: 36,
        lodash: 3
    }],
    45: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _backbone = require("backbone");
        var _backbone2 = _interopRequireDefault(_backbone);
        var _hammerjs = require("hammerjs");
        var _hammerjs2 = _interopRequireDefault(_hammerjs);
        var _lodash = require("lodash");
        var _lodash2 = _interopRequireDefault(_lodash);
        var _jquery = require("jquery");
        var _jquery2 = _interopRequireDefault(_jquery);
        var delegateEventSplitter = /^(\S+)\s*(.*)$/;
        exports["default"] = {
            hammerEvents: {},
            _hammerInstances: [],
            undelegateEvents: function undelegateEvents() {
                this._undelegateHammerEvents()
            },
            _undelegateHammerEvents: function _undelegateHammerEvents() {
                this._unhammer()
            },
            delegateEvents: function delegateEvents() {
                this._delegateHammerEvents();
                return this
            },
            _delegateHammerEvents: function _delegateHammerEvents(events) {
                var _this = this;
                var options = _lodash2["default"].defaults(this.hammerOptions || {}, _backbone2["default"].hammerOptions);
                if (!(events || (events = _lodash2["default"].result(this, "hammerEvents")))) {
                    return this
                }
                _lodash2["default"].each(events, function(eventItem, key) {
                    var method = eventItem;
                    if (!_lodash2["default"].isFunction(method)) {
                        method = _this[eventItem]
                    }
                    if (method) {
                        var match = key.match(delegateEventSplitter);
                        var selector = match[2];
                        var eventName = match[1];
                        method = _lodash2["default"].bind(method, _this);
                        _this._hammer(options, selector, eventName, method)
                    }
                });
                return this
            },
            _getEventHandler: function _getEventHandler(selector, method) {
                var _this2 = this;
                return function(e) {
                    var context = _this2.$el;
                    if (selector) {
                        context = context.find(selector)
                    }
                    context.each(function(i, el) {
                        var $el = (0, _jquery2["default"])(el);
                        if (el === e.target || $el.has(e.target).length) {
                            var _event = _lodash2["default"].extend(e, {
                                currentTarget: el
                            });
                            method(_event)
                        }
                    })
                }
            },
            _hammer: function _hammer(options, selector, eventName, method) {
                if (!this.$el || !this.$el.length) return false;
                var hammer = new _hammerjs2["default"](this.$el.get(0), _lodash2["default"].clone(options));
                var handler = this._getEventHandler(selector, method);
                hammer.on(eventName, handler);
                this._hammerInstances.push(hammer)
            },
            _unhammer: function _unhammer() {
                _lodash2["default"].each(this._hammerInstances, function(i) {
                    return i.destroy()
                });
                this._hammerInstances = []
            }
        };
        module.exports = exports["default"]
    }, {
        backbone: 25,
        hammerjs: 27,
        jquery: 36,
        lodash: 3
    }],
    46: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _backbone = require("backbone");
        var _backbone2 = _interopRequireDefault(_backbone);
        var _lodash = require("lodash");
        var _lodash2 = _interopRequireDefault(_lodash);
        exports["default"] = _backbone2["default"].Collection.extend({
            next: function next(model) {
                return this.at((this.indexOf(model) + 1) % _lodash2["default"].size(this))
            },
            prev: function prev(model) {
                var index = this.indexOf(model) - 1;
                return this.at(index > -1 ? index : _lodash2["default"].size(this) - 1)
            }
        });
        module.exports = exports["default"]
    }, {
        backbone: 25,
        lodash: 3
    }],
    47: [function(require, module, exports) {
        (function() {
            var root = this;
            var previousUnderscore = root._;
            var breaker = {};
            var ArrayProto = Array.prototype,
                ObjProto = Object.prototype,
                FuncProto = Function.prototype;
            var push = ArrayProto.push,
                slice = ArrayProto.slice,
                concat = ArrayProto.concat,
                toString = ObjProto.toString,
                hasOwnProperty = ObjProto.hasOwnProperty;
            var nativeForEach = ArrayProto.forEach,
                nativeMap = ArrayProto.map,
                nativeReduce = ArrayProto.reduce,
                nativeReduceRight = ArrayProto.reduceRight,
                nativeFilter = ArrayProto.filter,
                nativeEvery = ArrayProto.every,
                nativeSome = ArrayProto.some,
                nativeIndexOf = ArrayProto.indexOf,
                nativeLastIndexOf = ArrayProto.lastIndexOf,
                nativeIsArray = Array.isArray,
                nativeKeys = Object.keys,
                nativeBind = FuncProto.bind;
            var _ = function(obj) {
                if (obj instanceof _) return obj;
                if (!(this instanceof _)) return new _(obj);
                this._wrapped = obj
            };
            if (typeof exports !== "undefined") {
                if (typeof module !== "undefined" && module.exports) {
                    exports = module.exports = _
                }
                exports._ = _
            } else {
                root._ = _
            }
            _.VERSION = "1.6.0";
            var each = _.each = _.forEach = function(obj, iterator, context) {
                if (obj == null) return obj;
                if (nativeForEach && obj.forEach === nativeForEach) {
                    obj.forEach(iterator, context)
                } else if (obj.length === +obj.length) {
                    for (var i = 0, length = obj.length; i < length; i++) {
                        if (iterator.call(context, obj[i], i, obj) === breaker) return
                    }
                } else {
                    var keys = _.keys(obj);
                    for (var i = 0, length = keys.length; i < length; i++) {
                        if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return
                    }
                }
                return obj
            };
            _.map = _.collect = function(obj, iterator, context) {
                var results = [];
                if (obj == null) return results;
                if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
                each(obj, function(value, index, list) {
                    results.push(iterator.call(context, value, index, list))
                });
                return results
            };
            var reduceError = "Reduce of empty array with no initial value";
            _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
                var initial = arguments.length > 2;
                if (obj == null) obj = [];
                if (nativeReduce && obj.reduce === nativeReduce) {
                    if (context) iterator = _.bind(iterator, context);
                    return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator)
                }
                each(obj, function(value, index, list) {
                    if (!initial) {
                        memo = value;
                        initial = true
                    } else {
                        memo = iterator.call(context, memo, value, index, list)
                    }
                });
                if (!initial) throw new TypeError(reduceError);
                return memo
            };
            _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
                var initial = arguments.length > 2;
                if (obj == null) obj = [];
                if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
                    if (context) iterator = _.bind(iterator, context);
                    return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator)
                }
                var length = obj.length;
                if (length !== +length) {
                    var keys = _.keys(obj);
                    length = keys.length
                }
                each(obj, function(value, index, list) {
                    index = keys ? keys[--length] : --length;
                    if (!initial) {
                        memo = obj[index];
                        initial = true
                    } else {
                        memo = iterator.call(context, memo, obj[index], index, list)
                    }
                });
                if (!initial) throw new TypeError(reduceError);
                return memo
            };
            _.find = _.detect = function(obj, predicate, context) {
                var result;
                any(obj, function(value, index, list) {
                    if (predicate.call(context, value, index, list)) {
                        result = value;
                        return true
                    }
                });
                return result
            };
            _.filter = _.select = function(obj, predicate, context) {
                var results = [];
                if (obj == null) return results;
                if (nativeFilter && obj.filter === nativeFilter) return obj.filter(predicate, context);
                each(obj, function(value, index, list) {
                    if (predicate.call(context, value, index, list)) results.push(value)
                });
                return results
            };
            _.reject = function(obj, predicate, context) {
                return _.filter(obj, function(value, index, list) {
                    return !predicate.call(context, value, index, list)
                }, context)
            };
            _.every = _.all = function(obj, predicate, context) {
                predicate || (predicate = _.identity);
                var result = true;
                if (obj == null) return result;
                if (nativeEvery && obj.every === nativeEvery) return obj.every(predicate, context);
                each(obj, function(value, index, list) {
                    if (!(result = result && predicate.call(context, value, index, list))) return breaker
                });
                return !!result
            };
            var any = _.some = _.any = function(obj, predicate, context) {
                predicate || (predicate = _.identity);
                var result = false;
                if (obj == null) return result;
                if (nativeSome && obj.some === nativeSome) return obj.some(predicate, context);
                each(obj, function(value, index, list) {
                    if (result || (result = predicate.call(context, value, index, list))) return breaker
                });
                return !!result
            };
            _.contains = _.include = function(obj, target) {
                if (obj == null) return false;
                if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
                return any(obj, function(value) {
                    return value === target
                })
            };
            _.invoke = function(obj, method) {
                var args = slice.call(arguments, 2);
                var isFunc = _.isFunction(method);
                return _.map(obj, function(value) {
                    return (isFunc ? method : value[method]).apply(value, args)
                })
            };
            _.pluck = function(obj, key) {
                return _.map(obj, _.property(key))
            };
            _.where = function(obj, attrs) {
                return _.filter(obj, _.matches(attrs))
            };
            _.findWhere = function(obj, attrs) {
                return _.find(obj, _.matches(attrs))
            };
            _.max = function(obj, iterator, context) {
                if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
                    return Math.max.apply(Math, obj)
                }
                var result = -Infinity,
                    lastComputed = -Infinity;
                each(obj, function(value, index, list) {
                    var computed = iterator ? iterator.call(context, value, index, list) : value;
                    if (computed > lastComputed) {
                        result = value;
                        lastComputed = computed
                    }
                });
                return result
            };
            _.min = function(obj, iterator, context) {
                if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
                    return Math.min.apply(Math, obj)
                }
                var result = Infinity,
                    lastComputed = Infinity;
                each(obj, function(value, index, list) {
                    var computed = iterator ? iterator.call(context, value, index, list) : value;
                    if (computed < lastComputed) {
                        result = value;
                        lastComputed = computed
                    }
                });
                return result
            };
            _.shuffle = function(obj) {
                var rand;
                var index = 0;
                var shuffled = [];
                each(obj, function(value) {
                    rand = _.random(index++);
                    shuffled[index - 1] = shuffled[rand];
                    shuffled[rand] = value
                });
                return shuffled
            };
            _.sample = function(obj, n, guard) {
                if (n == null || guard) {
                    if (obj.length !== +obj.length) obj = _.values(obj);
                    return obj[_.random(obj.length - 1)]
                }
                return _.shuffle(obj).slice(0, Math.max(0, n))
            };
            var lookupIterator = function(value) {
                if (value == null) return _.identity;
                if (_.isFunction(value)) return value;
                return _.property(value)
            };
            _.sortBy = function(obj, iterator, context) {
                iterator = lookupIterator(iterator);
                return _.pluck(_.map(obj, function(value, index, list) {
                    return {
                        value: value,
                        index: index,
                        criteria: iterator.call(context, value, index, list)
                    }
                }).sort(function(left, right) {
                    var a = left.criteria;
                    var b = right.criteria;
                    if (a !== b) {
                        if (a > b || a === void 0) return 1;
                        if (a < b || b === void 0) return -1
                    }
                    return left.index - right.index
                }), "value")
            };
            var group = function(behavior) {
                return function(obj, iterator, context) {
                    var result = {};
                    iterator = lookupIterator(iterator);
                    each(obj, function(value, index) {
                        var key = iterator.call(context, value, index, obj);
                        behavior(result, key, value)
                    });
                    return result
                }
            };
            _.groupBy = group(function(result, key, value) {
                _.has(result, key) ? result[key].push(value) : result[key] = [value]
            });
            _.indexBy = group(function(result, key, value) {
                result[key] = value
            });
            _.countBy = group(function(result, key) {
                _.has(result, key) ? result[key]++ : result[key] = 1
            });
            _.sortedIndex = function(array, obj, iterator, context) {
                iterator = lookupIterator(iterator);
                var value = iterator.call(context, obj);
                var low = 0,
                    high = array.length;
                while (low < high) {
                    var mid = low + high >>> 1;
                    iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid
                }
                return low
            };
            _.toArray = function(obj) {
                if (!obj) return [];
                if (_.isArray(obj)) return slice.call(obj);
                if (obj.length === +obj.length) return _.map(obj, _.identity);
                return _.values(obj)
            };
            _.size = function(obj) {
                if (obj == null) return 0;
                return obj.length === +obj.length ? obj.length : _.keys(obj).length
            };
            _.first = _.head = _.take = function(array, n, guard) {
                if (array == null) return void 0;
                if (n == null || guard) return array[0];
                if (n < 0) return [];
                return slice.call(array, 0, n)
            };
            _.initial = function(array, n, guard) {
                return slice.call(array, 0, array.length - (n == null || guard ? 1 : n))
            };
            _.last = function(array, n, guard) {
                if (array == null) return void 0;
                if (n == null || guard) return array[array.length - 1];
                return slice.call(array, Math.max(array.length - n, 0))
            };
            _.rest = _.tail = _.drop = function(array, n, guard) {
                return slice.call(array, n == null || guard ? 1 : n)
            };
            _.compact = function(array) {
                return _.filter(array, _.identity)
            };
            var flatten = function(input, shallow, output) {
                if (shallow && _.every(input, _.isArray)) {
                    return concat.apply(output, input)
                }
                each(input, function(value) {
                    if (_.isArray(value) || _.isArguments(value)) {
                        shallow ? push.apply(output, value) : flatten(value, shallow, output)
                    } else {
                        output.push(value)
                    }
                });
                return output
            };
            _.flatten = function(array, shallow) {
                return flatten(array, shallow, [])
            };
            _.without = function(array) {
                return _.difference(array, slice.call(arguments, 1))
            };
            _.partition = function(array, predicate) {
                var pass = [],
                    fail = [];
                each(array, function(elem) {
                    (predicate(elem) ? pass : fail).push(elem)
                });
                return [pass, fail]
            };
            _.uniq = _.unique = function(array, isSorted, iterator, context) {
                if (_.isFunction(isSorted)) {
                    context = iterator;
                    iterator = isSorted;
                    isSorted = false
                }
                var initial = iterator ? _.map(array, iterator, context) : array;
                var results = [];
                var seen = [];
                each(initial, function(value, index) {
                    if (isSorted ? !index || seen[seen.length - 1] !== value : !_.contains(seen, value)) {
                        seen.push(value);
                        results.push(array[index])
                    }
                });
                return results
            };
            _.union = function() {
                return _.uniq(_.flatten(arguments, true))
            };
            _.intersection = function(array) {
                var rest = slice.call(arguments, 1);
                return _.filter(_.uniq(array), function(item) {
                    return _.every(rest, function(other) {
                        return _.contains(other, item)
                    })
                })
            };
            _.difference = function(array) {
                var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
                return _.filter(array, function(value) {
                    return !_.contains(rest, value)
                })
            };
            _.zip = function() {
                var length = _.max(_.pluck(arguments, "length").concat(0));
                var results = new Array(length);
                for (var i = 0; i < length; i++) {
                    results[i] = _.pluck(arguments, "" + i)
                }
                return results
            };
            _.object = function(list, values) {
                if (list == null) return {};
                var result = {};
                for (var i = 0, length = list.length; i < length; i++) {
                    if (values) {
                        result[list[i]] = values[i]
                    } else {
                        result[list[i][0]] = list[i][1]
                    }
                }
                return result
            };
            _.indexOf = function(array, item, isSorted) {
                if (array == null) return -1;
                var i = 0,
                    length = array.length;
                if (isSorted) {
                    if (typeof isSorted == "number") {
                        i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted
                    } else {
                        i = _.sortedIndex(array, item);
                        return array[i] === item ? i : -1
                    }
                }
                if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
                for (; i < length; i++)
                    if (array[i] === item) return i;
                return -1
            };
            _.lastIndexOf = function(array, item, from) {
                if (array == null) return -1;
                var hasIndex = from != null;
                if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
                    return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item)
                }
                var i = hasIndex ? from : array.length;
                while (i--)
                    if (array[i] === item) return i;
                return -1
            };
            _.range = function(start, stop, step) {
                if (arguments.length <= 1) {
                    stop = start || 0;
                    start = 0
                }
                step = arguments[2] || 1;
                var length = Math.max(Math.ceil((stop - start) / step), 0);
                var idx = 0;
                var range = new Array(length);
                while (idx < length) {
                    range[idx++] = start;
                    start += step
                }
                return range
            };
            var ctor = function() {};
            _.bind = function(func, context) {
                var args, bound;
                if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
                if (!_.isFunction(func)) throw new TypeError;
                args = slice.call(arguments, 2);
                return bound = function() {
                    if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
                    ctor.prototype = func.prototype;
                    var self = new ctor;
                    ctor.prototype = null;
                    var result = func.apply(self, args.concat(slice.call(arguments)));
                    if (Object(result) === result) return result;
                    return self
                }
            };
            _.partial = function(func) {
                var boundArgs = slice.call(arguments, 1);
                return function() {
                    var position = 0;
                    var args = boundArgs.slice();
                    for (var i = 0, length = args.length; i < length; i++) {
                        if (args[i] === _) args[i] = arguments[position++]
                    }
                    while (position < arguments.length) args.push(arguments[position++]);
                    return func.apply(this, args)
                }
            };
            _.bindAll = function(obj) {
                var funcs = slice.call(arguments, 1);
                if (funcs.length === 0) throw new Error("bindAll must be passed function names");
                each(funcs, function(f) {
                    obj[f] = _.bind(obj[f], obj)
                });
                return obj
            };
            _.memoize = function(func, hasher) {
                var memo = {};
                hasher || (hasher = _.identity);
                return function() {
                    var key = hasher.apply(this, arguments);
                    return _.has(memo, key) ? memo[key] : memo[key] = func.apply(this, arguments)
                }
            };
            _.delay = function(func, wait) {
                var args = slice.call(arguments, 2);
                return setTimeout(function() {
                    return func.apply(null, args)
                }, wait)
            };
            _.defer = function(func) {
                return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)))
            };
            _.throttle = function(func, wait, options) {
                var context, args, result;
                var timeout = null;
                var previous = 0;
                options || (options = {});
                var later = function() {
                    previous = options.leading === false ? 0 : _.now();
                    timeout = null;
                    result = func.apply(context, args);
                    context = args = null
                };
                return function() {
                    var now = _.now();
                    if (!previous && options.leading === false) previous = now;
                    var remaining = wait - (now - previous);
                    context = this;
                    args = arguments;
                    if (remaining <= 0) {
                        clearTimeout(timeout);
                        timeout = null;
                        previous = now;
                        result = func.apply(context, args);
                        context = args = null
                    } else if (!timeout && options.trailing !== false) {
                        timeout = setTimeout(later, remaining)
                    }
                    return result
                }
            };
            _.debounce = function(func, wait, immediate) {
                var timeout, args, context, timestamp, result;
                var later = function() {
                    var last = _.now() - timestamp;
                    if (last < wait) {
                        timeout = setTimeout(later, wait - last)
                    } else {
                        timeout = null;
                        if (!immediate) {
                            result = func.apply(context, args);
                            context = args = null
                        }
                    }
                };
                return function() {
                    context = this;
                    args = arguments;
                    timestamp = _.now();
                    var callNow = immediate && !timeout;
                    if (!timeout) {
                        timeout = setTimeout(later, wait)
                    }
                    if (callNow) {
                        result = func.apply(context, args);
                        context = args = null
                    }
                    return result
                }
            };
            _.once = function(func) {
                var ran = false,
                    memo;
                return function() {
                    if (ran) return memo;
                    ran = true;
                    memo = func.apply(this, arguments);
                    func = null;
                    return memo
                }
            };
            _.wrap = function(func, wrapper) {
                return _.partial(wrapper, func)
            };
            _.compose = function() {
                var funcs = arguments;
                return function() {
                    var args = arguments;
                    for (var i = funcs.length - 1; i >= 0; i--) {
                        args = [funcs[i].apply(this, args)]
                    }
                    return args[0]
                }
            };
            _.after = function(times, func) {
                return function() {
                    if (--times < 1) {
                        return func.apply(this, arguments)
                    }
                }
            };
            _.keys = function(obj) {
                if (!_.isObject(obj)) return [];
                if (nativeKeys) return nativeKeys(obj);
                var keys = [];
                for (var key in obj)
                    if (_.has(obj, key)) keys.push(key);
                return keys
            };
            _.values = function(obj) {
                var keys = _.keys(obj);
                var length = keys.length;
                var values = new Array(length);
                for (var i = 0; i < length; i++) {
                    values[i] = obj[keys[i]]
                }
                return values
            };
            _.pairs = function(obj) {
                var keys = _.keys(obj);
                var length = keys.length;
                var pairs = new Array(length);
                for (var i = 0; i < length; i++) {
                    pairs[i] = [keys[i], obj[keys[i]]]
                }
                return pairs
            };
            _.invert = function(obj) {
                var result = {};
                var keys = _.keys(obj);
                for (var i = 0, length = keys.length; i < length; i++) {
                    result[obj[keys[i]]] = keys[i]
                }
                return result
            };
            _.functions = _.methods = function(obj) {
                var names = [];
                for (var key in obj) {
                    if (_.isFunction(obj[key])) names.push(key)
                }
                return names.sort()
            };
            _.extend = function(obj) {
                each(slice.call(arguments, 1), function(source) {
                    if (source) {
                        for (var prop in source) {
                            obj[prop] = source[prop]
                        }
                    }
                });
                return obj
            };
            _.pick = function(obj) {
                var copy = {};
                var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
                each(keys, function(key) {
                    if (key in obj) copy[key] = obj[key]
                });
                return copy
            };
            _.omit = function(obj) {
                var copy = {};
                var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
                for (var key in obj) {
                    if (!_.contains(keys, key)) copy[key] = obj[key]
                }
                return copy
            };
            _.defaults = function(obj) {
                each(slice.call(arguments, 1), function(source) {
                    if (source) {
                        for (var prop in source) {
                            if (obj[prop] === void 0) obj[prop] = source[prop]
                        }
                    }
                });
                return obj
            };
            _.clone = function(obj) {
                if (!_.isObject(obj)) return obj;
                return _.isArray(obj) ? obj.slice() : _.extend({}, obj)
            };
            _.tap = function(obj, interceptor) {
                interceptor(obj);
                return obj
            };
            var eq = function(a, b, aStack, bStack) {
                if (a === b) return a !== 0 || 1 / a == 1 / b;
                if (a == null || b == null) return a === b;
                if (a instanceof _) a = a._wrapped;
                if (b instanceof _) b = b._wrapped;
                var className = toString.call(a);
                if (className != toString.call(b)) return false;
                switch (className) {
                    case "[object String]":
                        return a == String(b);
                    case "[object Number]":
                        return a != +a ? b != +b : a == 0 ? 1 / a == 1 / b : a == +b;
                    case "[object Date]":
                    case "[object Boolean]":
                        return +a == +b;
                    case "[object RegExp]":
                        return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase
                }
                if (typeof a != "object" || typeof b != "object") return false;
                var length = aStack.length;
                while (length--) {
                    if (aStack[length] == a) return bStack[length] == b
                }
                var aCtor = a.constructor,
                    bCtor = b.constructor;
                if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor) && ("constructor" in a && "constructor" in b)) {
                    return false
                }
                aStack.push(a);
                bStack.push(b);
                var size = 0,
                    result = true;
                if (className == "[object Array]") {
                    size = a.length;
                    result = size == b.length;
                    if (result) {
                        while (size--) {
                            if (!(result = eq(a[size], b[size], aStack, bStack))) break
                        }
                    }
                } else {
                    for (var key in a) {
                        if (_.has(a, key)) {
                            size++;
                            if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break
                        }
                    }
                    if (result) {
                        for (key in b) {
                            if (_.has(b, key) && !size--) break
                        }
                        result = !size
                    }
                }
                aStack.pop();
                bStack.pop();
                return result
            };
            _.isEqual = function(a, b) {
                return eq(a, b, [], [])
            };
            _.isEmpty = function(obj) {
                if (obj == null) return true;
                if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
                for (var key in obj)
                    if (_.has(obj, key)) return false;
                return true
            };
            _.isElement = function(obj) {
                return !!(obj && obj.nodeType === 1)
            };
            _.isArray = nativeIsArray || function(obj) {
                return toString.call(obj) == "[object Array]"
            };
            _.isObject = function(obj) {
                return obj === Object(obj)
            };
            each(["Arguments", "Function", "String", "Number", "Date", "RegExp"], function(name) {
                _["is" + name] = function(obj) {
                    return toString.call(obj) == "[object " + name + "]"
                }
            });
            if (!_.isArguments(arguments)) {
                _.isArguments = function(obj) {
                    return !!(obj && _.has(obj, "callee"))
                }
            }
            if (typeof /./ !== "function") {
                _.isFunction = function(obj) {
                    return typeof obj === "function"
                }
            }
            _.isFinite = function(obj) {
                return isFinite(obj) && !isNaN(parseFloat(obj))
            };
            _.isNaN = function(obj) {
                return _.isNumber(obj) && obj != +obj
            };
            _.isBoolean = function(obj) {
                return obj === true || obj === false || toString.call(obj) == "[object Boolean]"
            };
            _.isNull = function(obj) {
                return obj === null
            };
            _.isUndefined = function(obj) {
                return obj === void 0
            };
            _.has = function(obj, key) {
                return hasOwnProperty.call(obj, key)
            };
            _.noConflict = function() {
                root._ = previousUnderscore;
                return this
            };
            _.identity = function(value) {
                return value
            };
            _.constant = function(value) {
                return function() {
                    return value
                }
            };
            _.property = function(key) {
                return function(obj) {
                    return obj[key]
                }
            };
            _.matches = function(attrs) {
                return function(obj) {
                    if (obj === attrs) return true;
                    for (var key in attrs) {
                        if (attrs[key] !== obj[key]) return false
                    }
                    return true
                }
            };
            _.times = function(n, iterator, context) {
                var accum = Array(Math.max(0, n));
                for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
                return accum
            };
            _.random = function(min, max) {
                if (max == null) {
                    max = min;
                    min = 0
                }
                return min + Math.floor(Math.random() * (max - min + 1))
            };
            _.now = Date.now || function() {
                return (new Date).getTime()
            };
            var entityMap = {
                escape: {
                    "&": "&amp;",
                    "<": "&lt;",
                    ">": "&gt;",
                    '"': "&quot;",
                    "'": "&#x27;"
                }
            };
            entityMap.unescape = _.invert(entityMap.escape);
            var entityRegexes = {
                escape: new RegExp("[" + _.keys(entityMap.escape).join("") + "]", "g"),
                unescape: new RegExp("(" + _.keys(entityMap.unescape).join("|") + ")", "g")
            };
            _.each(["escape", "unescape"], function(method) {
                _[method] = function(string) {
                    if (string == null) return "";
                    return ("" + string).replace(entityRegexes[method], function(match) {
                        return entityMap[method][match]
                    })
                }
            });
            _.result = function(object, property) {
                if (object == null) return void 0;
                var value = object[property];
                return _.isFunction(value) ? value.call(object) : value
            };
            _.mixin = function(obj) {
                each(_.functions(obj), function(name) {
                    var func = _[name] = obj[name];
                    _.prototype[name] = function() {
                        var args = [this._wrapped];
                        push.apply(args, arguments);
                        return result.call(this, func.apply(_, args))
                    }
                })
            };
            var idCounter = 0;
            _.uniqueId = function(prefix) {
                var id = ++idCounter + "";
                return prefix ? prefix + id : id
            };
            _.templateSettings = {
                evaluate: /<%([\s\S]+?)%>/g,
                interpolate: /<%=([\s\S]+?)%>/g,
                escape: /<%-([\s\S]+?)%>/g
            };
            var noMatch = /(.)^/;
            var escapes = {
                "'": "'",
                "\\": "\\",
                "\r": "r",
                "\n": "n",
                "\t": "t",
                "\u2028": "u2028",
                "\u2029": "u2029"
            };
            var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;
            _.template = function(text, data, settings) {
                var render;
                settings = _.defaults({}, settings, _.templateSettings);
                var matcher = new RegExp([(settings.escape || noMatch).source, (settings.interpolate || noMatch).source, (settings.evaluate || noMatch).source].join("|") + "|$", "g");
                var index = 0;
                var source = "__p+='";
                text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
                    source += text.slice(index, offset).replace(escaper, function(match) {
                        return "\\" + escapes[match]
                    });
                    if (escape) {
                        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'"
                    }
                    if (interpolate) {
                        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'"
                    }
                    if (evaluate) {
                        source += "';\n" + evaluate + "\n__p+='"
                    }
                    index = offset + match.length;
                    return match
                });
                source += "';\n";
                if (!settings.variable) source = "with(obj||{}){\n" + source + "}\n";
                source = "var __t,__p='',__j=Array.prototype.join," + "print=function(){__p+=__j.call(arguments,'');};\n" + source + "return __p;\n";
                try {
                    render = new Function(settings.variable || "obj", "_", source)
                } catch (e) {
                    e.source = source;
                    throw e
                }
                if (data) return render(data, _);
                var template = function(data) {
                    return render.call(this, data, _)
                };
                template.source = "function(" + (settings.variable || "obj") + "){\n" + source + "}";
                return template
            };
            _.chain = function(obj) {
                return _(obj).chain()
            };
            var result = function(obj) {
                return this._chain ? _(obj).chain() : obj
            };
            _.mixin(_);
            each(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], function(name) {
                var method = ArrayProto[name];
                _.prototype[name] = function() {
                    var obj = this._wrapped;
                    method.apply(obj, arguments);
                    if ((name == "shift" || name == "splice") && obj.length === 0) delete obj[0];
                    return result.call(this, obj)
                }
            });
            each(["concat", "join", "slice"], function(name) {
                var method = ArrayProto[name];
                _.prototype[name] = function() {
                    return result.call(this, method.apply(this._wrapped, arguments))
                }
            });
            _.extend(_.prototype, {
                chain: function() {
                    this._chain = true;
                    return this
                },
                value: function() {
                    return this._wrapped
                }
            });
            if (typeof define === "function" && define.amd) {
                define("underscore", [], function() {
                    return _
                })
            }
        }).call(this)
    }, {}]
}, {}, [1]);
(function() {
    var _global = this;
    var _rng;
    var _crypto = _global.crypto || _global.msCrypto;
    if (typeof _global.require == "function") {
        try {
            var _rb = _global.require("crypto").randomBytes;
            _rng = _rb && function() {
                return _rb(16)
            }
        } catch (e) {}
    }
    if (!_rng && _crypto && _crypto.getRandomValues) {
        var _rnds8 = new Uint8Array(16);
        _rng = function whatwgRNG() {
            _crypto.getRandomValues(_rnds8);
            return _rnds8
        }
    }
    if (!_rng) {
        var _rnds = new Array(16);
        _rng = function() {
            for (var i = 0, r; i < 16; i++) {
                if ((i & 3) === 0) r = Math.random() * 4294967296;
                _rnds[i] = r >>> ((i & 3) << 3) & 255
            }
            return _rnds
        }
    }
    var BufferClass = typeof _global.Buffer == "function" ? _global.Buffer : Array;
    var _byteToHex = [];
    var _hexToByte = {};
    for (var i = 0; i < 256; i++) {
        _byteToHex[i] = (i + 256).toString(16).substr(1);
        _hexToByte[_byteToHex[i]] = i
    }

    function parse(s, buf, offset) {
        var i = buf && offset || 0,
            ii = 0;
        buf = buf || [];
        s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {
            if (ii < 16) {
                buf[i + ii++] = _hexToByte[oct]
            }
        });
        while (ii < 16) {
            buf[i + ii++] = 0
        }
        return buf
    }

    function unparse(buf, offset) {
        var i = offset || 0,
            bth = _byteToHex;
        return bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + "-" + bth[buf[i++]] + bth[buf[i++]] + "-" + bth[buf[i++]] + bth[buf[i++]] + "-" + bth[buf[i++]] + bth[buf[i++]] + "-" + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]]
    }
    var _seedBytes = _rng();
    var _nodeId = [_seedBytes[0] | 1, _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]];
    var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 16383;
    var _lastMSecs = 0,
        _lastNSecs = 0;

    function v1(options, buf, offset) {
        var i = buf && offset || 0;
        var b = buf || [];
        options = options || {};
        var clockseq = options.clockseq != null ? options.clockseq : _clockseq;
        var msecs = options.msecs != null ? options.msecs : (new Date).getTime();
        var nsecs = options.nsecs != null ? options.nsecs : _lastNSecs + 1;
        var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
        if (dt < 0 && options.clockseq == null) {
            clockseq = clockseq + 1 & 16383
        }
        if ((dt < 0 || msecs > _lastMSecs) && options.nsecs == null) {
            nsecs = 0
        }
        if (nsecs >= 1e4) {
            throw new Error("uuid.v1(): Can't create more than 10M uuids/sec")
        }
        _lastMSecs = msecs;
        _lastNSecs = nsecs;
        _clockseq = clockseq;
        msecs += 122192928e5;
        var tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
        b[i++] = tl >>> 24 & 255;
        b[i++] = tl >>> 16 & 255;
        b[i++] = tl >>> 8 & 255;
        b[i++] = tl & 255;
        var tmh = msecs / 4294967296 * 1e4 & 268435455;
        b[i++] = tmh >>> 8 & 255;
        b[i++] = tmh & 255;
        b[i++] = tmh >>> 24 & 15 | 16;
        b[i++] = tmh >>> 16 & 255;
        b[i++] = clockseq >>> 8 | 128;
        b[i++] = clockseq & 255;
        var node = options.node || _nodeId;
        for (var n = 0; n < 6; n++) {
            b[i + n] = node[n]
        }
        return buf ? buf : unparse(b)
    }

    function v4(options, buf, offset) {
        var i = buf && offset || 0;
        if (typeof options == "string") {
            buf = options == "binary" ? new BufferClass(16) : null;
            options = null
        }
        options = options || {};
        var rnds = options.random || (options.rng || _rng)();
        rnds[6] = rnds[6] & 15 | 64;
        rnds[8] = rnds[8] & 63 | 128;
        if (buf) {
            for (var ii = 0; ii < 16; ii++) {
                buf[i + ii] = rnds[ii]
            }
        }
        return buf || unparse(rnds)
    }
    var uuid = v4;
    uuid.v1 = v1;
    uuid.v4 = v4;
    uuid.parse = parse;
    uuid.unparse = unparse;
    uuid.BufferClass = BufferClass;
    if (typeof module != "undefined" && module.exports) {
        module.exports = uuid
    } else if (typeof define === "function" && define.amd) {
        define(function() {
            return uuid
        })
    } else {
        var _previousRoot = _global.uuid;
        uuid.noConflict = function() {
            _global.uuid = _previousRoot;
            return uuid
        };
        _global.uuid = uuid
    }
}).call(this);
(function(e, t) {
    function r() {
        return new Date(Date.UTC.apply(Date, arguments))
    }

    function i() {
        var e = new Date;
        return r(e.getFullYear(), e.getMonth(), e.getDate())
    }

    function s(e) {
        return function() {
            return this[e].apply(this, arguments)
        }
    }

    function f(t, n) {
        function u(e, t) {
            return t.toLowerCase()
        }
        var r = e(t).data(),
            i = {},
            s, o = new RegExp("^" + n.toLowerCase() + "([A-Z])");
        n = new RegExp("^" + n.toLowerCase());
        for (var a in r)
            if (n.test(a)) {
                s = a.replace(o, u);
                i[s] = r[a]
            } return i
    }

    function l(t) {
        var n = {};
        if (!d[t]) {
            t = t.split("-")[0];
            if (!d[t]) return
        }
        var r = d[t];
        e.each(p, function(e, t) {
            if (t in r) n[t] = r[t]
        });
        return n
    }
    var n = e(window);
    var o = function() {
        var t = {
            get: function(e) {
                return this.slice(e)[0]
            },
            contains: function(e) {
                var t = e && e.valueOf();
                for (var n = 0, r = this.length; n < r; n++)
                    if (this[n].valueOf() === t) return n;
                return -1
            },
            remove: function(e) {
                this.splice(e, 1)
            },
            replace: function(t) {
                if (!t) return;
                if (!e.isArray(t)) t = [t];
                this.clear();
                this.push.apply(this, t)
            },
            clear: function() {
                this.length = 0
            },
            copy: function() {
                var e = new o;
                e.replace(this);
                return e
            }
        };
        return function() {
            var n = [];
            n.push.apply(n, arguments);
            e.extend(n, t);
            return n
        }
    }();
    var u = function(t, n) {
        this.dates = new o;
        this.viewDate = i();
        this.focusDate = null;
        this._process_options(n);
        this.element = e(t);
        this.isInline = false;
        this.isInput = this.element.is("input");
        this.component = this.element.is(".date") ? this.element.find(".add-on, .input-group-addon, .btn") : false;
        this.hasInput = this.component && this.element.find("input").length;
        if (this.component && this.component.length === 0) this.component = false;
        this.picker = e(v.template);
        this._buildEvents();
        this._attachEvents();
        if (this.isInline) {
            this.picker.addClass("datepicker-inline").appendTo(this.element)
        } else {
            this.picker.addClass("datepicker-dropdown dropdown-menu")
        }
        if (this.o.rtl) {
            this.picker.addClass("datepicker-rtl")
        }
        this.viewMode = this.o.startView;
        if (this.o.calendarWeeks) this.picker.find("tfoot th.today").attr("colspan", function(e, t) {
            return parseInt(t) + 1
        });
        this._allow_update = false;
        this.setStartDate(this._o.startDate);
        this.setEndDate(this._o.endDate);
        this.setDaysOfWeekDisabled(this.o.daysOfWeekDisabled);
        this.fillDow();
        this.fillMonths();
        this._allow_update = true;
        this.update();
        this.showMode();
        if (this.isInline) {
            this.show()
        }
    };
    u.prototype = {
        constructor: u,
        _process_options: function(t) {
            this._o = e.extend({}, this._o, t);
            var n = this.o = e.extend({}, this._o);
            var r = n.language;
            if (!d[r]) {
                r = r.split("-")[0];
                if (!d[r]) r = h.language
            }
            n.language = r;
            switch (n.startView) {
                case 2:
                case "decade":
                    n.startView = 2;
                    break;
                case 1:
                case "year":
                    n.startView = 1;
                    break;
                default:
                    n.startView = 0
            }
            switch (n.minViewMode) {
                case 1:
                case "months":
                    n.minViewMode = 1;
                    break;
                case 2:
                case "years":
                    n.minViewMode = 2;
                    break;
                default:
                    n.minViewMode = 0
            }
            n.startView = Math.max(n.startView, n.minViewMode);
            if (n.multidate !== true) {
                n.multidate = Number(n.multidate) || false;
                if (n.multidate !== false) n.multidate = Math.max(0, n.multidate);
                else n.multidate = 1
            }
            n.multidateSeparator = String(n.multidateSeparator);
            n.weekStart %= 7;
            n.weekEnd = (n.weekStart + 6) % 7;
            var i = v.parseFormat(n.format);
            if (n.startDate !== -Infinity) {
                if (!!n.startDate) {
                    if (n.startDate instanceof Date) n.startDate = this._local_to_utc(this._zero_time(n.startDate));
                    else n.startDate = v.parseDate(n.startDate, i, n.language)
                } else {
                    n.startDate = -Infinity
                }
            }
            if (n.endDate !== Infinity) {
                if (!!n.endDate) {
                    if (n.endDate instanceof Date) n.endDate = this._local_to_utc(this._zero_time(n.endDate));
                    else n.endDate = v.parseDate(n.endDate, i, n.language)
                } else {
                    n.endDate = Infinity
                }
            }
            n.daysOfWeekDisabled = n.daysOfWeekDisabled || [];
            if (!e.isArray(n.daysOfWeekDisabled)) n.daysOfWeekDisabled = n.daysOfWeekDisabled.split(/[,\s]*/);
            n.daysOfWeekDisabled = e.map(n.daysOfWeekDisabled, function(e) {
                return parseInt(e, 10)
            });
            var s = String(n.orientation).toLowerCase().split(/\s+/g),
                o = n.orientation.toLowerCase();
            s = e.grep(s, function(e) {
                return /^auto|left|right|top|bottom$/.test(e)
            });
            n.orientation = {
                x: "auto",
                y: "auto"
            };
            if (!o || o === "auto");
            else if (s.length === 1) {
                switch (s[0]) {
                    case "top":
                    case "bottom":
                        n.orientation.y = s[0];
                        break;
                    case "left":
                    case "right":
                        n.orientation.x = s[0];
                        break
                }
            } else {
                o = e.grep(s, function(e) {
                    return /^left|right$/.test(e)
                });
                n.orientation.x = o[0] || "auto";
                o = e.grep(s, function(e) {
                    return /^top|bottom$/.test(e)
                });
                n.orientation.y = o[0] || "auto"
            }
        },
        _events: [],
        _secondaryEvents: [],
        _applyEvents: function(e) {
            for (var n = 0, r, i, s; n < e.length; n++) {
                r = e[n][0];
                if (e[n].length === 2) {
                    i = t;
                    s = e[n][1]
                } else if (e[n].length === 3) {
                    i = e[n][1];
                    s = e[n][2]
                }
                r.on(s, i)
            }
        },
        _unapplyEvents: function(e) {
            for (var n = 0, r, i, s; n < e.length; n++) {
                r = e[n][0];
                if (e[n].length === 2) {
                    s = t;
                    i = e[n][1]
                } else if (e[n].length === 3) {
                    s = e[n][1];
                    i = e[n][2]
                }
                r.off(i, s)
            }
        },
        _buildEvents: function() {
            if (this.isInput) {
                this._events = [
                    [this.element, {
                        focus: e.proxy(this.show, this),
                        keyup: e.proxy(function(t) {
                            if (e.inArray(t.keyCode, [27, 37, 39, 38, 40, 32, 13, 9]) === -1) this.update()
                        }, this),
                        keydown: e.proxy(this.keydown, this)
                    }]
                ]
            } else if (this.component && this.hasInput) {
                this._events = [
                    [this.element.find("input"), {
                        focus: e.proxy(this.show, this),
                        keyup: e.proxy(function(t) {
                            if (e.inArray(t.keyCode, [27, 37, 39, 38, 40, 32, 13, 9]) === -1) this.update()
                        }, this),
                        keydown: e.proxy(this.keydown, this)
                    }],
                    [this.component, {
                        click: e.proxy(this.show, this)
                    }]
                ]
            } else if (this.element.is("div")) {
                this.isInline = true
            } else {
                this._events = [
                    [this.element, {
                        click: e.proxy(this.show, this)
                    }]
                ]
            }
            this._events.push([this.element, "*", {
                blur: e.proxy(function(e) {
                    this._focused_from = e.target
                }, this)
            }], [this.element, {
                blur: e.proxy(function(e) {
                    this._focused_from = e.target
                }, this)
            }]);
            this._secondaryEvents = [
                [this.picker, {
                    click: e.proxy(this.click, this)
                }],
                [e(window), {
                    resize: e.proxy(this.place, this)
                }],
                [e(document), {
                    "mousedown touchstart": e.proxy(function(e) {
                        if (!(this.element.is(e.target) || this.element.find(e.target).length || this.picker.is(e.target) || this.picker.find(e.target).length)) {
                            this.hide()
                        }
                    }, this)
                }]
            ]
        },
        _attachEvents: function() {
            this._detachEvents();
            this._applyEvents(this._events)
        },
        _detachEvents: function() {
            this._unapplyEvents(this._events)
        },
        _attachSecondaryEvents: function() {
            this._detachSecondaryEvents();
            this._applyEvents(this._secondaryEvents)
        },
        _detachSecondaryEvents: function() {
            this._unapplyEvents(this._secondaryEvents)
        },
        _trigger: function(t, n) {
            var r = n || this.dates.get(-1),
                i = this._utc_to_local(r);
            this.element.trigger({
                type: t,
                date: i,
                dates: e.map(this.dates, this._utc_to_local),
                format: e.proxy(function(e, t) {
                    if (arguments.length === 0) {
                        e = this.dates.length - 1;
                        t = this.o.format
                    } else if (typeof e === "string") {
                        t = e;
                        e = this.dates.length - 1
                    }
                    t = t || this.o.format;
                    var n = this.dates.get(e);
                    return v.formatDate(n, t, this.o.language)
                }, this)
            })
        },
        show: function() {
            if (!this.isInline) this.picker.appendTo("body");
            this.picker.show();
            this.place();
            this._attachSecondaryEvents();
            this._trigger("show")
        },
        hide: function() {
            if (this.isInline) return;
            if (!this.picker.is(":visible")) return;
            this.focusDate = null;
            this.picker.hide().detach();
            this._detachSecondaryEvents();
            this.viewMode = this.o.startView;
            this.showMode();
            if (this.o.forceParse && (this.isInput && this.element.val() || this.hasInput && this.element.find("input").val())) this.setValue();
            this._trigger("hide")
        },
        remove: function() {
            this.hide();
            this._detachEvents();
            this._detachSecondaryEvents();
            this.picker.remove();
            delete this.element.data().datepicker;
            if (!this.isInput) {
                delete this.element.data().date
            }
        },
        _utc_to_local: function(e) {
            return e && new Date(e.getTime() + e.getTimezoneOffset() * 6e4)
        },
        _local_to_utc: function(e) {
            return e && new Date(e.getTime() - e.getTimezoneOffset() * 6e4)
        },
        _zero_time: function(e) {
            return e && new Date(e.getFullYear(), e.getMonth(), e.getDate())
        },
        _zero_utc_time: function(e) {
            return e && new Date(Date.UTC(e.getUTCFullYear(), e.getUTCMonth(), e.getUTCDate()))
        },
        getDates: function() {
            return e.map(this.dates, this._utc_to_local)
        },
        getUTCDates: function() {
            return e.map(this.dates, function(e) {
                return new Date(e)
            })
        },
        getDate: function() {
            return this._utc_to_local(this.getUTCDate())
        },
        getUTCDate: function() {
            return new Date(this.dates.get(-1))
        },
        setDates: function() {
            var t = e.isArray(arguments[0]) ? arguments[0] : arguments;
            this.update.apply(this, t);
            this._trigger("changeDate");
            this.setValue()
        },
        setUTCDates: function() {
            var t = e.isArray(arguments[0]) ? arguments[0] : arguments;
            this.update.apply(this, e.map(t, this._utc_to_local));
            this._trigger("changeDate");
            this.setValue()
        },
        setDate: s("setDates"),
        setUTCDate: s("setUTCDates"),
        setValue: function() {
            var e = this.getFormattedDate();
            if (!this.isInput) {
                if (this.component) {
                    this.element.find("input").val(e).change()
                }
            } else {
                this.element.val(e).change()
            }
        },
        getFormattedDate: function(n) {
            if (n === t) n = this.o.format;
            var r = this.o.language;
            return e.map(this.dates, function(e) {
                return v.formatDate(e, n, r)
            }).join(this.o.multidateSeparator)
        },
        setStartDate: function(e) {
            this._process_options({
                startDate: e
            });
            this.update();
            this.updateNavArrows()
        },
        setEndDate: function(e) {
            this._process_options({
                endDate: e
            });
            this.update();
            this.updateNavArrows()
        },
        setDaysOfWeekDisabled: function(e) {
            this._process_options({
                daysOfWeekDisabled: e
            });
            this.update();
            this.updateNavArrows()
        },
        place: function() {
            if (this.isInline) return;
            var t = this.picker.outerWidth(),
                r = this.picker.outerHeight(),
                i = 10,
                s = n.width(),
                o = n.height(),
                u = n.scrollTop();
            var a = parseInt(this.element.parents().filter(function() {
                return e(this).css("z-index") !== "auto"
            }).first().css("z-index")) + 10;
            var f = this.component ? this.component.parent().offset() : this.element.offset();
            var l = this.component ? this.component.outerHeight(true) : this.element.outerHeight(false);
            var c = this.component ? this.component.outerWidth(true) : this.element.outerWidth(false);
            var h = f.left,
                p = f.top;
            this.picker.removeClass("datepicker-orient-top datepicker-orient-bottom " + "datepicker-orient-right datepicker-orient-left");
            if (this.o.orientation.x !== "auto") {
                this.picker.addClass("datepicker-orient-" + this.o.orientation.x);
                if (this.o.orientation.x === "right") h -= t - c
            } else {
                this.picker.addClass("datepicker-orient-left");
                if (f.left < 0) h -= f.left - i;
                else if (f.left + t > s) h = s - t - i
            }
            var d = this.o.orientation.y,
                v, m;
            if (d === "auto") {
                v = -u + f.top - r;
                m = u + o - (f.top + l + r);
                if (Math.max(v, m) === m) d = "top";
                else d = "bottom"
            }
            this.picker.addClass("datepicker-orient-" + d);
            if (d === "top") p += l;
            else p -= r + parseInt(this.picker.css("padding-top"));
            this.picker.css({
                top: p,
                left: h,
                zIndex: a
            })
        },
        _allow_update: true,
        update: function() {
            if (!this._allow_update) return;
            var t = this.dates.copy(),
                n = [],
                r = false;
            if (arguments.length) {
                e.each(arguments, e.proxy(function(e, t) {
                    if (t instanceof Date) t = this._local_to_utc(t);
                    n.push(t)
                }, this));
                r = true
            } else {
                n = this.isInput ? this.element.val() : this.element.data("date") || this.element.find("input").val();
                if (n && this.o.multidate) n = n.split(this.o.multidateSeparator);
                else n = [n];
                delete this.element.data().date
            }
            n = e.map(n, e.proxy(function(e) {
                return v.parseDate(e, this.o.format, this.o.language)
            }, this));
            n = e.grep(n, e.proxy(function(e) {
                return e < this.o.startDate || e > this.o.endDate || !e
            }, this), true);
            this.dates.replace(n);
            if (this.dates.length) this.viewDate = new Date(this.dates.get(-1));
            else if (this.viewDate < this.o.startDate) this.viewDate = new Date(this.o.startDate);
            else if (this.viewDate > this.o.endDate) this.viewDate = new Date(this.o.endDate);
            if (r) {
                this.setValue()
            } else if (n.length) {
                if (String(t) !== String(this.dates)) this._trigger("changeDate")
            }
            if (!this.dates.length && t.length) this._trigger("clearDate");
            this.fill()
        },
        fillDow: function() {
            var e = this.o.weekStart,
                t = "<tr>";
            if (this.o.calendarWeeks) {
                var n = '<th class="cw">&nbsp;</th>';
                t += n;
                this.picker.find(".datepicker-days thead tr:first-child").prepend(n)
            }
            while (e < this.o.weekStart + 7) {
                t += '<th class="dow">' + d[this.o.language].daysMin[e++ % 7] + "</th>"
            }
            t += "</tr>";
            this.picker.find(".datepicker-days thead").append(t)
        },
        fillMonths: function() {
            var e = "",
                t = 0;
            while (t < 12) {
                e += '<span class="month">' + d[this.o.language].monthsShort[t++] + "</span>"
            }
            this.picker.find(".datepicker-months td").html(e)
        },
        setRange: function(t) {
            if (!t || !t.length) delete this.range;
            else this.range = e.map(t, function(e) {
                return e.valueOf()
            });
            this.fill()
        },
        getClassNames: function(t) {
            var n = [],
                r = this.viewDate.getUTCFullYear(),
                i = this.viewDate.getUTCMonth(),
                s = new Date;
            if (t.getUTCFullYear() < r || t.getUTCFullYear() === r && t.getUTCMonth() < i) {
                n.push("old")
            } else if (t.getUTCFullYear() > r || t.getUTCFullYear() === r && t.getUTCMonth() > i) {
                n.push("new")
            }
            if (this.focusDate && t.valueOf() === this.focusDate.valueOf()) n.push("focused");
            if (this.o.todayHighlight && t.getUTCFullYear() === s.getFullYear() && t.getUTCMonth() === s.getMonth() && t.getUTCDate() === s.getDate()) {
                n.push("today")
            }
            if (this.dates.contains(t) !== -1) n.push("active");
            if (t.valueOf() < this.o.startDate || t.valueOf() > this.o.endDate || e.inArray(t.getUTCDay(), this.o.daysOfWeekDisabled) !== -1) {
                n.push("disabled")
            }
            if (this.range) {
                if (t > this.range[0] && t < this.range[this.range.length - 1]) {
                    n.push("range")
                }
                if (e.inArray(t.valueOf(), this.range) !== -1) {
                    n.push("selected")
                }
            }
            return n
        },
        fill: function() {
            var n = new Date(this.viewDate),
                i = n.getUTCFullYear(),
                s = n.getUTCMonth(),
                o = this.o.startDate !== -Infinity ? this.o.startDate.getUTCFullYear() : -Infinity,
                u = this.o.startDate !== -Infinity ? this.o.startDate.getUTCMonth() : -Infinity,
                a = this.o.endDate !== Infinity ? this.o.endDate.getUTCFullYear() : Infinity,
                f = this.o.endDate !== Infinity ? this.o.endDate.getUTCMonth() : Infinity,
                l = d[this.o.language].today || d["en"].today || "",
                c = d[this.o.language].clear || d["en"].clear || "",
                h;
            this.picker.find(".datepicker-days thead th.datepicker-switch").text(d[this.o.language].months[s] + " " + i);
            this.picker.find("tfoot th.today").text(l).toggle(this.o.todayBtn !== false);
            this.picker.find("tfoot th.clear").text(c).toggle(this.o.clearBtn !== false);
            this.updateNavArrows();
            this.fillMonths();
            var p = r(i, s - 1, 28),
                m = v.getDaysInMonth(p.getUTCFullYear(), p.getUTCMonth());
            p.setUTCDate(m);
            p.setUTCDate(m - (p.getUTCDay() - this.o.weekStart + 7) % 7);
            var g = new Date(p);
            g.setUTCDate(g.getUTCDate() + 42);
            g = g.valueOf();
            var y = [];
            var b;
            while (p.valueOf() < g) {
                if (p.getUTCDay() === this.o.weekStart) {
                    y.push("<tr>");
                    if (this.o.calendarWeeks) {
                        var w = new Date(+p + (this.o.weekStart - p.getUTCDay() - 7) % 7 * 864e5),
                            E = new Date(Number(w) + (7 + 4 - w.getUTCDay()) % 7 * 864e5),
                            S = new Date(Number(S = r(E.getUTCFullYear(), 0, 1)) + (7 + 4 - S.getUTCDay()) % 7 * 864e5),
                            x = (E - S) / 864e5 / 7 + 1;
                        y.push('<td class="cw">' + x + "</td>")
                    }
                }
                b = this.getClassNames(p);
                b.push("day");
                if (this.o.beforeShowDay !== e.noop) {
                    var T = this.o.beforeShowDay(this._utc_to_local(p));
                    if (T === t) T = {};
                    else if (typeof T === "boolean") T = {
                        enabled: T
                    };
                    else if (typeof T === "string") T = {
                        classes: T
                    };
                    if (T.enabled === false) b.push("disabled");
                    if (T.classes) b = b.concat(T.classes.split(/\s+/));
                    if (T.tooltip) h = T.tooltip
                }
                b = e.unique(b);
                y.push('<td class="' + b.join(" ") + '"' + (h ? ' title="' + h + '"' : "") + ">" + p.getUTCDate() + "</td>");
                if (p.getUTCDay() === this.o.weekEnd) {
                    y.push("</tr>")
                }
                p.setUTCDate(p.getUTCDate() + 1)
            }
            this.picker.find(".datepicker-days tbody").empty().append(y.join(""));
            var N = this.picker.find(".datepicker-months").find("th:eq(1)").text(i).end().find("span").removeClass("active");
            e.each(this.dates, function(e, t) {
                if (t.getUTCFullYear() === i) N.eq(t.getUTCMonth()).addClass("active")
            });
            if (i < o || i > a) {
                N.addClass("disabled")
            }
            if (i === o) {
                N.slice(0, u).addClass("disabled")
            }
            if (i === a) {
                N.slice(f + 1).addClass("disabled")
            }
            y = "";
            i = parseInt(i / 10, 10) * 10;
            var C = this.picker.find(".datepicker-years").find("th:eq(1)").text(i + "-" + (i + 9)).end().find("td");
            i -= 1;
            var k = e.map(this.dates, function(e) {
                    return e.getUTCFullYear()
                }),
                L;
            for (var A = -1; A < 11; A++) {
                L = ["year"];
                if (A === -1) L.push("old");
                else if (A === 10) L.push("new");
                if (e.inArray(i, k) !== -1) L.push("active");
                if (i < o || i > a) L.push("disabled");
                y += '<span class="' + L.join(" ") + '">' + i + "</span>";
                i += 1
            }
            C.html(y)
        },
        updateNavArrows: function() {
            if (!this._allow_update) return;
            var e = new Date(this.viewDate),
                t = e.getUTCFullYear(),
                n = e.getUTCMonth();
            switch (this.viewMode) {
                case 0:
                    if (this.o.startDate !== -Infinity && t <= this.o.startDate.getUTCFullYear() && n <= this.o.startDate.getUTCMonth()) {
                        this.picker.find(".prev").css({
                            visibility: "hidden"
                        })
                    } else {
                        this.picker.find(".prev").css({
                            visibility: "visible"
                        })
                    }
                    if (this.o.endDate !== Infinity && t >= this.o.endDate.getUTCFullYear() && n >= this.o.endDate.getUTCMonth()) {
                        this.picker.find(".next").css({
                            visibility: "hidden"
                        })
                    } else {
                        this.picker.find(".next").css({
                            visibility: "visible"
                        })
                    }
                    break;
                case 1:
                case 2:
                    if (this.o.startDate !== -Infinity && t <= this.o.startDate.getUTCFullYear()) {
                        this.picker.find(".prev").css({
                            visibility: "hidden"
                        })
                    } else {
                        this.picker.find(".prev").css({
                            visibility: "visible"
                        })
                    }
                    if (this.o.endDate !== Infinity && t >= this.o.endDate.getUTCFullYear()) {
                        this.picker.find(".next").css({
                            visibility: "hidden"
                        })
                    } else {
                        this.picker.find(".next").css({
                            visibility: "visible"
                        })
                    }
                    break
            }
        },
        click: function(t) {
            t.preventDefault();
            var n = e(t.target).closest("span, td, th"),
                i, s, o;
            if (n.length === 1) {
                switch (n[0].nodeName.toLowerCase()) {
                    case "th":
                        switch (n[0].className) {
                            case "datepicker-switch":
                                this.showMode(1);
                                break;
                            case "prev":
                            case "next":
                                var u = v.modes[this.viewMode].navStep * (n[0].className === "prev" ? -1 : 1);
                                switch (this.viewMode) {
                                    case 0:
                                        this.viewDate = this.moveMonth(this.viewDate, u);
                                        this._trigger("changeMonth", this.viewDate);
                                        break;
                                    case 1:
                                    case 2:
                                        this.viewDate = this.moveYear(this.viewDate, u);
                                        if (this.viewMode === 1) this._trigger("changeYear", this.viewDate);
                                        break
                                }
                                this.fill();
                                break;
                            case "today":
                                var a = new Date;
                                a = r(a.getFullYear(), a.getMonth(), a.getDate(), 0, 0, 0);
                                this.showMode(-2);
                                var f = this.o.todayBtn === "linked" ? null : "view";
                                this._setDate(a, f);
                                break;
                            case "clear":
                                var l;
                                if (this.isInput) l = this.element;
                                else if (this.component) l = this.element.find("input");
                                if (l) l.val("").change();
                                this.update();
                                this._trigger("changeDate");
                                if (this.o.autoclose) this.hide();
                                break
                        }
                        break;
                    case "span":
                        if (!n.is(".disabled")) {
                            this.viewDate.setUTCDate(1);
                            if (n.is(".month")) {
                                o = 1;
                                s = n.parent().find("span").index(n);
                                i = this.viewDate.getUTCFullYear();
                                this.viewDate.setUTCMonth(s);
                                this._trigger("changeMonth", this.viewDate);
                                if (this.o.minViewMode === 1) {
                                    this._setDate(r(i, s, o))
                                }
                            } else {
                                o = 1;
                                s = 0;
                                i = parseInt(n.text(), 10) || 0;
                                this.viewDate.setUTCFullYear(i);
                                this._trigger("changeYear", this.viewDate);
                                if (this.o.minViewMode === 2) {
                                    this._setDate(r(i, s, o))
                                }
                            }
                            this.showMode(-1);
                            this.fill()
                        }
                        break;
                    case "td":
                        if (n.is(".day") && !n.is(".disabled")) {
                            o = parseInt(n.text(), 10) || 1;
                            i = this.viewDate.getUTCFullYear();
                            s = this.viewDate.getUTCMonth();
                            if (n.is(".old")) {
                                if (s === 0) {
                                    s = 11;
                                    i -= 1
                                } else {
                                    s -= 1
                                }
                            } else if (n.is(".new")) {
                                if (s === 11) {
                                    s = 0;
                                    i += 1
                                } else {
                                    s += 1
                                }
                            }
                            this._setDate(r(i, s, o))
                        }
                        break
                }
            }
            if (this.picker.is(":visible") && this._focused_from) {
                e(this._focused_from).focus()
            }
            delete this._focused_from
        },
        _toggle_multidate: function(e) {
            var t = this.dates.contains(e);
            if (!e) {
                this.dates.clear()
            } else if (t !== -1) {
                this.dates.remove(t)
            } else {
                this.dates.push(e)
            }
            if (typeof this.o.multidate === "number")
                while (this.dates.length > this.o.multidate) this.dates.remove(0)
        },
        _setDate: function(e, t) {
            if (!t || t === "date") this._toggle_multidate(e && new Date(e));
            if (!t || t === "view") this.viewDate = e && new Date(e);
            this.fill();
            this.setValue();
            this._trigger("changeDate");
            var n;
            if (this.isInput) {
                n = this.element
            } else if (this.component) {
                n = this.element.find("input")
            }
            if (n) {
                n.change()
            }
            if (this.o.autoclose && (!t || t === "date")) {
                this.hide()
            }
        },
        moveMonth: function(e, n) {
            if (!e) return t;
            if (!n) return e;
            var r = new Date(e.valueOf()),
                i = r.getUTCDate(),
                s = r.getUTCMonth(),
                o = Math.abs(n),
                u, a;
            n = n > 0 ? 1 : -1;
            if (o === 1) {
                a = n === -1 ? function() {
                    return r.getUTCMonth() === s
                } : function() {
                    return r.getUTCMonth() !== u
                };
                u = s + n;
                r.setUTCMonth(u);
                if (u < 0 || u > 11) u = (u + 12) % 12
            } else {
                for (var f = 0; f < o; f++) r = this.moveMonth(r, n);
                u = r.getUTCMonth();
                r.setUTCDate(i);
                a = function() {
                    return u !== r.getUTCMonth()
                }
            }
            while (a()) {
                r.setUTCDate(--i);
                r.setUTCMonth(u)
            }
            return r
        },
        moveYear: function(e, t) {
            return this.moveMonth(e, t * 12)
        },
        dateWithinRange: function(e) {
            return e >= this.o.startDate && e <= this.o.endDate
        },
        keydown: function(e) {
            if (this.picker.is(":not(:visible)")) {
                if (e.keyCode === 27) this.show();
                return
            }
            var t = false,
                n, r, s, o = this.focusDate || this.viewDate;
            switch (e.keyCode) {
                case 27:
                    if (this.focusDate) {
                        this.focusDate = null;
                        this.viewDate = this.dates.get(-1) || this.viewDate;
                        this.fill()
                    } else this.hide();
                    e.preventDefault();
                    break;
                case 37:
                case 39:
                    if (!this.o.keyboardNavigation) break;
                    n = e.keyCode === 37 ? -1 : 1;
                    if (e.ctrlKey) {
                        r = this.moveYear(this.dates.get(-1) || i(), n);
                        s = this.moveYear(o, n);
                        this._trigger("changeYear", this.viewDate)
                    } else if (e.shiftKey) {
                        r = this.moveMonth(this.dates.get(-1) || i(), n);
                        s = this.moveMonth(o, n);
                        this._trigger("changeMonth", this.viewDate)
                    } else {
                        r = new Date(this.dates.get(-1) || i());
                        r.setUTCDate(r.getUTCDate() + n);
                        s = new Date(o);
                        s.setUTCDate(o.getUTCDate() + n)
                    }
                    if (this.dateWithinRange(r)) {
                        this.focusDate = this.viewDate = s;
                        this.setValue();
                        this.fill();
                        e.preventDefault()
                    }
                    break;
                case 38:
                case 40:
                    if (!this.o.keyboardNavigation) break;
                    n = e.keyCode === 38 ? -1 : 1;
                    if (e.ctrlKey) {
                        r = this.moveYear(this.dates.get(-1) || i(), n);
                        s = this.moveYear(o, n);
                        this._trigger("changeYear", this.viewDate)
                    } else if (e.shiftKey) {
                        r = this.moveMonth(this.dates.get(-1) || i(), n);
                        s = this.moveMonth(o, n);
                        this._trigger("changeMonth", this.viewDate)
                    } else {
                        r = new Date(this.dates.get(-1) || i());
                        r.setUTCDate(r.getUTCDate() + n * 7);
                        s = new Date(o);
                        s.setUTCDate(o.getUTCDate() + n * 7)
                    }
                    if (this.dateWithinRange(r)) {
                        this.focusDate = this.viewDate = s;
                        this.setValue();
                        this.fill();
                        e.preventDefault()
                    }
                    break;
                case 32:
                    break;
                case 13:
                    o = this.focusDate || this.dates.get(-1) || this.viewDate;
                    this._toggle_multidate(o);
                    t = true;
                    this.focusDate = null;
                    this.viewDate = this.dates.get(-1) || this.viewDate;
                    this.setValue();
                    this.fill();
                    if (this.picker.is(":visible")) {
                        e.preventDefault();
                        if (this.o.autoclose) this.hide()
                    }
                    break;
                case 9:
                    this.focusDate = null;
                    this.viewDate = this.dates.get(-1) || this.viewDate;
                    this.fill();
                    this.hide();
                    break
            }
            if (t) {
                if (this.dates.length) this._trigger("changeDate");
                else this._trigger("clearDate");
                var u;
                if (this.isInput) {
                    u = this.element
                } else if (this.component) {
                    u = this.element.find("input")
                }
                if (u) {
                    u.change()
                }
            }
        },
        showMode: function(e) {
            if (e) {
                this.viewMode = Math.max(this.o.minViewMode, Math.min(2, this.viewMode + e))
            }
            this.picker.find(">div").hide().filter(".datepicker-" + v.modes[this.viewMode].clsName).css("display", "block");
            this.updateNavArrows()
        }
    };
    var a = function(t, n) {
        this.element = e(t);
        this.inputs = e.map(n.inputs, function(e) {
            return e.jquery ? e[0] : e
        });
        delete n.inputs;
        e(this.inputs).datepicker(n).bind("changeDate", e.proxy(this.dateUpdated, this));
        this.pickers = e.map(this.inputs, function(t) {
            return e(t).data("datepicker")
        });
        this.updateDates()
    };
    a.prototype = {
        updateDates: function() {
            this.dates = e.map(this.pickers, function(e) {
                return e.getUTCDate()
            });
            this.updateRanges()
        },
        updateRanges: function() {
            var t = e.map(this.dates, function(e) {
                return e.valueOf()
            });
            e.each(this.pickers, function(e, n) {
                n.setRange(t)
            })
        },
        dateUpdated: function(t) {
            if (this.updating) return;
            this.updating = true;
            var n = e(t.target).data("datepicker"),
                r = n.getUTCDate(),
                i = e.inArray(t.target, this.inputs),
                s = this.inputs.length;
            if (i === -1) return;
            e.each(this.pickers, function(e, t) {
                if (!t.getUTCDate()) t.setUTCDate(r)
            });
            if (r < this.dates[i]) {
                while (i >= 0 && r < this.dates[i]) {
                    this.pickers[i--].setUTCDate(r)
                }
            } else if (r > this.dates[i]) {
                while (i < s && r > this.dates[i]) {
                    this.pickers[i++].setUTCDate(r)
                }
            }
            this.updateDates();
            delete this.updating
        },
        remove: function() {
            e.map(this.pickers, function(e) {
                e.remove()
            });
            delete this.element.data().datepicker
        }
    };
    var c = e.fn.datepicker;
    e.fn.datepicker = function(n) {
        var r = Array.apply(null, arguments);
        r.shift();
        var i;
        this.each(function() {
            var s = e(this),
                o = s.data("datepicker"),
                c = typeof n === "object" && n;
            if (!o) {
                var p = f(this, "date"),
                    d = e.extend({}, h, p, c),
                    v = l(d.language),
                    m = e.extend({}, h, v, p, c);
                if (s.is(".input-daterange") || m.inputs) {
                    var g = {
                        inputs: m.inputs || s.find("input").toArray()
                    };
                    s.data("datepicker", o = new a(this, e.extend(m, g)))
                } else {
                    s.data("datepicker", o = new u(this, m))
                }
            }
            if (typeof n === "string" && typeof o[n] === "function") {
                i = o[n].apply(o, r);
                if (i !== t) return false
            }
        });
        if (i !== t) return i;
        else return this
    };
    var h = e.fn.datepicker.defaults = {
        autoclose: false,
        beforeShowDay: e.noop,
        calendarWeeks: false,
        clearBtn: false,
        daysOfWeekDisabled: [],
        endDate: Infinity,
        forceParse: true,
        format: "mm/dd/yyyy",
        keyboardNavigation: true,
        language: "en",
        minViewMode: 0,
        multidate: false,
        multidateSeparator: ",",
        orientation: "auto",
        rtl: false,
        startDate: -Infinity,
        startView: 0,
        todayBtn: false,
        todayHighlight: false,
        weekStart: 0
    };
    var p = e.fn.datepicker.locale_opts = ["format", "rtl", "weekStart"];
    e.fn.datepicker.Constructor = u;
    var d = e.fn.datepicker.dates = {
        en: {
            days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
            daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
            daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"],
            months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            today: "Today",
            clear: "Clear"
        }
    };
    var v = {
        modes: [{
            clsName: "days",
            navFnc: "Month",
            navStep: 1
        }, {
            clsName: "months",
            navFnc: "FullYear",
            navStep: 1
        }, {
            clsName: "years",
            navFnc: "FullYear",
            navStep: 10
        }],
        isLeapYear: function(e) {
            return e % 4 === 0 && e % 100 !== 0 || e % 400 === 0
        },
        getDaysInMonth: function(e, t) {
            return [31, v.isLeapYear(e) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][t]
        },
        validParts: /dd?|DD?|mm?|MM?|yy(?:yy)?/g,
        nonpunctuation: /[^ -\/:-@\[\u3400-\u9fff-`{-~\t\n\r]+/g,
        parseFormat: function(e) {
            var t = e.replace(this.validParts, "\0").split("\0"),
                n = e.match(this.validParts);
            if (!t || !t.length || !n || n.length === 0) {
                throw new Error("Invalid date format.")
            }
            return {
                separators: t,
                parts: n
            }
        },
        parseDate: function(n, i, s) {
            function w() {
                var e = this.slice(0, a[c].length),
                    t = a[c].slice(0, e.length);
                return e === t
            }
            if (!n) return t;
            if (n instanceof Date) return n;
            if (typeof i === "string") i = v.parseFormat(i);
            var o = /([\-+]\d+)([dmwy])/,
                a = n.match(/([\-+]\d+)([dmwy])/g),
                f, l, c;
            if (/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/.test(n)) {
                n = new Date;
                for (c = 0; c < a.length; c++) {
                    f = o.exec(a[c]);
                    l = parseInt(f[1]);
                    switch (f[2]) {
                        case "d":
                            n.setUTCDate(n.getUTCDate() + l);
                            break;
                        case "m":
                            n = u.prototype.moveMonth.call(u.prototype, n, l);
                            break;
                        case "w":
                            n.setUTCDate(n.getUTCDate() + l * 7);
                            break;
                        case "y":
                            n = u.prototype.moveYear.call(u.prototype, n, l);
                            break
                    }
                }
                return r(n.getUTCFullYear(), n.getUTCMonth(), n.getUTCDate(), 0, 0, 0)
            }
            a = n && n.match(this.nonpunctuation) || [];
            n = new Date;
            var h = {},
                p = ["yyyy", "yy", "M", "MM", "m", "mm", "d", "dd"],
                m = {
                    yyyy: function(e, t) {
                        return e.setUTCFullYear(t)
                    },
                    yy: function(e, t) {
                        return e.setUTCFullYear(2e3 + t)
                    },
                    m: function(e, t) {
                        if (isNaN(e)) return e;
                        t -= 1;
                        while (t < 0) t += 12;
                        t %= 12;
                        e.setUTCMonth(t);
                        while (e.getUTCMonth() !== t) e.setUTCDate(e.getUTCDate() - 1);
                        return e
                    },
                    d: function(e, t) {
                        return e.setUTCDate(t)
                    }
                },
                g, y;
            m["M"] = m["MM"] = m["mm"] = m["m"];
            m["dd"] = m["d"];
            n = r(n.getFullYear(), n.getMonth(), n.getDate(), 0, 0, 0);
            var b = i.parts.slice();
            if (a.length !== b.length) {
                b = e(b).filter(function(t, n) {
                    return e.inArray(n, p) !== -1
                }).toArray()
            }
            if (a.length === b.length) {
                var E;
                for (c = 0, E = b.length; c < E; c++) {
                    g = parseInt(a[c], 10);
                    f = b[c];
                    if (isNaN(g)) {
                        switch (f) {
                            case "MM":
                                y = e(d[s].months).filter(w);
                                g = e.inArray(y[0], d[s].months) + 1;
                                break;
                            case "M":
                                y = e(d[s].monthsShort).filter(w);
                                g = e.inArray(y[0], d[s].monthsShort) + 1;
                                break
                        }
                    }
                    h[f] = g
                }
                var S, x;
                for (c = 0; c < p.length; c++) {
                    x = p[c];
                    if (x in h && !isNaN(h[x])) {
                        S = new Date(n);
                        m[x](S, h[x]);
                        if (!isNaN(S)) n = S
                    }
                }
            }
            return n
        },
        formatDate: function(t, n, r) {
            if (!t) return "";
            if (typeof n === "string") n = v.parseFormat(n);
            var i = {
                d: t.getUTCDate(),
                D: d[r].daysShort[t.getUTCDay()],
                DD: d[r].days[t.getUTCDay()],
                m: t.getUTCMonth() + 1,
                M: d[r].monthsShort[t.getUTCMonth()],
                MM: d[r].months[t.getUTCMonth()],
                yy: t.getUTCFullYear().toString().substring(2),
                yyyy: t.getUTCFullYear()
            };
            i.dd = (i.d < 10 ? "0" : "") + i.d;
            i.mm = (i.m < 10 ? "0" : "") + i.m;
            t = [];
            var s = e.extend([], n.separators);
            for (var o = 0, u = n.parts.length; o <= u; o++) {
                if (s.length) t.push(s.shift());
                t.push(i[n.parts[o]])
            }
            return t.join("")
        },
        headTemplate: "<thead>" + "<tr>" + '<th class="prev">&laquo;</th>' + '<th colspan="5" class="datepicker-switch"></th>' + '<th class="next">&raquo;</th>' + "</tr>" + "</thead>",
        contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>',
        footTemplate: "<tfoot>" + "<tr>" + '<th colspan="7" class="today"></th>' + "</tr>" + "<tr>" + '<th colspan="7" class="clear"></th>' + "</tr>" + "</tfoot>"
    };
    v.template = '<div class="datepicker">' + '<div class="datepicker-days">' + '<table class=" table-condensed">' + v.headTemplate + "<tbody></tbody>" + v.footTemplate + "</table>" + "</div>" + '<div class="datepicker-months">' + '<table class="table-condensed">' + v.headTemplate + v.contTemplate + v.footTemplate + "</table>" + "</div>" + '<div class="datepicker-years">' + '<table class="table-condensed">' + v.headTemplate + v.contTemplate + v.footTemplate + "</table>" + "</div>" + "</div>";
    e.fn.datepicker.DPGlobal = v;
    e.fn.datepicker.noConflict = function() {
        e.fn.datepicker = c;
        return this
    };
    e(document).on("focus.datepicker.data-api click.datepicker.data-api", '[data-provide="datepicker"]', function(t) {
        var n = e(this);
        if (n.data("datepicker")) return;
        t.preventDefault();
        n.datepicker("show")
    });
    e(function() {
        e('[data-provide="datepicker-inline"]').datepicker()
    })
})(window.jQuery);
"use strict";
(function(root, factory) {
    if (typeof define === "function" && define.amd) {
        define(factory)
    } else if (typeof exports === "object") {
        module.exports = factory()
    } else {
        root.uaMatch = factory()
    }
})(this, function() {
    var uaMatch = function(ua) {
        ua = ua || window.navigator.userAgent;
        ua = ua.toLowerCase();
        var match = /(edge)\/([\w.]+)/.exec(ua) || /(opr)[\/]([\w.]+)/.exec(ua) || /(chrome)[ \/]([\w.]+)/.exec(ua) || /(version)(applewebkit)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(ua) || /(webkit)[ \/]([\w.]+).*(version)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(ua) || /(webkit)[ \/]([\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) || /(msie) ([\w.]+)/.exec(ua) || ua.indexOf("trident") >= 0 && /(rv)(?::| )([\w.]+)/.exec(ua) || ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) || [];
        var platformMatch = /(ipad)/.exec(ua) || /(ipod)/.exec(ua) || /(iphone)/.exec(ua) || /(kindle)/.exec(ua) || /(silk)/.exec(ua) || /(android)/.exec(ua) || /(windows phone)/.exec(ua) || /(win)/.exec(ua) || /(mac)/.exec(ua) || /(linux)/.exec(ua) || /(cros)/.exec(ua) || /(playbook)/.exec(ua) || /(bb)/.exec(ua) || /(blackberry)/.exec(ua) || [];
        var isMobile = /(ipad)|(ipod)|(iphone)|(android)/.test(platformMatch[0] || "");
        return {
            name: match[5] || match[3] || match[1] || "",
            version: match[2] || match[4] || "0",
            versionNumber: match[4] || match[2] || "0",
            platform: platformMatch[0] || "",
            isMobile: isMobile
        }
    };
    return uaMatch
});
(function(factory) {
    if (typeof define === "function" && define.amd) {
        define(["jquery"], factory)
    } else if (typeof exports === "object") {
        factory(require("jquery"))
    } else {
        factory(jQuery)
    }
})(function($) {
    var pluses = /\+/g;

    function encode(s) {
        return config.raw ? s : encodeURIComponent(s)
    }

    function decode(s) {
        return config.raw ? s : decodeURIComponent(s)
    }

    function stringifyCookieValue(value) {
        return encode(config.json ? JSON.stringify(value) : String(value))
    }

    function parseCookieValue(s) {
        if (s.indexOf('"') === 0) {
            s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, "\\")
        }
        try {
            s = decodeURIComponent(s.replace(pluses, " "));
            return config.json ? JSON.parse(s) : s
        } catch (e) {}
    }

    function read(s, converter) {
        var value = config.raw ? s : parseCookieValue(s);
        return $.isFunction(converter) ? converter(value) : value
    }
    var config = $.cookie = function(key, value, options) {
        if (arguments.length > 1 && !$.isFunction(value)) {
            options = $.extend({}, config.defaults, options);
            if (typeof options.expires === "number") {
                var days = options.expires,
                    t = options.expires = new Date;
                t.setTime(+t + days * 864e5)
            }
            return document.cookie = [encode(key), "=", stringifyCookieValue(value), options.expires ? "; expires=" + options.expires.toUTCString() : "", options.path ? "; path=" + options.path : "", options.domain ? "; domain=" + options.domain : "", options.secure ? "; secure" : ""].join("")
        }
        var result = key ? undefined : {};
        var cookies = document.cookie ? document.cookie.split("; ") : [];
        for (var i = 0, l = cookies.length; i < l; i++) {
            var parts = cookies[i].split("=");
            var name = decode(parts.shift());
            var cookie = parts.join("=");
            if (key && key === name) {
                result = read(cookie, value);
                break
            }
            if (!key && (cookie = read(cookie)) !== undefined) {
                result[name] = cookie
            }
        }
        return result
    };
    config.defaults = {};
    $.removeCookie = function(key, options) {
        if ($.cookie(key) === undefined) {
            return false
        }
        $.cookie(key, "", $.extend({}, options, {
            expires: -1
        }));
        return !$.cookie(key)
    }
});
! function() {
    function a(a) {
        this._n = a
    }

    function b(a, b, c) {
        var d, e = Math.pow(10, b);
        if (d = (Math.round(a * e) / e).toFixed(b), c) {
            var f = new RegExp("0{1," + c + "}$");
            d = d.replace(f, "")
        }
        return d
    }

    function c(a, b) {
        var c;
        return c = b.indexOf("$") > -1 ? e(a, b) : b.indexOf("%") > -1 ? f(a, b) : b.indexOf(":") > -1 ? g(a, b) : i(a, b)
    }

    function d(a, b) {
        if (b.indexOf(":") > -1) a._n = h(b);
        else if (b === o) a._n = 0;
        else {
            var c = b;
            "." !== m[n].delimiters.decimal && (b = b.replace(/\./g, "").replace(m[n].delimiters.decimal, "."));
            for (var d = new RegExp("[^a-zA-Z]" + m[n].abbreviations.thousand + "(?:\\)|(\\" + m[n].currency.symbol + ")?(?:\\))?)?$"), e = new RegExp("[^a-zA-Z]" + m[n].abbreviations.million + "(?:\\)|(\\" + m[n].currency.symbol + ")?(?:\\))?)?$"), f = new RegExp("[^a-zA-Z]" + m[n].abbreviations.billion + "(?:\\)|(\\" + m[n].currency.symbol + ")?(?:\\))?)?$"), g = new RegExp("[^a-zA-Z]" + m[n].abbreviations.trillion + "(?:\\)|(\\" + m[n].currency.symbol + ")?(?:\\))?)?$"), i = ["KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"], j = !1, k = 0; k <= i.length && !(j = b.indexOf(i[k]) > -1 ? Math.pow(1024, k + 1) : !1); k++);
            a._n = (j ? j : 1) * (c.match(d) ? Math.pow(10, 3) : 1) * (c.match(e) ? Math.pow(10, 6) : 1) * (c.match(f) ? Math.pow(10, 9) : 1) * (c.match(g) ? Math.pow(10, 12) : 1) * (b.indexOf("%") > -1 ? .01 : 1) * ((b.split("-").length + Math.min(b.split("(").length - 1, b.split(")").length - 1)) % 2 ? 1 : -1) * Number(b.replace(/[^0-9\.]+/g, "")), a._n = j ? Math.ceil(a._n) : a._n
        }
        return a._n
    }

    function e(a, b) {
        var d = b.indexOf("$") <= 1 ? !0 : !1,
            e = "";
        b.indexOf(" $") > -1 ? (e = " ", b = b.replace(" $", "")) : b.indexOf("$ ") > -1 ? (e = " ", b = b.replace("$ ", "")) : b = b.replace("$", "");
        var f = c(a, b);
        return d ? f.indexOf("(") > -1 || f.indexOf("-") > -1 ? (f = f.split(""), f.splice(1, 0, m[n].currency.symbol + e), f = f.join("")) : f = m[n].currency.symbol + e + f : f.indexOf(")") > -1 ? (f = f.split(""), f.splice(-1, 0, e + m[n].currency.symbol), f = f.join("")) : f = f + e + m[n].currency.symbol, f
    }

    function f(a, b) {
        var d = "";
        b.indexOf(" %") > -1 ? (d = " ", b = b.replace(" %", "")) : b = b.replace("%", ""), a._n = 100 * a._n;
        var e = c(a, b);
        return e.indexOf(")") > -1 ? (e = e.split(""), e.splice(-1, 0, d + "%"), e = e.join("")) : e = e + d + "%", e
    }

    function g(a) {
        var b = Math.floor(a._n / 60 / 60),
            c = Math.floor((a._n - 60 * 60 * b) / 60),
            d = Math.round(a._n - 60 * 60 * b - 60 * c);
        return b + ":" + (10 > c ? "0" + c : c) + ":" + (10 > d ? "0" + d : d)
    }

    function h(a) {
        var b = a.split(":"),
            c = 0;
        return 3 === b.length ? (c += 60 * 60 * Number(b[0]), c += 60 * Number(b[1]), c += Number(b[2])) : 2 === b.length && (c += 60 * Number(b[0]), c += Number(b[1])), Number(c)
    }

    function i(a, c) {
        var d = !1,
            e = !1,
            f = "",
            g = "",
            h = "",
            i = Math.abs(a._n);
        if (0 === a._n && null !== o) return o;
        if (c.indexOf("(") > -1 && (d = !0, c = c.slice(1, -1)), c.indexOf("a") > -1 && (c.indexOf(" a") > -1 ? (f = " ", c = c.replace(" a", "")) : c = c.replace("a", ""), i >= Math.pow(10, 12) ? (f += m[n].abbreviations.trillion, a._n = a._n / Math.pow(10, 12)) : i < Math.pow(10, 12) && i >= Math.pow(10, 9) ? (f += m[n].abbreviations.billion, a._n = a._n / Math.pow(10, 9)) : i < Math.pow(10, 9) && i >= Math.pow(10, 6) ? (f += m[n].abbreviations.million, a._n = a._n / Math.pow(10, 6)) : i < Math.pow(10, 6) && i >= Math.pow(10, 3) && (f += m[n].abbreviations.thousand, a._n = a._n / Math.pow(10, 3))), c.indexOf("b") > -1) {
            c.indexOf(" b") > -1 ? (g = " ", c = c.replace(" b", "")) : c = c.replace("b", "");
            for (var j, k, l = ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"], p = 0; p <= l.length; p++)
                if (j = Math.pow(1024, p), k = Math.pow(1024, p + 1), a._n >= j && a._n < k) {
                    g += l[p], j > 0 && (a._n = a._n / j);
                    break
                }
        }
        c.indexOf("o") > -1 && (c.indexOf(" o") > -1 ? (h = " ", c = c.replace(" o", "")) : c = c.replace("o", ""), h += m[n].ordinal(a._n)), c.indexOf("[.]") > -1 && (e = !0, c = c.replace("[.]", "."));
        var q = a._n.toString().split(".")[0],
            r = c.split(".")[1],
            s = c.indexOf(","),
            t = "",
            u = !1;
        return r ? (r.indexOf("[") > -1 ? (r = r.replace("]", ""), r = r.split("["), t = b(a._n, r[0].length + r[1].length, r[1].length)) : t = b(a._n, r.length), q = t.split(".")[0], t = t.split(".")[1].length ? m[n].delimiters.decimal + t.split(".")[1] : "", e && 0 === Number(t.slice(1)) && (t = "")) : q = b(a._n, null), q.indexOf("-") > -1 && (q = q.slice(1), u = !0), s > -1 && (q = q.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1" + m[n].delimiters.thousands)), 0 === c.indexOf(".") && (q = ""), (d && u ? "(" : "") + (!d && u ? "-" : "") + q + t + (h ? h : "") + (f ? f : "") + (g ? g : "") + (d && u ? ")" : "")
    }

    function j(a, b) {
        m[a] = b
    }
    var k, l = "1.4.9",
        m = {},
        n = "en",
        o = null,
        p = "undefined" != typeof module && module.exports;
    k = function(b) {
        return k.isNumeral(b) ? b = b.value() : 0 == b || "undefined" == typeof b ? b = 0 : Number(b) || (b = k.fn.unformat(b)), new a(Number(b))
    }, k.version = l, k.isNumeral = function(b) {
        return b instanceof a
    }, k.language = function(a, b) {
        if (!a) return n;
        if (a && !b) {
            if (!m[a]) throw new Error("Unknown language : " + a);
            n = a
        }
        return (b || !m[a]) && j(a, b), k
    }, k.language("en", {
        delimiters: {
            thousands: ",",
            decimal: "."
        },
        abbreviations: {
            thousand: "k",
            million: "m",
            billion: "b",
            trillion: "t"
        },
        ordinal: function(a) {
            var b = a % 10;
            return 1 === ~~(a % 100 / 10) ? "th" : 1 === b ? "st" : 2 === b ? "nd" : 3 === b ? "rd" : "th"
        },
        currency: {
            symbol: "$"
        }
    }), k.zeroFormat = function(a) {
        o = "string" == typeof a ? a : null
    }, k.fn = a.prototype = {
        clone: function() {
            return k(this)
        },
        format: function(a) {
            return c(this, a ? a : k.defaultFormat)
        },
        unformat: function(a) {
            return d(this, a ? a : k.defaultFormat)
        },
        value: function() {
            return this._n
        },
        valueOf: function() {
            return this._n
        },
        set: function(a) {
            return this._n = Number(a), this
        },
        add: function(a) {
            return this._n = this._n + Number(a), this
        },
        subtract: function(a) {
            return this._n = this._n - Number(a), this
        },
        multiply: function(a) {
            return this._n = this._n * Number(a), this
        },
        divide: function(a) {
            return this._n = this._n / Number(a), this
        },
        difference: function(a) {
            var b = this._n - Number(a);
            return 0 > b && (b = -b), b
        }
    }, p && (module.exports = k), "undefined" == typeof ender && (this.numeral = k), "function" == typeof define && define.amd && define([], function() {
        return k
    })
}.call(this);
(function() {
    var language = {
        delimiters: {
            thousands: ",",
            decimal: "."
        },
        abbreviations: {
            thousand: "k",
            million: "m",
            billion: "b",
            trillion: "t"
        },
        ordinal: function(number) {
            var b = number % 10;
            return ~~(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th"
        },
        currency: {
            symbol: "£"
        }
    };
    if (typeof module !== "undefined" && module.exports) {
        module.exports = language
    }
    if (typeof window !== "undefined" && this.numeral && this.numeral.language) {
        this.numeral.language("en-gb", language)
    }
})();
! function(a) {
    a.extend(a.fn, {
        validate: function(b) {
            if (!this.length) return void(b && b.debug && window.console && console.warn("Nothing selected, can't validate, returning nothing."));
            var c = a.data(this[0], "validator");
            return c ? c : (this.attr("novalidate", "novalidate"), c = new a.validator(b, this[0]), a.data(this[0], "validator", c), c.settings.onsubmit && (this.validateDelegate(":submit", "click", function(b) {
                c.settings.submitHandler && (c.submitButton = b.target), a(b.target).hasClass("cancel") && (c.cancelSubmit = !0), void 0 !== a(b.target).attr("formnovalidate") && (c.cancelSubmit = !0)
            }), this.submit(function(b) {
                function d() {
                    var d;
                    return c.settings.submitHandler ? (c.submitButton && (d = a("<input type='hidden'/>").attr("name", c.submitButton.name).val(a(c.submitButton).val()).appendTo(c.currentForm)), c.settings.submitHandler.call(c, c.currentForm, b), c.submitButton && d.remove(), !1) : !0
                }
                return c.settings.debug && b.preventDefault(), c.cancelSubmit ? (c.cancelSubmit = !1, d()) : c.form() ? c.pendingRequest ? (c.formSubmitted = !0, !1) : d() : (c.focusInvalid(), !1)
            })), c)
        },
        valid: function() {
            var b, c;
            return a(this[0]).is("form") ? b = this.validate().form() : (b = !0, c = a(this[0].form).validate(), this.each(function() {
                b = c.element(this) && b
            })), b
        },
        removeAttrs: function(b) {
            var c = {},
                d = this;
            return a.each(b.split(/\s/), function(a, b) {
                c[b] = d.attr(b), d.removeAttr(b)
            }), c
        },
        rules: function(b, c) {
            var d, e, f, g, h, i, j = this[0];
            if (b) switch (d = a.data(j.form, "validator").settings, e = d.rules, f = a.validator.staticRules(j), b) {
                case "add":
                    a.extend(f, a.validator.normalizeRule(c)), delete f.messages, e[j.name] = f, c.messages && (d.messages[j.name] = a.extend(d.messages[j.name], c.messages));
                    break;
                case "remove":
                    return c ? (i = {}, a.each(c.split(/\s/), function(b, c) {
                        i[c] = f[c], delete f[c], "required" === c && a(j).removeAttr("aria-required")
                    }), i) : (delete e[j.name], f)
            }
            return g = a.validator.normalizeRules(a.extend({}, a.validator.classRules(j), a.validator.attributeRules(j), a.validator.dataRules(j), a.validator.staticRules(j)), j), g.required && (h = g.required, delete g.required, g = a.extend({
                required: h
            }, g), a(j).attr("aria-required", "true")), g.remote && (h = g.remote, delete g.remote, g = a.extend(g, {
                remote: h
            })), g
        }
    }), a.extend(a.expr[":"], {
        blank: function(b) {
            return !a.trim("" + a(b).val())
        },
        filled: function(b) {
            return !!a.trim("" + a(b).val())
        },
        unchecked: function(b) {
            return !a(b).prop("checked")
        }
    }), a.validator = function(b, c) {
        this.settings = a.extend(!0, {}, a.validator.defaults, b), this.currentForm = c, this.init()
    }, a.validator.format = function(b, c) {
        return 1 === arguments.length ? function() {
            var c = a.makeArray(arguments);
            return c.unshift(b), a.validator.format.apply(this, c)
        } : (arguments.length > 2 && c.constructor !== Array && (c = a.makeArray(arguments).slice(1)), c.constructor !== Array && (c = [c]), a.each(c, function(a, c) {
            b = b.replace(new RegExp("\\{" + a + "\\}", "g"), function() {
                return c
            })
        }), b)
    }, a.extend(a.validator, {
        defaults: {
            messages: {},
            groups: {},
            rules: {},
            errorClass: "error",
            validClass: "valid",
            errorElement: "label",
            focusInvalid: !0,
            errorContainer: a([]),
            errorLabelContainer: a([]),
            onsubmit: !0,
            ignore: ":hidden",
            ignoreTitle: !1,
            onfocusin: function(a) {
                this.lastActive = a, this.settings.focusCleanup && !this.blockFocusCleanup && (this.settings.unhighlight && this.settings.unhighlight.call(this, a, this.settings.errorClass, this.settings.validClass), this.addWrapper(this.errorsFor(a)).hide())
            },
            onfocusout: function(a) {
                this.checkable(a) || !(a.name in this.submitted) && this.optional(a) || this.element(a)
            },
            onkeyup: function(a, b) {
                (9 !== b.which || "" !== this.elementValue(a)) && (a.name in this.submitted || a === this.lastElement) && this.element(a)
            },
            onclick: function(a) {
                a.name in this.submitted ? this.element(a) : a.parentNode.name in this.submitted && this.element(a.parentNode)
            },
            highlight: function(b, c, d) {
                "radio" === b.type ? this.findByName(b.name).addClass(c).removeClass(d) : a(b).addClass(c).removeClass(d)
            },
            unhighlight: function(b, c, d) {
                "radio" === b.type ? this.findByName(b.name).removeClass(c).addClass(d) : a(b).removeClass(c).addClass(d)
            }
        },
        setDefaults: function(b) {
            a.extend(a.validator.defaults, b)
        },
        messages: {
            required: "This field is required.",
            remote: "Please fix this field.",
            email: "Please enter a valid email address.",
            url: "Please enter a valid URL.",
            date: "Please enter a valid date.",
            dateISO: "Please enter a valid date (ISO).",
            number: "Please enter a valid number.",
            digits: "Please enter only digits.",
            creditcard: "Please enter a valid credit card number.",
            equalTo: "Please enter the same value again.",
            maxlength: a.validator.format("Please enter no more than {0} characters."),
            minlength: a.validator.format("Please enter at least {0} characters."),
            rangelength: a.validator.format("Please enter a value between {0} and {1} characters long."),
            range: a.validator.format("Please enter a value between {0} and {1}."),
            max: a.validator.format("Please enter a value less than or equal to {0}."),
            min: a.validator.format("Please enter a value greater than or equal to {0}.")
        },
        autoCreateRanges: !1,
        prototype: {
            init: function() {
                function b(b) {
                    var c = a.data(this[0].form, "validator"),
                        d = "on" + b.type.replace(/^validate/, ""),
                        e = c.settings;
                    e[d] && !this.is(e.ignore) && e[d].call(c, this[0], b)
                }
                this.labelContainer = a(this.settings.errorLabelContainer), this.errorContext = this.labelContainer.length && this.labelContainer || a(this.currentForm), this.containers = a(this.settings.errorContainer).add(this.settings.errorLabelContainer), this.submitted = {}, this.valueCache = {}, this.pendingRequest = 0, this.pending = {}, this.invalid = {}, this.reset();
                var c, d = this.groups = {};
                a.each(this.settings.groups, function(b, c) {
                    "string" == typeof c && (c = c.split(/\s/)), a.each(c, function(a, c) {
                        d[c] = b
                    })
                }), c = this.settings.rules, a.each(c, function(b, d) {
                    c[b] = a.validator.normalizeRule(d)
                }), a(this.currentForm).validateDelegate(":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'] ,[type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'] ", "focusin focusout keyup", b).validateDelegate("[type='radio'], [type='checkbox'], select, option", "click", b), this.settings.invalidHandler && a(this.currentForm).bind("invalid-form.validate", this.settings.invalidHandler), a(this.currentForm).find("[required], [data-rule-required], .required").attr("aria-required", "true")
            },
            form: function() {
                return this.checkForm(), a.extend(this.submitted, this.errorMap), this.invalid = a.extend({}, this.errorMap), this.valid() || a(this.currentForm).triggerHandler("invalid-form", [this]), this.showErrors(), this.valid()
            },
            checkForm: function() {
                this.prepareForm();
                for (var a = 0, b = this.currentElements = this.elements(); b[a]; a++) this.check(b[a]);
                return this.valid()
            },
            element: function(b) {
                var c = this.clean(b),
                    d = this.validationTargetFor(c),
                    e = !0;
                return this.lastElement = d, void 0 === d ? delete this.invalid[c.name] : (this.prepareElement(d), this.currentElements = a(d), e = this.check(d) !== !1, e ? delete this.invalid[d.name] : this.invalid[d.name] = !0), a(b).attr("aria-invalid", !e), this.numberOfInvalids() || (this.toHide = this.toHide.add(this.containers)), this.showErrors(), e
            },
            showErrors: function(b) {
                if (b) {
                    a.extend(this.errorMap, b), this.errorList = [];
                    for (var c in b) this.errorList.push({
                        message: b[c],
                        element: this.findByName(c)[0]
                    });
                    this.successList = a.grep(this.successList, function(a) {
                        return !(a.name in b)
                    })
                }
                this.settings.showErrors ? this.settings.showErrors.call(this, this.errorMap, this.errorList) : this.defaultShowErrors()
            },
            resetForm: function() {
                a.fn.resetForm && a(this.currentForm).resetForm(), this.submitted = {}, this.lastElement = null, this.prepareForm(), this.hideErrors(), this.elements().removeClass(this.settings.errorClass).removeData("previousValue").removeAttr("aria-invalid")
            },
            numberOfInvalids: function() {
                return this.objectLength(this.invalid)
            },
            objectLength: function(a) {
                var b, c = 0;
                for (b in a) c++;
                return c
            },
            hideErrors: function() {
                this.addWrapper(this.toHide).hide()
            },
            valid: function() {
                return 0 === this.size()
            },
            size: function() {
                return this.errorList.length
            },
            focusInvalid: function() {
                if (this.settings.focusInvalid) try {
                    a(this.findLastActive() || this.errorList.length && this.errorList[0].element || []).filter(":visible").focus().trigger("focusin")
                } catch (b) {}
            },
            findLastActive: function() {
                var b = this.lastActive;
                return b && 1 === a.grep(this.errorList, function(a) {
                    return a.element.name === b.name
                }).length && b
            },
            elements: function() {
                var b = this,
                    c = {};
                return a(this.currentForm).find("input, select, textarea").not(":submit, :reset, :image, [disabled]").not(this.settings.ignore).filter(function() {
                    return !this.name && b.settings.debug && window.console && console.error("%o has no name assigned", this), this.name in c || !b.objectLength(a(this).rules()) ? !1 : (c[this.name] = !0, !0)
                })
            },
            clean: function(b) {
                return a(b)[0]
            },
            errors: function() {
                var b = this.settings.errorClass.split(" ").join(".");
                return a(this.settings.errorElement + "." + b, this.errorContext)
            },
            reset: function() {
                this.successList = [], this.errorList = [], this.errorMap = {}, this.toShow = a([]), this.toHide = a([]), this.currentElements = a([])
            },
            prepareForm: function() {
                this.reset(), this.toHide = this.errors().add(this.containers)
            },
            prepareElement: function(a) {
                this.reset(), this.toHide = this.errorsFor(a)
            },
            elementValue: function(b) {
                var c, d = a(b),
                    e = d.attr("type");
                return "radio" === e || "checkbox" === e ? a("input[name='" + d.attr("name") + "']:checked").val() : (c = d.val(), "string" == typeof c ? c.replace(/\r/g, "") : c)
            },
            check: function(b) {
                b = this.validationTargetFor(this.clean(b));
                var c, d, e, f = a(b).rules(),
                    g = a.map(f, function(a, b) {
                        return b
                    }).length,
                    h = !1,
                    i = this.elementValue(b);
                for (d in f) {
                    e = {
                        method: d,
                        parameters: f[d]
                    };
                    try {
                        if (c = a.validator.methods[d].call(this, i, b, e.parameters), "dependency-mismatch" === c && 1 === g) {
                            h = !0;
                            continue
                        }
                        if (h = !1, "pending" === c) return void(this.toHide = this.toHide.not(this.errorsFor(b)));
                        if (!c) return this.formatAndAdd(b, e), !1
                    } catch (j) {
                        throw this.settings.debug && window.console && console.log("Exception occurred when checking element " + b.id + ", check the '" + e.method + "' method.", j), j
                    }
                }
                if (!h) return this.objectLength(f) && this.successList.push(b), !0
            },
            customDataMessage: function(b, c) {
                return a(b).data("msg" + c[0].toUpperCase() + c.substring(1).toLowerCase()) || a(b).data("msg")
            },
            customMessage: function(a, b) {
                var c = this.settings.messages[a];
                return c && (c.constructor === String ? c : c[b])
            },
            findDefined: function() {
                for (var a = 0; a < arguments.length; a++)
                    if (void 0 !== arguments[a]) return arguments[a];
                return void 0
            },
            defaultMessage: function(b, c) {
                return this.findDefined(this.customMessage(b.name, c), this.customDataMessage(b, c), !this.settings.ignoreTitle && b.title || void 0, a.validator.messages[c], "<strong>Warning: No message defined for " + b.name + "</strong>")
            },
            formatAndAdd: function(b, c) {
                var d = this.defaultMessage(b, c.method),
                    e = /\$?\{(\d+)\}/g;
                "function" == typeof d ? d = d.call(this, c.parameters, b) : e.test(d) && (d = a.validator.format(d.replace(e, "{$1}"), c.parameters)), this.errorList.push({
                    message: d,
                    element: b,
                    method: c.method
                }), this.errorMap[b.name] = d, this.submitted[b.name] = d
            },
            addWrapper: function(a) {
                return this.settings.wrapper && (a = a.add(a.parent(this.settings.wrapper))), a
            },
            defaultShowErrors: function() {
                var a, b, c;
                for (a = 0; this.errorList[a]; a++) c = this.errorList[a], this.settings.highlight && this.settings.highlight.call(this, c.element, this.settings.errorClass, this.settings.validClass), this.showLabel(c.element, c.message);
                if (this.errorList.length && (this.toShow = this.toShow.add(this.containers)), this.settings.success)
                    for (a = 0; this.successList[a]; a++) this.showLabel(this.successList[a]);
                if (this.settings.unhighlight)
                    for (a = 0, b = this.validElements(); b[a]; a++) this.settings.unhighlight.call(this, b[a], this.settings.errorClass, this.settings.validClass);
                this.toHide = this.toHide.not(this.toShow), this.hideErrors(), this.addWrapper(this.toShow).show()
            },
            validElements: function() {
                return this.currentElements.not(this.invalidElements())
            },
            invalidElements: function() {
                return a(this.errorList).map(function() {
                    return this.element
                })
            },
            showLabel: function(b, c) {
                var d = this.errorsFor(b);
                d.length ? (d.removeClass(this.settings.validClass).addClass(this.settings.errorClass), d.html(c)) : (d = a("<" + this.settings.errorElement + ">").attr("for", this.idOrName(b)).addClass(this.settings.errorClass).html(c || ""), this.settings.wrapper && (d = d.hide().show().wrap("<" + this.settings.wrapper + "/>").parent()), this.labelContainer.append(d).length || (this.settings.errorPlacement ? this.settings.errorPlacement(d, a(b)) : d.insertAfter(b))), !c && this.settings.success && (d.text(""), "string" == typeof this.settings.success ? d.addClass(this.settings.success) : this.settings.success(d, b)), this.toShow = this.toShow.add(d)
            },
            errorsFor: function(b) {
                var c = this.idOrName(b);
                return this.errors().filter(function() {
                    return a(this).attr("for") === c
                })
            },
            idOrName: function(a) {
                return this.groups[a.name] || (this.checkable(a) ? a.name : a.id || a.name)
            },
            validationTargetFor: function(a) {
                return this.checkable(a) && (a = this.findByName(a.name).not(this.settings.ignore)[0]), a
            },
            checkable: function(a) {
                return /radio|checkbox/i.test(a.type)
            },
            findByName: function(b) {
                return a(this.currentForm).find("[name='" + b + "']")
            },
            getLength: function(b, c) {
                switch (c.nodeName.toLowerCase()) {
                    case "select":
                        return a("option:selected", c).length;
                    case "input":
                        if (this.checkable(c)) return this.findByName(c.name).filter(":checked").length
                }
                return b.length
            },
            depend: function(a, b) {
                return this.dependTypes[typeof a] ? this.dependTypes[typeof a](a, b) : !0
            },
            dependTypes: {
                boolean: function(a) {
                    return a
                },
                string: function(b, c) {
                    return !!a(b, c.form).length
                },
                function: function(a, b) {
                    return a(b)
                }
            },
            optional: function(b) {
                var c = this.elementValue(b);
                return !a.validator.methods.required.call(this, c, b) && "dependency-mismatch"
            },
            startRequest: function(a) {
                this.pending[a.name] || (this.pendingRequest++, this.pending[a.name] = !0)
            },
            stopRequest: function(b, c) {
                this.pendingRequest--, this.pendingRequest < 0 && (this.pendingRequest = 0), delete this.pending[b.name], c && 0 === this.pendingRequest && this.formSubmitted && this.form() ? (a(this.currentForm).submit(), this.formSubmitted = !1) : !c && 0 === this.pendingRequest && this.formSubmitted && (a(this.currentForm).triggerHandler("invalid-form", [this]), this.formSubmitted = !1)
            },
            previousValue: function(b) {
                return a.data(b, "previousValue") || a.data(b, "previousValue", {
                    old: null,
                    valid: !0,
                    message: this.defaultMessage(b, "remote")
                })
            }
        },
        classRuleSettings: {
            required: {
                required: !0
            },
            email: {
                email: !0
            },
            url: {
                url: !0
            },
            date: {
                date: !0
            },
            dateISO: {
                dateISO: !0
            },
            number: {
                number: !0
            },
            digits: {
                digits: !0
            },
            creditcard: {
                creditcard: !0
            }
        },
        addClassRules: function(b, c) {
            b.constructor === String ? this.classRuleSettings[b] = c : a.extend(this.classRuleSettings, b)
        },
        classRules: function(b) {
            var c = {},
                d = a(b).attr("class");
            return d && a.each(d.split(" "), function() {
                this in a.validator.classRuleSettings && a.extend(c, a.validator.classRuleSettings[this])
            }), c
        },
        attributeRules: function(b) {
            var c, d, e = {},
                f = a(b),
                g = b.getAttribute("type");
            for (c in a.validator.methods) "required" === c ? (d = b.getAttribute(c), "" === d && (d = !0), d = !!d) : d = f.attr(c), /min|max/.test(c) && (null === g || /number|range|text/.test(g)) && (d = Number(d)), d || 0 === d ? e[c] = d : g === c && "range" !== g && (e[c] = !0);
            return e.maxlength && /-1|2147483647|524288/.test(e.maxlength) && delete e.maxlength, e
        },
        dataRules: function(b) {
            var c, d, e = {},
                f = a(b);
            for (c in a.validator.methods) d = f.data("rule" + c[0].toUpperCase() + c.substring(1).toLowerCase()), void 0 !== d && (e[c] = d);
            return e
        },
        staticRules: function(b) {
            var c = {},
                d = a.data(b.form, "validator");
            return d.settings.rules && (c = a.validator.normalizeRule(d.settings.rules[b.name]) || {}), c
        },
        normalizeRules: function(b, c) {
            return a.each(b, function(d, e) {
                if (e === !1) return void delete b[d];
                if (e.param || e.depends) {
                    var f = !0;
                    switch (typeof e.depends) {
                        case "string":
                            f = !!a(e.depends, c.form).length;
                            break;
                        case "function":
                            f = e.depends.call(c, c)
                    }
                    f ? b[d] = void 0 !== e.param ? e.param : !0 : delete b[d]
                }
            }), a.each(b, function(d, e) {
                b[d] = a.isFunction(e) ? e(c) : e
            }), a.each(["minlength", "maxlength"], function() {
                b[this] && (b[this] = Number(b[this]))
            }), a.each(["rangelength", "range"], function() {
                var c;
                b[this] && (a.isArray(b[this]) ? b[this] = [Number(b[this][0]), Number(b[this][1])] : "string" == typeof b[this] && (c = b[this].split(/[\s,]+/), b[this] = [Number(c[0]), Number(c[1])]))
            }), a.validator.autoCreateRanges && (b.min && b.max && (b.range = [b.min, b.max], delete b.min, delete b.max), b.minlength && b.maxlength && (b.rangelength = [b.minlength, b.maxlength], delete b.minlength, delete b.maxlength)), b
        },
        normalizeRule: function(b) {
            if ("string" == typeof b) {
                var c = {};
                a.each(b.split(/\s/), function() {
                    c[this] = !0
                }), b = c
            }
            return b
        },
        addMethod: function(b, c, d) {
            a.validator.methods[b] = c, a.validator.messages[b] = void 0 !== d ? d : a.validator.messages[b], c.length < 3 && a.validator.addClassRules(b, a.validator.normalizeRule(b))
        },
        methods: {
            required: function(b, c, d) {
                if (!this.depend(d, c)) return "dependency-mismatch";
                if ("select" === c.nodeName.toLowerCase()) {
                    var e = a(c).val();
                    return e && e.length > 0
                }
                return this.checkable(c) ? this.getLength(b, c) > 0 : a.trim(b).length > 0
            },
            email: function(a, b) {
                return this.optional(b) || /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(a)
            },
            url: function(a, b) {
                return this.optional(b) || /^(https?|s?ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(a)
            },
            date: function(a, b) {
                return this.optional(b) || !/Invalid|NaN/.test(new Date(a).toString())
            },
            dateISO: function(a, b) {
                return this.optional(b) || /^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/.test(a)
            },
            number: function(a, b) {
                return this.optional(b) || /^-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(a)
            },
            digits: function(a, b) {
                return this.optional(b) || /^\d+$/.test(a)
            },
            creditcard: function(a, b) {
                if (this.optional(b)) return "dependency-mismatch";
                if (/[^0-9 \-]+/.test(a)) return !1;
                var c, d, e = 0,
                    f = 0,
                    g = !1;
                if (a = a.replace(/\D/g, ""), a.length < 13 || a.length > 19) return !1;
                for (c = a.length - 1; c >= 0; c--) d = a.charAt(c), f = parseInt(d, 10), g && (f *= 2) > 9 && (f -= 9), e += f, g = !g;
                return e % 10 === 0
            },
            minlength: function(b, c, d) {
                var e = a.isArray(b) ? b.length : this.getLength(a.trim(b), c);
                return this.optional(c) || e >= d
            },
            maxlength: function(b, c, d) {
                var e = a.isArray(b) ? b.length : this.getLength(a.trim(b), c);
                return this.optional(c) || d >= e
            },
            rangelength: function(b, c, d) {
                var e = a.isArray(b) ? b.length : this.getLength(a.trim(b), c);
                return this.optional(c) || e >= d[0] && e <= d[1]
            },
            min: function(a, b, c) {
                return this.optional(b) || a >= c
            },
            max: function(a, b, c) {
                return this.optional(b) || c >= a
            },
            range: function(a, b, c) {
                return this.optional(b) || a >= c[0] && a <= c[1]
            },
            equalTo: function(b, c, d) {
                var e = a(d);
                return this.settings.onfocusout && e.unbind(".validate-equalTo").bind("blur.validate-equalTo", function() {
                    a(c).valid()
                }), b === e.val()
            },
            remote: function(b, c, d) {
                if (this.optional(c)) return "dependency-mismatch";
                var e, f, g = this.previousValue(c);
                return this.settings.messages[c.name] || (this.settings.messages[c.name] = {}), g.originalMessage = this.settings.messages[c.name].remote, this.settings.messages[c.name].remote = g.message, d = "string" == typeof d && {
                    url: d
                } || d, g.old === b ? g.valid : (g.old = b, e = this, this.startRequest(c), f = {}, f[c.name] = b, a.ajax(a.extend(!0, {
                    url: d,
                    mode: "abort",
                    port: "validate" + c.name,
                    dataType: "json",
                    data: f,
                    context: e.currentForm,
                    success: function(d) {
                        var f, h, i, j = d === !0 || "true" === d;
                        e.settings.messages[c.name].remote = g.originalMessage, j ? (i = e.formSubmitted, e.prepareElement(c), e.formSubmitted = i, e.successList.push(c), delete e.invalid[c.name], e.showErrors()) : (f = {}, h = d || e.defaultMessage(c, "remote"), f[c.name] = g.message = a.isFunction(h) ? h(b) : h, e.invalid[c.name] = !0, e.showErrors(f)), g.valid = j, e.stopRequest(c, j)
                    }
                }, d)), "pending")
            }
        }
    }), a.format = function() {
        throw "$.format has been deprecated. Please use $.validator.format instead."
    }
}(jQuery),
function(a) {
    var b, c = {};
    a.ajaxPrefilter ? a.ajaxPrefilter(function(a, b, d) {
        var e = a.port;
        "abort" === a.mode && (c[e] && c[e].abort(), c[e] = d)
    }) : (b = a.ajax, a.ajax = function(d) {
        var e = ("mode" in d ? d : a.ajaxSettings).mode,
            f = ("port" in d ? d : a.ajaxSettings).port;
        return "abort" === e ? (c[f] && c[f].abort(), c[f] = b.apply(this, arguments), c[f]) : b.apply(this, arguments)
    })
}(jQuery),
function(a) {
    a.extend(a.fn, {
        validateDelegate: function(b, c, d) {
            return this.bind(c, function(c) {
                var e = a(c.target);
                return e.is(b) ? d.apply(e, arguments) : void 0
            })
        }
    })
}(jQuery);
! function(a, b, c, d) {
    "use strict";

    function e(a, b, c) {
        return setTimeout(k(a, c), b)
    }

    function f(a, b, c) {
        return Array.isArray(a) ? (g(a, c[b], c), !0) : !1
    }

    function g(a, b, c) {
        var e, f;
        if (a)
            if (a.forEach) a.forEach(b, c);
            else if (a.length !== d)
            for (e = 0, f = a.length; f > e; e++) b.call(c, a[e], e, a);
        else
            for (e in a) a.hasOwnProperty(e) && b.call(c, a[e], e, a)
    }

    function h(a, b, c) {
        for (var e = Object.keys(b), f = 0, g = e.length; g > f; f++)(!c || c && a[e[f]] === d) && (a[e[f]] = b[e[f]]);
        return a
    }

    function i(a, b) {
        return h(a, b, !0)
    }

    function j(a, b, c) {
        var d, e = b.prototype;
        d = a.prototype = Object.create(e), d.constructor = a, d._super = e, c && h(d, c)
    }

    function k(a, b) {
        return function() {
            return a.apply(b, arguments)
        }
    }

    function l(a, b) {
        return typeof a == hb ? a.apply(b ? b[0] || d : d, b) : a
    }

    function m(a, b) {
        return a === d ? b : a
    }

    function n(a, b, c) {
        g(r(b), function(b) {
            a.addEventListener(b, c, !1)
        })
    }

    function o(a, b, c) {
        g(r(b), function(b) {
            a.removeEventListener(b, c, !1)
        })
    }

    function p(a, b) {
        for (; a;) {
            if (a == b) return !0;
            a = a.parentNode
        }
        return !1
    }

    function q(a, b) {
        return a.indexOf(b) > -1
    }

    function r(a) {
        return a.trim().split(/\s+/g)
    }

    function s(a, b, c) {
        if (a.indexOf && !c) return a.indexOf(b);
        for (var d = 0, e = a.length; e > d; d++)
            if (c && a[d][c] == b || !c && a[d] === b) return d;
        return -1
    }

    function t(a) {
        return Array.prototype.slice.call(a, 0)
    }

    function u(a, b, c) {
        for (var d = [], e = [], f = 0, g = a.length; g > f; f++) {
            var h = b ? a[f][b] : a[f];
            s(e, h) < 0 && d.push(a[f]), e[f] = h
        }
        return c && (d = b ? d.sort(function(a, c) {
            return a[b] > c[b]
        }) : d.sort()), d
    }

    function v(a, b) {
        for (var c, e, f = b[0].toUpperCase() + b.slice(1), g = 0, h = fb.length; h > g; g++)
            if (c = fb[g], e = c ? c + f : b, e in a) return e;
        return d
    }

    function w() {
        return lb++
    }

    function x(b, c) {
        var d = this;
        this.manager = b, this.callback = c, this.element = b.element, this.target = b.options.inputTarget, this.domHandler = function(a) {
            l(b.options.enable, [b]) && d.handler(a)
        }, this.evEl && n(this.element, this.evEl, this.domHandler), this.evTarget && n(this.target, this.evTarget, this.domHandler), this.evWin && n(a, this.evWin, this.domHandler)
    }

    function y(a) {
        var b;
        return new(b = ob ? M : pb ? N : nb ? P : L)(a, z)
    }

    function z(a, b, c) {
        var d = c.pointers.length,
            e = c.changedPointers.length,
            f = b & vb && d - e === 0,
            g = b & (xb | yb) && d - e === 0;
        c.isFirst = !!f, c.isFinal = !!g, f && (a.session = {}), c.eventType = b, A(a, c), a.emit("hammer.input", c), a.recognize(c), a.session.prevInput = c
    }

    function A(a, b) {
        var c = a.session,
            d = b.pointers,
            e = d.length;
        c.firstInput || (c.firstInput = D(b)), e > 1 && !c.firstMultiple ? c.firstMultiple = D(b) : 1 === e && (c.firstMultiple = !1);
        var f = c.firstInput,
            g = c.firstMultiple,
            h = g ? g.center : f.center,
            i = b.center = E(d);
        b.timeStamp = kb(), b.deltaTime = b.timeStamp - f.timeStamp, b.angle = I(h, i), b.distance = H(h, i), B(c, b), b.offsetDirection = G(b.deltaX, b.deltaY), b.scale = g ? K(g.pointers, d) : 1, b.rotation = g ? J(g.pointers, d) : 0, C(c, b);
        var j = a.element;
        p(b.srcEvent.target, j) && (j = b.srcEvent.target), b.target = j
    }

    function B(a, b) {
        var c = b.center,
            d = a.offsetDelta || {},
            e = a.prevDelta || {},
            f = a.prevInput || {};
        (b.eventType === vb || f.eventType === xb) && (e = a.prevDelta = {
            x: f.deltaX || 0,
            y: f.deltaY || 0
        }, d = a.offsetDelta = {
            x: c.x,
            y: c.y
        }), b.deltaX = e.x + (c.x - d.x), b.deltaY = e.y + (c.y - d.y)
    }

    function C(a, b) {
        var c, e, f, g, h = a.lastInterval || b,
            i = b.timeStamp - h.timeStamp;
        if (b.eventType != yb && (i > ub || h.velocity === d)) {
            var j = h.deltaX - b.deltaX,
                k = h.deltaY - b.deltaY,
                l = F(i, j, k);
            e = l.x, f = l.y, c = jb(l.x) > jb(l.y) ? l.x : l.y, g = G(j, k), a.lastInterval = b
        } else c = h.velocity, e = h.velocityX, f = h.velocityY, g = h.direction;
        b.velocity = c, b.velocityX = e, b.velocityY = f, b.direction = g
    }

    function D(a) {
        for (var b = [], c = 0; c < a.pointers.length; c++) b[c] = {
            clientX: ib(a.pointers[c].clientX),
            clientY: ib(a.pointers[c].clientY)
        };
        return {
            timeStamp: kb(),
            pointers: b,
            center: E(b),
            deltaX: a.deltaX,
            deltaY: a.deltaY
        }
    }

    function E(a) {
        var b = a.length;
        if (1 === b) return {
            x: ib(a[0].clientX),
            y: ib(a[0].clientY)
        };
        for (var c = 0, d = 0, e = 0; b > e; e++) c += a[e].clientX, d += a[e].clientY;
        return {
            x: ib(c / b),
            y: ib(d / b)
        }
    }

    function F(a, b, c) {
        return {
            x: b / a || 0,
            y: c / a || 0
        }
    }

    function G(a, b) {
        return a === b ? zb : jb(a) >= jb(b) ? a > 0 ? Ab : Bb : b > 0 ? Cb : Db
    }

    function H(a, b, c) {
        c || (c = Hb);
        var d = b[c[0]] - a[c[0]],
            e = b[c[1]] - a[c[1]];
        return Math.sqrt(d * d + e * e)
    }

    function I(a, b, c) {
        c || (c = Hb);
        var d = b[c[0]] - a[c[0]],
            e = b[c[1]] - a[c[1]];
        return 180 * Math.atan2(e, d) / Math.PI
    }

    function J(a, b) {
        return I(b[1], b[0], Ib) - I(a[1], a[0], Ib)
    }

    function K(a, b) {
        return H(b[0], b[1], Ib) / H(a[0], a[1], Ib)
    }

    function L() {
        this.evEl = Kb, this.evWin = Lb, this.allow = !0, this.pressed = !1, x.apply(this, arguments)
    }

    function M() {
        this.evEl = Ob, this.evWin = Pb, x.apply(this, arguments), this.store = this.manager.session.pointerEvents = []
    }

    function N() {
        this.evTarget = Rb, this.targetIds = {}, x.apply(this, arguments)
    }

    function O(a, b) {
        var c = t(a.touches),
            d = this.targetIds;
        if (b & (vb | wb) && 1 === c.length) return d[c[0].identifier] = !0, [c, c];
        var e, f, g = t(a.targetTouches),
            h = t(a.changedTouches),
            i = [];
        if (b === vb)
            for (e = 0, f = g.length; f > e; e++) d[g[e].identifier] = !0;
        for (e = 0, f = h.length; f > e; e++) d[h[e].identifier] && i.push(h[e]), b & (xb | yb) && delete d[h[e].identifier];
        return i.length ? [u(g.concat(i), "identifier", !0), i] : void 0
    }

    function P() {
        x.apply(this, arguments);
        var a = k(this.handler, this);
        this.touch = new N(this.manager, a), this.mouse = new L(this.manager, a)
    }

    function Q(a, b) {
        this.manager = a, this.set(b)
    }

    function R(a) {
        if (q(a, Xb)) return Xb;
        var b = q(a, Yb),
            c = q(a, Zb);
        return b && c ? Yb + " " + Zb : b || c ? b ? Yb : Zb : q(a, Wb) ? Wb : Vb
    }

    function S(a) {
        this.id = w(), this.manager = null, this.options = i(a || {}, this.defaults), this.options.enable = m(this.options.enable, !0), this.state = $b, this.simultaneous = {}, this.requireFail = []
    }

    function T(a) {
        return a & dc ? "cancel" : a & bc ? "end" : a & ac ? "move" : a & _b ? "start" : ""
    }

    function U(a) {
        return a == Db ? "down" : a == Cb ? "up" : a == Ab ? "left" : a == Bb ? "right" : ""
    }

    function V(a, b) {
        var c = b.manager;
        return c ? c.get(a) : a
    }

    function W() {
        S.apply(this, arguments)
    }

    function X() {
        W.apply(this, arguments), this.pX = null, this.pY = null
    }

    function Y() {
        W.apply(this, arguments)
    }

    function Z() {
        S.apply(this, arguments), this._timer = null, this._input = null
    }

    function $() {
        W.apply(this, arguments)
    }

    function _() {
        W.apply(this, arguments)
    }

    function ab() {
        S.apply(this, arguments), this.pTime = !1, this.pCenter = !1, this._timer = null, this._input = null, this.count = 0
    }

    function bb(a, b) {
        return b = b || {}, b.recognizers = m(b.recognizers, bb.defaults.preset), new cb(a, b)
    }

    function cb(a, b) {
        b = b || {}, this.options = i(b, bb.defaults), this.options.inputTarget = this.options.inputTarget || a, this.handlers = {}, this.session = {}, this.recognizers = [], this.element = a, this.input = y(this), this.touchAction = new Q(this, this.options.touchAction), db(this, !0), g(b.recognizers, function(a) {
            var b = this.add(new a[0](a[1]));
            a[2] && b.recognizeWith(a[2]), a[3] && b.requireFailure(a[2])
        }, this)
    }

    function db(a, b) {
        var c = a.element;
        g(a.options.cssProps, function(a, d) {
            c.style[v(c.style, d)] = b ? a : ""
        })
    }

    function eb(a, c) {
        var d = b.createEvent("Event");
        d.initEvent(a, !0, !0), d.gesture = c, c.target.dispatchEvent(d)
    }
    var fb = ["", "webkit", "moz", "MS", "ms", "o"],
        gb = b.createElement("div"),
        hb = "function",
        ib = Math.round,
        jb = Math.abs,
        kb = Date.now,
        lb = 1,
        mb = /mobile|tablet|ip(ad|hone|od)|android/i,
        nb = "ontouchstart" in a,
        ob = v(a, "PointerEvent") !== d,
        pb = nb && mb.test(navigator.userAgent),
        qb = "touch",
        rb = "pen",
        sb = "mouse",
        tb = "kinect",
        ub = 25,
        vb = 1,
        wb = 2,
        xb = 4,
        yb = 8,
        zb = 1,
        Ab = 2,
        Bb = 4,
        Cb = 8,
        Db = 16,
        Eb = Ab | Bb,
        Fb = Cb | Db,
        Gb = Eb | Fb,
        Hb = ["x", "y"],
        Ib = ["clientX", "clientY"];
    x.prototype = {
        handler: function() {},
        destroy: function() {
            this.evEl && o(this.element, this.evEl, this.domHandler), this.evTarget && o(this.target, this.evTarget, this.domHandler), this.evWin && o(a, this.evWin, this.domHandler)
        }
    };
    var Jb = {
            mousedown: vb,
            mousemove: wb,
            mouseup: xb
        },
        Kb = "mousedown",
        Lb = "mousemove mouseup";
    j(L, x, {
        handler: function(a) {
            var b = Jb[a.type];
            b & vb && 0 === a.button && (this.pressed = !0), b & wb && 1 !== a.which && (b = xb), this.pressed && this.allow && (b & xb && (this.pressed = !1), this.callback(this.manager, b, {
                pointers: [a],
                changedPointers: [a],
                pointerType: sb,
                srcEvent: a
            }))
        }
    });
    var Mb = {
            pointerdown: vb,
            pointermove: wb,
            pointerup: xb,
            pointercancel: yb,
            pointerout: yb
        },
        Nb = {
            2: qb,
            3: rb,
            4: sb,
            5: tb
        },
        Ob = "pointerdown",
        Pb = "pointermove pointerup pointercancel";
    a.MSPointerEvent && (Ob = "MSPointerDown", Pb = "MSPointerMove MSPointerUp MSPointerCancel"), j(M, x, {
        handler: function(a) {
            var b = this.store,
                c = !1,
                d = a.type.toLowerCase().replace("ms", ""),
                e = Mb[d],
                f = Nb[a.pointerType] || a.pointerType,
                g = f == qb;
            e & vb && (0 === a.button || g) ? b.push(a) : e & (xb | yb) && (c = !0);
            var h = s(b, a.pointerId, "pointerId");
            0 > h || (b[h] = a, this.callback(this.manager, e, {
                pointers: b,
                changedPointers: [a],
                pointerType: f,
                srcEvent: a
            }), c && b.splice(h, 1))
        }
    });
    var Qb = {
            touchstart: vb,
            touchmove: wb,
            touchend: xb,
            touchcancel: yb
        },
        Rb = "touchstart touchmove touchend touchcancel";
    j(N, x, {
        handler: function(a) {
            var b = Qb[a.type],
                c = O.call(this, a, b);
            c && this.callback(this.manager, b, {
                pointers: c[0],
                changedPointers: c[1],
                pointerType: qb,
                srcEvent: a
            })
        }
    }), j(P, x, {
        handler: function(a, b, c) {
            var d = c.pointerType == qb,
                e = c.pointerType == sb;
            if (d) this.mouse.allow = !1;
            else if (e && !this.mouse.allow) return;
            b & (xb | yb) && (this.mouse.allow = !0), this.callback(a, b, c)
        },
        destroy: function() {
            this.touch.destroy(), this.mouse.destroy()
        }
    });
    var Sb = v(gb.style, "touchAction"),
        Tb = Sb !== d,
        Ub = "compute",
        Vb = "auto",
        Wb = "manipulation",
        Xb = "none",
        Yb = "pan-x",
        Zb = "pan-y";
    Q.prototype = {
        set: function(a) {
            a == Ub && (a = this.compute()), Tb && (this.manager.element.style[Sb] = a), this.actions = a.toLowerCase().trim()
        },
        update: function() {
            this.set(this.manager.options.touchAction)
        },
        compute: function() {
            var a = [];
            return g(this.manager.recognizers, function(b) {
                l(b.options.enable, [b]) && (a = a.concat(b.getTouchAction()))
            }), R(a.join(" "))
        },
        preventDefaults: function(a) {
            if (!Tb) {
                var b = a.srcEvent,
                    c = a.offsetDirection;
                if (this.manager.session.prevented) return void b.preventDefault();
                var d = this.actions,
                    e = q(d, Xb),
                    f = q(d, Zb),
                    g = q(d, Yb);
                return e || f && g || f && c & Eb || g && c & Fb ? this.preventSrc(b) : void 0
            }
        },
        preventSrc: function(a) {
            this.manager.session.prevented = !0, a.preventDefault()
        }
    };
    var $b = 1,
        _b = 2,
        ac = 4,
        bc = 8,
        cc = bc,
        dc = 16,
        ec = 32;
    S.prototype = {
        defaults: {},
        set: function(a) {
            return h(this.options, a), this.manager && this.manager.touchAction.update(), this
        },
        recognizeWith: function(a) {
            if (f(a, "recognizeWith", this)) return this;
            var b = this.simultaneous;
            return a = V(a, this), b[a.id] || (b[a.id] = a, a.recognizeWith(this)), this
        },
        dropRecognizeWith: function(a) {
            return f(a, "dropRecognizeWith", this) ? this : (a = V(a, this), delete this.simultaneous[a.id], this)
        },
        requireFailure: function(a) {
            if (f(a, "requireFailure", this)) return this;
            var b = this.requireFail;
            return a = V(a, this), -1 === s(b, a) && (b.push(a), a.requireFailure(this)), this
        },
        dropRequireFailure: function(a) {
            if (f(a, "dropRequireFailure", this)) return this;
            a = V(a, this);
            var b = s(this.requireFail, a);
            return b > -1 && this.requireFail.splice(b, 1), this
        },
        hasRequireFailures: function() {
            return this.requireFail.length > 0
        },
        canRecognizeWith: function(a) {
            return !!this.simultaneous[a.id]
        },
        emit: function(a) {
            function b(b) {
                c.manager.emit(c.options.event + (b ? T(d) : ""), a)
            }
            var c = this,
                d = this.state;
            bc > d && b(!0), b(), d >= bc && b(!0)
        },
        tryEmit: function(a) {
            return this.canEmit() ? this.emit(a) : void(this.state = ec)
        },
        canEmit: function() {
            for (var a = 0; a < this.requireFail.length; a++)
                if (!(this.requireFail[a].state & (ec | $b))) return !1;
            return !0
        },
        recognize: function(a) {
            var b = h({}, a);
            return l(this.options.enable, [this, b]) ? (this.state & (cc | dc | ec) && (this.state = $b), this.state = this.process(b), void(this.state & (_b | ac | bc | dc) && this.tryEmit(b))) : (this.reset(), void(this.state = ec))
        },
        process: function() {},
        getTouchAction: function() {},
        reset: function() {}
    }, j(W, S, {
        defaults: {
            pointers: 1
        },
        attrTest: function(a) {
            var b = this.options.pointers;
            return 0 === b || a.pointers.length === b
        },
        process: function(a) {
            var b = this.state,
                c = a.eventType,
                d = b & (_b | ac),
                e = this.attrTest(a);
            return d && (c & yb || !e) ? b | dc : d || e ? c & xb ? b | bc : b & _b ? b | ac : _b : ec
        }
    }), j(X, W, {
        defaults: {
            event: "pan",
            threshold: 10,
            pointers: 1,
            direction: Gb
        },
        getTouchAction: function() {
            var a = this.options.direction;
            if (a === Gb) return [Xb];
            var b = [];
            return a & Eb && b.push(Zb), a & Fb && b.push(Yb), b
        },
        directionTest: function(a) {
            var b = this.options,
                c = !0,
                d = a.distance,
                e = a.direction,
                f = a.deltaX,
                g = a.deltaY;
            return e & b.direction || (b.direction & Eb ? (e = 0 === f ? zb : 0 > f ? Ab : Bb, c = f != this.pX, d = Math.abs(a.deltaX)) : (e = 0 === g ? zb : 0 > g ? Cb : Db, c = g != this.pY, d = Math.abs(a.deltaY))), a.direction = e, c && d > b.threshold && e & b.direction
        },
        attrTest: function(a) {
            return W.prototype.attrTest.call(this, a) && (this.state & _b || !(this.state & _b) && this.directionTest(a))
        },
        emit: function(a) {
            this.pX = a.deltaX, this.pY = a.deltaY;
            var b = U(a.direction);
            b && this.manager.emit(this.options.event + b, a), this._super.emit.call(this, a)
        }
    }), j(Y, W, {
        defaults: {
            event: "pinch",
            threshold: 0,
            pointers: 2
        },
        getTouchAction: function() {
            return [Xb]
        },
        attrTest: function(a) {
            return this._super.attrTest.call(this, a) && (Math.abs(a.scale - 1) > this.options.threshold || this.state & _b)
        },
        emit: function(a) {
            if (this._super.emit.call(this, a), 1 !== a.scale) {
                var b = a.scale < 1 ? "in" : "out";
                this.manager.emit(this.options.event + b, a)
            }
        }
    }), j(Z, S, {
        defaults: {
            event: "press",
            pointers: 1,
            time: 500,
            threshold: 5
        },
        getTouchAction: function() {
            return [Vb]
        },
        process: function(a) {
            var b = this.options,
                c = a.pointers.length === b.pointers,
                d = a.distance < b.threshold,
                f = a.deltaTime > b.time;
            if (this._input = a, !d || !c || a.eventType & (xb | yb) && !f) this.reset();
            else if (a.eventType & vb) this.reset(), this._timer = e(function() {
                this.state = cc, this.tryEmit()
            }, b.time, this);
            else if (a.eventType & xb) return cc;
            return ec
        },
        reset: function() {
            clearTimeout(this._timer)
        },
        emit: function(a) {
            this.state === cc && (a && a.eventType & xb ? this.manager.emit(this.options.event + "up", a) : (this._input.timeStamp = kb(), this.manager.emit(this.options.event, this._input)))
        }
    }), j($, W, {
        defaults: {
            event: "rotate",
            threshold: 0,
            pointers: 2
        },
        getTouchAction: function() {
            return [Xb]
        },
        attrTest: function(a) {
            return this._super.attrTest.call(this, a) && (Math.abs(a.rotation) > this.options.threshold || this.state & _b)
        }
    }), j(_, W, {
        defaults: {
            event: "swipe",
            threshold: 10,
            velocity: .65,
            direction: Eb | Fb,
            pointers: 1
        },
        getTouchAction: function() {
            return X.prototype.getTouchAction.call(this)
        },
        attrTest: function(a) {
            var b, c = this.options.direction;
            return c & (Eb | Fb) ? b = a.velocity : c & Eb ? b = a.velocityX : c & Fb && (b = a.velocityY), this._super.attrTest.call(this, a) && c & a.direction && jb(b) > this.options.velocity && a.eventType & xb
        },
        emit: function(a) {
            var b = U(a.direction);
            b && this.manager.emit(this.options.event + b, a), this.manager.emit(this.options.event, a)
        }
    }), j(ab, S, {
        defaults: {
            event: "tap",
            pointers: 1,
            taps: 1,
            interval: 300,
            time: 250,
            threshold: 2,
            posThreshold: 10
        },
        getTouchAction: function() {
            return [Wb]
        },
        process: function(a) {
            var b = this.options,
                c = a.pointers.length === b.pointers,
                d = a.distance < b.threshold,
                f = a.deltaTime < b.time;
            if (this.reset(), a.eventType & vb && 0 === this.count) return this.failTimeout();
            if (d && f && c) {
                if (a.eventType != xb) return this.failTimeout();
                var g = this.pTime ? a.timeStamp - this.pTime < b.interval : !0,
                    h = !this.pCenter || H(this.pCenter, a.center) < b.posThreshold;
                this.pTime = a.timeStamp, this.pCenter = a.center, h && g ? this.count += 1 : this.count = 1, this._input = a;
                var i = this.count % b.taps;
                if (0 === i) return this.hasRequireFailures() ? (this._timer = e(function() {
                    this.state = cc, this.tryEmit()
                }, b.interval, this), _b) : cc
            }
            return ec
        },
        failTimeout: function() {
            return this._timer = e(function() {
                this.state = ec
            }, this.options.interval, this), ec
        },
        reset: function() {
            clearTimeout(this._timer)
        },
        emit: function() {
            this.state == cc && (this._input.tapCount = this.count, this.manager.emit(this.options.event, this._input))
        }
    }), bb.VERSION = "2.0.2", bb.defaults = {
        domEvents: !1,
        touchAction: Ub,
        inputTarget: null,
        enable: !0,
        preset: [
            [$, {
                enable: !1
            }],
            [Y, {
                    enable: !1
                },
                ["rotate"]
            ],
            [_, {
                direction: Eb
            }],
            [X, {
                    direction: Eb
                },
                ["swipe"]
            ],
            [ab],
            [ab, {
                    event: "doubletap",
                    taps: 2
                },
                ["tap"]
            ],
            [Z]
        ],
        cssProps: {
            userSelect: "none",
            touchSelect: "none",
            touchCallout: "none",
            contentZooming: "none",
            userDrag: "none",
            tapHighlightColor: "rgba(0,0,0,0)"
        }
    };
    var fc = 1,
        gc = 2;
    cb.prototype = {
        set: function(a) {
            return h(this.options, a), this
        },
        stop: function(a) {
            this.session.stopped = a ? gc : fc
        },
        recognize: function(a) {
            var b = this.session;
            if (!b.stopped) {
                this.touchAction.preventDefaults(a);
                var c, d = this.recognizers,
                    e = b.curRecognizer;
                (!e || e && e.state & cc) && (e = b.curRecognizer = null);
                for (var f = 0, g = d.length; g > f; f++) c = d[f], b.stopped === gc || e && c != e && !c.canRecognizeWith(e) ? c.reset() : c.recognize(a), !e && c.state & (_b | ac | bc) && (e = b.curRecognizer = c)
            }
        },
        get: function(a) {
            if (a instanceof S) return a;
            for (var b = this.recognizers, c = 0; c < b.length; c++)
                if (b[c].options.event == a) return b[c];
            return null
        },
        add: function(a) {
            if (f(a, "add", this)) return this;
            var b = this.get(a.options.event);
            return b && this.remove(b), this.recognizers.push(a), a.manager = this, this.touchAction.update(), a
        },
        remove: function(a) {
            if (f(a, "remove", this)) return this;
            var b = this.recognizers;
            return a = this.get(a), b.splice(s(b, a), 1), this.touchAction.update(), this
        },
        on: function(a, b) {
            var c = this.handlers;
            return g(r(a), function(a) {
                c[a] = c[a] || [], c[a].push(b)
            }), this
        },
        off: function(a, b) {
            var c = this.handlers;
            return g(r(a), function(a) {
                b ? c[a].splice(s(c[a], b), 1) : delete c[a]
            }), this
        },
        emit: function(a, b) {
            this.options.domEvents && eb(a, b);
            var c = this.handlers[a] && this.handlers[a].slice();
            if (c && c.length) {
                b.type = a, b.preventDefault = function() {
                    b.srcEvent.preventDefault()
                };
                for (var d = 0, e = c.length; e > d; d++) c[d](b)
            }
        },
        destroy: function() {
            this.element && db(this, !1), this.handlers = {}, this.session = {}, this.input.destroy(), this.element = null
        }
    }, h(bb, {
        INPUT_START: vb,
        INPUT_MOVE: wb,
        INPUT_END: xb,
        INPUT_CANCEL: yb,
        STATE_POSSIBLE: $b,
        STATE_BEGAN: _b,
        STATE_CHANGED: ac,
        STATE_ENDED: bc,
        STATE_RECOGNIZED: cc,
        STATE_CANCELLED: dc,
        STATE_FAILED: ec,
        DIRECTION_NONE: zb,
        DIRECTION_LEFT: Ab,
        DIRECTION_RIGHT: Bb,
        DIRECTION_UP: Cb,
        DIRECTION_DOWN: Db,
        DIRECTION_HORIZONTAL: Eb,
        DIRECTION_VERTICAL: Fb,
        DIRECTION_ALL: Gb,
        Manager: cb,
        Input: x,
        TouchAction: Q,
        Recognizer: S,
        AttrRecognizer: W,
        Tap: ab,
        Pan: X,
        Swipe: _,
        Pinch: Y,
        Rotate: $,
        Press: Z,
        on: n,
        off: o,
        each: g,
        merge: i,
        extend: h,
        inherit: j,
        bindFn: k,
        prefixed: v
    }), typeof define == hb && define.amd ? define(function() {
        return bb
    }) : "undefined" != typeof module && module.exports ? module.exports = bb : a[c] = bb
}(window, document, "Hammer");
! function(e) {
    function t(e) {
        var t = e.length,
            r = $.type(e);
        return "function" === r || $.isWindow(e) ? !1 : 1 === e.nodeType && t ? !0 : "array" === r || 0 === t || "number" == typeof t && t > 0 && t - 1 in e
    }
    if (!e.jQuery) {
        var $ = function(e, t) {
            return new $.fn.init(e, t)
        };
        $.isWindow = function(e) {
            return null != e && e == e.window
        }, $.type = function(e) {
            return null == e ? e + "" : "object" == typeof e || "function" == typeof e ? a[o.call(e)] || "object" : typeof e
        }, $.isArray = Array.isArray || function(e) {
            return "array" === $.type(e)
        }, $.isPlainObject = function(e) {
            var t;
            if (!e || "object" !== $.type(e) || e.nodeType || $.isWindow(e)) return !1;
            try {
                if (e.constructor && !n.call(e, "constructor") && !n.call(e.constructor.prototype, "isPrototypeOf")) return !1
            } catch (r) {
                return !1
            }
            for (t in e);
            return void 0 === t || n.call(e, t)
        }, $.each = function(e, r, a) {
            var n, o = 0,
                i = e.length,
                s = t(e);
            if (a) {
                if (s)
                    for (; i > o && (n = r.apply(e[o], a), n !== !1); o++);
                else
                    for (o in e)
                        if (n = r.apply(e[o], a), n === !1) break
            } else if (s)
                for (; i > o && (n = r.call(e[o], o, e[o]), n !== !1); o++);
            else
                for (o in e)
                    if (n = r.call(e[o], o, e[o]), n === !1) break;
            return e
        }, $.data = function(e, t, a) {
            if (void 0 === a) {
                var n = e[$.expando],
                    o = n && r[n];
                if (void 0 === t) return o;
                if (o && t in o) return o[t]
            } else if (void 0 !== t) {
                var n = e[$.expando] || (e[$.expando] = ++$.uuid);
                return r[n] = r[n] || {}, r[n][t] = a, a
            }
        }, $.removeData = function(e, t) {
            var a = e[$.expando],
                n = a && r[a];
            n && $.each(t, function(e, t) {
                delete n[t]
            })
        }, $.extend = function() {
            var e, t, r, a, n, o, i = arguments[0] || {},
                s = 1,
                l = arguments.length,
                u = !1;
            for ("boolean" == typeof i && (u = i, i = arguments[s] || {}, s++), "object" != typeof i && "function" !== $.type(i) && (i = {}), s === l && (i = this, s--); l > s; s++)
                if (null != (n = arguments[s]))
                    for (a in n) e = i[a], r = n[a], i !== r && (u && r && ($.isPlainObject(r) || (t = $.isArray(r))) ? (t ? (t = !1, o = e && $.isArray(e) ? e : []) : o = e && $.isPlainObject(e) ? e : {}, i[a] = $.extend(u, o, r)) : void 0 !== r && (i[a] = r));
            return i
        }, $.queue = function(e, r, a) {
            function n(e, r) {
                var a = r || [];
                return null != e && (t(Object(e)) ? ! function(e, t) {
                    for (var r = +t.length, a = 0, n = e.length; r > a;) e[n++] = t[a++];
                    if (r !== r)
                        for (; void 0 !== t[a];) e[n++] = t[a++];
                    return e.length = n, e
                }(a, "string" == typeof e ? [e] : e) : [].push.call(a, e)), a
            }
            if (e) {
                r = (r || "fx") + "queue";
                var o = $.data(e, r);
                return a ? (!o || $.isArray(a) ? o = $.data(e, r, n(a)) : o.push(a), o) : o || []
            }
        }, $.dequeue = function(e, t) {
            $.each(e.nodeType ? [e] : e, function(e, r) {
                t = t || "fx";
                var a = $.queue(r, t),
                    n = a.shift();
                "inprogress" === n && (n = a.shift()), n && ("fx" === t && a.unshift("inprogress"), n.call(r, function() {
                    $.dequeue(r, t)
                }))
            })
        }, $.fn = $.prototype = {
            init: function(e) {
                if (e.nodeType) return this[0] = e, this;
                throw new Error("Not a DOM node.")
            },
            offset: function() {
                var t = this[0].getBoundingClientRect();
                return {
                    top: t.top + (e.pageYOffset || document.scrollTop || 0) - (document.clientTop || 0),
                    left: t.left + (e.pageXOffset || document.scrollLeft || 0) - (document.clientLeft || 0)
                }
            },
            position: function() {
                function e() {
                    for (var e = this.offsetParent || document; e && "html" === !e.nodeType.toLowerCase && "static" === e.style.position;) e = e.offsetParent;
                    return e || document
                }
                var t = this[0],
                    e = e.apply(t),
                    r = this.offset(),
                    a = /^(?:body|html)$/i.test(e.nodeName) ? {
                        top: 0,
                        left: 0
                    } : $(e).offset();
                return r.top -= parseFloat(t.style.marginTop) || 0, r.left -= parseFloat(t.style.marginLeft) || 0, e.style && (a.top += parseFloat(e.style.borderTopWidth) || 0, a.left += parseFloat(e.style.borderLeftWidth) || 0), {
                    top: r.top - a.top,
                    left: r.left - a.left
                }
            }
        };
        var r = {};
        $.expando = "velocity" + (new Date).getTime(), $.uuid = 0;
        for (var a = {}, n = a.hasOwnProperty, o = a.toString, i = "Boolean Number String Function Array Date RegExp Object Error".split(" "), s = 0; s < i.length; s++) a["[object " + i[s] + "]"] = i[s].toLowerCase();
        $.fn.init.prototype = $.fn, e.Velocity = {
            Utilities: $
        }
    }
}(window),
function(e) {
    "object" == typeof module && "object" == typeof module.exports ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : e()
}(function() {
    return function(e, t, r, a) {
        function n(e) {
            for (var t = -1, r = e ? e.length : 0, a = []; ++t < r;) {
                var n = e[t];
                n && a.push(n)
            }
            return a
        }

        function o(e) {
            return g.isWrapped(e) ? e = [].slice.call(e) : g.isNode(e) && (e = [e]), e
        }

        function i(e) {
            var t = $.data(e, "velocity");
            return null === t ? a : t
        }

        function s(e) {
            return function(t) {
                return Math.round(t * e) * (1 / e)
            }
        }

        function l(e, r, a, n) {
            function o(e, t) {
                return 1 - 3 * t + 3 * e
            }

            function i(e, t) {
                return 3 * t - 6 * e
            }

            function s(e) {
                return 3 * e
            }

            function l(e, t, r) {
                return ((o(t, r) * e + i(t, r)) * e + s(t)) * e
            }

            function u(e, t, r) {
                return 3 * o(t, r) * e * e + 2 * i(t, r) * e + s(t)
            }

            function c(t, r) {
                for (var n = 0; m > n; ++n) {
                    var o = u(r, e, a);
                    if (0 === o) return r;
                    var i = l(r, e, a) - t;
                    r -= i / o
                }
                return r
            }

            function p() {
                for (var t = 0; b > t; ++t) w[t] = l(t * x, e, a)
            }

            function f(t, r, n) {
                var o, i, s = 0;
                do {
                    i = r + (n - r) / 2, o = l(i, e, a) - t, o > 0 ? n = i : r = i
                } while (Math.abs(o) > h && ++s < v);
                return i
            }

            function d(t) {
                for (var r = 0, n = 1, o = b - 1; n != o && w[n] <= t; ++n) r += x;
                --n;
                var i = (t - w[n]) / (w[n + 1] - w[n]),
                    s = r + i * x,
                    l = u(s, e, a);
                return l >= y ? c(t, s) : 0 == l ? s : f(t, r, r + x)
            }

            function g() {
                V = !0, (e != r || a != n) && p()
            }
            var m = 4,
                y = .001,
                h = 1e-7,
                v = 10,
                b = 11,
                x = 1 / (b - 1),
                S = "Float32Array" in t;
            if (4 !== arguments.length) return !1;
            for (var P = 0; 4 > P; ++P)
                if ("number" != typeof arguments[P] || isNaN(arguments[P]) || !isFinite(arguments[P])) return !1;
            e = Math.min(e, 1), a = Math.min(a, 1), e = Math.max(e, 0), a = Math.max(a, 0);
            var w = S ? new Float32Array(b) : new Array(b),
                V = !1,
                C = function(t) {
                    return V || g(), e === r && a === n ? t : 0 === t ? 0 : 1 === t ? 1 : l(d(t), r, n)
                };
            C.getControlPoints = function() {
                return [{
                    x: e,
                    y: r
                }, {
                    x: a,
                    y: n
                }]
            };
            var T = "generateBezier(" + [e, r, a, n] + ")";
            return C.toString = function() {
                return T
            }, C
        }

        function u(e, t) {
            var r = e;
            return g.isString(e) ? v.Easings[e] || (r = !1) : r = g.isArray(e) && 1 === e.length ? s.apply(null, e) : g.isArray(e) && 2 === e.length ? b.apply(null, e.concat([t])) : g.isArray(e) && 4 === e.length ? l.apply(null, e) : !1, r === !1 && (r = v.Easings[v.defaults.easing] ? v.defaults.easing : h), r
        }

        function c(e) {
            if (e)
                for (var t = (new Date).getTime(), r = 0, n = v.State.calls.length; n > r; r++)
                    if (v.State.calls[r]) {
                        var o = v.State.calls[r],
                            s = o[0],
                            l = o[2],
                            u = o[3];
                        u || (u = v.State.calls[r][3] = t - 16);
                        for (var f = Math.min((t - u) / l.duration, 1), d = 0, m = s.length; m > d; d++) {
                            var y = s[d],
                                h = y.element;
                            if (i(h)) {
                                var b = !1;
                                if (l.display !== a && null !== l.display && "none" !== l.display) {
                                    if ("flex" === l.display) {
                                        var S = ["-webkit-box", "-moz-box", "-ms-flexbox", "-webkit-flex"];
                                        $.each(S, function(e, t) {
                                            x.setPropertyValue(h, "display", t)
                                        })
                                    }
                                    x.setPropertyValue(h, "display", l.display)
                                }
                                l.visibility && "hidden" !== l.visibility && x.setPropertyValue(h, "visibility", l.visibility);
                                for (var w in y)
                                    if ("element" !== w) {
                                        var V = y[w],
                                            C, T = g.isString(V.easing) ? v.Easings[V.easing] : V.easing;
                                        if (C = 1 === f ? V.endValue : V.startValue + (V.endValue - V.startValue) * T(f), V.currentValue = C, x.Hooks.registered[w]) {
                                            var k = x.Hooks.getRoot(w),
                                                A = i(h).rootPropertyValueCache[k];
                                            A && (V.rootPropertyValue = A)
                                        }
                                        var F = x.setPropertyValue(h, w, V.currentValue + (0 === parseFloat(C) ? "" : V.unitType), V.rootPropertyValue, V.scrollData);
                                        x.Hooks.registered[w] && (i(h).rootPropertyValueCache[k] = x.Normalizations.registered[k] ? x.Normalizations.registered[k]("extract", null, F[1]) : F[1]), "transform" === F[0] && (b = !0)
                                    } l.mobileHA && i(h).transformCache.translate3d === a && (i(h).transformCache.translate3d = "(0px, 0px, 0px)", b = !0), b && x.flushTransformCache(h)
                            }
                        }
                        l.display !== a && "none" !== l.display && (v.State.calls[r][2].display = !1), l.visibility && "hidden" !== l.visibility && (v.State.calls[r][2].visibility = !1), l.progress && l.progress.call(o[1], o[1], f, Math.max(0, u + l.duration - t), u), 1 === f && p(r)
                    } v.State.isTicking && P(c)
        }

        function p(e, t) {
            if (!v.State.calls[e]) return !1;
            for (var r = v.State.calls[e][0], n = v.State.calls[e][1], o = v.State.calls[e][2], s = v.State.calls[e][4], l = !1, u = 0, c = r.length; c > u; u++) {
                var p = r[u].element;
                if (t || o.loop || ("none" === o.display && x.setPropertyValue(p, "display", o.display), "hidden" === o.visibility && x.setPropertyValue(p, "visibility", o.visibility)), ($.queue(p)[1] === a || !/\.velocityQueueEntryFlag/i.test($.queue(p)[1])) && i(p)) {
                    i(p).isAnimating = !1, i(p).rootPropertyValueCache = {};
                    var f = !1;
                    $.each(x.Lists.transforms3D, function(e, t) {
                        var r = /^scale/.test(t) ? 1 : 0,
                            n = i(p).transformCache[t];
                        i(p).transformCache[t] !== a && new RegExp("^\\(" + r + "[^.]").test(n) && (f = !0, delete i(p).transformCache[t])
                    }), o.mobileHA && (f = !0, delete i(p).transformCache.translate3d), f && x.flushTransformCache(p), x.Values.removeClass(p, "velocity-animating")
                }
                if (!t && o.complete && !o.loop && u === c - 1) try {
                    o.complete.call(n, n)
                } catch (d) {
                    setTimeout(function() {
                        throw d
                    }, 1)
                }
                s && o.loop !== !0 && s(n), o.loop !== !0 || t || ($.each(i(p).tweensContainer, function(e, t) {
                    /^rotate/.test(e) && 360 === parseFloat(t.endValue) && (t.endValue = 0, t.startValue = 360)
                }), v(p, "reverse", {
                    loop: !0,
                    delay: o.delay
                })), o.queue !== !1 && $.dequeue(p, o.queue)
            }
            v.State.calls[e] = !1;
            for (var g = 0, m = v.State.calls.length; m > g; g++)
                if (v.State.calls[g] !== !1) {
                    l = !0;
                    break
                } l === !1 && (v.State.isTicking = !1, delete v.State.calls, v.State.calls = [])
        }
        var f = function() {
                if (r.documentMode) return r.documentMode;
                for (var e = 7; e > 4; e--) {
                    var t = r.createElement("div");
                    if (t.innerHTML = "\x3c!--[if IE " + e + "]><span></span><![endif]--\x3e", t.getElementsByTagName("span").length) return t = null, e
                }
                return a
            }(),
            d = function() {
                var e = 0;
                return t.webkitRequestAnimationFrame || t.mozRequestAnimationFrame || function(t) {
                    var r = (new Date).getTime(),
                        a;
                    return a = Math.max(0, 16 - (r - e)), e = r + a, setTimeout(function() {
                        t(r + a)
                    }, a)
                }
            }(),
            g = {
                isString: function(e) {
                    return "string" == typeof e
                },
                isArray: Array.isArray || function(e) {
                    return "[object Array]" === Object.prototype.toString.call(e)
                },
                isFunction: function(e) {
                    return "[object Function]" === Object.prototype.toString.call(e)
                },
                isNode: function(e) {
                    return e && e.nodeType
                },
                isNodeList: function(e) {
                    return "object" == typeof e && /^\[object (HTMLCollection|NodeList|Object)\]$/.test(Object.prototype.toString.call(e)) && e.length !== a && (0 === e.length || "object" == typeof e[0] && e[0].nodeType > 0)
                },
                isWrapped: function(e) {
                    return e && (e.jquery || t.Zepto && t.Zepto.zepto.isZ(e))
                },
                isSVG: function(e) {
                    return t.SVGElement && e instanceof SVGElement
                },
                isEmptyObject: function(e) {
                    var t;
                    for (t in e) return !1;
                    return !0
                }
            },
            $, m = !1;
        if (e.fn && e.fn.jquery ? ($ = e, m = !0) : $ = t.Velocity.Utilities, 8 >= f && !m) throw new Error("Velocity: IE8 and below require jQuery to be loaded before Velocity.");
        if (7 >= f) return void(jQuery.fn.velocity = jQuery.fn.animate);
        var y = 400,
            h = "swing",
            v = {
                State: {
                    isMobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),
                    isAndroid: /Android/i.test(navigator.userAgent),
                    isGingerbread: /Android 2\.3\.[3-7]/i.test(navigator.userAgent),
                    isChrome: t.chrome,
                    isFirefox: /Firefox/i.test(navigator.userAgent),
                    prefixElement: r.createElement("div"),
                    prefixMatches: {},
                    scrollAnchor: null,
                    scrollPropertyLeft: null,
                    scrollPropertyTop: null,
                    isTicking: !1,
                    calls: []
                },
                CSS: {},
                Utilities: $,
                Sequences: {},
                Easings: {},
                Promise: t.Promise,
                defaults: {
                    queue: "",
                    duration: y,
                    easing: h,
                    begin: null,
                    complete: null,
                    progress: null,
                    display: a,
                    loop: !1,
                    delay: !1,
                    mobileHA: !0,
                    _cacheValues: !0
                },
                init: function(e) {
                    $.data(e, "velocity", {
                        isSVG: g.isSVG(e),
                        isAnimating: !1,
                        computedStyle: null,
                        tweensContainer: null,
                        rootPropertyValueCache: {},
                        transformCache: {}
                    })
                },
                animate: null,
                hook: null,
                mock: !1,
                version: {
                    major: 1,
                    minor: 0,
                    patch: 0
                },
                debug: !1
            };
        t.pageYOffset !== a ? (v.State.scrollAnchor = t, v.State.scrollPropertyLeft = "pageXOffset", v.State.scrollPropertyTop = "pageYOffset") : (v.State.scrollAnchor = r.documentElement || r.body.parentNode || r.body, v.State.scrollPropertyLeft = "scrollLeft", v.State.scrollPropertyTop = "scrollTop");
        var b = function() {
            function e(e) {
                return -e.tension * e.x - e.friction * e.v
            }

            function t(t, r, a) {
                var n = {
                    x: t.x + a.dx * r,
                    v: t.v + a.dv * r,
                    tension: t.tension,
                    friction: t.friction
                };
                return {
                    dx: n.v,
                    dv: e(n)
                }
            }

            function r(r, a) {
                var n = {
                        dx: r.v,
                        dv: e(r)
                    },
                    o = t(r, .5 * a, n),
                    i = t(r, .5 * a, o),
                    s = t(r, a, i),
                    l = 1 / 6 * (n.dx + 2 * (o.dx + i.dx) + s.dx),
                    u = 1 / 6 * (n.dv + 2 * (o.dv + i.dv) + s.dv);
                return r.x = r.x + l * a, r.v = r.v + u * a, r
            }
            return function a(e, t, n) {
                var o = {
                        x: -1,
                        v: 0,
                        tension: null,
                        friction: null
                    },
                    i = [0],
                    s = 0,
                    l = 1e-4,
                    u = .016,
                    c, p, f;
                for (e = parseFloat(e) || 500, t = parseFloat(t) || 20, n = n || null, o.tension = e, o.friction = t, c = null !== n, c ? (s = a(e, t), p = s / n * u) : p = u;;)
                    if (f = r(f || o, p), i.push(1 + f.x), s += 16, !(Math.abs(f.x) > l && Math.abs(f.v) > l)) break;
                return c ? function(e) {
                    return i[e * (i.length - 1) | 0]
                } : s
            }
        }();
        v.Easings = {
            linear: function(e) {
                return e
            },
            swing: function(e) {
                return .5 - Math.cos(e * Math.PI) / 2
            },
            spring: function(e) {
                return 1 - Math.cos(4.5 * e * Math.PI) * Math.exp(6 * -e)
            }
        }, $.each([
            ["ease", [.25, .1, .25, 1]],
            ["ease-in", [.42, 0, 1, 1]],
            ["ease-out", [0, 0, .58, 1]],
            ["ease-in-out", [.42, 0, .58, 1]],
            ["easeInSine", [.47, 0, .745, .715]],
            ["easeOutSine", [.39, .575, .565, 1]],
            ["easeInOutSine", [.445, .05, .55, .95]],
            ["easeInQuad", [.55, .085, .68, .53]],
            ["easeOutQuad", [.25, .46, .45, .94]],
            ["easeInOutQuad", [.455, .03, .515, .955]],
            ["easeInCubic", [.55, .055, .675, .19]],
            ["easeOutCubic", [.215, .61, .355, 1]],
            ["easeInOutCubic", [.645, .045, .355, 1]],
            ["easeInQuart", [.895, .03, .685, .22]],
            ["easeOutQuart", [.165, .84, .44, 1]],
            ["easeInOutQuart", [.77, 0, .175, 1]],
            ["easeInQuint", [.755, .05, .855, .06]],
            ["easeOutQuint", [.23, 1, .32, 1]],
            ["easeInOutQuint", [.86, 0, .07, 1]],
            ["easeInExpo", [.95, .05, .795, .035]],
            ["easeOutExpo", [.19, 1, .22, 1]],
            ["easeInOutExpo", [1, 0, 0, 1]],
            ["easeInCirc", [.6, .04, .98, .335]],
            ["easeOutCirc", [.075, .82, .165, 1]],
            ["easeInOutCirc", [.785, .135, .15, .86]]
        ], function(e, t) {
            v.Easings[t[0]] = l.apply(null, t[1])
        });
        var x = v.CSS = {
            RegEx: {
                isHex: /^#([A-f\d]{3}){1,2}$/i,
                valueUnwrap: /^[A-z]+\((.*)\)$/i,
                wrappedValueAlreadyExtracted: /[0-9.]+ [0-9.]+ [0-9.]+( [0-9.]+)?/,
                valueSplit: /([A-z]+\(.+\))|(([A-z0-9#-.]+?)(?=\s|$))/gi
            },
            Lists: {
                colors: ["fill", "stroke", "stopColor", "color", "backgroundColor", "borderColor", "borderTopColor", "borderRightColor", "borderBottomColor", "borderLeftColor", "outlineColor"],
                transformsBase: ["translateX", "translateY", "scale", "scaleX", "scaleY", "skewX", "skewY", "rotateZ"],
                transforms3D: ["transformPerspective", "translateZ", "scaleZ", "rotateX", "rotateY"]
            },
            Hooks: {
                templates: {
                    textShadow: ["Color X Y Blur", "black 0px 0px 0px"],
                    boxShadow: ["Color X Y Blur Spread", "black 0px 0px 0px 0px"],
                    clip: ["Top Right Bottom Left", "0px 0px 0px 0px"],
                    backgroundPosition: ["X Y", "0% 0%"],
                    transformOrigin: ["X Y Z", "50% 50% 0px"],
                    perspectiveOrigin: ["X Y", "50% 50%"]
                },
                registered: {},
                register: function() {
                    for (var e = 0; e < x.Lists.colors.length; e++) x.Hooks.templates[x.Lists.colors[e]] = ["Red Green Blue Alpha", "255 255 255 1"];
                    var t, r, a;
                    if (f)
                        for (t in x.Hooks.templates) {
                            r = x.Hooks.templates[t], a = r[0].split(" ");
                            var n = r[1].match(x.RegEx.valueSplit);
                            "Color" === a[0] && (a.push(a.shift()), n.push(n.shift()), x.Hooks.templates[t] = [a.join(" "), n.join(" ")])
                        }
                    for (t in x.Hooks.templates) {
                        r = x.Hooks.templates[t], a = r[0].split(" ");
                        for (var e in a) {
                            var o = t + a[e],
                                i = e;
                            x.Hooks.registered[o] = [t, i]
                        }
                    }
                },
                getRoot: function(e) {
                    var t = x.Hooks.registered[e];
                    return t ? t[0] : e
                },
                cleanRootPropertyValue: function(e, t) {
                    return x.RegEx.valueUnwrap.test(t) && (t = t.match(x.Hooks.RegEx.valueUnwrap)[1]), x.Values.isCSSNullValue(t) && (t = x.Hooks.templates[e][1]), t
                },
                extractValue: function(e, t) {
                    var r = x.Hooks.registered[e];
                    if (r) {
                        var a = r[0],
                            n = r[1];
                        return t = x.Hooks.cleanRootPropertyValue(a, t), t.toString().match(x.RegEx.valueSplit)[n]
                    }
                    return t
                },
                injectValue: function(e, t, r) {
                    var a = x.Hooks.registered[e];
                    if (a) {
                        var n = a[0],
                            o = a[1],
                            i, s;
                        return r = x.Hooks.cleanRootPropertyValue(n, r), i = r.toString().match(x.RegEx.valueSplit), i[o] = t, s = i.join(" ")
                    }
                    return r
                }
            },
            Normalizations: {
                registered: {
                    clip: function(e, t, r) {
                        switch (e) {
                            case "name":
                                return "clip";
                            case "extract":
                                var a;
                                return x.RegEx.wrappedValueAlreadyExtracted.test(r) ? a = r : (a = r.toString().match(x.RegEx.valueUnwrap), a = a ? a[1].replace(/,(\s+)?/g, " ") : r), a;
                            case "inject":
                                return "rect(" + r + ")"
                        }
                    },
                    opacity: function(e, t, r) {
                        if (8 >= f) switch (e) {
                            case "name":
                                return "filter";
                            case "extract":
                                var a = r.toString().match(/alpha\(opacity=(.*)\)/i);
                                return r = a ? a[1] / 100 : 1;
                            case "inject":
                                return t.style.zoom = 1, parseFloat(r) >= 1 ? "" : "alpha(opacity=" + parseInt(100 * parseFloat(r), 10) + ")"
                        } else switch (e) {
                            case "name":
                                return "opacity";
                            case "extract":
                                return r;
                            case "inject":
                                return r
                        }
                    }
                },
                register: function() {
                    9 >= f || v.State.isGingerbread || (x.Lists.transformsBase = x.Lists.transformsBase.concat(x.Lists.transforms3D));
                    for (var e = 0; e < x.Lists.transformsBase.length; e++) ! function() {
                        var t = x.Lists.transformsBase[e];
                        x.Normalizations.registered[t] = function(e, r, n) {
                            switch (e) {
                                case "name":
                                    return "transform";
                                case "extract":
                                    return i(r) === a || i(r).transformCache[t] === a ? /^scale/i.test(t) ? 1 : 0 : i(r).transformCache[t].replace(/[()]/g, "");
                                case "inject":
                                    var o = !1;
                                    switch (t.substr(0, t.length - 1)) {
                                        case "translate":
                                            o = !/(%|px|em|rem|vw|vh|\d)$/i.test(n);
                                            break;
                                        case "scal":
                                        case "scale":
                                            v.State.isAndroid && i(r).transformCache[t] === a && 1 > n && (n = 1), o = !/(\d)$/i.test(n);
                                            break;
                                        case "skew":
                                            o = !/(deg|\d)$/i.test(n);
                                            break;
                                        case "rotate":
                                            o = !/(deg|\d)$/i.test(n)
                                    }
                                    return o || (i(r).transformCache[t] = "(" + n + ")"), i(r).transformCache[t]
                            }
                        }
                    }();
                    for (var e = 0; e < x.Lists.colors.length; e++) ! function() {
                        var t = x.Lists.colors[e];
                        x.Normalizations.registered[t] = function(e, r, n) {
                            switch (e) {
                                case "name":
                                    return t;
                                case "extract":
                                    var o;
                                    if (x.RegEx.wrappedValueAlreadyExtracted.test(n)) o = n;
                                    else {
                                        var i, s = {
                                            black: "rgb(0, 0, 0)",
                                            blue: "rgb(0, 0, 255)",
                                            gray: "rgb(128, 128, 128)",
                                            green: "rgb(0, 128, 0)",
                                            red: "rgb(255, 0, 0)",
                                            white: "rgb(255, 255, 255)"
                                        };
                                        /^[A-z]+$/i.test(n) ? i = s[n] !== a ? s[n] : s.black : x.RegEx.isHex.test(n) ? i = "rgb(" + x.Values.hexToRgb(n).join(" ") + ")" : /^rgba?\(/i.test(n) || (i = s.black), o = (i || n).toString().match(x.RegEx.valueUnwrap)[1].replace(/,(\s+)?/g, " ")
                                    }
                                    return 8 >= f || 3 !== o.split(" ").length || (o += " 1"), o;
                                case "inject":
                                    return 8 >= f ? 4 === n.split(" ").length && (n = n.split(/\s+/).slice(0, 3).join(" ")) : 3 === n.split(" ").length && (n += " 1"), (8 >= f ? "rgb" : "rgba") + "(" + n.replace(/\s+/g, ",").replace(/\.(\d)+(?=,)/g, "") + ")"
                            }
                        }
                    }()
                }
            },
            Names: {
                camelCase: function(e) {
                    return e.replace(/-(\w)/g, function(e, t) {
                        return t.toUpperCase()
                    })
                },
                SVGAttribute: function(e) {
                    var t = "width|height|x|y|cx|cy|r|rx|ry|x1|x2|y1|y2";
                    return (f || v.State.isAndroid && !v.State.isChrome) && (t += "|transform"), new RegExp("^(" + t + ")$", "i").test(e)
                },
                prefixCheck: function(e) {
                    if (v.State.prefixMatches[e]) return [v.State.prefixMatches[e], !0];
                    for (var t = ["", "Webkit", "Moz", "ms", "O"], r = 0, a = t.length; a > r; r++) {
                        var n;
                        if (n = 0 === r ? e : t[r] + e.replace(/^\w/, function(e) {
                                return e.toUpperCase()
                            }), g.isString(v.State.prefixElement.style[n])) return v.State.prefixMatches[e] = n, [n, !0]
                    }
                    return [e, !1]
                }
            },
            Values: {
                hexToRgb: function(e) {
                    var t = /^#?([a-f\d])([a-f\d])([a-f\d])$/i,
                        r = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,
                        a;
                    return e = e.replace(t, function(e, t, r, a) {
                        return t + t + r + r + a + a
                    }), a = r.exec(e), a ? [parseInt(a[1], 16), parseInt(a[2], 16), parseInt(a[3], 16)] : [0, 0, 0]
                },
                isCSSNullValue: function(e) {
                    return 0 == e || /^(none|auto|transparent|(rgba\(0, ?0, ?0, ?0\)))$/i.test(e)
                },
                getUnitType: function(e) {
                    return /^(rotate|skew)/i.test(e) ? "deg" : /(^(scale|scaleX|scaleY|scaleZ|alpha|flexGrow|flexHeight|zIndex|fontWeight)$)|((opacity|red|green|blue|alpha)$)/i.test(e) ? "" : "px"
                },
                getDisplayType: function(e) {
                    var t = e.tagName.toString().toLowerCase();
                    return /^(b|big|i|small|tt|abbr|acronym|cite|code|dfn|em|kbd|strong|samp|var|a|bdo|br|img|map|object|q|script|span|sub|sup|button|input|label|select|textarea)$/i.test(t) ? "inline" : /^(li)$/i.test(t) ? "list-item" : /^(tr)$/i.test(t) ? "table-row" : "block"
                },
                addClass: function(e, t) {
                    e.classList ? e.classList.add(t) : e.className += (e.className.length ? " " : "") + t
                },
                removeClass: function(e, t) {
                    e.classList ? e.classList.remove(t) : e.className = e.className.toString().replace(new RegExp("(^|\\s)" + t.split(" ").join("|") + "(\\s|$)", "gi"), " ")
                }
            },
            getPropertyValue: function(e, r, n, o) {
                function s(e, r) {
                    function n() {
                        u && x.setPropertyValue(e, "display", "none")
                    }
                    var l = 0;
                    if (8 >= f) l = $.css(e, r);
                    else {
                        var u = !1;
                        if (/^(width|height)$/.test(r) && 0 === x.getPropertyValue(e, "display") && (u = !0, x.setPropertyValue(e, "display", x.Values.getDisplayType(e))), !o) {
                            if ("height" === r && "border-box" !== x.getPropertyValue(e, "boxSizing").toString().toLowerCase()) {
                                var c = e.offsetHeight - (parseFloat(x.getPropertyValue(e, "borderTopWidth")) || 0) - (parseFloat(x.getPropertyValue(e, "borderBottomWidth")) || 0) - (parseFloat(x.getPropertyValue(e, "paddingTop")) || 0) - (parseFloat(x.getPropertyValue(e, "paddingBottom")) || 0);
                                return n(), c
                            }
                            if ("width" === r && "border-box" !== x.getPropertyValue(e, "boxSizing").toString().toLowerCase()) {
                                var p = e.offsetWidth - (parseFloat(x.getPropertyValue(e, "borderLeftWidth")) || 0) - (parseFloat(x.getPropertyValue(e, "borderRightWidth")) || 0) - (parseFloat(x.getPropertyValue(e, "paddingLeft")) || 0) - (parseFloat(x.getPropertyValue(e, "paddingRight")) || 0);
                                return n(), p
                            }
                        }
                        var d;
                        d = i(e) === a ? t.getComputedStyle(e, null) : i(e).computedStyle ? i(e).computedStyle : i(e).computedStyle = t.getComputedStyle(e, null), (f || v.State.isFirefox) && "borderColor" === r && (r = "borderTopColor"), l = 9 === f && "filter" === r ? d.getPropertyValue(r) : d[r], ("" === l || null === l) && (l = e.style[r]), n()
                    }
                    if ("auto" === l && /^(top|right|bottom|left)$/i.test(r)) {
                        var g = s(e, "position");
                        ("fixed" === g || "absolute" === g && /top|left/i.test(r)) && (l = $(e).position()[r] + "px")
                    }
                    return l
                }
                var l;
                if (x.Hooks.registered[r]) {
                    var u = r,
                        c = x.Hooks.getRoot(u);
                    n === a && (n = x.getPropertyValue(e, x.Names.prefixCheck(c)[0])), x.Normalizations.registered[c] && (n = x.Normalizations.registered[c]("extract", e, n)), l = x.Hooks.extractValue(u, n)
                } else if (x.Normalizations.registered[r]) {
                    var p, d;
                    p = x.Normalizations.registered[r]("name", e), "transform" !== p && (d = s(e, x.Names.prefixCheck(p)[0]), x.Values.isCSSNullValue(d) && x.Hooks.templates[r] && (d = x.Hooks.templates[r][1])), l = x.Normalizations.registered[r]("extract", e, d)
                }
                return /^[\d-]/.test(l) || (l = i(e) && i(e).isSVG && x.Names.SVGAttribute(r) ? /^(height|width)$/i.test(r) ? e.getBBox()[r] : e.getAttribute(r) : s(e, x.Names.prefixCheck(r)[0])), x.Values.isCSSNullValue(l) && (l = 0), v.debug >= 2 && console.log("Get " + r + ": " + l), l
            },
            setPropertyValue: function(e, r, a, n, o) {
                var s = r;
                if ("scroll" === r) o.container ? o.container["scroll" + o.direction] = a : "Left" === o.direction ? t.scrollTo(a, o.alternateValue) : t.scrollTo(o.alternateValue, a);
                else if (x.Normalizations.registered[r] && "transform" === x.Normalizations.registered[r]("name", e)) x.Normalizations.registered[r]("inject", e, a), s = "transform", a = i(e).transformCache[r];
                else {
                    if (x.Hooks.registered[r]) {
                        var l = r,
                            u = x.Hooks.getRoot(r);
                        n = n || x.getPropertyValue(e, u), a = x.Hooks.injectValue(l, a, n), r = u
                    }
                    if (x.Normalizations.registered[r] && (a = x.Normalizations.registered[r]("inject", e, a), r = x.Normalizations.registered[r]("name", e)), s = x.Names.prefixCheck(r)[0], 8 >= f) try {
                        e.style[s] = a
                    } catch (c) {
                        v.debug && console.log("Browser does not support [" + a + "] for [" + s + "]")
                    } else i(e) && i(e).isSVG && x.Names.SVGAttribute(r) ? e.setAttribute(r, a) : e.style[s] = a;
                    v.debug >= 2 && console.log("Set " + r + " (" + s + "): " + a)
                }
                return [s, a]
            },
            flushTransformCache: function(e) {
                function t(t) {
                    return parseFloat(x.getPropertyValue(e, t))
                }
                var r = "";
                if ((f || v.State.isAndroid && !v.State.isChrome) && i(e).isSVG) {
                    var a = {
                        translate: [t("translateX"), t("translateY")],
                        skewX: [t("skewX")],
                        skewY: [t("skewY")],
                        scale: 1 !== t("scale") ? [t("scale"), t("scale")] : [t("scaleX"), t("scaleY")],
                        rotate: [t("rotateZ"), 0, 0]
                    };
                    $.each(i(e).transformCache, function(e) {
                        /^translate/i.test(e) ? e = "translate" : /^scale/i.test(e) ? e = "scale" : /^rotate/i.test(e) && (e = "rotate"), a[e] && (r += e + "(" + a[e].join(" ") + ") ", delete a[e])
                    })
                } else {
                    var n, o;
                    $.each(i(e).transformCache, function(t) {
                        return n = i(e).transformCache[t], "transformPerspective" === t ? (o = n, !0) : (9 === f && "rotateZ" === t && (t = "rotate"), void(r += t + n + " "))
                    }), o && (r = "perspective" + o + " " + r)
                }
                x.setPropertyValue(e, "transform", r)
            }
        };
        x.Hooks.register(), x.Normalizations.register(), v.hook = function(e, t, r) {
            var n = a;
            return e = o(e), $.each(e, function(e, o) {
                if (i(o) === a && v.init(o), r === a) n === a && (n = v.CSS.getPropertyValue(o, t));
                else {
                    var s = v.CSS.setPropertyValue(o, t, r);
                    "transform" === s[0] && v.CSS.flushTransformCache(o), n = s
                }
            }), n
        };
        var S = function() {
            function e() {
                return f ? k.promise || null : d
            }

            function s() {
                function e(e) {
                    function f(e, t) {
                        var r = a,
                            n = a,
                            i = a;
                        return g.isArray(e) ? (r = e[0], !g.isArray(e[1]) && /^[\d-]/.test(e[1]) || g.isFunction(e[1]) || x.RegEx.isHex.test(e[1]) ? i = e[1] : (g.isString(e[1]) && !x.RegEx.isHex.test(e[1]) || g.isArray(e[1])) && (n = t ? e[1] : u(e[1], s.duration), e[2] !== a && (i = e[2]))) : r = e, t || (n = n || s.easing), g.isFunction(r) && (r = r.call(o, V, w)), g.isFunction(i) && (i = i.call(o, V, w)), [r || 0, n, i]
                    }

                    function d(e, t) {
                        var r, a;
                        return a = (t || 0).toString().toLowerCase().replace(/[%A-z]+$/, function(e) {
                            return r = e, ""
                        }), r || (r = x.Values.getUnitType(e)), [a, r]
                    }

                    function m() {
                        var e = {
                                myParent: o.parentNode || r.body,
                                position: x.getPropertyValue(o, "position"),
                                fontSize: x.getPropertyValue(o, "fontSize")
                            },
                            a = e.position === L.lastPosition && e.myParent === L.lastParent,
                            n = e.fontSize === L.lastFontSize;
                        L.lastParent = e.myParent, L.lastPosition = e.position, L.lastFontSize = e.fontSize;
                        var s = 100,
                            l = {};
                        if (n && a) l.emToPx = L.lastEmToPx, l.percentToPxWidth = L.lastPercentToPxWidth, l.percentToPxHeight = L.lastPercentToPxHeight;
                        else {
                            var u = i(o).isSVG ? r.createElementNS("http://www.w3.org/2000/svg", "rect") : r.createElement("div");
                            v.init(u), e.myParent.appendChild(u), $.each(["overflow", "overflowX", "overflowY"], function(e, t) {
                                v.CSS.setPropertyValue(u, t, "hidden")
                            }), v.CSS.setPropertyValue(u, "position", e.position), v.CSS.setPropertyValue(u, "fontSize", e.fontSize), v.CSS.setPropertyValue(u, "boxSizing", "content-box"), $.each(["minWidth", "maxWidth", "width", "minHeight", "maxHeight", "height"], function(e, t) {
                                v.CSS.setPropertyValue(u, t, s + "%")
                            }), v.CSS.setPropertyValue(u, "paddingLeft", s + "em"), l.percentToPxWidth = L.lastPercentToPxWidth = (parseFloat(x.getPropertyValue(u, "width", null, !0)) || 1) / s, l.percentToPxHeight = L.lastPercentToPxHeight = (parseFloat(x.getPropertyValue(u, "height", null, !0)) || 1) / s, l.emToPx = L.lastEmToPx = (parseFloat(x.getPropertyValue(u, "paddingLeft")) || 1) / s, e.myParent.removeChild(u)
                        }
                        return null === L.remToPx && (L.remToPx = parseFloat(x.getPropertyValue(r.body, "fontSize")) || 16), null === L.vwToPx && (L.vwToPx = parseFloat(t.innerWidth) / 100, L.vhToPx = parseFloat(t.innerHeight) / 100), l.remToPx = L.remToPx, l.vwToPx = L.vwToPx, l.vhToPx = L.vhToPx, v.debug >= 1 && console.log("Unit ratios: " + JSON.stringify(l), o), l
                    }
                    if (s.begin && 0 === V) try {
                        s.begin.call(h, h)
                    } catch (y) {
                        setTimeout(function() {
                            throw y
                        }, 1)
                    }
                    if ("scroll" === A) {
                        var S = /^x$/i.test(s.axis) ? "Left" : "Top",
                            C = parseFloat(s.offset) || 0,
                            T, F, E;
                        s.container ? g.isWrapped(s.container) || g.isNode(s.container) ? (s.container = s.container[0] || s.container, T = s.container["scroll" + S], E = T + $(o).position()[S.toLowerCase()] + C) : s.container = null : (T = v.State.scrollAnchor[v.State["scrollProperty" + S]], F = v.State.scrollAnchor[v.State["scrollProperty" + ("Left" === S ? "Top" : "Left")]], E = $(o).offset()[S.toLowerCase()] + C), l = {
                            scroll: {
                                rootPropertyValue: !1,
                                startValue: T,
                                currentValue: T,
                                endValue: E,
                                unitType: "",
                                easing: s.easing,
                                scrollData: {
                                    container: s.container,
                                    direction: S,
                                    alternateValue: F
                                }
                            },
                            element: o
                        }, v.debug && console.log("tweensContainer (scroll): ", l.scroll, o)
                    } else if ("reverse" === A) {
                        if (!i(o).tweensContainer) return void $.dequeue(o, s.queue);
                        "none" === i(o).opts.display && (i(o).opts.display = "auto"), "hidden" === i(o).opts.visibility && (i(o).opts.visibility = "visible"), i(o).opts.loop = !1, i(o).opts.begin = null, i(o).opts.complete = null, P.easing || delete s.easing, P.duration || delete s.duration, s = $.extend({}, i(o).opts, s);
                        var j = $.extend(!0, {}, i(o).tweensContainer);
                        for (var H in j)
                            if ("element" !== H) {
                                var N = j[H].startValue;
                                j[H].startValue = j[H].currentValue = j[H].endValue, j[H].endValue = N, g.isEmptyObject(P) || (j[H].easing = s.easing), v.debug && console.log("reverse tweensContainer (" + H + "): " + JSON.stringify(j[H]), o)
                            } l = j
                    } else if ("start" === A) {
                        var j;
                        i(o).tweensContainer && i(o).isAnimating === !0 && (j = i(o).tweensContainer), $.each(b, function(e, t) {
                            if (RegExp("^" + x.Lists.colors.join("$|^") + "$").test(e)) {
                                var r = f(t, !0),
                                    n = r[0],
                                    o = r[1],
                                    i = r[2];
                                if (x.RegEx.isHex.test(n)) {
                                    for (var s = ["Red", "Green", "Blue"], l = x.Values.hexToRgb(n), u = i ? x.Values.hexToRgb(i) : a, c = 0; c < s.length; c++) b[e + s[c]] = [l[c], o, u ? u[c] : u];
                                    delete b[e]
                                }
                            }
                        });
                        for (var z in b) {
                            var q = f(b[z]),
                                R = q[0],
                                M = q[1],
                                I = q[2];
                            z = x.Names.camelCase(z);
                            var W = x.Hooks.getRoot(z),
                                B = !1;
                            if (i(o).isSVG || x.Names.prefixCheck(W)[1] !== !1 || x.Normalizations.registered[W] !== a) {
                                (s.display !== a && null !== s.display && "none" !== s.display || s.visibility && "hidden" !== s.visibility) && /opacity|filter/.test(z) && !I && 0 !== R && (I = 0), s._cacheValues && j && j[z] ? (I === a && (I = j[z].endValue + j[z].unitType), B = i(o).rootPropertyValueCache[W]) : x.Hooks.registered[z] ? I === a ? (B = x.getPropertyValue(o, W), I = x.getPropertyValue(o, z, B)) : B = x.Hooks.templates[W][1] : I === a && (I = x.getPropertyValue(o, z));
                                var G, D, X, Y = !1;
                                if (G = d(z, I), I = G[0], X = G[1], G = d(z, R), R = G[0].replace(/^([+-\/*])=/, function(e, t) {
                                        return Y = t, ""
                                    }), D = G[1], I = parseFloat(I) || 0, R = parseFloat(R) || 0, "%" === D && (/^(fontSize|lineHeight)$/.test(z) ? (R /= 100, D = "em") : /^scale/.test(z) ? (R /= 100, D = "") : /(Red|Green|Blue)$/i.test(z) && (R = R / 100 * 255, D = "")), /[\/*]/.test(Y)) D = X;
                                else if (X !== D && 0 !== I)
                                    if (0 === R) D = X;
                                    else {
                                        p = p || m();
                                        var Q = /margin|padding|left|right|width|text|word|letter/i.test(z) || /X$/.test(z) || "x" === z ? "x" : "y";
                                        switch (X) {
                                            case "%":
                                                I *= "x" === Q ? p.percentToPxWidth : p.percentToPxHeight;
                                                break;
                                            case "px":
                                                break;
                                            default:
                                                I *= p[X + "ToPx"]
                                        }
                                        switch (D) {
                                            case "%":
                                                I *= 1 / ("x" === Q ? p.percentToPxWidth : p.percentToPxHeight);
                                                break;
                                            case "px":
                                                break;
                                            default:
                                                I *= 1 / p[D + "ToPx"]
                                        }
                                    } switch (Y) {
                                    case "+":
                                        R = I + R;
                                        break;
                                    case "-":
                                        R = I - R;
                                        break;
                                    case "*":
                                        R = I * R;
                                        break;
                                    case "/":
                                        R = I / R
                                }
                                l[z] = {
                                    rootPropertyValue: B,
                                    startValue: I,
                                    currentValue: I,
                                    endValue: R,
                                    unitType: D,
                                    easing: M
                                }, v.debug && console.log("tweensContainer (" + z + "): " + JSON.stringify(l[z]), o)
                            } else v.debug && console.log("Skipping [" + W + "] due to a lack of browser support.")
                        }
                        l.element = o
                    }
                    l.element && (x.Values.addClass(o, "velocity-animating"), O.push(l), "" === s.queue && (i(o).tweensContainer = l, i(o).opts = s), i(o).isAnimating = !0, V === w - 1 ? (v.State.calls.length > 1e4 && (v.State.calls = n(v.State.calls)), v.State.calls.push([O, h, s, null, k.resolver]), v.State.isTicking === !1 && (v.State.isTicking = !0, c())) : V++)
                }
                var o = this,
                    s = $.extend({}, v.defaults, P),
                    l = {},
                    p;
                if (i(o) === a && v.init(o), parseFloat(s.delay) && s.queue !== !1 && $.queue(o, s.queue, function(e) {
                        v.velocityQueueEntryFlag = !0, i(o).delayTimer = {
                            setTimeout: setTimeout(e, parseFloat(s.delay)),
                            next: e
                        }
                    }), v.mock === !0) s.duration = 1;
                else switch (s.duration.toString().toLowerCase()) {
                    case "fast":
                        s.duration = 200;
                        break;
                    case "normal":
                        s.duration = y;
                        break;
                    case "slow":
                        s.duration = 600;
                        break;
                    default:
                        s.duration = parseFloat(s.duration) || 1
                }
                s.easing = u(s.easing, s.duration), s.begin && !g.isFunction(s.begin) && (s.begin = null), s.progress && !g.isFunction(s.progress) && (s.progress = null), s.complete && !g.isFunction(s.complete) && (s.complete = null), s.display !== a && null !== s.display && (s.display = s.display.toString().toLowerCase(), "auto" === s.display && (s.display = v.CSS.Values.getDisplayType(o))), s.visibility && (s.visibility = s.visibility.toString().toLowerCase()), s.mobileHA = s.mobileHA && v.State.isMobile && !v.State.isGingerbread, s.queue === !1 ? s.delay ? setTimeout(e, s.delay) : e() : $.queue(o, s.queue, function(t, r) {
                    return r === !0 ? (k.promise && k.resolver(h), !0) : (v.velocityQueueEntryFlag = !0, void e(t))
                }), "" !== s.queue && "fx" !== s.queue || "inprogress" === $.queue(o)[0] || $.dequeue(o)
            }
            var l = arguments[0] && ($.isPlainObject(arguments[0].properties) && !arguments[0].properties.names || g.isString(arguments[0].properties)),
                f, d, m, h, b, P;
            if (g.isWrapped(this) ? (f = !1, m = 0, h = this, d = this) : (f = !0, m = 1, h = l ? arguments[0].elements : arguments[0]), h = o(h)) {
                l ? (b = arguments[0].properties, P = arguments[0].options) : (b = arguments[m], P = arguments[m + 1]);
                var w = h.length,
                    V = 0;
                if ("stop" !== b && !$.isPlainObject(P)) {
                    var C = m + 1;
                    P = {};
                    for (var T = C; T < arguments.length; T++) g.isArray(arguments[T]) || !/fast|normal|slow/i.test(arguments[T].toString()) && !/^\d/.test(arguments[T]) ? g.isString(arguments[T]) || g.isArray(arguments[T]) ? P.easing = arguments[T] : g.isFunction(arguments[T]) && (P.complete = arguments[T]) : P.duration = arguments[T]
                }
                var k = {
                    promise: null,
                    resolver: null,
                    rejecter: null
                };
                f && v.Promise && (k.promise = new v.Promise(function(e, t) {
                    k.resolver = e, k.rejecter = t
                }));
                var A;
                switch (b) {
                    case "scroll":
                        A = "scroll";
                        break;
                    case "reverse":
                        A = "reverse";
                        break;
                    case "stop":
                        $.each(h, function(e, t) {
                            i(t) && i(t).delayTimer && (clearTimeout(i(t).delayTimer.setTimeout), i(t).delayTimer.next && i(t).delayTimer.next(), delete i(t).delayTimer)
                        });
                        var F = [];
                        return $.each(v.State.calls, function(e, t) {
                            t && $.each(t[1], function(r, n) {
                                var o = g.isString(P) ? P : "";
                                return P !== a && t[2].queue !== o ? !0 : void $.each(h, function(t, r) {
                                    r === n && (P !== a && ($.each($.queue(r, o), function(e, t) {
                                        g.isFunction(t) && t(null, !0)
                                    }), $.queue(r, o, [])), i(r) && "" === o && $.each(i(r).tweensContainer, function(e, t) {
                                        t.endValue = t.currentValue
                                    }), F.push(e))
                                })
                            })
                        }), $.each(F, function(e, t) {
                            p(t, !0)
                        }), k.promise && k.resolver(h), e();
                    default:
                        if (!$.isPlainObject(b) || g.isEmptyObject(b)) {
                            if (g.isString(b) && v.Sequences[b]) {
                                var E = $.extend({}, P),
                                    j = E.duration,
                                    H = E.delay || 0;
                                return E.backwards === !0 && (h = h.reverse()), $.each(h, function(e, t) {
                                    parseFloat(E.stagger) ? E.delay = H + parseFloat(E.stagger) * e : g.isFunction(E.stagger) && (E.delay = H + E.stagger.call(t, e, w)), E.drag && (E.duration = parseFloat(j) || (/^(callout|transition)/.test(b) ? 1e3 : y), E.duration = Math.max(E.duration * (E.backwards ? 1 - e / w : (e + 1) / w), .75 * E.duration, 200)), v.Sequences[b].call(t, t, E || {}, e, w, h, k.promise ? k : a)
                                }), e()
                            }
                            var N = "Velocity: First argument (" + b + ") was not a property map, a known action, or a registered sequence. Aborting.";
                            return k.promise ? k.rejecter(new Error(N)) : console.log(N), e()
                        }
                        A = "start"
                }
                var L = {
                        lastParent: null,
                        lastPosition: null,
                        lastFontSize: null,
                        lastPercentToPxWidth: null,
                        lastPercentToPxHeight: null,
                        lastEmToPx: null,
                        remToPx: null,
                        vwToPx: null,
                        vhToPx: null
                    },
                    O = [];
                $.each(h, function(e, t) {
                    g.isNode(t) && s.call(t)
                });
                var E = $.extend({}, v.defaults, P),
                    z;
                if (E.loop = parseInt(E.loop), z = 2 * E.loop - 1, E.loop)
                    for (var q = 0; z > q; q++) {
                        var R = {
                            delay: E.delay
                        };
                        q === z - 1 && (R.display = E.display, R.visibility = E.visibility, R.complete = E.complete), S(h, "reverse", R)
                    }
                return e()
            }
        };
        v = $.extend(S, v), v.animate = S;
        var P = t.requestAnimationFrame || d;
        return v.State.isMobile || r.hidden === a || r.addEventListener("visibilitychange", function() {
            r.hidden ? (P = function(e) {
                return setTimeout(function() {
                    e(!0)
                }, 16)
            }, c()) : P = t.requestAnimationFrame || d
        }), e.Velocity = v, e !== t && (e.fn.velocity = S, e.fn.velocity.defaults = v.defaults), $.each(["Down", "Up"], function(e, t) {
            v.Sequences["slide" + t] = function(e, r, n, o, i, s) {
                var l = $.extend({}, r),
                    u = l.begin,
                    c = l.complete,
                    p = {
                        height: "",
                        marginTop: "",
                        marginBottom: "",
                        paddingTop: "",
                        paddingBottom: ""
                    },
                    f = {};
                l.display === a && (l.display = "Down" === t ? "inline" === v.CSS.Values.getDisplayType(e) ? "inline-block" : "block" : "none"), l.begin = function() {
                    u && u.call(i, i), f.overflow = e.style.overflow, e.style.overflow = "hidden";
                    for (var r in p) {
                        f[r] = e.style[r];
                        var a = v.CSS.getPropertyValue(e, r);
                        p[r] = "Down" === t ? [a, 0] : [0, a]
                    }
                }, l.complete = function() {
                    for (var t in f) e.style[t] = f[t];
                    c && c.call(i, i), s && s.resolver(i)
                }, v(e, p, l)
            }
        }), $.each(["In", "Out"], function(e, t) {
            v.Sequences["fade" + t] = function(e, r, n, o, i, s) {
                var l = $.extend({}, r),
                    u = {
                        opacity: "In" === t ? 1 : 0
                    },
                    c = l.complete;
                l.complete = n !== o - 1 ? l.begin = null : function() {
                    c && c.call(i, i), s && s.resolver(i)
                }, l.display === a && (l.display = "In" === t ? "auto" : "none"), v(this, u, l)
            }
        }), v
    }(window.jQuery || window.Zepto || window, window, document)
});
! function(t) {
    "object" == typeof module && "object" == typeof module.exports ? module.exports = t() : "function" == typeof define && define.amd ? define(["velocity"], t) : t()
}(function() {
    return function(t, a, e, r) {
        if (!t.Velocity || !t.Velocity.Utilities) return void(a.console && console.log("Velocity UI Pack: Velocity must be loaded first. Aborting."));
        if (!t.Velocity.version || t.Velocity.version.major <= 0 && t.Velocity.version.minor <= 11 && t.Velocity.version.patch < 8) {
            var i = "Velocity UI Pack: You need to update Velocity (jquery.velocity.js) to a newer version. Visit http://github.com/julianshapiro/velocity.";
            throw alert(i), new Error(i)
        }
        t.Velocity.RegisterUI = function(a, e) {
            function i(a, e, r, i) {
                var n = 0,
                    s;
                t.Velocity.Utilities.each(a.nodeType ? [a] : a, function(a, e) {
                    i && (r += a * i), s = e.parentNode, t.Velocity.Utilities.each(["height", "paddingTop", "paddingBottom", "marginTop", "marginBottom"], function(a, r) {
                        n += parseFloat(t.Velocity.CSS.getPropertyValue(e, r))
                    })
                }), t.Velocity.animate(s, {
                    height: ("In" === e ? "+" : "-") + "=" + n
                }, {
                    queue: !1,
                    easing: "ease-in-out",
                    duration: r * ("In" === e ? .6 : 1)
                })
            }
            return t.Velocity.Sequences[a] = function(n, s, l, o, c, u) {
                function f() {
                    s.display !== r && "none" !== s.display || !/Out$/.test(a) || t.Velocity.Utilities.each(c.nodeType ? [c] : c, function(a, e) {
                        t.Velocity.CSS.setPropertyValue(e, "display", "none")
                    }), s.complete && s.complete.call(c, c), u && u.resolver(c || n)
                }
                for (var p = l === o - 1, d = 0; d < e.calls.length; d++) {
                    var y = e.calls[d],
                        m = y[0],
                        X = s.duration || e.defaultDuration || 1e3,
                        g = y[1],
                        Y = y[2] || {},
                        O = {};
                    if (O.duration = X * (g || 1), O.queue = s.queue || "", O.easing = Y.easing || "ease", O.delay = Y.delay || 0, O._cacheValues = Y._cacheValues || !0, 0 === d) {
                        if (O.delay += s.delay || 0, 0 === l && (O.begin = function() {
                                s.begin && s.begin.call(c, c);
                                var t = a.match(/(In|Out)$/);
                                s.animateParentHeight && t && i(c, t[0], X + O.delay, s.stagger)
                            }), null !== s.display)
                            if (s.display !== r && "none" !== s.display) O.display = s.display;
                            else if (/In$/.test(a)) {
                            var v = t.Velocity.CSS.Values.getDisplayType(n);
                            O.display = "inline" === v ? "inline-block" : v
                        }
                        s.visibility && "hidden" !== s.visibility && (O.visibility = s.visibility)
                    }
                    d === e.calls.length - 1 && (O.complete = function() {
                        if (e.reset) {
                            for (var a in e.reset) {
                                var r = e.reset[a];
                                ("string" == typeof r || "number" == typeof r) && (e.reset[a] = [e.reset[a], e.reset[a]])
                            }
                            var i = {
                                duration: 0,
                                queue: !1
                            };
                            p && (i.complete = f), t.Velocity.animate(n, e.reset, i)
                        } else p && f()
                    }, "hidden" === s.visibility && (O.visibility = s.visibility)), t.Velocity.animate(n, m, O)
                }
            }, t.Velocity
        }, t.Velocity.RegisterUI.packagedEffects = {
            "callout.bounce": {
                defaultDuration: 550,
                calls: [
                    [{
                        translateY: -30
                    }, .25],
                    [{
                        translateY: 0
                    }, .125],
                    [{
                        translateY: -15
                    }, .125],
                    [{
                        translateY: 0
                    }, .25]
                ]
            },
            "callout.shake": {
                defaultDuration: 800,
                calls: [
                    [{
                        translateX: -11
                    }, .125],
                    [{
                        translateX: 11
                    }, .125],
                    [{
                        translateX: -11
                    }, .125],
                    [{
                        translateX: 11
                    }, .125],
                    [{
                        translateX: -11
                    }, .125],
                    [{
                        translateX: 11
                    }, .125],
                    [{
                        translateX: -11
                    }, .125],
                    [{
                        translateX: 0
                    }, .125]
                ]
            },
            "callout.flash": {
                defaultDuration: 1100,
                calls: [
                    [{
                        opacity: [0, "easeInOutQuad", 1]
                    }, .25],
                    [{
                        opacity: [1, "easeInOutQuad"]
                    }, .25],
                    [{
                        opacity: [0, "easeInOutQuad"]
                    }, .25],
                    [{
                        opacity: [1, "easeInOutQuad"]
                    }, .25]
                ]
            },
            "callout.pulse": {
                defaultDuration: 825,
                calls: [
                    [{
                        scaleX: 1.1,
                        scaleY: 1.1
                    }, .5],
                    [{
                        scaleX: 1,
                        scaleY: 1
                    }, .5]
                ]
            },
            "callout.swing": {
                defaultDuration: 950,
                calls: [
                    [{
                        rotateZ: 15
                    }, .2],
                    [{
                        rotateZ: -10
                    }, .2],
                    [{
                        rotateZ: 5
                    }, .2],
                    [{
                        rotateZ: -5
                    }, .2],
                    [{
                        rotateZ: 0
                    }, .2]
                ]
            },
            "callout.tada": {
                defaultDuration: 1e3,
                calls: [
                    [{
                        scaleX: .9,
                        scaleY: .9,
                        rotateZ: -3
                    }, .1],
                    [{
                        scaleX: 1.1,
                        scaleY: 1.1,
                        rotateZ: 3
                    }, .1],
                    [{
                        scaleX: 1.1,
                        scaleY: 1.1,
                        rotateZ: -3
                    }, .1],
                    ["reverse", .125],
                    ["reverse", .125],
                    ["reverse", .125],
                    ["reverse", .125],
                    ["reverse", .125],
                    [{
                        scaleX: 1,
                        scaleY: 1,
                        rotateZ: 0
                    }, .2]
                ]
            },
            "transition.fadeIn": {
                defaultDuration: 500,
                calls: [
                    [{
                        opacity: [1, 0]
                    }]
                ]
            },
            "transition.fadeOut": {
                defaultDuration: 500,
                calls: [
                    [{
                        opacity: [0, 1]
                    }]
                ]
            },
            "transition.flipXIn": {
                defaultDuration: 700,
                calls: [
                    [{
                        opacity: [1, 0],
                        transformPerspective: [800, 800],
                        rotateY: [0, -55]
                    }]
                ],
                reset: {
                    transformPerspective: 0
                }
            },
            "transition.flipXOut": {
                defaultDuration: 700,
                calls: [
                    [{
                        opacity: [0, 1],
                        transformPerspective: [800, 800],
                        rotateY: 55
                    }]
                ],
                reset: {
                    transformPerspective: 0,
                    rotateY: 0
                }
            },
            "transition.flipYIn": {
                defaultDuration: 800,
                calls: [
                    [{
                        opacity: [1, 0],
                        transformPerspective: [800, 800],
                        rotateX: [0, -45]
                    }]
                ],
                reset: {
                    transformPerspective: 0
                }
            },
            "transition.flipYOut": {
                defaultDuration: 800,
                calls: [
                    [{
                        opacity: [0, 1],
                        transformPerspective: [800, 800],
                        rotateX: 25
                    }]
                ],
                reset: {
                    transformPerspective: 0,
                    rotateX: 0
                }
            },
            "transition.flipBounceXIn": {
                defaultDuration: 900,
                calls: [
                    [{
                        opacity: [.725, 0],
                        transformPerspective: [400, 400],
                        rotateY: [-10, 90]
                    }, .5],
                    [{
                        opacity: .8,
                        rotateY: 10
                    }, .25],
                    [{
                        opacity: 1,
                        rotateY: 0
                    }, .25]
                ],
                reset: {
                    transformPerspective: 0
                }
            },
            "transition.flipBounceXOut": {
                defaultDuration: 800,
                calls: [
                    [{
                        opacity: [.9, 1],
                        transformPerspective: [400, 400],
                        rotateY: -10
                    }, .5],
                    [{
                        opacity: 0,
                        rotateY: 90
                    }, .5]
                ],
                reset: {
                    transformPerspective: 0,
                    rotateY: 0
                }
            },
            "transition.flipBounceYIn": {
                defaultDuration: 850,
                calls: [
                    [{
                        opacity: [.725, 0],
                        transformPerspective: [400, 400],
                        rotateX: [-10, 90]
                    }, .5],
                    [{
                        opacity: .8,
                        rotateX: 10
                    }, .25],
                    [{
                        opacity: 1,
                        rotateX: 0
                    }, .25]
                ],
                reset: {
                    transformPerspective: 0
                }
            },
            "transition.flipBounceYOut": {
                defaultDuration: 800,
                calls: [
                    [{
                        opacity: [.9, 1],
                        transformPerspective: [400, 400],
                        rotateX: -15
                    }, .5],
                    [{
                        opacity: 0,
                        rotateX: 90
                    }, .5]
                ],
                reset: {
                    transformPerspective: 0,
                    rotateX: 0
                }
            },
            "transition.swoopIn": {
                defaultDuration: 850,
                calls: [
                    [{
                        opacity: [1, 0],
                        transformOriginX: ["100%", "50%"],
                        transformOriginY: ["100%", "100%"],
                        scaleX: [1, 0],
                        scaleY: [1, 0],
                        translateX: [0, -700],
                        translateZ: 0
                    }]
                ],
                reset: {
                    transformOriginX: "50%",
                    transformOriginY: "50%"
                }
            },
            "transition.swoopOut": {
                defaultDuration: 850,
                calls: [
                    [{
                        opacity: [0, 1],
                        transformOriginX: ["50%", "100%"],
                        transformOriginY: ["100%", "100%"],
                        scaleX: 0,
                        scaleY: 0,
                        translateX: -700,
                        translateZ: 0
                    }]
                ],
                reset: {
                    transformOriginX: "50%",
                    transformOriginY: "50%",
                    scaleX: 1,
                    scaleY: 1,
                    translateX: 0
                }
            },
            "transition.whirlIn": {
                defaultDuration: 900,
                calls: [
                    [{
                        opacity: [1, 0],
                        transformOriginX: ["50%", "50%"],
                        transformOriginY: ["50%", "50%"],
                        scaleX: [1, 0],
                        scaleY: [1, 0],
                        rotateY: [0, 160]
                    }]
                ]
            },
            "transition.whirlOut": {
                defaultDuration: 900,
                calls: [
                    [{
                        opacity: [0, 1],
                        transformOriginX: ["50%", "50%"],
                        transformOriginY: ["50%", "50%"],
                        scaleX: 0,
                        scaleY: 0,
                        rotateY: 160
                    }]
                ],
                reset: {
                    scaleX: 1,
                    scaleY: 1,
                    rotateY: 0
                }
            },
            "transition.shrinkIn": {
                defaultDuration: 700,
                calls: [
                    [{
                        opacity: [1, 0],
                        transformOriginX: ["50%", "50%"],
                        transformOriginY: ["50%", "50%"],
                        scaleX: [1, 1.5],
                        scaleY: [1, 1.5],
                        translateZ: 0
                    }]
                ]
            },
            "transition.shrinkOut": {
                defaultDuration: 650,
                calls: [
                    [{
                        opacity: [0, 1],
                        transformOriginX: ["50%", "50%"],
                        transformOriginY: ["50%", "50%"],
                        scaleX: 1.3,
                        scaleY: 1.3,
                        translateZ: 0
                    }]
                ],
                reset: {
                    scaleX: 1,
                    scaleY: 1
                }
            },
            "transition.expandIn": {
                defaultDuration: 700,
                calls: [
                    [{
                        opacity: [1, 0],
                        transformOriginX: ["50%", "50%"],
                        transformOriginY: ["50%", "50%"],
                        scaleX: [1, .625],
                        scaleY: [1, .625],
                        translateZ: 0
                    }]
                ]
            },
            "transition.expandOut": {
                defaultDuration: 700,
                calls: [
                    [{
                        opacity: [0, 1],
                        transformOriginX: ["50%", "50%"],
                        transformOriginY: ["50%", "50%"],
                        scaleX: .5,
                        scaleY: .5,
                        translateZ: 0
                    }]
                ],
                reset: {
                    scaleX: 1,
                    scaleY: 1
                }
            },
            "transition.bounceIn": {
                defaultDuration: 800,
                calls: [
                    [{
                        opacity: [1, 0],
                        scaleX: [1.05, .3],
                        scaleY: [1.05, .3]
                    }, .4],
                    [{
                        scaleX: .9,
                        scaleY: .9,
                        translateZ: 0
                    }, .2],
                    [{
                        scaleX: 1,
                        scaleY: 1
                    }, .5]
                ]
            },
            "transition.bounceOut": {
                defaultDuration: 800,
                calls: [
                    [{
                        scaleX: .95,
                        scaleY: .95
                    }, .4],
                    [{
                        scaleX: 1.1,
                        scaleY: 1.1,
                        translateZ: 0
                    }, .4],
                    [{
                        opacity: [0, 1],
                        scaleX: .3,
                        scaleY: .3
                    }, .2]
                ],
                reset: {
                    scaleX: 1,
                    scaleY: 1
                }
            },
            "transition.bounceUpIn": {
                defaultDuration: 800,
                calls: [
                    [{
                        opacity: [1, 0],
                        translateY: [-30, 1e3]
                    }, .6, {
                        easing: "easeOutCirc"
                    }],
                    [{
                        translateY: 10
                    }, .2],
                    [{
                        translateY: 0
                    }, .2]
                ]
            },
            "transition.bounceUpOut": {
                defaultDuration: 1e3,
                calls: [
                    [{
                        translateY: 20
                    }, .2],
                    [{
                        opacity: [0, "easeInCirc", 1],
                        translateY: -1e3
                    }, .8]
                ],
                reset: {
                    translateY: 0
                }
            },
            "transition.bounceDownIn": {
                defaultDuration: 800,
                calls: [
                    [{
                        opacity: [1, 0],
                        translateY: [30, -1e3]
                    }, .6, {
                        easing: "easeOutCirc"
                    }],
                    [{
                        translateY: -10
                    }, .2],
                    [{
                        translateY: 0
                    }, .2]
                ]
            },
            "transition.bounceDownOut": {
                defaultDuration: 1e3,
                calls: [
                    [{
                        translateY: -20
                    }, .2],
                    [{
                        opacity: [0, "easeInCirc", 1],
                        translateY: 1e3
                    }, .8]
                ],
                reset: {
                    translateY: 0
                }
            },
            "transition.bounceLeftIn": {
                defaultDuration: 750,
                calls: [
                    [{
                        opacity: [1, 0],
                        translateX: [30, -1250]
                    }, .6, {
                        easing: "easeOutCirc"
                    }],
                    [{
                        translateX: -10
                    }, .2],
                    [{
                        translateX: 0
                    }, .2]
                ]
            },
            "transition.bounceLeftOut": {
                defaultDuration: 750,
                calls: [
                    [{
                        translateX: 30
                    }, .2],
                    [{
                        opacity: [0, "easeInCirc", 1],
                        translateX: -1250
                    }, .8]
                ],
                reset: {
                    translateX: 0
                }
            },
            "transition.bounceRightIn": {
                defaultDuration: 750,
                calls: [
                    [{
                        opacity: [1, 0],
                        translateX: [-30, 1250]
                    }, .6, {
                        easing: "easeOutCirc"
                    }],
                    [{
                        translateX: 10
                    }, .2],
                    [{
                        translateX: 0
                    }, .2]
                ]
            },
            "transition.bounceRightOut": {
                defaultDuration: 750,
                calls: [
                    [{
                        translateX: -30
                    }, .2],
                    [{
                        opacity: [0, "easeInCirc", 1],
                        translateX: 1250
                    }, .8]
                ],
                reset: {
                    translateX: 0
                }
            },
            "transition.slideUpIn": {
                defaultDuration: 900,
                calls: [
                    [{
                        opacity: [1, 0],
                        translateY: [0, 20],
                        translateZ: 0
                    }]
                ]
            },
            "transition.slideUpOut": {
                defaultDuration: 900,
                calls: [
                    [{
                        opacity: [0, 1],
                        translateY: -20,
                        translateZ: 0
                    }]
                ],
                reset: {
                    translateY: 0
                }
            },
            "transition.slideDownIn": {
                defaultDuration: 900,
                calls: [
                    [{
                        opacity: [1, 0],
                        translateY: [0, -20],
                        translateZ: 0
                    }]
                ]
            },
            "transition.slideDownOut": {
                defaultDuration: 900,
                calls: [
                    [{
                        opacity: [0, 1],
                        translateY: 20,
                        translateZ: 0
                    }]
                ],
                reset: {
                    translateY: 0
                }
            },
            "transition.slideLeftIn": {
                defaultDuration: 1e3,
                calls: [
                    [{
                        opacity: [1, 0],
                        translateX: [0, -20],
                        translateZ: 0
                    }]
                ]
            },
            "transition.slideLeftOut": {
                defaultDuration: 1050,
                calls: [
                    [{
                        opacity: [0, 1],
                        translateX: -20,
                        translateZ: 0
                    }]
                ],
                reset: {
                    translateX: 0
                }
            },
            "transition.slideRightIn": {
                defaultDuration: 1e3,
                calls: [
                    [{
                        opacity: [1, 0],
                        translateX: [0, 20],
                        translateZ: 0
                    }]
                ]
            },
            "transition.slideRightOut": {
                defaultDuration: 1050,
                calls: [
                    [{
                        opacity: [0, 1],
                        translateX: 20,
                        translateZ: 0
                    }]
                ],
                reset: {
                    translateX: 0
                }
            },
            "transition.slideUpBigIn": {
                defaultDuration: 850,
                calls: [
                    [{
                        opacity: [1, 0],
                        translateY: [0, 75],
                        translateZ: 0
                    }]
                ]
            },
            "transition.slideUpBigOut": {
                defaultDuration: 800,
                calls: [
                    [{
                        opacity: [0, 1],
                        translateY: -75,
                        translateZ: 0
                    }]
                ],
                reset: {
                    translateY: 0
                }
            },
            "transition.slideDownBigIn": {
                defaultDuration: 850,
                calls: [
                    [{
                        opacity: [1, 0],
                        translateY: [0, -75],
                        translateZ: 0
                    }]
                ]
            },
            "transition.slideDownBigOut": {
                defaultDuration: 800,
                calls: [
                    [{
                        opacity: [0, 1],
                        translateY: 75,
                        translateZ: 0
                    }]
                ],
                reset: {
                    translateY: 0
                }
            },
            "transition.slideLeftBigIn": {
                defaultDuration: 800,
                calls: [
                    [{
                        opacity: [1, 0],
                        translateX: [0, -75],
                        translateZ: 0
                    }]
                ]
            },
            "transition.slideLeftBigOut": {
                defaultDuration: 750,
                calls: [
                    [{
                        opacity: [0, 1],
                        translateX: -75,
                        translateZ: 0
                    }]
                ],
                reset: {
                    translateX: 0
                }
            },
            "transition.slideRightBigIn": {
                defaultDuration: 800,
                calls: [
                    [{
                        opacity: [1, 0],
                        translateX: [0, 75],
                        translateZ: 0
                    }]
                ]
            },
            "transition.slideRightBigOut": {
                defaultDuration: 750,
                calls: [
                    [{
                        opacity: [0, 1],
                        translateX: 75,
                        translateZ: 0
                    }]
                ],
                reset: {
                    translateX: 0
                }
            },
            "transition.perspectiveUpIn": {
                defaultDuration: 800,
                calls: [
                    [{
                        opacity: [1, 0],
                        transformPerspective: [800, 800],
                        transformOriginX: [0, 0],
                        transformOriginY: ["100%", "100%"],
                        rotateX: [0, -180]
                    }]
                ],
                reset: {
                    transformPerspective: 0,
                    transformOriginX: "50%",
                    transformOriginY: "50%"
                }
            },
            "transition.perspectiveUpOut": {
                defaultDuration: 850,
                calls: [
                    [{
                        opacity: [0, 1],
                        transformPerspective: [800, 800],
                        transformOriginX: [0, 0],
                        transformOriginY: ["100%", "100%"],
                        rotateX: -180
                    }]
                ],
                reset: {
                    transformPerspective: 0,
                    transformOriginX: "50%",
                    transformOriginY: "50%",
                    rotateX: 0
                }
            },
            "transition.perspectiveDownIn": {
                defaultDuration: 800,
                calls: [
                    [{
                        opacity: [1, 0],
                        transformPerspective: [800, 800],
                        transformOriginX: [0, 0],
                        transformOriginY: [0, 0],
                        rotateX: [0, 180]
                    }]
                ],
                reset: {
                    transformPerspective: 0,
                    transformOriginX: "50%",
                    transformOriginY: "50%"
                }
            },
            "transition.perspectiveDownOut": {
                defaultDuration: 850,
                calls: [
                    [{
                        opacity: [0, 1],
                        transformPerspective: [800, 800],
                        transformOriginX: [0, 0],
                        transformOriginY: [0, 0],
                        rotateX: 180
                    }]
                ],
                reset: {
                    transformPerspective: 0,
                    transformOriginX: "50%",
                    transformOriginY: "50%",
                    rotateX: 0
                }
            },
            "transition.perspectiveLeftIn": {
                defaultDuration: 950,
                calls: [
                    [{
                        opacity: [1, 0],
                        transformPerspective: [2e3, 2e3],
                        transformOriginX: [0, 0],
                        transformOriginY: [0, 0],
                        rotateY: [0, -180]
                    }]
                ],
                reset: {
                    transformPerspective: 0,
                    transformOriginX: "50%",
                    transformOriginY: "50%"
                }
            },
            "transition.perspectiveLeftOut": {
                defaultDuration: 950,
                calls: [
                    [{
                        opacity: [0, 1],
                        transformPerspective: [2e3, 2e3],
                        transformOriginX: [0, 0],
                        transformOriginY: [0, 0],
                        rotateY: -180
                    }]
                ],
                reset: {
                    transformPerspective: 0,
                    transformOriginX: "50%",
                    transformOriginY: "50%",
                    rotateY: 0
                }
            },
            "transition.perspectiveRightIn": {
                defaultDuration: 950,
                calls: [
                    [{
                        opacity: [1, 0],
                        transformPerspective: [2e3, 2e3],
                        transformOriginX: ["100%", "100%"],
                        transformOriginY: [0, 0],
                        rotateY: [0, 180]
                    }]
                ],
                reset: {
                    transformPerspective: 0,
                    transformOriginX: "50%",
                    transformOriginY: "50%"
                }
            },
            "transition.perspectiveRightOut": {
                defaultDuration: 950,
                calls: [
                    [{
                        opacity: [0, 1],
                        transformPerspective: [2e3, 2e3],
                        transformOriginX: ["100%", "100%"],
                        transformOriginY: [0, 0],
                        rotateY: 180
                    }]
                ],
                reset: {
                    transformPerspective: 0,
                    transformOriginX: "50%",
                    transformOriginY: "50%",
                    rotateY: 0
                }
            }
        };
        for (var n in t.Velocity.RegisterUI.packagedEffects) t.Velocity.RegisterUI(n, t.Velocity.RegisterUI.packagedEffects[n])
    }(window.jQuery || window.Zepto || window, window, document)
});
! function() {
    function a(a) {
        return a.replace(/<.[^<>]*?>/g, " ").replace(/&nbsp;|&#160;/gi, " ").replace(/[.(),;:!?%#$'\"_+=\/\-“”’]*/g, "")
    }
    jQuery.validator.addMethod("maxWords", function(b, c, d) {
        return this.optional(c) || a(b).match(/\b\w+\b/g).length <= d
    }, jQuery.validator.format("Please enter {0} words or less.")), jQuery.validator.addMethod("minWords", function(b, c, d) {
        return this.optional(c) || a(b).match(/\b\w+\b/g).length >= d
    }, jQuery.validator.format("Please enter at least {0} words.")), jQuery.validator.addMethod("rangeWords", function(b, c, d) {
        var e = a(b),
            f = /\b\w+\b/g;
        return this.optional(c) || e.match(f).length >= d[0] && e.match(f).length <= d[1]
    }, jQuery.validator.format("Please enter between {0} and {1} words."))
}(), jQuery.validator.addMethod("accept", function(a, b, c) {
    var d, e, f = "string" == typeof c ? c.replace(/\s/g, "").replace(/,/g, "|") : "image/*",
        g = this.optional(b);
    if (g) return g;
    if ("file" === jQuery(b).attr("type") && (f = f.replace(/\*/g, ".*"), b.files && b.files.length))
        for (d = 0; d < b.files.length; d++)
            if (e = b.files[d], !e.type.match(new RegExp(".?(" + f + ")$", "i"))) return !1;
    return !0
}, jQuery.validator.format("Please enter a value with a valid mimetype.")), jQuery.validator.addMethod("alphanumeric", function(a, b) {
    return this.optional(b) || /^\w+$/i.test(a)
}, "Letters, numbers, and underscores only please"), jQuery.validator.addMethod("bankaccountNL", function(a, b) {
    if (this.optional(b)) return !0;
    if (!/^[0-9]{9}|([0-9]{2} ){3}[0-9]{3}$/.test(a)) return !1;
    var c, d, e, f = a.replace(/ /g, ""),
        g = 0,
        h = f.length;
    for (c = 0; h > c; c++) d = h - c, e = f.substring(c, c + 1), g += d * e;
    return g % 11 === 0
}, "Please specify a valid bank account number"), jQuery.validator.addMethod("bankorgiroaccountNL", function(a, b) {
    return this.optional(b) || $.validator.methods.bankaccountNL.call(this, a, b) || $.validator.methods.giroaccountNL.call(this, a, b)
}, "Please specify a valid bank or giro account number"), jQuery.validator.addMethod("bic", function(a, b) {
    return this.optional(b) || /^([A-Z]{6}[A-Z2-9][A-NP-Z1-2])(X{3}|[A-WY-Z0-9][A-Z0-9]{2})?$/.test(a)
}, "Please specify a valid BIC code"), jQuery.validator.addMethod("cifES", function(a) {
    "use strict";
    var b, c, d, e, f, g, h = [];
    if (a = a.toUpperCase(), !a.match("((^[A-Z]{1}[0-9]{7}[A-Z0-9]{1}$|^[T]{1}[A-Z0-9]{8}$)|^[0-9]{8}[A-Z]{1}$)")) return !1;
    for (d = 0; 9 > d; d++) h[d] = parseInt(a.charAt(d), 10);
    for (c = h[2] + h[4] + h[6], e = 1; 8 > e; e += 2) f = (2 * h[e]).toString(), g = f.charAt(1), c += parseInt(f.charAt(0), 10) + ("" === g ? 0 : parseInt(g, 10));
    return /^[ABCDEFGHJNPQRSUVW]{1}/.test(a) ? (c += "", b = 10 - parseInt(c.charAt(c.length - 1), 10), a += b, h[8].toString() === String.fromCharCode(64 + b) || h[8].toString() === a.charAt(a.length - 1)) : !1
}, "Please specify a valid CIF number."), jQuery.validator.addMethod("creditcardtypes", function(a, b, c) {
    if (/[^0-9\-]+/.test(a)) return !1;
    a = a.replace(/\D/g, "");
    var d = 0;
    return c.mastercard && (d |= 1), c.visa && (d |= 2), c.amex && (d |= 4), c.dinersclub && (d |= 8), c.enroute && (d |= 16), c.discover && (d |= 32), c.jcb && (d |= 64), c.unknown && (d |= 128), c.all && (d = 255), 1 & d && /^(5[12345])/.test(a) ? 16 === a.length : 2 & d && /^(4)/.test(a) ? 16 === a.length : 4 & d && /^(3[47])/.test(a) ? 15 === a.length : 8 & d && /^(3(0[012345]|[68]))/.test(a) ? 14 === a.length : 16 & d && /^(2(014|149))/.test(a) ? 15 === a.length : 32 & d && /^(6011)/.test(a) ? 16 === a.length : 64 & d && /^(3)/.test(a) ? 16 === a.length : 64 & d && /^(2131|1800)/.test(a) ? 15 === a.length : 128 & d ? !0 : !1
}, "Please enter a valid credit card number."), jQuery.validator.addMethod("currency", function(a, b, c) {
    var d, e = "string" == typeof c,
        f = e ? c : c[0],
        g = e ? !0 : c[1];
    return f = f.replace(/,/g, ""), f = g ? f + "]" : f + "]?", d = "^[" + f + "([1-9]{1}[0-9]{0,2}(\\,[0-9]{3})*(\\.[0-9]{0,2})?|[1-9]{1}[0-9]{0,}(\\.[0-9]{0,2})?|0(\\.[0-9]{0,2})?|(\\.[0-9]{1,2})?)$", d = new RegExp(d), this.optional(b) || d.test(a)
}, "Please specify a valid currency"), jQuery.validator.addMethod("dateITA", function(a, b) {
    var c, d, e, f, g, h = !1,
        i = /^\d{1,2}\/\d{1,2}\/\d{4}$/;
    return i.test(a) ? (c = a.split("/"), d = parseInt(c[0], 10), e = parseInt(c[1], 10), f = parseInt(c[2], 10), g = new Date(f, e - 1, d, 12, 0, 0, 0), h = g.getFullYear() === f && g.getMonth() === e - 1 && g.getDate() === d ? !0 : !1) : h = !1, this.optional(b) || h
}, "Please enter a correct date"), jQuery.validator.addMethod("dateNL", function(a, b) {
    return this.optional(b) || /^(0?[1-9]|[12]\d|3[01])[\.\/\-](0?[1-9]|1[012])[\.\/\-]([12]\d)?(\d\d)$/.test(a)
}, "Please enter a correct date"), jQuery.validator.addMethod("extension", function(a, b, c) {
    return c = "string" == typeof c ? c.replace(/,/g, "|") : "png|jpe?g|gif", this.optional(b) || a.match(new RegExp(".(" + c + ")$", "i"))
}, jQuery.validator.format("Please enter a value with a valid extension.")), jQuery.validator.addMethod("giroaccountNL", function(a, b) {
    return this.optional(b) || /^[0-9]{1,7}$/.test(a)
}, "Please specify a valid giro account number"), jQuery.validator.addMethod("iban", function(a, b) {
    if (this.optional(b)) return !0;
    var c, d, e, f, g, h, i, j, k, l = a.replace(/ /g, "").toUpperCase(),
        m = "",
        n = !0,
        o = "",
        p = "";
    if (!/^([a-zA-Z0-9]{4} ){2,8}[a-zA-Z0-9]{1,4}|[a-zA-Z0-9]{12,34}$/.test(l)) return !1;
    if (c = l.substring(0, 2), h = {
            AL: "\\d{8}[\\dA-Z]{16}",
            AD: "\\d{8}[\\dA-Z]{12}",
            AT: "\\d{16}",
            AZ: "[\\dA-Z]{4}\\d{20}",
            BE: "\\d{12}",
            BH: "[A-Z]{4}[\\dA-Z]{14}",
            BA: "\\d{16}",
            BR: "\\d{23}[A-Z][\\dA-Z]",
            BG: "[A-Z]{4}\\d{6}[\\dA-Z]{8}",
            CR: "\\d{17}",
            HR: "\\d{17}",
            CY: "\\d{8}[\\dA-Z]{16}",
            CZ: "\\d{20}",
            DK: "\\d{14}",
            DO: "[A-Z]{4}\\d{20}",
            EE: "\\d{16}",
            FO: "\\d{14}",
            FI: "\\d{14}",
            FR: "\\d{10}[\\dA-Z]{11}\\d{2}",
            GE: "[\\dA-Z]{2}\\d{16}",
            DE: "\\d{18}",
            GI: "[A-Z]{4}[\\dA-Z]{15}",
            GR: "\\d{7}[\\dA-Z]{16}",
            GL: "\\d{14}",
            GT: "[\\dA-Z]{4}[\\dA-Z]{20}",
            HU: "\\d{24}",
            IS: "\\d{22}",
            IE: "[\\dA-Z]{4}\\d{14}",
            IL: "\\d{19}",
            IT: "[A-Z]\\d{10}[\\dA-Z]{12}",
            KZ: "\\d{3}[\\dA-Z]{13}",
            KW: "[A-Z]{4}[\\dA-Z]{22}",
            LV: "[A-Z]{4}[\\dA-Z]{13}",
            LB: "\\d{4}[\\dA-Z]{20}",
            LI: "\\d{5}[\\dA-Z]{12}",
            LT: "\\d{16}",
            LU: "\\d{3}[\\dA-Z]{13}",
            MK: "\\d{3}[\\dA-Z]{10}\\d{2}",
            MT: "[A-Z]{4}\\d{5}[\\dA-Z]{18}",
            MR: "\\d{23}",
            MU: "[A-Z]{4}\\d{19}[A-Z]{3}",
            MC: "\\d{10}[\\dA-Z]{11}\\d{2}",
            MD: "[\\dA-Z]{2}\\d{18}",
            ME: "\\d{18}",
            NL: "[A-Z]{4}\\d{10}",
            NO: "\\d{11}",
            PK: "[\\dA-Z]{4}\\d{16}",
            PS: "[\\dA-Z]{4}\\d{21}",
            PL: "\\d{24}",
            PT: "\\d{21}",
            RO: "[A-Z]{4}[\\dA-Z]{16}",
            SM: "[A-Z]\\d{10}[\\dA-Z]{12}",
            SA: "\\d{2}[\\dA-Z]{18}",
            RS: "\\d{18}",
            SK: "\\d{20}",
            SI: "\\d{15}",
            ES: "\\d{20}",
            SE: "\\d{20}",
            CH: "\\d{5}[\\dA-Z]{12}",
            TN: "\\d{20}",
            TR: "\\d{5}[\\dA-Z]{17}",
            AE: "\\d{3}\\d{16}",
            GB: "[A-Z]{4}\\d{14}",
            VG: "[\\dA-Z]{4}\\d{16}"
        }, g = h[c], "undefined" != typeof g && (i = new RegExp("^[A-Z]{2}\\d{2}" + g + "$", ""), !i.test(l))) return !1;
    for (d = l.substring(4, l.length) + l.substring(0, 4), j = 0; j < d.length; j++) e = d.charAt(j), "0" !== e && (n = !1), n || (m += "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".indexOf(e));
    for (k = 0; k < m.length; k++) f = m.charAt(k), p = "" + o + f, o = p % 97;
    return 1 === o
}, "Please specify a valid IBAN"), jQuery.validator.addMethod("integer", function(a, b) {
    return this.optional(b) || /^-?\d+$/.test(a)
}, "A positive or negative non-decimal number please"), jQuery.validator.addMethod("ipv4", function(a, b) {
    return this.optional(b) || /^(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)$/i.test(a)
}, "Please enter a valid IP v4 address."), jQuery.validator.addMethod("ipv6", function(a, b) {
    return this.optional(b) || /^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$/i.test(a)
}, "Please enter a valid IP v6 address."), jQuery.validator.addMethod("lettersonly", function(a, b) {
    return this.optional(b) || /^[a-z]+$/i.test(a)
}, "Letters only please"), jQuery.validator.addMethod("letterswithbasicpunc", function(a, b) {
    return this.optional(b) || /^[a-z\-.,()'"\s]+$/i.test(a)
}, "Letters or punctuation only please"), jQuery.validator.addMethod("mobileNL", function(a, b) {
    return this.optional(b) || /^((\+|00(\s|\s?\-\s?)?)31(\s|\s?\-\s?)?(\(0\)[\-\s]?)?|0)6((\s|\s?\-\s?)?[0-9]){8}$/.test(a)
}, "Please specify a valid mobile number"), jQuery.validator.addMethod("mobileUK", function(a, b) {
    return a = a.replace(/\(|\)|\s+|-/g, ""), this.optional(b) || a.length > 9 && a.match(/^(?:(?:(?:00\s?|\+)44\s?|0)7(?:[1345789]\d{2}|624)\s?\d{3}\s?\d{3})$/)
}, "Please specify a valid mobile number"), jQuery.validator.addMethod("nieES", function(a) {
    "use strict";
    return a = a.toUpperCase(), a.match("((^[A-Z]{1}[0-9]{7}[A-Z0-9]{1}$|^[T]{1}[A-Z0-9]{8}$)|^[0-9]{8}[A-Z]{1}$)") ? /^[T]{1}/.test(a) ? a[8] === /^[T]{1}[A-Z0-9]{8}$/.test(a) : /^[XYZ]{1}/.test(a) ? a[8] === "TRWAGMYFPDXBNJZSQVHLCKE".charAt(a.replace("X", "0").replace("Y", "1").replace("Z", "2").substring(0, 8) % 23) : !1 : !1
}, "Please specify a valid NIE number."), jQuery.validator.addMethod("nifES", function(a) {
    "use strict";
    return a = a.toUpperCase(), a.match("((^[A-Z]{1}[0-9]{7}[A-Z0-9]{1}$|^[T]{1}[A-Z0-9]{8}$)|^[0-9]{8}[A-Z]{1}$)") ? /^[0-9]{8}[A-Z]{1}$/.test(a) ? "TRWAGMYFPDXBNJZSQVHLCKE".charAt(a.substring(8, 0) % 23) === a.charAt(8) : /^[KLM]{1}/.test(a) ? a[8] === String.fromCharCode(64) : !1 : !1
}, "Please specify a valid NIF number."), jQuery.validator.addMethod("nowhitespace", function(a, b) {
    return this.optional(b) || /^\S+$/i.test(a)
}, "No white space please"), jQuery.validator.addMethod("pattern", function(a, b, c) {
    return this.optional(b) ? !0 : ("string" == typeof c && (c = new RegExp(c)), c.test(a))
}, "Invalid format."), jQuery.validator.addMethod("phoneNL", function(a, b) {
    return this.optional(b) || /^((\+|00(\s|\s?\-\s?)?)31(\s|\s?\-\s?)?(\(0\)[\-\s]?)?|0)[1-9]((\s|\s?\-\s?)?[0-9]){8}$/.test(a)
}, "Please specify a valid phone number."), jQuery.validator.addMethod("phoneUK", function(a, b) {
    return a = a.replace(/\(|\)|\s+|-/g, ""), this.optional(b) || a.length > 9 && a.match(/^(?:(?:(?:00\s?|\+)44\s?)|(?:\(?0))(?:\d{2}\)?\s?\d{4}\s?\d{4}|\d{3}\)?\s?\d{3}\s?\d{3,4}|\d{4}\)?\s?(?:\d{5}|\d{3}\s?\d{3})|\d{5}\)?\s?\d{4,5})$/)
}, "Please specify a valid phone number"), jQuery.validator.addMethod("phoneUS", function(a, b) {
    return a = a.replace(/\s+/g, ""), this.optional(b) || a.length > 9 && a.match(/^(\+?1-?)?(\([2-9]([02-9]\d|1[02-9])\)|[2-9]([02-9]\d|1[02-9]))-?[2-9]([02-9]\d|1[02-9])-?\d{4}$/)
}, "Please specify a valid phone number"), jQuery.validator.addMethod("phonesUK", function(a, b) {
    return a = a.replace(/\(|\)|\s+|-/g, ""), this.optional(b) || a.length > 9 && a.match(/^(?:(?:(?:00\s?|\+)44\s?|0)(?:1\d{8,9}|[23]\d{9}|7(?:[1345789]\d{8}|624\d{6})))$/)
}, "Please specify a valid uk phone number"), jQuery.validator.addMethod("postalcodeNL", function(a, b) {
    return this.optional(b) || /^[1-9][0-9]{3}\s?[a-zA-Z]{2}$/.test(a)
}, "Please specify a valid postal code"), jQuery.validator.addMethod("postcodeUK", function(a, b) {
    return this.optional(b) || /^((([A-PR-UWYZ][0-9])|([A-PR-UWYZ][0-9][0-9])|([A-PR-UWYZ][A-HK-Y][0-9])|([A-PR-UWYZ][A-HK-Y][0-9][0-9])|([A-PR-UWYZ][0-9][A-HJKSTUW])|([A-PR-UWYZ][A-HK-Y][0-9][ABEHMNPRVWXY]))\s?([0-9][ABD-HJLNP-UW-Z]{2})|(GIR)\s?(0AA))$/i.test(a)
}, "Please specify a valid UK postcode"), jQuery.validator.addMethod("require_from_group", function(a, b, c) {
    var d = $(c[1], b.form),
        e = d.eq(0),
        f = e.data("valid_req_grp") ? e.data("valid_req_grp") : $.extend({}, this),
        g = d.filter(function() {
            return f.elementValue(this)
        }).length >= c[0];
    return e.data("valid_req_grp", f), $(b).data("being_validated") || (d.data("being_validated", !0), d.each(function() {
        f.element(this)
    }), d.data("being_validated", !1)), g
}, jQuery.validator.format("Please fill at least {0} of these fields.")), jQuery.validator.addMethod("skip_or_fill_minimum", function(a, b, c) {
    var d = $(c[1], b.form),
        e = d.eq(0),
        f = e.data("valid_skip") ? e.data("valid_skip") : $.extend({}, this),
        g = d.filter(function() {
            return f.elementValue(this)
        }).length,
        h = 0 === g || g >= c[0];
    return e.data("valid_skip", f), $(b).data("being_validated") || (d.data("being_validated", !0), d.each(function() {
        f.element(this)
    }), d.data("being_validated", !1)), h
}, jQuery.validator.format("Please either skip these fields or fill at least {0} of them.")), jQuery.validator.addMethod("strippedminlength", function(a, b, c) {
    return jQuery(a).text().length >= c
}, jQuery.validator.format("Please enter at least {0} characters")), jQuery.validator.addMethod("time", function(a, b) {
    return this.optional(b) || /^([01]\d|2[0-3])(:[0-5]\d){1,2}$/.test(a)
}, "Please enter a valid time, between 00:00 and 23:59"), jQuery.validator.addMethod("time12h", function(a, b) {
    return this.optional(b) || /^((0?[1-9]|1[012])(:[0-5]\d){1,2}(\ ?[AP]M))$/i.test(a)
}, "Please enter a valid time in 12-hour am/pm format"), jQuery.validator.addMethod("url2", function(a, b) {
    return this.optional(b) || /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)*(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(a)
}, jQuery.validator.messages.url), jQuery.validator.addMethod("vinUS", function(a) {
    if (17 !== a.length) return !1;
    var b, c, d, e, f, g, h = ["A", "B", "C", "D", "E", "F", "G", "H", "J", "K", "L", "M", "N", "P", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"],
        i = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 7, 9, 2, 3, 4, 5, 6, 7, 8, 9],
        j = [8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2],
        k = 0;
    for (b = 0; 17 > b; b++) {
        if (e = j[b], d = a.slice(b, b + 1), 8 === b && (g = d), isNaN(d)) {
            for (c = 0; c < h.length; c++)
                if (d.toUpperCase() === h[c]) {
                    d = i[c], d *= e, isNaN(g) && 8 === c && (g = h[c]);
                    break
                }
        } else d *= e;
        k += d
    }
    return f = k % 11, 10 === f && (f = "X"), f === g ? !0 : !1
}, "The specified vehicle identification number (VIN) is invalid."), jQuery.validator.addMethod("zipcodeUS", function(a, b) {
    return this.optional(b) || /^\d{5}-\d{4}$|^\d{5}$/.test(a)
}, "The specified US ZIP Code is invalid"), jQuery.validator.addMethod("ziprange", function(a, b) {
    return this.optional(b) || /^90[2-5]\d\{2\}-\d{4}$/.test(a)
}, "Your ZIP-code must be in the range 902xx-xxxx to 905-xx-xxxx");
(function(N, d, p, K, k, H) {
    var b = this;
    var n = Math.floor(Math.random() * 1e4);
    var q = Function.prototype;
    var Q = /^((http.?:)\/\/([^:\/\s]+)(:\d+)*)/;
    var R = /[\-\w]+\/\.\.\//;
    var F = /([^:])\/\//g;
    var I = "";
    var o = {};
    var M = N.easyXDM;
    var U = "easyXDM_";
    var E;
    var y = false;
    var i;
    var h;

    function C(X, Z) {
        var Y = typeof X[Z];
        return Y == "function" || !!(Y == "object" && X[Z]) || Y == "unknown"
    }

    function u(X, Y) {
        return !!(typeof X[Y] == "object" && X[Y])
    }

    function r(X) {
        return Object.prototype.toString.call(X) === "[object Array]"
    }

    function c() {
        try {
            var X = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");
            i = Array.prototype.slice.call(X.GetVariable("$version").match(/(\d+),(\d+),(\d+),(\d+)/), 1);
            h = parseInt(i[0], 10) > 9 && parseInt(i[1], 10) > 0;
            X = null;
            return true
        } catch (Y) {
            return false
        }
    }
    var v, x;
    if (C(N, "addEventListener")) {
        v = function(Z, X, Y) {
            Z.addEventListener(X, Y, false)
        };
        x = function(Z, X, Y) {
            Z.removeEventListener(X, Y, false)
        }
    } else {
        if (C(N, "attachEvent")) {
            v = function(X, Z, Y) {
                X.attachEvent("on" + Z, Y)
            };
            x = function(X, Z, Y) {
                X.detachEvent("on" + Z, Y)
            }
        } else {
            throw new Error("Browser not supported")
        }
    }
    var W = false,
        J = [],
        L;
    if ("readyState" in d) {
        L = d.readyState;
        W = L == "complete" || ~navigator.userAgent.indexOf("AppleWebKit/") && (L == "loaded" || L == "interactive")
    } else {
        W = !!d.body
    }

    function s() {
        if (W) {
            return
        }
        W = true;
        for (var X = 0; X < J.length; X++) {
            J[X]()
        }
        J.length = 0
    }
    if (!W) {
        if (C(N, "addEventListener")) {
            v(d, "DOMContentLoaded", s)
        } else {
            v(d, "readystatechange", function() {
                if (d.readyState == "complete") {
                    s()
                }
            });
            if (d.documentElement.doScroll && N === top) {
                var g = function() {
                    if (W) {
                        return
                    }
                    try {
                        d.documentElement.doScroll("left")
                    } catch (X) {
                        K(g, 1);
                        return
                    }
                    s()
                };
                g()
            }
        }
        v(N, "load", s)
    }

    function G(Y, X) {
        if (W) {
            Y.call(X);
            return
        }
        J.push(function() {
            Y.call(X)
        })
    }

    function m() {
        var Z = parent;
        if (I !== "") {
            for (var X = 0, Y = I.split("."); X < Y.length; X++) {
                Z = Z[Y[X]]
            }
        }
        return Z.easyXDM
    }

    function e(X) {
        N.easyXDM = M;
        I = X;
        if (I) {
            U = "easyXDM_" + I.replace(".", "_") + "_"
        }
        return o
    }

    function z(X) {
        return X.match(Q)[3]
    }

    function f(X) {
        return X.match(Q)[4] || ""
    }

    function j(Z) {
        var X = Z.toLowerCase().match(Q);
        var aa = X[2],
            ab = X[3],
            Y = X[4] || "";
        if (aa == "http:" && Y == ":80" || aa == "https:" && Y == ":443") {
            Y = ""
        }
        return aa + "//" + ab + Y
    }

    function B(X) {
        X = X.replace(F, "$1/");
        if (!X.match(/^(http||https):\/\//)) {
            var Y = X.substring(0, 1) === "/" ? "" : p.pathname;
            if (Y.substring(Y.length - 1) !== "/") {
                Y = Y.substring(0, Y.lastIndexOf("/") + 1)
            }
            X = p.protocol + "//" + p.host + Y + X
        }
        while (R.test(X)) {
            X = X.replace(R, "")
        }
        return X
    }

    function P(X, aa) {
        var ac = "",
            Z = X.indexOf("#");
        if (Z !== -1) {
            ac = X.substring(Z);
            X = X.substring(0, Z)
        }
        var ab = [];
        for (var Y in aa) {
            if (aa.hasOwnProperty(Y)) {
                ab.push(Y + "=" + H(aa[Y]))
            }
        }
        return X + (y ? "#" : X.indexOf("?") == -1 ? "?" : "&") + ab.join("&") + ac
    }
    var S = function(X) {
        X = X.substring(1).split("&");
        var Z = {},
            aa, Y = X.length;
        while (Y--) {
            aa = X[Y].split("=");
            Z[aa[0]] = k(aa[1])
        }
        return Z
    }(/xdm_e=/.test(p.search) ? p.search : p.hash);

    function t(X) {
        return typeof X === "undefined"
    }
    var O = function() {
        var Y = {};
        var Z = {
                a: [1, 2, 3]
            },
            X = '{"a":[1,2,3]}';
        if (typeof JSON != "undefined" && typeof JSON.stringify === "function" && JSON.stringify(Z).replace(/\s/g, "") === X) {
            return JSON
        }
        if (Object.toJSON) {
            if (Object.toJSON(Z).replace(/\s/g, "") === X) {
                Y.stringify = Object.toJSON
            }
        }
        if (typeof String.prototype.evalJSON === "function") {
            Z = X.evalJSON();
            if (Z.a && Z.a.length === 3 && Z.a[2] === 3) {
                Y.parse = function(aa) {
                    return aa.evalJSON()
                }
            }
        }
        if (Y.stringify && Y.parse) {
            O = function() {
                return Y
            };
            return Y
        }
        return null
    };

    function T(X, Y, Z) {
        var ab;
        for (var aa in Y) {
            if (Y.hasOwnProperty(aa)) {
                if (aa in X) {
                    ab = Y[aa];
                    if (typeof ab === "object") {
                        T(X[aa], ab, Z)
                    } else {
                        if (!Z) {
                            X[aa] = Y[aa]
                        }
                    }
                } else {
                    X[aa] = Y[aa]
                }
            }
        }
        return X
    }

    function a() {
        var Y = d.body.appendChild(d.createElement("form")),
            X = Y.appendChild(d.createElement("input"));
        X.name = U + "TEST" + n;
        E = X !== Y.elements[X.name];
        d.body.removeChild(Y)
    }

    function A(X) {
        if (t(E)) {
            a()
        }
        var Z;
        if (E) {
            Z = d.createElement('<iframe name="' + X.props.name + '"/>')
        } else {
            Z = d.createElement("IFRAME");
            Z.name = X.props.name
        }
        Z.id = Z.name = X.props.name;
        delete X.props.name;
        if (X.onLoad) {
            v(Z, "load", X.onLoad)
        }
        if (typeof X.container == "string") {
            X.container = d.getElementById(X.container)
        }
        if (!X.container) {
            T(Z.style, {
                position: "absolute",
                top: "-2000px"
            });
            X.container = d.body
        }
        var Y = X.props.src;
        delete X.props.src;
        T(Z, X.props);
        Z.border = Z.frameBorder = 0;
        Z.allowTransparency = true;
        X.container.appendChild(Z);
        Z.src = Y;
        X.props.src = Y;
        return Z
    }

    function V(aa, Z) {
        if (typeof aa == "string") {
            aa = [aa]
        }
        var Y, X = aa.length;
        while (X--) {
            Y = aa[X];
            Y = new RegExp(Y.substr(0, 1) == "^" ? Y : "^" + Y.replace(/(\*)/g, ".$1").replace(/\?/g, ".") + "$");
            if (Y.test(Z)) {
                return true
            }
        }
        return false
    }

    function l(Z) {
        var ae = Z.protocol,
            Y;
        Z.isHost = Z.isHost || t(S.xdm_p);
        y = Z.hash || false;
        if (!Z.props) {
            Z.props = {}
        }
        if (!Z.isHost) {
            Z.channel = S.xdm_c;
            Z.secret = S.xdm_s;
            Z.remote = S.xdm_e;
            ae = S.xdm_p;
            if (Z.acl && !V(Z.acl, Z.remote)) {
                throw new Error("Access denied for " + Z.remote)
            }
        } else {
            Z.remote = B(Z.remote);
            Z.channel = Z.channel || "default" + n++;
            Z.secret = Math.random().toString(16).substring(2);
            if (t(ae)) {
                if (j(p.href) == j(Z.remote)) {
                    ae = "4"
                } else {
                    if (C(N, "postMessage") || C(d, "postMessage")) {
                        ae = "1"
                    } else {
                        if (Z.swf && C(N, "ActiveXObject") && c()) {
                            ae = "6"
                        } else {
                            if (navigator.product === "Gecko" && "frameElement" in N && navigator.userAgent.indexOf("WebKit") == -1) {
                                ae = "5"
                            } else {
                                if (Z.remoteHelper) {
                                    Z.remoteHelper = B(Z.remoteHelper);
                                    ae = "2"
                                } else {
                                    ae = "0"
                                }
                            }
                        }
                    }
                }
            }
        }
        Z.protocol = ae;
        switch (ae) {
            case "0":
                T(Z, {
                    interval: 100,
                    delay: 2e3,
                    useResize: true,
                    useParent: false,
                    usePolling: false
                }, true);
                if (Z.isHost) {
                    if (!Z.local) {
                        var ac = p.protocol + "//" + p.host,
                            X = d.body.getElementsByTagName("img"),
                            ad;
                        var aa = X.length;
                        while (aa--) {
                            ad = X[aa];
                            if (ad.src.substring(0, ac.length) === ac) {
                                Z.local = ad.src;
                                break
                            }
                        }
                        if (!Z.local) {
                            Z.local = N
                        }
                    }
                    var ab = {
                        xdm_c: Z.channel,
                        xdm_p: 0
                    };
                    if (Z.local === N) {
                        Z.usePolling = true;
                        Z.useParent = true;
                        Z.local = p.protocol + "//" + p.host + p.pathname + p.search;
                        ab.xdm_e = Z.local;
                        ab.xdm_pa = 1
                    } else {
                        ab.xdm_e = B(Z.local)
                    }
                    if (Z.container) {
                        Z.useResize = false;
                        ab.xdm_po = 1
                    }
                    Z.remote = P(Z.remote, ab)
                } else {
                    T(Z, {
                        channel: S.xdm_c,
                        remote: S.xdm_e,
                        useParent: !t(S.xdm_pa),
                        usePolling: !t(S.xdm_po),
                        useResize: Z.useParent ? false : Z.useResize
                    })
                }
                Y = [new o.stack.HashTransport(Z), new o.stack.ReliableBehavior({}), new o.stack.QueueBehavior({
                    encode: true,
                    maxLength: 4e3 - Z.remote.length
                }), new o.stack.VerifyBehavior({
                    initiate: Z.isHost
                })];
                break;
            case "1":
                Y = [new o.stack.PostMessageTransport(Z)];
                break;
            case "2":
                Y = [new o.stack.NameTransport(Z), new o.stack.QueueBehavior, new o.stack.VerifyBehavior({
                    initiate: Z.isHost
                })];
                break;
            case "3":
                Y = [new o.stack.NixTransport(Z)];
                break;
            case "4":
                Y = [new o.stack.SameOriginTransport(Z)];
                break;
            case "5":
                Y = [new o.stack.FrameElementTransport(Z)];
                break;
            case "6":
                if (!i) {
                    c()
                }
                Y = [new o.stack.FlashTransport(Z)];
                break
        }
        Y.push(new o.stack.QueueBehavior({
            lazy: Z.lazy,
            remove: true
        }));
        return Y
    }

    function D(aa) {
        var ab, Z = {
            incoming: function(ad, ac) {
                this.up.incoming(ad, ac)
            },
            outgoing: function(ac, ad) {
                this.down.outgoing(ac, ad)
            },
            callback: function(ac) {
                this.up.callback(ac)
            },
            init: function() {
                this.down.init()
            },
            destroy: function() {
                this.down.destroy()
            }
        };
        for (var Y = 0, X = aa.length; Y < X; Y++) {
            ab = aa[Y];
            T(ab, Z, true);
            if (Y !== 0) {
                ab.down = aa[Y - 1]
            }
            if (Y !== X - 1) {
                ab.up = aa[Y + 1]
            }
        }
        return ab
    }

    function w(X) {
        X.up.down = X.down;
        X.down.up = X.up;
        X.up = X.down = null
    }
    T(o, {
        version: "2.4.15.118",
        query: S,
        stack: {},
        apply: T,
        getJSONObject: O,
        whenReady: G,
        noConflict: e
    });
    o.DomHelper = {
        on: v,
        un: x,
        requiresJSON: function(X) {
            if (!u(N, "JSON")) {
                d.write('<script type="text/javascript" src="' + X + '"><\/script>')
            }
        }
    };
    (function() {
        var X = {};
        o.Fn = {
            set: function(Y, Z) {
                X[Y] = Z
            },
            get: function(Z, Y) {
                var aa = X[Z];
                if (Y) {
                    delete X[Z]
                }
                return aa
            }
        }
    })();
    o.Socket = function(Y) {
        var X = D(l(Y).concat([{
                incoming: function(ab, aa) {
                    Y.onMessage(ab, aa)
                },
                callback: function(aa) {
                    if (Y.onReady) {
                        Y.onReady(aa)
                    }
                }
            }])),
            Z = j(Y.remote);
        this.origin = j(Y.remote);
        this.destroy = function() {
            X.destroy()
        };
        this.postMessage = function(aa) {
            X.outgoing(aa, Z)
        };
        X.init()
    };
    o.Rpc = function(Z, Y) {
        if (Y.local) {
            for (var ab in Y.local) {
                if (Y.local.hasOwnProperty(ab)) {
                    var aa = Y.local[ab];
                    if (typeof aa === "function") {
                        Y.local[ab] = {
                            method: aa
                        }
                    }
                }
            }
        }
        var X = D(l(Z).concat([new o.stack.RpcBehavior(this, Y), {
            callback: function(ac) {
                if (Z.onReady) {
                    Z.onReady(ac)
                }
            }
        }]));
        this.origin = j(Z.remote);
        this.destroy = function() {
            X.destroy()
        };
        X.init()
    };
    o.stack.SameOriginTransport = function(Y) {
        var Z, ab, aa, X;
        return Z = {
            outgoing: function(ad, ae, ac) {
                aa(ad);
                if (ac) {
                    ac()
                }
            },
            destroy: function() {
                if (ab) {
                    ab.parentNode.removeChild(ab);
                    ab = null
                }
            },
            onDOMReady: function() {
                X = j(Y.remote);
                if (Y.isHost) {
                    T(Y.props, {
                        src: P(Y.remote, {
                            xdm_e: p.protocol + "//" + p.host + p.pathname,
                            xdm_c: Y.channel,
                            xdm_p: 4
                        }),
                        name: U + Y.channel + "_provider"
                    });
                    ab = A(Y);
                    o.Fn.set(Y.channel, function(ac) {
                        aa = ac;
                        K(function() {
                            Z.up.callback(true)
                        }, 0);
                        return function(ad) {
                            Z.up.incoming(ad, X)
                        }
                    })
                } else {
                    aa = m().Fn.get(Y.channel, true)(function(ac) {
                        Z.up.incoming(ac, X)
                    });
                    K(function() {
                        Z.up.callback(true)
                    }, 0)
                }
            },
            init: function() {
                G(Z.onDOMReady, Z)
            }
        }
    };
    o.stack.FlashTransport = function(aa) {
        var ac, X, ab, ad, Y, ae;

        function af(ah, ag) {
            K(function() {
                ac.up.incoming(ah, ad)
            }, 0)
        }

        function Z(ah) {
            var ag = aa.swf + "?host=" + aa.isHost;
            var aj = "easyXDM_swf_" + Math.floor(Math.random() * 1e4);
            o.Fn.set("flash_loaded" + ah.replace(/[\-.]/g, "_"), function() {
                o.stack.FlashTransport[ah].swf = Y = ae.firstChild;
                var ak = o.stack.FlashTransport[ah].queue;
                for (var al = 0; al < ak.length; al++) {
                    ak[al]()
                }
                ak.length = 0
            });
            if (aa.swfContainer) {
                ae = typeof aa.swfContainer == "string" ? d.getElementById(aa.swfContainer) : aa.swfContainer
            } else {
                ae = d.createElement("div");
                T(ae.style, h && aa.swfNoThrottle ? {
                    height: "20px",
                    width: "20px",
                    position: "fixed",
                    right: 0,
                    top: 0
                } : {
                    height: "1px",
                    width: "1px",
                    position: "absolute",
                    overflow: "hidden",
                    right: 0,
                    top: 0
                });
                d.body.appendChild(ae)
            }
            var ai = "callback=flash_loaded" + ah.replace(/[\-.]/g, "_") + "&proto=" + b.location.protocol + "&domain=" + z(b.location.href) + "&port=" + f(b.location.href) + "&ns=" + I;
            ae.innerHTML = "<object height='20' width='20' type='application/x-shockwave-flash' id='" + aj + "' data='" + ag + "'><param name='allowScriptAccess' value='always'></param><param name='wmode' value='transparent'><param name='movie' value='" + ag + "'></param><param name='flashvars' value='" + ai + "'></param><embed type='application/x-shockwave-flash' FlashVars='" + ai + "' allowScriptAccess='always' wmode='transparent' src='" + ag + "' height='1' width='1'></embed></object>"
        }
        return ac = {
            outgoing: function(ah, ai, ag) {
                Y.postMessage(aa.channel, ah.toString());
                if (ag) {
                    ag()
                }
            },
            destroy: function() {
                try {
                    Y.destroyChannel(aa.channel)
                } catch (ag) {}
                Y = null;
                if (X) {
                    X.parentNode.removeChild(X);
                    X = null
                }
            },
            onDOMReady: function() {
                ad = aa.remote;
                o.Fn.set("flash_" + aa.channel + "_init", function() {
                    K(function() {
                        ac.up.callback(true)
                    })
                });
                o.Fn.set("flash_" + aa.channel + "_onMessage", af);
                aa.swf = B(aa.swf);
                var ah = z(aa.swf);
                var ag = function() {
                    o.stack.FlashTransport[ah].init = true;
                    Y = o.stack.FlashTransport[ah].swf;
                    Y.createChannel(aa.channel, aa.secret, j(aa.remote), aa.isHost);
                    if (aa.isHost) {
                        if (h && aa.swfNoThrottle) {
                            T(aa.props, {
                                position: "fixed",
                                right: 0,
                                top: 0,
                                height: "20px",
                                width: "20px"
                            })
                        }
                        T(aa.props, {
                            src: P(aa.remote, {
                                xdm_e: j(p.href),
                                xdm_c: aa.channel,
                                xdm_p: 6,
                                xdm_s: aa.secret
                            }),
                            name: U + aa.channel + "_provider"
                        });
                        X = A(aa)
                    }
                };
                if (o.stack.FlashTransport[ah] && o.stack.FlashTransport[ah].init) {
                    ag()
                } else {
                    if (!o.stack.FlashTransport[ah]) {
                        o.stack.FlashTransport[ah] = {
                            queue: [ag]
                        };
                        Z(ah)
                    } else {
                        o.stack.FlashTransport[ah].queue.push(ag)
                    }
                }
            },
            init: function() {
                G(ac.onDOMReady, ac)
            }
        }
    };
    o.stack.PostMessageTransport = function(aa) {
        var ac, ad, Y, Z;

        function X(ae) {
            if (ae.origin) {
                return j(ae.origin)
            }
            if (ae.uri) {
                return j(ae.uri)
            }
            if (ae.domain) {
                return p.protocol + "//" + ae.domain
            }
            throw "Unable to retrieve the origin of the event"
        }

        function ab(af) {
            var ae = X(af);
            if (ae == Z && af.data.substring(0, aa.channel.length + 1) == aa.channel + " ") {
                ac.up.incoming(af.data.substring(aa.channel.length + 1), ae)
            }
        }
        return ac = {
            outgoing: function(af, ag, ae) {
                Y.postMessage(aa.channel + " " + af, ag || Z);
                if (ae) {
                    ae()
                }
            },
            destroy: function() {
                x(N, "message", ab);
                if (ad) {
                    Y = null;
                    ad.parentNode.removeChild(ad);
                    ad = null
                }
            },
            onDOMReady: function() {
                Z = j(aa.remote);
                if (aa.isHost) {
                    var ae = function(af) {
                        if (af.data == aa.channel + "-ready") {
                            Y = "postMessage" in ad.contentWindow ? ad.contentWindow : ad.contentWindow.document;
                            x(N, "message", ae);
                            v(N, "message", ab);
                            K(function() {
                                ac.up.callback(true)
                            }, 0)
                        }
                    };
                    v(N, "message", ae);
                    T(aa.props, {
                        src: P(aa.remote, {
                            xdm_e: j(p.href),
                            xdm_c: aa.channel,
                            xdm_p: 1
                        }),
                        name: U + aa.channel + "_provider"
                    });
                    ad = A(aa)
                } else {
                    v(N, "message", ab);
                    Y = "postMessage" in N.parent ? N.parent : N.parent.document;
                    Y.postMessage(aa.channel + "-ready", Z);
                    K(function() {
                        ac.up.callback(true)
                    }, 0)
                }
            },
            init: function() {
                G(ac.onDOMReady, ac)
            }
        }
    };
    o.stack.FrameElementTransport = function(Y) {
        var Z, ab, aa, X;
        return Z = {
            outgoing: function(ad, ae, ac) {
                aa.call(this, ad);
                if (ac) {
                    ac()
                }
            },
            destroy: function() {
                if (ab) {
                    ab.parentNode.removeChild(ab);
                    ab = null
                }
            },
            onDOMReady: function() {
                X = j(Y.remote);
                if (Y.isHost) {
                    T(Y.props, {
                        src: P(Y.remote, {
                            xdm_e: j(p.href),
                            xdm_c: Y.channel,
                            xdm_p: 5
                        }),
                        name: U + Y.channel + "_provider"
                    });
                    ab = A(Y);
                    ab.fn = function(ac) {
                        delete ab.fn;
                        aa = ac;
                        K(function() {
                            Z.up.callback(true)
                        }, 0);
                        return function(ad) {
                            Z.up.incoming(ad, X)
                        }
                    }
                } else {
                    if (d.referrer && j(d.referrer) != S.xdm_e) {
                        N.top.location = S.xdm_e
                    }
                    aa = N.frameElement.fn(function(ac) {
                        Z.up.incoming(ac, X)
                    });
                    Z.up.callback(true)
                }
            },
            init: function() {
                G(Z.onDOMReady, Z)
            }
        }
    };
    o.stack.NameTransport = function(ab) {
        var ac;
        var ae, ai, aa, ag, ah, Y, X;

        function af(al) {
            var ak = ab.remoteHelper + (ae ? "#_3" : "#_2") + ab.channel;
            ai.contentWindow.sendMessage(al, ak)
        }

        function ad() {
            if (ae) {
                if (++ag === 2 || !ae) {
                    ac.up.callback(true)
                }
            } else {
                af("ready");
                ac.up.callback(true)
            }
        }

        function aj(ak) {
            ac.up.incoming(ak, Y)
        }

        function Z() {
            if (ah) {
                K(function() {
                    ah(true)
                }, 0)
            }
        }
        return ac = {
            outgoing: function(al, am, ak) {
                ah = ak;
                af(al)
            },
            destroy: function() {
                ai.parentNode.removeChild(ai);
                ai = null;
                if (ae) {
                    aa.parentNode.removeChild(aa);
                    aa = null
                }
            },
            onDOMReady: function() {
                ae = ab.isHost;
                ag = 0;
                Y = j(ab.remote);
                ab.local = B(ab.local);
                if (ae) {
                    o.Fn.set(ab.channel, function(al) {
                        if (ae && al === "ready") {
                            o.Fn.set(ab.channel, aj);
                            ad()
                        }
                    });
                    X = P(ab.remote, {
                        xdm_e: ab.local,
                        xdm_c: ab.channel,
                        xdm_p: 2
                    });
                    T(ab.props, {
                        src: X + "#" + ab.channel,
                        name: U + ab.channel + "_provider"
                    });
                    aa = A(ab)
                } else {
                    ab.remoteHelper = ab.remote;
                    o.Fn.set(ab.channel, aj)
                }
                ai = A({
                    props: {
                        src: ab.local + "#_4" + ab.channel
                    },
                    onLoad: function ak() {
                        var al = ai || this;
                        x(al, "load", ak);
                        o.Fn.set(ab.channel + "_load", Z);
                        (function am() {
                            if (typeof al.contentWindow.sendMessage == "function") {
                                ad()
                            } else {
                                K(am, 50)
                            }
                        })()
                    }
                })
            },
            init: function() {
                G(ac.onDOMReady, ac)
            }
        }
    };
    o.stack.HashTransport = function(Z) {
        var ac;
        var ah = this,
            af, aa, X, ad, am, ab, al;
        var ag, Y;

        function ak(ao) {
            if (!al) {
                return
            }
            var an = Z.remote + "#" + am++ + "_" + ao;
            (af || !ag ? al.contentWindow : al).location = an
        }

        function ae(an) {
            ad = an;
            ac.up.incoming(ad.substring(ad.indexOf("_") + 1), Y)
        }

        function aj() {
            if (!ab) {
                return
            }
            var an = ab.location.href,
                ap = "",
                ao = an.indexOf("#");
            if (ao != -1) {
                ap = an.substring(ao)
            }
            if (ap && ap != ad) {
                ae(ap)
            }
        }

        function ai() {
            aa = setInterval(aj, X)
        }
        return ac = {
            outgoing: function(an, ao) {
                ak(an)
            },
            destroy: function() {
                N.clearInterval(aa);
                if (af || !ag) {
                    al.parentNode.removeChild(al)
                }
                al = null
            },
            onDOMReady: function() {
                af = Z.isHost;
                X = Z.interval;
                ad = "#" + Z.channel;
                am = 0;
                ag = Z.useParent;
                Y = j(Z.remote);
                if (af) {
                    Z.props = {
                        src: Z.remote,
                        name: U + Z.channel + "_provider"
                    };
                    if (ag) {
                        Z.onLoad = function() {
                            ab = N;
                            ai();
                            ac.up.callback(true)
                        }
                    } else {
                        var ap = 0,
                            an = Z.delay / 50;
                        (function ao() {
                            if (++ap > an) {
                                throw new Error("Unable to reference listenerwindow")
                            }
                            try {
                                ab = al.contentWindow.frames[U + Z.channel + "_consumer"]
                            } catch (aq) {}
                            if (ab) {
                                ai();
                                ac.up.callback(true)
                            } else {
                                K(ao, 50)
                            }
                        })()
                    }
                    al = A(Z)
                } else {
                    ab = N;
                    ai();
                    if (ag) {
                        al = parent;
                        ac.up.callback(true)
                    } else {
                        T(Z, {
                            props: {
                                src: Z.remote + "#" + Z.channel + new Date,
                                name: U + Z.channel + "_consumer"
                            },
                            onLoad: function() {
                                ac.up.callback(true)
                            }
                        });
                        al = A(Z)
                    }
                }
            },
            init: function() {
                G(ac.onDOMReady, ac)
            }
        }
    };
    o.stack.ReliableBehavior = function(Y) {
        var aa, ac;
        var ab = 0,
            X = 0,
            Z = "";
        return aa = {
            incoming: function(af, ad) {
                var ae = af.indexOf("_"),
                    ag = af.substring(0, ae).split(",");
                af = af.substring(ae + 1);
                if (ag[0] == ab) {
                    Z = "";
                    if (ac) {
                        ac(true)
                    }
                }
                if (af.length > 0) {
                    aa.down.outgoing(ag[1] + "," + ab + "_" + Z, ad);
                    if (X != ag[1]) {
                        X = ag[1];
                        aa.up.incoming(af, ad)
                    }
                }
            },
            outgoing: function(af, ad, ae) {
                Z = af;
                ac = ae;
                aa.down.outgoing(X + "," + ++ab + "_" + af, ad)
            }
        }
    };
    o.stack.QueueBehavior = function(Z) {
        var ac, ad = [],
            ag = true,
            aa = "",
            af, X = 0,
            Y = false,
            ab = false;

        function ae() {
            if (Z.remove && ad.length === 0) {
                w(ac);
                return
            }
            if (ag || ad.length === 0 || af) {
                return
            }
            ag = true;
            var ah = ad.shift();
            ac.down.outgoing(ah.data, ah.origin, function(ai) {
                ag = false;
                if (ah.callback) {
                    K(function() {
                        ah.callback(ai)
                    }, 0)
                }
                ae()
            })
        }
        return ac = {
            init: function() {
                if (t(Z)) {
                    Z = {}
                }
                if (Z.maxLength) {
                    X = Z.maxLength;
                    ab = true
                }
                if (Z.lazy) {
                    Y = true
                } else {
                    ac.down.init()
                }
            },
            callback: function(ai) {
                ag = false;
                var ah = ac.up;
                ae();
                ah.callback(ai)
            },
            incoming: function(ak, ai) {
                if (ab) {
                    var aj = ak.indexOf("_"),
                        ah = parseInt(ak.substring(0, aj), 10);
                    aa += ak.substring(aj + 1);
                    if (ah === 0) {
                        if (Z.encode) {
                            aa = k(aa)
                        }
                        ac.up.incoming(aa, ai);
                        aa = ""
                    }
                } else {
                    ac.up.incoming(ak, ai)
                }
            },
            outgoing: function(al, ai, ak) {
                if (Z.encode) {
                    al = H(al)
                }
                var ah = [],
                    aj;
                if (ab) {
                    while (al.length !== 0) {
                        aj = al.substring(0, X);
                        al = al.substring(aj.length);
                        ah.push(aj)
                    }
                    while (aj = ah.shift()) {
                        ad.push({
                            data: ah.length + "_" + aj,
                            origin: ai,
                            callback: ah.length === 0 ? ak : null
                        })
                    }
                } else {
                    ad.push({
                        data: al,
                        origin: ai,
                        callback: ak
                    })
                }
                if (Y) {
                    ac.down.init()
                } else {
                    ae()
                }
            },
            destroy: function() {
                af = true;
                ac.down.destroy()
            }
        }
    };
    o.stack.VerifyBehavior = function(ab) {
        var ac, aa, Y, Z = false;

        function X() {
            aa = Math.random().toString(16).substring(2);
            ac.down.outgoing(aa)
        }
        return ac = {
            incoming: function(af, ad) {
                var ae = af.indexOf("_");
                if (ae === -1) {
                    if (af === aa) {
                        ac.up.callback(true)
                    } else {
                        if (!Y) {
                            Y = af;
                            if (!ab.initiate) {
                                X()
                            }
                            ac.down.outgoing(af)
                        }
                    }
                } else {
                    if (af.substring(0, ae) === Y) {
                        ac.up.incoming(af.substring(ae + 1), ad)
                    }
                }
            },
            outgoing: function(af, ad, ae) {
                ac.down.outgoing(aa + "_" + af, ad, ae)
            },
            callback: function(ad) {
                if (ab.initiate) {
                    X()
                }
            }
        }
    };
    o.stack.RpcBehavior = function(ad, Y) {
        var aa, af = Y.serializer || O();
        var ae = 0,
            ac = {};

        function X(ag) {
            ag.jsonrpc = "2.0";
            aa.down.outgoing(af.stringify(ag))
        }

        function ab(ag, ai) {
            var ah = Array.prototype.slice;
            return function() {
                var aj = arguments.length,
                    al, ak = {
                        method: ai
                    };
                if (aj > 0 && typeof arguments[aj - 1] === "function") {
                    if (aj > 1 && typeof arguments[aj - 2] === "function") {
                        al = {
                            success: arguments[aj - 2],
                            error: arguments[aj - 1]
                        };
                        ak.params = ah.call(arguments, 0, aj - 2)
                    } else {
                        al = {
                            success: arguments[aj - 1]
                        };
                        ak.params = ah.call(arguments, 0, aj - 1)
                    }
                    ac["" + ++ae] = al;
                    ak.id = ae
                } else {
                    ak.params = ah.call(arguments, 0)
                }
                if (ag.namedParams && ak.params.length === 1) {
                    ak.params = ak.params[0]
                }
                X(ak)
            }
        }

        function Z(an, am, ai, al) {
            if (!ai) {
                if (am) {
                    X({
                        id: am,
                        error: {
                            code: -32601,
                            message: "Procedure not found."
                        }
                    })
                }
                return
            }
            var ak, ah;
            if (am) {
                ak = function(ao) {
                    ak = q;
                    X({
                        id: am,
                        result: ao
                    })
                };
                ah = function(ao, ap) {
                    ah = q;
                    var aq = {
                        id: am,
                        error: {
                            code: -32099,
                            message: ao
                        }
                    };
                    if (ap) {
                        aq.error.data = ap
                    }
                    X(aq)
                }
            } else {
                ak = ah = q
            }
            if (!r(al)) {
                al = [al]
            }
            try {
                var ag = ai.method.apply(ai.scope, al.concat([ak, ah]));
                if (!t(ag)) {
                    ak(ag)
                }
            } catch (aj) {
                ah(aj.message)
            }
        }
        return aa = {
            incoming: function(ah, ag) {
                var ai = af.parse(ah);
                if (ai.method) {
                    if (Y.handle) {
                        Y.handle(ai, X)
                    } else {
                        Z(ai.method, ai.id, Y.local[ai.method], ai.params)
                    }
                } else {
                    var aj = ac[ai.id];
                    if (ai.error) {
                        if (aj.error) {
                            aj.error(ai.error)
                        }
                    } else {
                        if (aj.success) {
                            aj.success(ai.result)
                        }
                    }
                    delete ac[ai.id]
                }
            },
            init: function() {
                if (Y.remote) {
                    for (var ag in Y.remote) {
                        if (Y.remote.hasOwnProperty(ag)) {
                            ad[ag] = ab(Y.remote[ag], ag)
                        }
                    }
                }
                aa.down.init()
            },
            destroy: function() {
                for (var ag in Y.remote) {
                    if (Y.remote.hasOwnProperty(ag) && ad.hasOwnProperty(ag)) {
                        delete ad[ag]
                    }
                }
                aa.down.destroy()
            }
        }
    };
    b.easyXDM = o
})(window, document, location, window.setTimeout, decodeURIComponent, encodeURIComponent);
var zeus = zeus || {};
zeus.utilities = zeus.utilities || {};
(function() {
    "use strict";
    this.getCurrencySymbol = function(currency) {
        if (currency !== undefined) {
            var currencyCode = currency.toUpperCase();
            var currencySymbol = currencyCode;
            if (currencyCode === "GBP") {
                currencySymbol = "&pound;"
            }
            if (currencyCode === "EUR") {
                currencySymbol = "&euro;"
            }
            if (currencyCode === "USD") {
                currencySymbol = "&#36;"
            }
            return currencySymbol
        }
    };
    this.formatNumber = function(amount, currency) {
        if (currency !== undefined) {
            var currencyCode = currency.toUpperCase();
            var newAmount = amount;
            if (currencyCode === "GBP" || currencyCode === "EUR" || currencyCode === "USD") {
                newAmount = numeral(newAmount).format("0,0,0.00")
            }
            return newAmount
        }
    };
    this.formatCurrency = function(amount, currency, position) {
        if (currency !== undefined) {
            var currencyCode = currency.toUpperCase();
            var formattedCurrency = "";
            if (currencyCode === "GBP" || currencyCode === "EUR" || currencyCode === "USD") {
                formattedCurrency = this.formatNumber(amount, currencyCode)
            }
            if (position === "end") {
                formattedCurrency = formattedCurrency + this.getCurrencySymbol(currencyCode)
            } else {
                formattedCurrency = this.getCurrencySymbol(currencyCode) + formattedCurrency
            }
            return formattedCurrency
        }
    };
    this.tVar = function(tVariables, v1, v2) {
        var string = "";
        v2 = v2 || null;
        if (tVariables && tVariables[v1]) {
            if (v2 && tVariables[v1][v2]) {
                string = tVariables[v1][v2]
            } else if (!v2) {
                string = tVariables[v1]
            }
        }
        return string
    };
    this.messagesReplace = function(message, stringArray) {
        var msg = message;
        var stringsArrayLength = stringArray.length;
        for (var str = 0; str < stringsArrayLength; str++) {
            msg = msg.replace("{" + str + "}", stringArray[str])
        }
        return msg
    };
    this.changePage = function(url) {
        wlzeus.loadingMessage.showLoadingMessage();
        window.location.href = url
    };
    this.privateBrowsingCheck = function(message) {
        try {
            localStorage.privateTest = "private check"
        } catch (e) {
            var html = '<div class="private-mode-message"><button class="private-close icon close"></button><p class="private-message">' + message + "</p></div>";
            $("body").prepend(html);
            $(".private-close").on("click", function() {
                $(".private-mode-message").fadeOut(200)
            })
        }
    };
    this.updateValue = function(tString, opts) {
        var newString = tString;
        var regExBracket;
        _.each(opts, function(value, key) {
            regExBracket = new RegExp("\\[" + key + "\\]|{{" + key + "}}", "gi");
            newString = newString.replace(regExBracket, value)
        });
        return newString
    };
    this.inheritUrl = function(queryString) {
        var returnUrl = queryString.replace(/%2f/i, "/");
        return returnUrl
    }
}).apply(zeus.utilities);
var zeus = zeus || {};
zeus.utilities = zeus.utilities || {};
zeus.utilities.form = zeus.utilities.form || {};
(function() {
    "use strict";
    var inputDontSubmit;
    this.preventSubmit = function(preventSubmit) {
        if (!inputDontSubmit) {
            inputDontSubmit = $(".dont-submit")
        }
        if (inputDontSubmit.length) {
            self.disableInputs(inputDontSubmit, preventSubmit)
        }
    };
    this.disableInputs = function(elements, disableInputs) {
        if (disableInputs === false) {
            elements.removeClass("disabled").prop("disabled", false)
        } else {
            elements.addClass("disabled").prop("disabled", "disabled")
        }
    };
    this.setup = function(formId, formSettings) {
        var form = $(formId);
        formSettings = formSettings || {};
        wlzeus.bootstrap.tooltip.initTooltip(form, formSettings.messages, {
            useElemID: true
        });
        form.validate($.extend({
            onfocusin: function(element) {
                wlzeus.bootstrap.tooltip.showhideTooltip(element, "show")
            },
            onfocusout: function(element) {
                wlzeus.bootstrap.tooltip.showhideTooltip(element, "hide");
                this.element(element)
            },
            errorPlacement: function(error, element) {
                wlzeus.bootstrap.tooltip.displayTooltip(element, error.text(), "error")
            },
            success: function(label, element) {
                wlzeus.bootstrap.tooltip.displayTooltip(element, zeus.utilities.tVar(formSettings.messages, element.id, "tooltip"), "valid")
            },
            showErrors: function(errorMap, errorList) {
                if (this.numberOfInvalids()) {
                    $.each(errorList, function() {
                        wlzeus.bootstrap.tooltip.displayTooltip(this.element, this.message, "error")
                    })
                }
                this.defaultShowErrors()
            }
        }, formSettings))
    }
}).apply(zeus.utilities.form);
var zeus = zeus || {};
zeus.core = {};
var zeusCore = function() {
    "use strict";
    return {
        init: function(zeusSettings) {
            this.platform = zeusSettings.platform;
            this.isMobile = zeusSettings.isMobile;
            this.isAuthenticated = zeusSettings.isAuthenticated;
            this.siteHost = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ":" + window.location.port : "");
            this.siteRoot = $("*[data-siteroot]").data("siteroot");
            this.siteName = $("*[data-sitename]").data("sitename");
            this.createBindings(zeusSettings)
        },
        createBindings: function(zeusSettings) {
            var self = this;
            if (zeusSettings.chatBindings) {
                $(document).on("click", ".launch-live-chat", function(e) {
                    e.preventDefault();
                    var siteName = self.siteName.toString().replace(/\s/g, "");
                    window.open("https://server.iad.liveperson.net/hc/69596741/?cmd=file&file=visitorWantsToChat&site=69596741&SESSIONVAR!skill=" + siteName + "&imageUrl=https://server.iad.liveperson.net/hcp/Gallery/ChatButton-Gallery/English/General/1a/&referrer=" + encodeURI(document.location), "chat69596741", "width=472,height=320,resizable=yes")
                })
            }
            if (zeusSettings.dropdownBinding) {
                var collapseElem = $(".collapse");
                collapseElem.on("show.bs.collapse", function() {
                    collapseElem.find("in").collapse("hide")
                })
            }
        }
    }
};
if (typeof exports === "object") {
    module.exports = zeusCore
}
zeus.core = new zeusCore;
var zeus = zeus || {};
zeus.jit = zeus.jit || {};
(function() {
    "use strict";
    var self = this;
    var jitUrl = "api/commonServices/jitpipeline";
    var jitRequests = [];
    var jitStatus = false;
    self.postDelay = 1e3;
    self.responseCommands = {};
    this.start = function() {
        self.updateStatus("collecting");
        setTimeout(function() {
            self.request()
        }, self.postDelay)
    };
    this.add = function(jitRequest) {
        if (!jitStatus) {
            self.start()
        }
        jitRequests.push(jitRequest)
    };
    this.request = function() {
        self.updateStatus("posting");
        var requests = jitRequests;
        jitRequests = [];
        var jitRequestObject = self.createRequestObject(requests);
        var jitResponseObject = self.createResponseObject(requests);
        $.get(zeus.core.siteRoot + jitUrl, {
            requests: jitRequestObject
        }, function(data) {
            self.respond(data, jitResponseObject)
        }, "json")
    };
    this.respond = function(data, jitResponseObject) {
        self.updateStatus("responding");
        $.each(data, function(i, response) {
            $.each(jitResponseObject[response.Key], function(i, command) {
                self.responseCommands[command](response)
            })
        });
        self.destroy()
    };
    this.destroy = function() {
        if (jitRequests.length) {
            self.start()
        }
        self.updateStatus()
    };
    this.createRequestObject = function(requests) {
        var postObj = [];
        $.each(requests, function(i, val) {
            postObj.push(val[0])
        });
        return postObj
    };
    this.createResponseObject = function(requests) {
        var responseObj = [];
        $.each(requests, function(i, val) {
            var key = val[0].Name;
            if (val[0].Args) {
                key += ":" + val[0].Args.join("|")
            }
            responseObj[key] = responseObj[key] || [];
            responseObj[key].push(val[1])
        });
        return responseObj
    };
    this.updateStatus = function(status) {
        jitStatus = status || false
    }
}).apply(zeus.jit);
var zeus = zeus || {};
zeus.jit = zeus.jit || {};
zeus.jit.tabled = zeus.jit.tabled || {};
(function() {
    "use strict";
    var self = this;
    var table = {};
    this.init = function(opts) {
        table.tVars = opts.tVars;
        table.jitApi = opts.jitApi;
        table.jitObj = opts.jitObj;
        table.jitObjList = opts.jitObjList;
        table.showPagination = opts.showPagination || false;
        table.infiniteScroll = opts.infiniteScroll || false;
        table.isTableScroll = opts.isTableScroll || false;
        table.pagination = {};
        table.pagination.currentPage = opts.currentPage || 0;
        table.pagination.pageSize = opts.pageSize || 10;
        self.cacheElements(opts);
        self.setupJit();
        self.bindElements()
    };
    this.cacheElements = function(opts) {
        table.sel = {};
        table.sel.tabledContainer = opts.selectors.tabledContainer || "#tabledContainer";
        table.sel.filterForm = opts.selectors.filterForm || ".filter-form";
        table.sel.resultsContainer = opts.selectors.resultsContainer || ".results-container";
        table.sel.tableContainer = opts.selectors.tableContainer || ".results-table-container";
        table.sel.table = opts.selectors.table || ".results-table";
        table.sel.tableBody = opts.selectors.tableBody || ".table-body";
        table.sel.tableHead = opts.selectors.tableHead || ".table-head";
        table.sel.templateTableRow = opts.selectors.templateTableRow || "#tabledResultsRowTemplate";
        table.el = {};
        table.el.tabledContainer = $(table.sel.tabledContainer);
        table.el.filterForm = table.el.tabledContainer.find(table.sel.filterForm);
        table.el.formControls = table.el.filterForm.find("input, button, select");
        table.el.resultsContainer = table.el.tabledContainer.find(table.sel.resultsContainer);
        table.el.tableContainer = table.el.tabledContainer.find(table.sel.tableContainer);
        table.el.table = table.el.tabledContainer.find(table.sel.table);
        table.el.tableBody = table.el.tabledContainer.find(table.sel.tableBody);
        table.template = {};
        table.template.row = _.template($(table.sel.templateTableRow).html());
        if (table.showPagination) {
            table.sel.resultsPagination = opts.selectors.resultsPagination || ".results-pagination";
            table.sel.templatePagination = opts.selectors.templatePagination || "#tabledResultsPagingTemplate";
            table.el.resultsPagination = table.el.tabledContainer.find(table.sel.resultsPagination);
            table.template.pagination = _.template($(table.sel.templatePagination).html())
        }
        if (table.isTableScroll) {
            table.sel.tableScroll = opts.selectors.tableScroll || ".table-scroll-container";
            table.el.tableScroll = table.el.tabledContainer.find(table.sel.tableScroll);
            table.el.tableScrollHead = table.el.tableScroll.find(".hidden-thead");
            table.el.fixedHead = table.el.tabledContainer.find(".table-fixed-header");
            table.el.fixedHeadItems = table.el.fixedHead.find(".head-item");
            table.el.hiddenHeadItems = table.el.tableScrollHead.find(".head-item")
        }
    };
    this.bindElements = function() {
        table.el.tabledContainer.on("click", ".results-next-page", function() {
            if (self.loadMoreCheck()) {
                self.loadNextPage()
            }
        });
        if (table.infiniteScroll) {
            var scrollContainer = table.isTableScroll ? table.el.tableScroll : $(document);
            scrollContainer.scroll(function() {
                if (self.loadMoreCheck() && self.isViewable(table.el.tableLastEl, scrollContainer)) {
                    self.loadNextPage()
                }
            })
        }
        $(window).resize(function() {
            self.fixTableHeader()
        })
    };
    this.loadMoreCheck = function() {
        return !table.requestInProcess && table.pagination.currentPage < table.pagination.totalPages && table.el.tableContainer.is(":visible")
    };
    this.isViewable = function(lastEl, scrollContainer) {
        var elementHolder = table.isTableScroll ? scrollContainer : $(window);
        var element = $(lastEl);
        var viewTop;
        var elemTop = element.offset().top;
        if (table.isTableScroll) {
            viewTop = elementHolder.offset().top
        } else {
            viewTop = elementHolder.scrollTop()
        }
        var viewBottom = viewTop + elementHolder.height();
        return elemTop <= viewBottom && elemTop >= viewTop
    };
    this.setupJit = function() {
        var jitCommand = {
            getTabledResponse: function(response) {
                var responseData = response.Response;
                var showResults = false;
                if (!_.isNull(responseData) && !_.isUndefined(responseData)) {
                    if (responseData.Items && responseData.Items.length !== 0) {
                        showResults = true;
                        self.showResults(responseData)
                    } else {
                        self.error("noResults")
                    }
                } else {
                    self.error()
                }
                self.resultsReceived(showResults)
            }
        };
        $.extend(zeus.jit.responseCommands, jitCommand)
    };
    this.makeRequest = function(request, nextPage) {
        table.requestInProcess = true;
        table.previousRequest = request;
        zeus.utilities.form.disableInputs(table.el.formControls);
        table.el.resultsContainer.addClass("loading");
        if (!nextPage) {
            table.newSearch = true;
            table.el.resultsContainer.removeClass("more-results");
            table.el.resultsContainer.find(".alert").fadeOut(200, function() {
                this.remove()
            });
            table.el.tableContainer.fadeOut(200, function() {
                table.el.tableBody.empty();
                if (table.isTableScroll) {
                    table.el.tableScroll.scrollTop(0)
                }
            })
        } else {
            table.newSearch = false
        }
        zeus.jit.add([{
            Name: table.jitApi,
            Args: [JSON.stringify(request)]
        }, "getTabledResponse"])
    };
    this.loadNextPage = function() {
        table.previousRequest.PageNumber++;
        self.makeRequest(table.previousRequest, true)
    };
    this.showResults = function(response) {
        var tableRow = "";
        var formatedResponses = self.formatResponse(response);
        formatedResponses.forEach(function(formatedResponse) {
            tableRow += table.template.row(formatedResponse)
        });
        table.el.tableBody.append(tableRow);
        table.pagination.totalItems = response.TotalItems;
        table.pagination.totalPages = response.TotalPages;
        table.pagination.currentPage = response.PageNumber;
        table.pagination.moreItems = table.pagination.totalItems - table.pagination.currentPage * table.pagination.pageSize;
        table.pagination.morePages = table.pagination.totalPages - table.pagination.currentPage;
        if (table.showPagination) {
            table.el.resultsPagination.empty().append(table.template.pagination(table.pagination))
        }
        if (table.pagination.currentPage < table.pagination.totalPages) {
            table.el.resultsContainer.addClass("more-results")
        } else {
            table.el.resultsContainer.removeClass("more-results")
        }
        if (table.infiniteScroll) {
            table.el.tableLastEl = table.el.tableBody.find("tr:last")
        }
    };
    this.resultsReceived = function(showResults) {
        table.requestInProcess = false;
        zeus.utilities.form.disableInputs(table.el.formControls, false);
        table.el.resultsContainer.removeClass("loading");
        if (showResults) {
            table.el.tableContainer.removeClass("hide").hide().fadeIn(200);
            if (table.isTableScroll) {
                self.fixTableHeader()
            }
        }
        if (table.infiniteScroll) {
            var scrollContainer = table.isTableScroll ? table.el.tableScroll : $(document);
            if (self.loadMoreCheck() && self.isViewable(table.el.tableLastEl, scrollContainer)) {
                self.loadNextPage()
            }
        }
    };
    this.fixTableHeader = function() {
        if (table.newSearch) {
            table.el.table.css("margin-top", "-" + table.el.tableScrollHead.height() + "px");
            table.el.fixedHead.css("width", table.el.table.width() + "px")
        }
        _.each(table.el.hiddenHeadItems, function(el, i) {
            $(table.el.fixedHeadItems[i]).css("width", $(el).width() + "px")
        })
    };
    this.error = function(error) {
        var errorMsg = zeus.utilities.tVar(table.tVars, "errorMessages", error);
        if (typeof errorMsg !== "string") {
            errorMsg = zeus.utilities.tVar(table.tVars, "errorMessages", "default")
        }
        var alert = '<div class="alert alert-error alert-info">' + errorMsg + "</div>";
        table.el.resultsContainer.append(alert)
    }
}).apply(zeus.jit.tabled);
var zeus = zeus || {};
zeus.jit = zeus.jit || {};
zeus.jit.multipleTables = zeus.jit.multipleTables || {};
(function() {
    "use strict";
    var self = this;
    var global = {};
    var tables = [];
    this.init = function(tVars, promoHistoryTablesOpts) {
        global.tVars = tVars;
        self.setupJit();
        _.each(promoHistoryTablesOpts, function(tableOpts) {
            var table = {};
            table.jitApi = tableOpts.jitApi;
            table.stringifiedRequest = JSON.stringify(tableOpts.request);
            table.showPagination = tableOpts.pagination.showPagination || false;
            table.infiniteScroll = tableOpts.pagination.infiniteScroll || false;
            table.isTableScroll = tableOpts.pagination.isTableScroll || false;
            table.pagination = {};
            table.pagination.currentPage = tableOpts.pagination.currentPage || 0;
            table.pagination.pageSize = tableOpts.pagination.pageSize || 5;
            self.cacheElementsForTable(table, tableOpts);
            self.bindElements(table);
            tables.push(table)
        })
    };
    this.cacheElementsForTable = function(table, opts) {
        table.sel = {};
        table.sel.tabledContainer = opts.selectors.tabledContainer;
        table.sel.resultsContainer = opts.selectors.resultsContainer || ".results-container";
        table.sel.tableContainer = opts.selectors.tableContainer || ".results-table-container";
        table.sel.table = opts.selectors.table || ".results-table";
        table.sel.tableBody = opts.selectors.tableBody || ".table-body";
        table.sel.tableHead = opts.selectors.tableHead || ".table-head";
        table.sel.templateTableRow = opts.selectors.templateTableRow;
        table.el = {};
        table.el.tabledContainer = $(table.sel.tabledContainer);
        table.el.resultsContainer = table.el.tabledContainer.find(table.sel.resultsContainer);
        table.el.tableContainer = table.el.tabledContainer.find(table.sel.tableContainer);
        table.el.table = table.el.tabledContainer.find(table.sel.table);
        table.el.tableBody = table.el.tabledContainer.find(table.sel.tableBody);
        table.template = {};
        table.template.row = _.template($(table.sel.templateTableRow).html());
        if (table.showPagination) {
            table.sel.resultsPagination = opts.selectors.resultsPagination || ".results-pagination";
            table.sel.templatePagination = opts.selectors.templatePagination;
            table.el.resultsPagination = table.el.tabledContainer.find(table.sel.resultsPagination);
            table.template.pagination = _.template($(table.sel.templatePagination).html())
        }
        if (table.isTableScroll) {
            table.sel.tableScroll = opts.selectors.tableScrollContainer;
            table.el.tableScroll = table.el.tabledContainer.find(table.sel.tableScroll);
            table.el.tableScrollHead = table.el.tableScroll.find(".hidden-thead");
            table.el.fixedHead = table.el.tabledContainer.find(".table-fixed-header");
            table.el.fixedHeadItems = table.el.fixedHead.find(".head-item");
            table.el.hiddenHeadItems = table.el.tableScrollHead.find(".head-item")
        }
    };
    this.bindElements = function(table) {
        if (table.infiniteScroll) {
            var scrollContainer = table.isTableScroll ? table.el.tableScroll : $(document);
            scrollContainer.scroll(function() {
                if (self.loadMoreCheck(table) && self.isViewable(table, table.el.tableLastEl, scrollContainer)) {
                    self.loadNextPage(table)
                }
            })
        }
        if (table.isTableScroll) {
            $(window).resize(_.debounce(function() {
                self.fixTableHeader(table)
            }, 400))
        }
    };
    this.fixTableHeader = function(table) {
        if (table.newSearch) {
            table.el.fixedHead.css("width", table.el.table.width() + "px");
            $(".table-scroll-container").css("min-width", table.el.table.width() + "px")
        }
        _.each(table.el.hiddenHeadItems, function(el, i) {
            $(table.el.fixedHeadItems[i]).css("min-width", $(el).width() + "px")
        })
    };
    this.loadMoreCheck = function(table) {
        return !table.requestInProcess && table.pagination.currentPage < table.pagination.totalPages && table.el.tableContainer.is(":visible")
    };
    this.isViewable = function(table, lastEl, scrollContainer) {
        var elementHolder = table.isTableScroll ? scrollContainer : $(window);
        var element = $(lastEl);
        var viewTop;
        var elemTop = element.offset().top;
        if (table.isTableScroll) {
            viewTop = elementHolder.offset().top
        } else {
            viewTop = elementHolder.scrollTop()
        }
        var viewBottom = viewTop + elementHolder.height();
        return elemTop <= viewBottom && elemTop >= viewTop
    };
    this.setupJit = function() {
        var jitCommand = {
            getTabledResponse: function(response) {
                var responseData = response.Response;
                var showResults = false;
                var table = self.getTableByResponseKey(response.Key);
                if (!_.isNull(responseData) && !_.isUndefined(responseData)) {
                    if (responseData.Items && responseData.Items.length !== 0) {
                        showResults = true;
                        self.showResults(table, responseData)
                    } else {
                        self.error(table, "noResults")
                    }
                } else {
                    self.error(table)
                }
                self.resultsReceived(table, showResults)
            }
        };
        $.extend(zeus.jit.responseCommands, jitCommand)
    };
    this.getTableByResponseKey = function(jitResponseKey) {
        for (var i = 0; i < tables.length; i++) {
            if (jitResponseKey.indexOf(tables[i].stringifiedRequest) > -1) {
                return tables[i]
            }
        }
    };
    this.makeRequests = function(requests, nextPage, targetedTable) {
        var table;
        _.each(requests, function(request, i) {
            table = targetedTable || tables[i];
            table.el.resultsContainer.addClass("loading");
            table.requestInProcess = true;
            table.previousRequest = request;
            if (!nextPage) {
                table.newSearch = true;
                table.el.resultsContainer.removeClass("more-results");
                table.el.resultsContainer.find(".alert").fadeOut(200, function() {
                    this.remove()
                });
                table.el.tableContainer.fadeOut(200, function() {
                    table.el.tableBody.empty();
                    if (table.isTableScroll) {
                        table.el.tableScroll.scrollTop(0)
                    }
                })
            } else {
                table.newSearch = false
            }
            zeus.jit.add([{
                Name: table.jitApi,
                Args: [JSON.stringify(request)]
            }, "getTabledResponse"])
        })
    };
    this.showResults = function(table, response) {
        var formatedResponses = self.formatResponse(response);
        var tableRow = "";
        formatedResponses.forEach(function(formatedResponse) {
            tableRow += table.template.row(formatedResponse)
        });
        table.el.tableBody.append(tableRow);
        if (table.showPagination) {
            table.pagination.totalItems = response.TotalItems;
            table.pagination.totalPages = response.TotalPages;
            table.pagination.currentPage = response.PageNumber;
            table.pagination.moreItems = table.pagination.totalItems - table.pagination.currentPage * table.pagination.pageSize;
            table.pagination.morePages = table.pagination.totalPages - table.pagination.currentPage;
            table.el.resultsPagination.empty().append(table.template.pagination(table.pagination));
            if (table.pagination.currentPage < table.pagination.totalPages) {
                table.el.resultsContainer.addClass("more-results")
            } else {
                table.el.resultsContainer.removeClass("more-results")
            }
        }
        if (table.infiniteScroll) {
            table.el.tableLastEl = table.el.tableBody.find("tr:last")
        }
    };
    this.resultsReceived = function(table, showResults) {
        table.requestInProcess = false;
        table.el.resultsContainer.removeClass("loading");
        if (showResults) {
            table.el.tableContainer.removeClass("hide").hide().fadeIn(200);
            if (table.isTableScroll) {
                self.fixTableHeader(table)
            }
        }
        if (table.infiniteScroll) {
            var scrollContainer = table.isTableScroll ? table.el.tableScroll : $(document);
            if (self.loadMoreCheck(table) && self.isViewable(table, table.el.tableLastEl, scrollContainer)) {
                self.loadNextPage(table)
            }
        }
    };
    this.loadNextPage = function(table) {
        table.previousRequest.PageNumber++;
        table.stringifiedRequest = JSON.stringify(table.previousRequest);
        self.makeRequests([table.previousRequest], true, table)
    };
    this.error = function(table, error) {
        var errorMsg = zeus.utilities.tVar(global.tVars, "errorMessages", error);
        if (typeof errorMsg !== "string") {
            errorMsg = zeus.utilities.tVar(global.tVars, "errorMessages", "default")
        }
        var errorAlert = '<div class="alert alert-error alert-info">' + errorMsg + "</div>";
        table.el.resultsContainer.append(errorAlert)
    }
}).apply(zeus.jit.multipleTables);
var zeus = zeus || {};
zeus.stickyHeader = {};
(function() {
    "use strict";
    var self = this;
    var stickySelector;
    var stickyContainer;
    var largeLogoEl = $(".logo-full");
    var smallLogoEl = $(".logo-small");
    var changeHeaderOn;
    var logoSwap = false;
    this.init = function(stickySelectorEl, stickyContainerEl) {
        stickySelector = stickySelectorEl;
        stickyContainer = stickyContainerEl;
        changeHeaderOn = $(stickySelector).position().top;
        self.setNavContainerHeight();
        self.logoSwapCheck();
        self.addBindings();
        self.scrollPage()
    };
    this.addBindings = function() {
        $(window).scroll(self.scrollPage).resize(self.setNavContainerHeight)
    };
    this.scrollPage = function() {
        var top = $("body").scrollTop();
        if (top >= changeHeaderOn) {
            $(stickySelector).addClass("shrink");
            if (logoSwap && largeLogoEl.is(":visible")) {
                self.swapLogos()
            }
        } else {
            $(stickySelector).removeClass("shrink");
            if (logoSwap && smallLogoEl.is(":visible")) {
                self.swapLogos()
            }
        }
    };
    this.setNavContainerHeight = function() {
        if ($(stickyContainer).length) {
            setTimeout(function() {
                $(stickyContainer).css("height", $(stickySelector).outerHeight())
            }, 100)
        }
    };
    this.logoSwapCheck = function() {
        if (largeLogoEl.length && smallLogoEl.length) {
            logoSwap = true
        }
    };
    this.swapLogos = function() {
        if ($(stickySelector).hasClass("shrink")) {
            self.animateLogoSwap(largeLogoEl, smallLogoEl)
        } else {
            self.animateLogoSwap(smallLogoEl, largeLogoEl)
        }
    };
    this.animateLogoSwap = function(elToHide, elToShow) {
        var transitionInEffect = "transition.fadeIn";
        var transitionOutEffect = "transition.fadeOut";
        elToHide.velocity(transitionOutEffect, 100).css("display", "none");
        elToShow.velocity(transitionInEffect, 100).css("display", "block")
    }
}).apply(zeus.stickyHeader);
var zeus = zeus || {};
zeus.flyoutMenu = {};
(function() {
    "use strict";
    var self = this;
    var navTriggerEl;
    var beforeSiteEl;
    var siteEl;
    var bodyEl;
    var menuText;
    var easing;
    var transitionSpeed;
    var menuOpenClass;
    this.init = function(easeEffect, speed) {
        easing = easeEffect;
        transitionSpeed = speed;
        self.cacheElements();
        self.addBindings();
        self.translateEl(beforeSiteEl, "62px")
    };
    this.cacheElements = function() {
        navTriggerEl = $(".nav-trigger");
        beforeSiteEl = $(".before-site");
        siteEl = $(".site");
        bodyEl = $("#body");
        menuText = navTriggerEl.text();
        menuOpenClass = "menu-open"
    };
    this.addBindings = function() {
        navTriggerEl.on("click", self.toggleMenu);
        siteEl.on("click", self.closeMenuOnClickOut)
    };
    this.toggleMenu = function(e) {
        e.stopPropagation();
        if (bodyEl.hasClass(menuOpenClass)) {
            self.closeMenu()
        } else {
            self.openMenu()
        }
    };
    this.closeMenuOnClickOut = function() {
        if (bodyEl.hasClass(menuOpenClass)) {
            self.closeMenu()
        }
    };
    this.openMenu = function() {
        bodyEl.addClass(menuOpenClass);
        self.translateEl(beforeSiteEl, "0");
        self.translateEl(siteEl, "258px");
        self.updateButton("add", "")
    };
    this.closeMenu = function() {
        bodyEl.removeClass(menuOpenClass);
        self.translateEl(beforeSiteEl, "62px");
        self.translateEl(siteEl, "0");
        self.updateButton("remove", menuText)
    };
    this.translateEl = function(el, value) {
        el.velocity({
            translateX: value
        }, transitionSpeed, easing)
    };
    this.updateButton = function(toggle, text) {
        var closeMenuClass = "close-menu";
        setTimeout(function() {
            if (toggle === "add") {
                navTriggerEl.addClass(closeMenuClass).text(text)
            } else {
                navTriggerEl.removeClass(closeMenuClass).text(text)
            }
        }, transitionSpeed - 1e3)
    }
}).apply(zeus.flyoutMenu);
var zeus = zeus || {};
zeus.adminUtilities = zeus.adminUtilities || {};
(function() {
    "use strict";
    this.toggleOptions = function(checkboxEl, optionsContainer, checkedBehaviour) {
        if (checkboxEl.not(":checked")) {
            if (checkedBehaviour) {
                optionsContainer.show()
            } else {
                optionsContainer.hide()
            }
        }
        if (checkboxEl.is(":checked")) {
            if (checkedBehaviour) {
                optionsContainer.hide()
            } else {
                optionsContainer.show()
            }
        }
        checkboxEl.on("change", function() {
            optionsContainer.fadeToggle("fast")
        })
    }
}).apply(zeus.adminUtilities);
var zeus = zeus || {};
zeus.bedeSlider = zeus.bedeSlider || {};
(function() {
    "use strict";
    var self = this;
    var slidersArr = [];
    var activeClass;
    var paginationEnabledClass;
    var sliderWrapperClass;
    var slidesContainerClass;
    var sliderItemClass;
    var paginationContainerClass;
    var paginationItemClass;
    var swipeLeftEvent;
    var swipeRightEvent;
    var swipeEvents;
    this.init = function(options) {
        var sliderOptions = options;
        var sliderId = sliderOptions.sliderId;
        self.cacheSelectors();
        self.addBindings(sliderId, sliderOptions);
        var sliderProperties = self.getSliderProperties(sliderId);
        self.updateSliderDimensions(sliderId, sliderOptions, sliderProperties);
        self.updateCurrentSlide(sliderId, sliderOptions, 0);
        if (sliderOptions.showPagination) {
            self.updateCurrentPagination(sliderId, 0)
        }
        var selector = slidesContainerClass;
        if (sliderOptions.transitionEffect === "fade") {
            selector = sliderItemClass
        }
        self.updateSliderCss("#" + sliderId + " " + selector, "transition", "all " + sliderOptions.transitionSpeed + "s ease");
        self.setSliderInterval(sliderId, sliderOptions);
        self.handleWindowResize(sliderId, sliderOptions);
        self.setupTouchHandlers(sliderId, sliderOptions);
        self.sliderLoaded(sliderId)
    };
    this.sliderLoaded = function(slider) {
        $("#" + slider + " .slider-loading-content").fadeOut("400", function() {
            $("#" + slider + " " + slidesContainerClass + "," + "#" + slider + " " + paginationContainerClass).fadeIn("400")
        })
    };
    this.cacheSelectors = function() {
        activeClass = "active";
        paginationEnabledClass = "pagination-on";
        sliderWrapperClass = ".slider-wrapper";
        slidesContainerClass = ".slider-slides";
        sliderItemClass = ".slider-item";
        paginationContainerClass = ".slider-pagination";
        paginationItemClass = ".pagination-item";
        swipeLeftEvent = "swipeleft";
        swipeRightEvent = "swiperight";
        swipeEvents = swipeLeftEvent + " " + swipeRightEvent
    };
    this.addBindings = function(slider, opts) {
        if (opts.showPagination) {
            $("#" + slider + " " + paginationItemClass).on("click", function() {
                if (!$(this).hasClass(activeClass)) {
                    var newActiveSlide = $(this).index();
                    self.updateSliderState(slider, opts, newActiveSlide, "transform", "translateX(-" + newActiveSlide * self.getSliderProperties(slider).sliderWidth + "px)");
                    self.resetInterval(slider, opts)
                }
            })
        }
    };
    this.getSliderProperties = function(slider) {
        var slidesAmount = $("#" + slider + " " + sliderItemClass).length;
        var sliderWidth = $("#" + slider).width();
        var slidesOverflowWidth = slidesAmount * sliderWidth;
        var sliderProperties = {
            slidesAmount: slidesAmount,
            sliderWidth: sliderWidth,
            slidesOverflowWidth: slidesOverflowWidth
        };
        return sliderProperties
    };
    this.updateSliderDimensions = function(slider, opts, sliderProperties) {
        $("#" + slider + " " + slidesContainerClass).css("width", sliderProperties.slidesOverflowWidth);
        $("#" + slider + " " + sliderItemClass).css({
            width: sliderProperties.sliderWidth / opts.itemsPerSlider - opts.itemWidthOffset + "px",
            "margin-left": opts.marginBetweenSlides / 2 + "px",
            "margin-right": opts.marginBetweenSlides / 2 + "px"
        });
        var numberOfPaginationItems = self.getNumberOfDisplays(sliderProperties.slidesAmount, opts.itemsPerSlider);
        if (opts.itemsPerSlider > 1) {
            $("#" + slider + " " + paginationItemClass + ":gt(" + (numberOfPaginationItems - 1) + ")").remove()
        }
    };
    this.getNumberOfDisplays = function(slidesAmount, itemsPerSlide) {
        return Math.ceil(slidesAmount / itemsPerSlide)
    };
    this.getActiveSlide = function(slider) {
        return $("#" + slider + " " + sliderItemClass + "." + activeClass + ":first").index() + 1
    };
    this.setSliderInterval = function(slider, opts) {
        var sliderDisplays = self.getNumberOfDisplays(opts.slidesAmount, opts.itemsPerSlider);
        if (sliderDisplays > 1) {
            window[slider] = setInterval(function() {
                self.updateSliderPosition(slider, opts, false)
            }, opts.displayTime)
        }
    };
    this.updateSliderPosition = function(slider, opts, reverse) {
        if (!reverse) {
            self.slideForward(slider, opts)
        } else {
            self.slideBackwards(slider, opts)
        }
    };
    this.slideForward = function(slider, opts) {
        var activeSlide = self.getActiveSlide(slider);
        activeSlide = Math.ceil(activeSlide / opts.itemsPerSlider);
        var sliderDisplays = self.getNumberOfDisplays(opts.slidesAmount, opts.itemsPerSlider);
        if (activeSlide >= sliderDisplays) {
            activeSlide = 0;
            self.updateSliderState(slider, opts, activeSlide, "transform", "translate3d(0, 0, 0)")
        } else {
            var sliderWidth = self.getSliderProperties(slider).sliderWidth;
            self.updateSliderState(slider, opts, activeSlide, "transform", "translate3d(-" + activeSlide * sliderWidth + "px, 0, 0)")
        }
    };
    this.slideBackwards = function(slider, opts) {
        var activeSlide = self.getActiveSlide(slider);
        activeSlide = Math.ceil(activeSlide / opts.itemsPerSlider);
        var sliderWidth = self.getSliderProperties(slider).sliderWidth;
        if (self.getActiveSlide(slider) <= 1) {
            activeSlide = self.getNumberOfDisplays(opts.slidesAmount, opts.itemsPerSlider);
            self.updateSliderState(slider, opts, activeSlide - 1, "transform", "translate3d(-" + (activeSlide - 1) * sliderWidth + "px, 0, 0)")
        } else {
            activeSlide--;
            self.updateSliderState(slider, opts, activeSlide - 1, "transform", "translate3d(-" + (activeSlide - 1) * sliderWidth + "px, 0, 0)")
        }
    };
    this.updateSliderState = function(slider, opts, newActiveSlide, property, value) {
        self.updateCurrentSlide(slider, opts, newActiveSlide);
        if (opts.showPagination) {
            self.updateCurrentPagination(slider, newActiveSlide)
        }
        if (opts.transitionEffect === "slide") {
            self.updateSliderCss("#" + slider + " " + slidesContainerClass, property, value)
        }
    };
    this.updateCurrentSlide = function(slider, opts, newActiveSlide) {
        $("#" + slider + " " + sliderItemClass).removeClass(activeClass);
        $("#" + slider + " " + sliderItemClass).slice(newActiveSlide * opts.itemsPerSlider, newActiveSlide * opts.itemsPerSlider + opts.itemsPerSlider).addClass(activeClass)
    };
    this.updateCurrentPagination = function(slider, newActiveSlide) {
        $("#" + slider + " " + paginationItemClass).removeClass(activeClass);
        $("#" + slider + " " + paginationItemClass).eq(newActiveSlide).addClass(activeClass)
    };
    this.updateSliderCss = function(element, property, value) {
        $(element).css("-webkit-" + property, value);
        $(element).css("-moz-" + property, value);
        $(element).css("-ms-" + property, value);
        $(element).css(property, value)
    };
    this.handleWindowResize = function(slider, opts) {
        var sliderObject = {
            sliderId: slider,
            sliderOpts: opts
        };
        slidersArr.push(sliderObject);
        var resizeEvt;
        $(window).resize(function() {
            clearTimeout(window.resizeEvt);
            window.resizeEvt = setTimeout(function() {
                $(slidersArr).each(function(i) {
                    var currentSlider = slidersArr[i];
                    var sliderProperties = self.getSliderProperties(currentSlider.sliderId);
                    self.updateSliderDimensions(currentSlider.sliderId, currentSlider.sliderOpts, sliderProperties);
                    self.updateSliderCss("#" + slider + " " + slidesContainerClass, "transition", "all " + currentSlider.sliderOpts.transitionSpeed + "s ease");
                    self.resetInterval(currentSlider.sliderId, currentSlider.sliderOpts)
                })
            }, 250)
        })
    };
    this.resetInterval = function(slider, opts) {
        clearInterval(window[slider]);
        self.setSliderInterval(slider, opts)
    };
    this.setupTouchHandlers = function(slider, opts) {
        var sliderEl = document.getElementById(slider);
        var hammer = new Hammer(sliderEl);
        hammer.on(swipeEvents, function(ev) {
            self.handleTouch(ev.type, slider, opts)
        })
    };
    this.handleTouch = function(direction, slider, opts) {
        if (direction === swipeLeftEvent) {
            self.updateSliderPosition(slider, opts)
        } else {
            self.updateSliderPosition(slider, opts, true)
        }
        self.resetInterval(slider, opts)
    }
}).apply(zeus.bedeSlider);
var siteConfig = {
    validation: {
        generic: {
            genericError: "An Error has occured please try again"
        },
        balance: {
            loading: "Loading",
            unavailableString: "Unavailable",
            unavailable: "balance unavailable",
            noBalance: "£0.00"
        },
        firstName: {
            tooltip: "Please enter your first name.",
            required: "You must enter your first name.",
            format: "First name must only contain letters or . ' - symbols."
        },
        lastName: {
            tooltip: "Please enter your last name.",
            required: "You must enter last name.",
            format: "Last name must only contain letters or . ' - symbols."
        },
        email: {
            tooltip: "Please enter your email address. This will be used to contact you about any important information relating to your account and to send some promotional emails.",
            required: "You must enter your email address.",
            format: "Please enter a valid email address.",
            notAvailable: "The address is already registered."
        },
        phone: {
            tooltip: "Please enter your landline or mobile number.",
            required: "You must enter your contact telephone number.",
            format: "Please enter a valid landline or mobile number."
        },
        mobile: {
            tooltip: "Please enter your mobile number.",
            required: "You must enter your mobile number.",
            format: "Please enter a valid mobile number."
        },
        address: {
            addressLine1: {
                tooltip: "Please enter the first line of your address.",
                required: "You must enter the first line of your address.",
                format: "Please enter a valid first line of your address."
            },
            addressLine2: {
                tooltip: "Please enter the second line of your address.",
                format: "Please enter a valid second line of your address."
            },
            townCity: {
                tooltip: "Please enter your town or city.",
                required: "You must enter your town or city.",
                format: "Please enter a valid town or city."
            },
            county: {
                tooltip: "Please enter your county.",
                required: "You must enter your county.",
                format: "Please enter a valid county."
            },
            postcode: {
                tooltip: "Please enter your postcode.",
                required: "You must enter your postcode.",
                format: "Please enter a valid postcode."
            }
        },
        password: {
            tooltip: "Please enter your password.",
            required: "Your current password is required.",
            invalid: "Your password is incorrect.",
            minLength: "You must specify a password of {0} or more characters.",
            maxLength: "You must specify a password of {0} or less characters.",
            minLengthValue: 6,
            maxLengthValue: 15
        },
        newPassword: {
            tooltip: "Please choose a new password. Passwords must be between {0} - {1} characters, only contain letters and numbers and are case sensitive.",
            required: "You must enter a new password.",
            format: "Passwords can only consist of letters and numbers.",
            minlength: "You must specify a password of {0} or more characters.",
            maxlength: "You must specify a password of {0} or less characters.",
            sameAsOld: "Your new password is the same as your current password. Please enter a new unique password."
        },
        confirmNewPassword: {
            tooltip: "Please confirm your new password.",
            required: "You must confirm your password.",
            different: "New password and confirm password do not match.",
            sameAsOld: "Your new password is the same as your current password. Please enter a new unique password."
        },
        depositAmount: {
            tooltip: "Please enter your deposit amount.",
            required: "A deposit amount is required.",
            currency: "Please enter a valid deposit amount.",
            minimum: "The minimum deposit amount is &pound;{0}.",
            promotionMinimum: "Please deposit an amount over &pound;{0} to claim this promotion."
        },
        withdrawAmount: {
            tooltip: "Please enter your withdrawal amount.",
            required: "A withdrawal amount is required.",
            minimum: "The minimum withdrawal amount is &pound;{0}.",
            currency: "Please enter a valid withdrawal amount."
        }
    },
    responses: {
        default: {
            error: "An error has occured, please try again later."
        },
        changePassword: {
            success: "Password updated successfully."
        },
        updateDetails: {
            success: "Your details have been updated successfully."
        }
    }
};
var wlzeus = wlzeus || {};
wlzeus.balanceData = {
    balanceElements: [],
    obj: {},
    list: [],
    init: function() {
        this.addBindings()
    },
    addBindings: function() {
        var _this = this;
        $(document).on("updateBalances", function() {
            _this.getBalances()
        })
    },
    getBalances: function() {
        var _this = this;
        this.balanceElements = $(".balance-widget-amount");
        this.balanceElements.html(siteConfig.validation.balance.loading);
        if (!zeus.jit.responseCommands.getBalancesAndRingFencedBonuses) {
            $.extend(zeus.jit.responseCommands, {
                getBalancesAndRingFencedBonuses: function(response) {
                    if (!_.isNull(response) && response.DidSucceed && !_.isNull(response.Response) && !_.isUndefined(response.Response)) {
                        _this.list = response.Response.Balances;
                        _this.list.unshift({
                            BalanceName: "TotalBalance",
                            Value: response.Response.TotalBalance
                        });
                        _this.obj["totalbalance"] = {
                            BalanceName: "Total Balance",
                            Value: response.Response.TotalBalance
                        };
                        response.Response.Balances.forEach(function(obj) {
                            _this.obj[obj.BalanceName.toLowerCase().replace(/\s+/g, "")] = obj
                        })
                    }
                    _this.updateBalances()
                }
            })
        }
        zeus.jit.add([{
            Name: "GetBalancesAndRingFencedBonuses"
        }, "getBalancesAndRingFencedBonuses"])
    },
    updateBalances: function() {
        var _this = this;
        if (!_.isUndefined(this.obj.totalbalance)) {
            this.balanceElements.each(function() {
                var balance = $(this);
                var balanceType = balance.data("balance");
                if (_this.obj[balanceType]) {
                    balance.html(_this.obj[balanceType].Value);
                    if (balanceType === "reward") {
                        balance.parent(".wallet").show()
                    }
                } else {
                    if (balanceType === "reward") {
                        balance.parent(".wallet").hide()
                    }
                    balance.html(siteConfig.validation.balance.noBalance)
                }
            });
            $(document).trigger("balanceLoaded")
        } else {
            this.balanceElements.html(siteConfig.validation.balance.unavailableString)
        }
    }
};
wlzeus.balanceData.init();
var wlzeus = wlzeus || {};
wlzeus.gameLaunch = {};
(function() {
    "use strict";

    function demoPlay() {
        return window.demoPlayService.incrementPlayCount().then(function(success) {
            if (window.opener.demoPlayService) window.opener.demoPlayService.hideIfIneligible()
        })
    }

    function loadGame(defaultCallback, gameUrl) {
        if (defaultCallback) {
            defaultCallback(gameUrl)
        } else {
            window.location.href = gameUrl
        }
    }
    this.handler = function(gameUrl, defaultCallback) {
        const isDemoPlay = location.search.includes("gametype=demo");
        var gameWarning = document.querySelector(".js-game-warning-message");
        var gameLoading = document.querySelector(".js-game-loading-message");
        var gamesIFrame = document.getElementById("gamesIFrame");
        var isBingo = gameUrl.indexOf("/BingoRoom/") !== -1;
        var defaultWindowTitle = "Slots | Play Slot Games Online with £££ Jackpots  - MeccaBingo";
        if (!zeus.core.isMobile && gamesIFrame && !isBingo) {
            gamesIFrame.onload = function() {
                if (gameWarning) gameWarning.classList.add("hide");
                if (gameLoading) gameLoading.classList.add("hide");
                const gamename = new RegExp("[\\?&]gamename=([^&#]*)").exec(location.search);
                document.title = gamename === null ? defaultWindowTitle : decodeURIComponent(gamename[1].replace(/\+/g, " "));
                gamesIFrame.classList.remove("hide")
            };
            if ($("html").hasClass("authenticated")) {
                gamesIFrame.src = gameUrl;
                if (isDemoPlay) demoPlay()
            } else {
                window.location.reload()
            }
        } else {
            if (isDemoPlay) {
                demoPlay().finally(function() {
                    loadGame(defaultCallback, gameUrl)
                })
            } else {
                loadGame(defaultCallback, gameUrl)
            }
        }
    }
}).apply(wlzeus.gameLaunch);
var wlzeus = wlzeus || {};
wlzeus.winnersFeed = {};
var WinnersFeed = function() {
    "use strict";
    var isMobile = zeus.core.isMobile;
    var typeHorizontal = ".horizontal,.col-z-12,.col-z-11,.col-z-10,.col-z-09,.col-z-08,.col-z-07,.col-z-06,.col-z-05";
    var typeVertical = ".vertical,.col-z-4,.col-z-3,.col-z-2,.col-z-1";
    var winnersFeedSelector = ".feed";
    var winnerItem = ".winner";
    var feedContainer = ".feed-container";
    var hovering = false;
    var winnersWidgetOptions;
    return {
        init: function(options) {
            var self = this;
            winnersWidgetOptions = options;
            if (!isMobile) {
                self.addHoverBindings()
            }
            self.winnersSetup("#" + winnersWidgetOptions.WinnersFeedPrefix + winnersWidgetOptions.WinnersFeedID)
        },
        winnersSetup: function(widget) {
            var self = this;
            var direction = $(widget).closest(typeHorizontal + "," + typeVertical);
            if (direction.is(typeVertical)) {
                direction = "vertical"
            } else {
                direction = "horizontal"
            }
            self.winnersAnimate(widget, direction)
        },
        winnersAnimate: function(widget, direction) {
            var self = this;
            var winnersFeedElement = $(widget).find(winnersFeedSelector).first();
            var winnersItemElem = $(widget).find(winnerItem).first();
            var animReset;
            var anim;
            var winnersItemOuterHeight = winnersItemElem.outerHeight(true);
            if (direction === "horizontal") {
                animReset = {
                    transition: "none",
                    transform: "translate3D(0, 0, 0)"
                };
                anim = {
                    transition: "all 1s ease",
                    transform: "translate3D(-" + winnersItemElem.outerWidth() + "px, 0, 0)"
                };
                if (isMobile) {
                    self.setFeedHeight(winnersItemOuterHeight, widget)
                }
            } else {
                animReset = {
                    transition: "none",
                    transform: "translate3D(0, 0, 0)"
                };
                anim = {
                    transition: "all 1s ease",
                    transform: "translate3D(0, -" + winnersItemOuterHeight + "px, 0)"
                };
                self.setFeedHeight(winnersItemOuterHeight, widget)
            }

            function animate() {
                if (!hovering) {
                    $(winnersFeedElement).css(anim);
                    setTimeout(function() {
                        $(winnersFeedElement).find(winnerItem).first().hide().appendTo(winnersFeedElement).fadeIn(200);
                        $(winnersFeedElement).css(animReset)
                    }, 1e3)
                }
            }
            setInterval(function() {
                if (window.requestAnimationFrame) {
                    requestAnimationFrame(animate)
                } else {
                    animate()
                }
            }, 3e3)
        },
        setFeedHeight: function(offsetVal, widget) {
            var feedHeight = offsetVal;
            var winnersShown = winnersWidgetOptions.WinnersToShow > winnersWidgetOptions.WinnersReturned ? winnersWidgetOptions.WinnersReturned : winnersWidgetOptions.WinnersToShow;
            if (!isMobile) {
                feedHeight = offsetVal * winnersShown
            }
            $(widget).find(feedContainer).css("height", feedHeight)
        },
        addHoverBindings: function() {
            $(feedContainer).on("mouseenter", function() {
                hovering = true
            }).on("mouseleave", function() {
                hovering = false
            })
        }
    }
};
if (typeof exports === "object") {
    module.exports = WinnersFeed
}
wlzeus.winnersFeed = WinnersFeed;
$(function() {
    "use strict";
    if (typeof jQuery.validator === "function") {
        jQuery.validator.addMethod("nameRegex", function(value, element) {
            var trimmed = value.trim();
            var nameReg = /^([a-z\u00C0-\u017F]+[,.]?\s*?|[a-z\u00C0-\u017F]+['-]?)+$/gi;
            return this.optional(element) || trimmed.length !== 0 && nameReg.test(trimmed)
        });
        jQuery.validator.addMethod("address", function(value, element) {
            return this.optional(element) || /^[a-zA-Z0-9 _()&\-\/,.]+$/.test(value)
        });
        jQuery.validator.addMethod("alphanum", function(value, element) {
            return this.optional(element) || /^[a-zA-Z0-9]+$/.test(value)
        });
        jQuery.validator.addMethod("postcodeCheck", function(value, element) {
            return this.optional(element) || /^((([A-PR-UWYZ][0-9])|([A-PR-UWYZ][0-9][0-9])|([A-PR-UWYZ][A-HK-Y][0-9])|([A-PR-UWYZ][A-HK-Y][0-9][0-9])|([A-PR-UWYZ][0-9][A-HJKSTUW])|([A-PR-UWYZ][A-HK-Y][0-9][ABEHMNPRVWXY]))\s?([0-9][ABD-HJLNP-UW-Z]{2})|(GIR)\s?(0AA))$/i.test(value)
        });
        jQuery.validator.addMethod("tel", function(phone_number, element) {
            return this.optional(element) || phone_number.length > 9 && phone_number.match($("#RegexTel").val())
        }, "Please specify a valid phone number");
        jQuery.validator.addMethod("date_selectbox", function(value, element, options) {
            var check = false;
            var day = $(options[0]).val();
            var month = $(options[1]).val();
            var year = $(options[2]).val();
            day = parseInt(day, 10);
            month = parseInt(month, 10) - 1;
            year = parseInt(year, 10);
            var date = new Date(year, month, day);
            if (date.getFullYear() === year && date.getMonth() === month && date.getDate() === day) {
                check = true
            } else {
                check = false
            }
            return this.optional(element) || check
        }, "Please enter a valid date");
        jQuery.validator.addMethod("require_from_group", function(value, element, options) {
            var validator = this;
            var minRequired = options[0];
            var selector = options[1];
            var form = $(selector, element.form);
            var validOrNot = form.filter(function() {
                return validator.elementValue(this)
            }).length >= minRequired;
            var settings = this.settings;
            form.off(".require_from_group");
            if (settings.onkeyup) {
                jQuery(selector, element.form).on({
                    "keyup.require_from_group": function() {
                        form.valid()
                    }
                })
            }
            if (settings.onfocusin) {
                form.on({
                    "focusin.require_from_group": function() {
                        form.valid()
                    }
                })
            }
            if (settings.click) {
                form.on({
                    "click.require_from_group": function() {
                        form.valid()
                    }
                })
            }
            if (settings.focusout) {
                form.on({
                    "focusout.require_from_group": function() {
                        form.valid()
                    }
                })
            }
            return validOrNot
        }, jQuery.validator.format("Please fill at least {0} of these fields."));
        jQuery.validator.addMethod("notEqual", function(value, element, param) {
            return this.optional(element) || value !== param
        }, "Please specify a different (non-default) value");
        jQuery.validator.addMethod("greaterThan", function(value, element, params) {
            if (!/Invalid|NaN/.test(new Date(value))) {
                return new Date(value) > new Date($(params).val())
            }
            return isNaN(value) && isNaN($(params).val()) || Number(value) > Number($(params).val())
        }, "Must be greater than {0}.");
        jQuery.validator.addMethod("lessThan", function(value, element, params) {
            if (!/Invalid|NaN/.test(new Date(value))) {
                return new Date(value) < new Date($(params).val())
            }
            return isNaN(value) && isNaN($(params).val()) || Number(value) < Number($(params).val())
        }, "Must be Less than {0}.");
        jQuery.validator.addMethod("customRule", function(value, element, params) {
            return this.optional(element) || params !== true
        }, jQuery.validator.format("Not Valid"));
        jQuery.validator.addMethod("checkDOB_selectbox", function(value, element, options) {
            var day = $(options[0]).val();
            var month = $(options[1]).val();
            var year = $(options[2]).val();
            var minAge = 18;
            var mydate = new Date;
            mydate.setFullYear(year, month - 1, day - 1);
            var currdate = new Date;
            currdate.setFullYear(currdate.getFullYear() - minAge);
            return currdate > mydate
        }, "You must be at least 18 years of age.");
        jQuery.validator.addMethod("dob", function(value, element, param) {
            var day = $("#forgottenUsernameDOBDay").val();
            var month = $("#forgottenUsernameDOBMonth").val();
            var year = $("#forgottenUsernameDOBYear").val();
            var date = new Date(year, month - 1, day);
            if (day === "" || month === "" || year === "") {
                return this.optional(element) || false
            }
            return this.optional(element) || !/Invalid|NaN/.test(date)
        }, "Please enter a valid Date Of Birth");
        jQuery.validator.addMethod("zeusRemote", function(value, element, param) {
            var url = "";
            if (this.optional(element)) {
                return "dependency-mismatch"
            }
            var previous = this.previousValue(element);
            var validator;
            var data;
            if (!this.settings.messages[element.name]) {
                this.settings.messages[element.name] = {}
            }
            previous.originalMessage = this.settings.messages[element.name].remote;
            this.settings.messages[element.name].remote = previous.message;
            param = typeof param === "string" && {
                url: param
            } || param;
            if (previous.old === value) {
                return previous.valid
            }
            previous.old = value;
            validator = this;
            this.startRequest(element);
            data = {};
            data[element.name] = value;
            var httpVerb = "get";
            if (param.type) {
                httpVerb = param.type
            }
            url = param.url;
            if (param.queryString) {
                url = url + param.queryString + "=" + encodeURIComponent(value)
            }
            if (param.dataName) {
                data[param.dataName] = value
            }
            var desiredResponse = false;
            if (param.desiredResponse) {
                desiredResponse = param.desiredResponse
            }
            var csrf = document.querySelector('meta[name="csrf-token"]');
            var csrfToken = csrf ? csrf.getAttribute("content") : "";
            validator.pending = true;
            if (validator.pending) {
                if (!$(element).siblings(".pending").length) {
                    $(element).after('<span class="pending"></span>')
                }
            }
            var errorHandler = function() {
                var errors = {};
                var message = validator.defaultMessage(element, "zeusRemote");
                errors[element.name] = previous.message = $.isFunction(message) ? message(value) : message;
                validator.invalid[element.name] = true;
                validator.showErrors(errors);
                validator.pending = false;
                $(".pending").remove()
            };
            $.ajax($.extend(true, {
                url: url,
                type: httpVerb,
                mode: "abort",
                data: data,
                headers: {
                    "X-CSRF-Token": csrfToken
                },
                port: "validate" + element.name,
                dataType: "json",
                context: validator.currentForm,
                success: function(responseData, textStatus, xhr) {
                    if (desiredResponse !== false && desiredResponse !== xhr.status) {
                        validator.settings.messages[element.name].remote = previous.originalMessage;
                        errorHandler();
                        previous.valid = false;
                        validator.stopRequest(element, false)
                    } else {
                        validator.settings.messages[element.name].remote = previous.originalMessage;
                        const submitted = validator.formSubmitted;
                        validator.prepareElement(element);
                        validator.formSubmitted = submitted;
                        validator.successList.push(element);
                        delete validator.invalid[element.name];
                        validator.showErrors();
                        validator.pending = false;
                        $(".pending").remove();
                        previous.valid = true;
                        validator.stopRequest(element, true)
                    }
                },
                error: function(xhr, status, error) {
                    if (desiredResponse !== false && desiredResponse === xhr.status) {
                        validator.settings.messages[element.name].remote = previous.originalMessage;
                        const submitted = validator.formSubmitted;
                        validator.prepareElement(element);
                        validator.formSubmitted = submitted;
                        validator.successList.push(element);
                        delete validator.invalid[element.name];
                        validator.showErrors();
                        validator.pending = false;
                        $(".pending").remove();
                        previous.valid = true;
                        validator.stopRequest(element, true)
                    } else {
                        validator.settings.messages[element.name].remote = previous.originalMessage;
                        errorHandler();
                        previous.valid = false;
                        validator.stopRequest(element, false)
                    }
                }
            }, url));
            return "pending"
        }, "Already in use.");
        jQuery.validator.addMethod("currency", function(value, element) {
            return this.optional(element) || /^[0-9]\d*(((,\d{3}) {1})?(\.\d{0,2})?)$/.test(value)
        }, "Please specify a valid amount");
        jQuery.validator.addMethod("alphanumunderscore", function(value, element) {
            return this.optional(element) || /^[a-zA-Z0-9_]+$/.test(value)
        });
        jQuery.validator.addMethod("customValidEmail", function(value, element) {
            return this.optional(element) || /^(([^<>()[\]\\.,;:\s@\"`!$%^&*={}'#~?\/]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(value)
        }, "Please enter a valid Email Address");
        jQuery.validator.addMethod("notEqualToCurrentPassword", function(value, element) {
            return $("#currentPassword").val() != $("#newPassword").val()
        })
    }
});
var wlzeus = wlzeus || {};
wlzeus.RegistrationWidget = {};
(function() {
    "use strict";
    var _this = this;
    var clickEvent = "click";
    var tVariables;
    var opts;
    var inRegLightbox;
    var errorsList;
    var isSingleColumn = false;
    var tooltipPlacement;
    var closestFormGroup;
    var disableTooltipAdjustment = false;
    this.mapDomObject = function(obj) {
        function createObject(key, val) {
            var newObj = {};
            newObj[key] = val;
            return newObj
        }

        function getElementId(name) {
            switch (name) {
                case "Forename":
                    return "regFirstName";
                    break;
                case "Surname":
                    return "regLastName";
                    break;
                case "TelephoneNumber":
                    return "regTelephone";
                    break;
                case "DateOfBirth":
                    return "regDOB";
                    break;
                case "Address1":
                    return "regAddressLine1";
                    break;
                case "Address2":
                    return "regAddressLine2";
                    break;
                case "EmailAddress":
                    return "regEmail";
                    break;
                default:
                    return "reg" + name;
                    break
            }
        }
        var pairs = [];
        for (var propt in obj) {
            if (propt === "SiteData") {
                pairs.push(createObject("SiteData", obj[propt].retailMembershipNumber))
            } else if (typeof obj[propt] === "object") {
                for (var nestedPropt in obj[propt]) {
                    var name = getElementId(nestedPropt);
                    pairs.push(createObject(name, obj[propt][nestedPropt]))
                }
            } else {
                var name = getElementId(propt);
                pairs.push(createObject(name, obj[propt]))
            }
        }
        return pairs
    };
    this.populateRegistrationForm = function(pairs) {
        function capitialize(string) {
            return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase()
        }

        function updateDOMElement() {
            var args = Array.prototype.slice.call(arguments);
            args.forEach(function(arg) {
                if (typeof _this[arg.name] !== "undefined") {
                    var value = arg.name === "regTitle" && arg.value ? capitialize(arg.value) : arg.value;
                    value = arg.name === "regCountry" && !value ? "GB" : value;
                    var $el = _this[arg.name];
                    if (arg.name !== "regCountry") {
                        $el.val(value).trigger("change")
                    }
                    $el.valid()
                }
            })
        }
        pairs.forEach(function(pair) {
            for (var key in pair) {
                if (key === "regDOB") {
                    var year = pair[key].toString().substring(0, 4);
                    var month = pair[key].toString().substring(5, 7);
                    var day = pair[key].toString().substring(8, 11);
                    updateDOMElement({
                        name: "regDobDay",
                        value: day
                    }, {
                        name: "regDobMonth",
                        value: month
                    }, {
                        name: "regDobYear",
                        value: year
                    })
                }
                updateDOMElement({
                    name: key,
                    value: pair[key]
                })
            }
        })
    };
    this.init = function(tVariablesJSON, optsJSON) {
        tVariables = tVariablesJSON;
        opts = optsJSON;
        if (opts.isSingleColumn !== undefined) {
            isSingleColumn = opts.isSingleColumn
        }
        if (opts.tooltipPlacement !== undefined) {
            tooltipPlacement = opts.tooltipPlacement
        }
        if (opts.disableTooltipAdjustment !== undefined) {
            disableTooltipAdjustment = opts.disableTooltipAdjustment
        }
        _this.createVars();
        wlzeus.DOBPicker.init();
        if (!inRegLightbox) {
            _this.initFunctions()
        } else {
            $(document).on(clickEvent, _this.regLightboxLaunchSelector, function(e) {
                if (typeof ga !== "undefined") {
                    ga.getAll().forEach(function(tracker) {
                        tracker.send("event", "Registration", "Registration Link Clicked")
                    })
                }
                if ($(this).parents(".compliance-banner").length == 0) {
                    _this.initLightbox();
                    e.preventDefault()
                }
            })
        }
        $(document).on("widget:registration:hide", function() {
            $("#registrationForm").hide()
        });
        $(document).on("widget:registration:show", function() {
            $("#registrationForm").parent().children().hide();
            $("#registrationForm").show()
        });
        $(document).on("part:loyalty:membership:repsonse", function(evt, data) {
            $(".enter-postcode-manually").click();
            _this.populateRegistrationForm(_this.mapDomObject(data))
        });
        $(document).trigger("widget:registration:initialized");
        $(document).on("postcodeLookup:addressUpdated", function(e, data) {
            var nextInputToFocus = $(data).next().find("input");
            nextInputToFocus.focus()
        })
    };
    this.getFormElements = function() {
        return $(".widget-registration-widget").children()
    };
    this.initLightbox = function() {
        var formElements = _this.getFormElements();
        if (formElements.length) {
            _this.initFunctions();
            wlzeus.lightbox.lbLaunch(formElements, _this.regFormTitle, "registrationForm");
            _this.regDobDay.addClass("dont-validate");
            _this.regDobMonth.addClass("dont-validate");
            _this.regDobYear.addClass("dont-validate");
            $(document).on("lbClose", function() {
                _this.closeLightbox()
            });
            $("#lightboxModal").on("shown.bs.modal", function() {
                if ($("#lightboxModal #registrationForm").length && typeof ga !== "undefined") {
                    ga.getAll().forEach(function(tracker) {
                        tracker.send("event", "Registration", "Registration Form Displayed")
                    })
                }
            })
        }
    };
    this.initFunctions = function() {
        _this.cacheSelectors();
        _this.addBindings();
        _this.initTooltip();
        _this.validateForm();
        wlzeus.DOBPicker.init();
        if (wlzeus.postcodeLookup && inRegLightbox) {
            wlzeus.postcodeLookup.resetForm()
        }
        _this.correlationToken.val(window.uuid.v4())
    };
    this.addBindings = function() {
        _this.regButton.click(function() {
            if (_this.postCodeLookup.length) {
                _this.postCodeLookup.click()
            }
            if (!_this.registrationForm.valid()) {
                return false
            } else {
                _this.submitForm(_this.registrationForm)
            }
        });
        var marketingPreferences = _this.registrationForm.find(".js-registration-marketing-preferences");
        if (marketingPreferences) {
            var marketingInputs = {};
            var allInputs = marketingPreferences.find("input");
            [].forEach.call(allInputs, function(input) {
                if (input.name) {
                    marketingInputs[input.name] = input
                }
            });
            marketingPreferences.change(function(ev) {
                if (ev.target.id === "selectAll") {
                    for (var marketingInput in marketingInputs) {
                        if (!marketingInputs.hasOwnProperty(marketingInput) || marketingInputs[marketingInput].name === "selectAll") continue;
                        marketingInputs[marketingInput].checked = ev.target.checked
                    }
                } else {
                    for (var marketingInput in marketingInputs) {
                        if (!marketingInputs.hasOwnProperty(marketingInput)) continue;
                        if (marketingInputs[marketingInput].checked || marketingInputs[marketingInput].name === "selectAll") continue;
                        marketingInputs["selectAll"].checked = false;
                        return
                    }
                    marketingInputs["selectAll"].checked = true
                }
            })
        }
        if (!disableTooltipAdjustment) {
            $(window).on("resize", function() {
                _this.showhideTooltip(_this.registrationForm.find("input, select"), "hide")
            })
        }
        _this.registrationForm.find("input").on("keyup change", function() {
            var $this = $(this);
            if (!$this.val().length && !$this.hasClass("required")) {
                $this.closest(".form-group").removeClass("valid error")
            }
        });
        if (zeus.core.isMobile) {
            var inputs = _this.registrationForm.find("input");
            var body = $("body");
            body.on("touchmove", function() {
                inputs.css("pointer-events", "none")
            });
            body.on("touchend", function() {
                setTimeout(function() {
                    inputs.css("pointer-events", "auto")
                }, 0)
            })
        }
        _this.regCountry.on("change", _this.updateCountryAddressFormat)
    };
    this.updateCountryAddressFormat = function() {
        var countryCode = _this.regCountry.val() || "";
        var $postcodeAsterisk = _this.regPostcode.closest(".form-group").find(".js-asterisk");
        _this.regPostcode.rules("remove");
        if (countryCode.toUpperCase() === "IE") {
            _this.regPostcode.removeClass("required").rules("add", {
                address: true
            });
            $postcodeAsterisk.addClass("hide")
        } else {
            _this.regPostcode.addClass("required").rules("add", {
                postcodeCheck: true
            });
            $postcodeAsterisk.removeClass("hide");
            wlzeus.postcodeLookup.resetForm()
        }
        if (countryCode.toUpperCase() !== "GB") {
            $(".enter-postcode-manually").click()
        }
        $(".extended-address-fields").find(".error, .valid").each(function() {
            var $this = $(this);
            $this.removeClass("error valid");
            if ($this.is("input")) {
                $this.closest(".form-group").removeClass("error valid")
            } else {
                $this = $this.find(".form-control");
                $this.removeClass("error valid")
            }
            if ($this.val() !== "") {
                $this.valid()
            }
        })
    };
    this.closeLightbox = function() {
        _this.regDobDay.prop("selectedIndex", 0).trigger("change");
        _this.regDobMonth.prop("selectedIndex", 0).trigger("change");
        _this.regDobYear.prop("selectedIndex", 0).trigger("change");
        $(".postcode-result-modal").modal("hide");
        _this.registrationForm.find(".error, .valid").removeClass("error valid");
        _this.KYCForm.addClass("hide");
        _this.validator.resetForm();
        _this.resetTooltip();
        delete _this.registrationForm.validate;
        _this.clearCachedSelectors();
        $(document).unbind("lbClose")
    };
    this.createVars = function() {
        _this.siteRoot = $("*[data-siteroot]").data("siteroot");
        _this.regformSelector = "#registrationForm";
        _this.regDobDaySelector = "#regDobDay";
        _this.regDobMonthSelector = "#regDobMonth";
        _this.regDobYearSelector = "#regDobYear";
        _this.regDateOfBirthSelector = "#regDateOfBirth";
        _this.errorsContainerSelector = ".validation-summary-errors";
        _this.regLightboxLaunchSelector = '.lightbox-register,.btn-registration,a[href$="registration"]:not(a[href$="bingo-clubs/registration"]) ,a[href$="register"]';
        inRegLightbox = false;
        if ($(_this.regformSelector).parents(".layout-lightbox").length) {
            inRegLightbox = true
        }
        _this.regFormTitle = "Register"
    };
    this.cacheSelectors = function() {
        _this.registrationForm = $("#registrationForm");
        _this.regButton = $("#registerButton");
        _this.regTitle = $("#regTitle");
        _this.regFirstName = $("#regFirstName");
        _this.regLastName = $("#regLastName");
        _this.regDobDay = $(_this.regDobDaySelector);
        _this.regDobMonth = $(_this.regDobMonthSelector);
        _this.regDobYear = $(_this.regDobYearSelector);
        _this.regDateOfBirth = $("#regDateOfBirth");
        _this.regGender = $("#regGender");
        _this.regEmail = $("#regEmail");
        _this.regCountry = $("#regCountry");
        _this.regHouseNumber = $("#lookupHouseNumber");
        _this.regPostcode = $("#regPostcode");
        _this.regAddressLine1 = $("#regAddressLine1");
        _this.regAddressLine2 = $("#regAddressLine2");
        _this.regTown = $("#regTown");
        _this.regCounty = $("#regCounty");
        _this.regTelephone = $("#regTelephone");
        _this.regUsername = $("#regUsername");
        _this.regPassword = $("#regPassword");
        _this.regConfirmPassword = $("#regConfirmPassword");
        _this.regTermsAndConditionsAgreed = $("#regTermsAndConditionsAgreed");
        _this.regMarketingOptIn = $("#regMarketingOptIn");
        _this.regMarketingOptInEmail = $("#regMarketingOptInEmail");
        _this.regMarketingOptInPush = $("#regMarketingOptInPush");
        _this.regMarketingOptInPost = $("#regMarketingOptInPost");
        _this.regMarketingOptInTelephone = $("#regMarketingOptInTelephone");
        _this.regMarketingOptInSMS = $("#regMarketingOptInSMS");
        _this.correlationToken = $("#vm_CorrelationToken");
        _this.SiteData = $("#SiteData");
        _this.errorsContainer = _this.registrationForm.find(".validation-summary-errors");
        _this.errorsContainerList = _this.errorsContainer.find("ul");
        _this.postCodeLookup = _this.registrationForm.find(".lookup-postcode-btn");
        _this.loaderOverlay = $(".js-kyc-loading-overlay");
        _this.successOverlay = $(".js-kyc-success-overlay");
        _this.KYCForm = $(".js-kyc-form")
    };
    this.toggleLoaderOverlay = function() {
        _this.loaderOverlay && _this.loaderOverlay.toggle();
        _this.loaderOverlay && _this.loaderOverlay.toggleClass("hide")
    };
    this.toggleSuccessOverlay = function() {
        _this.successOverlay && _this.successOverlay.toggle();
        _this.successOverlay && _this.successOverlay.toggleClass("hide")
    };
    this.showKYCView = function() {
        _this.KYCForm && _this.KYCForm.show();
        _this.KYCForm && _this.KYCForm.removeClass("hide");
        if (zeus.core.isMobile) {
            document.getElementById("registrationForm").scrollIntoView();
            $(".js-live-chat-sidebar").addClass("hide")
        }
    };
    this.clearCachedSelectors = function() {
        delete _this.registrationForm;
        delete _this.regButton;
        delete _this.regTitle;
        delete _this.regFirstName;
        delete _this.regLastName;
        delete _this.regDobDay;
        delete _this.regDobMonth;
        delete _this.regDobYear;
        delete _this.regDateOfBirth;
        delete _this.regGender;
        delete _this.regEmail;
        delete _this.regCountry;
        delete _this.regHouseNumber;
        delete _this.regPostcode;
        delete _this.regAddressLine1;
        delete _this.regAddressLine2;
        delete _this.regTown;
        delete _this.regCounty;
        delete _this.regTelephone;
        delete _this.regUsername;
        delete _this.regPassword;
        delete _this.regConfirmPassword;
        delete _this.regTermsAndConditionsAgreed;
        delete _this.regMarketingOptIn;
        delete _this.regMarketingOptInEmail;
        delete _this.regMarketingOptInPush;
        delete _this.regMarketingOptInPost;
        delete _this.regMarketingOptInTelephone;
        delete _this.regMarketingOptInSMS;
        delete _this.errorsContainer;
        delete _this.errorsContainerList
    };
    this.initTooltip = function() {
        var tipContainer = false;
        var tipPlacement = "auto left";
        var tipTrigger = "manual";
        var tipText;
        var thisElem;
        var checkWidth;
        var tooltipWidth;
        if (zeus.core.isMobile) {
            tipPlacement = "auto top"
        }
        _this.registrationForm.find("input, select").each(function() {
            thisElem = $(this);
            closestFormGroup = thisElem.closest(".form-group");
            tipText = _this.getTVariable(this.name, "tooltip");
            if (!closestFormGroup.attr("data-original-title")) {
                closestFormGroup.tooltip({
                    animation: false,
                    title: tipText,
                    placement: function(tip, elem) {
                        if (disableTooltipAdjustment) {
                            if (!isSingleColumn && $(elem).parents(".js-section-account-details").length === 1 && !opts.casinoToolkitV2) {
                                tipPlacement = "auto right"
                            }
                        } else {
                            elem = $(elem);
                            if (zeus.core.isMobile) {
                                tipPlacement = "auto top"
                            } else if (tooltipPlacement !== undefined) {
                                tipPlacement = tooltipPlacement
                            } else if (elem.length) {
                                checkWidth = $(window).width() - (elem.offset().left + elem.width());
                                tooltipWidth = 340;
                                if (!isSingleColumn && elem.parents(".js-section-account-details").length === 1 && !opts.casinoToolkitV2) {
                                    tipPlacement = "auto right"
                                } else if (tooltipWidth >= checkWidth) {
                                    tipPlacement = "auto top"
                                } else {
                                    tipPlacement = "right"
                                }
                            } else {
                                tipPlacement = "auto right"
                            }
                        }
                        return tipPlacement
                    },
                    container: tipContainer,
                    trigger: tipTrigger,
                    delay: {
                        show: 0,
                        hide: 0
                    }
                })
            }
        })
    };
    this.resetTooltip = function() {
        var thisElem;
        var closestFormGroup;
        _this.registrationForm.find("input, select").each(function() {
            thisElem = $(this);
            closestFormGroup = thisElem.closest(".form-group");
            closestFormGroup.tooltip("destroy");
            closestFormGroup.attr("data-original-title", "")
        })
    };
    this.appendError = function(type, text) {
        _this.errorsContainerList.append('<li class="error-' + type + '">' + text + "</li>")
    };
    this.submitForm = function(form) {
        _this.formElem = $(form);
        $(".dont-submit").prop("disabled", true);
        _this.postURL = _this.formElem.attr("action");
        var data = _this.formElem.serialize();
        var csrf = document.querySelector('meta[name="csrf-token"]');
        var csrfToken = csrf ? csrf.getAttribute("content") : "";
        $.ajax({
            type: "POST",
            url: _this.postURL,
            data: data,
            timeout: 12e5,
            tryCount: 0,
            retryLimit: 1,
            headers: {
                "X-CSRF-Token": csrfToken
            },
            beforeSend: function() {
                _this.toggleLoaderOverlay();
                if (!zeus.core.isMobile) $("#lightboxModal").hide();
                _this.regButton.button("loading");
                $(_this.regformSelector + " :input").prop("disabled", true)
            },
            success: function(data, textStatus, xhr) {
                _this.handleSuccess(data, textStatus, xhr)
            },
            error: function(xhr, textStatus, data) {
                _this.handleErrors(xhr, textStatus, data)
            }
        })
    };
    this.renderError = function(error) {
        if (typeof ga !== "undefined") {
            ga.getAll().forEach(function(tracker) {
                tracker.send("event", "Registration Form Submit Returned Server Errors", error.Message ? error.Message.toString() : "")
            })
        }
        bootbox.alert({
            message: error.message,
            title: error.title,
            className: "error-modal"
        })
    };
    this.renderErrorList = function(errors) {
        var modalTitle = "";
        var dialogHeader = "<h1>" + _this.getTVariable("ErrorOccurredContainer", "header") + "</h1>";
        var dialogContent = "<p>" + _this.getTVariable("ErrorOccurredContainer", "content") + "</p>";
        var dialogBody = dialogHeader + dialogContent;
        var errorsList = [];
        _this.errorsContainerList.html("");
        var dialogTitle = errors.length === 1 ? _this.getTVariable("ErrorsContainerHeader", "error") : _this.getTVariable("ErrorsContainerHeader", "errors");
        errors.forEach(function(error) {
            var name = error.Key;
            var message = error.Message;
            if (name === "AccountStatus" || name === "__Global" || name === "__Cancellation") {
                dialogTitle = _this.getTVariable("ErrorOccurredContainer", "header")
            }
            if ($("#reg" + name).length) {
                $("#reg" + name).closest(".form-group").removeClass("valid").addClass("error")
            }
            _this.appendError(name, message);
            errorsList.push(message)
        });
        if (zeus.core.isMobile) {
            modalTitle = dialogTitle
        } else {
            _this.errorsContainer.find(".validation-error-header").first().html(dialogTitle)
        }
        dialogBody = _this.errorsContainer.html();
        if (typeof ga !== "undefined") {
            ga.getAll().forEach(function(tracker) {
                tracker.send("event", "Registration Form Submit Returned Server Errors", errorsList.toString())
            })
        }
        bootbox.alert({
            message: dialogBody,
            title: modalTitle,
            className: "error-modal"
        })
    };
    this.handleErrors = function(xhr, textStatus, data) {
        if (!zeus.core.isMobile) $("#lightboxModal").show();
        _this.toggleLoaderOverlay();
        var dataNextAction = data.NextAction;
        if (xhr.status === 403) {
            const responseJSON = xhr.responseJSON;
            if (responseJSON.hasOwnProperty("Errors") && responseJSON.Errors.some(function(error) {
                    return error.Key === "KYC"
                })) {
                _this.regButton.button("reset");
                $(_this.regformSelector + " :input").prop("disabled", false);
                _this.showKYCView();
                return false
            }
        }
        if (data && dataNextAction) {
            _this.changePage(dataNextAction);
            if (typeof ga !== "undefined") {
                ga.getAll().forEach(function(tracker) {
                    tracker.send("event", "Registration", "Registration Form Submit Returned Errors - URL Redirect", dataNextAction)
                })
            }
        }
        if (typeof dataLayer !== "undefined") {
            try {
                if (xhr.responseJSON.RegistrationResult === "ContactSupport") {
                    dataLayer.push({
                        RegistrationResult: "SuccessWithIssues",
                        BedePlayerId: xhr.responseJSON.BedePlayerId.toString(),
                        event: "registration"
                    })
                } else {
                    dataLayer.push({
                        RegistrationResult: "Failure",
                        BedePlayerId: "0",
                        event: "registration"
                    })
                }
            } catch (err) {}
        }
        _this.regButton.button("reset");
        $(_this.regformSelector + " :input").prop("disabled", false);
        var generalError = {
            title: _this.getTVariable("ErrorOccurredContainer", "header"),
            message: _this.getTVariable("ErrorOccurredContainer", "content")
        };
        var registeredWithErrors = {
            title: _this.getTVariable("ErrorOccurredContainer", "header"),
            message: "The account was registered, but has issues. Please contact customer support."
        };
        if (xhr.status == 201) {
            _this.renderError(registeredWithErrors)
        } else {
            if (xhr.responseJSON && xhr.responseJSON.Errors && xhr.responseJSON.Errors.length) {
                if (xhr.responseJSON["RegistrationResult"] === "ServiceFailure") {
                    _this.renderError(generalError)
                } else {
                    _this.renderErrorList(xhr.responseJSON.Errors)
                }
            } else {
                _this.renderError(generalError)
            }
        }
    };
    this.handleSuccess = function(data, textStatus, xhr) {
        _this.toggleLoaderOverlay();
        _this.toggleSuccessOverlay();
        var event;
        if (typeof Event === "function") {
            event = new Event("registration-success")
        } else {
            event = document.createEvent("Event");
            event.initEvent("registration-success", true, true)
        }
        window.dispatchEvent(event);
        setTimeout(function() {
            if (!zeus.core.isMobile) $("#lightboxModal").show();
            _this.toggleSuccessOverlay()
        }, 1e3);
        if (xhr.responseText.indexOf("contact our customer support") !== -1) {
            _this.handleErrors(xhr, textStatus, data);
            return
        }
        if (typeof ga !== "undefined") {
            ga.getAll().forEach(function(tracker) {
                tracker.send("event", "Registration", "Registration Form Submitted")
            })
        }
        if (typeof dataLayer !== "undefined") {
            try {
                dataLayer.push({
                    RegistrationResult: "Success",
                    BedePlayerId: data.BedePlayerId.toString(),
                    event: "registration"
                })
            } catch (err) {}
        }
        var urlRedirect = null;
        var dataNextAction = data.NextAction;
        if (opts.returnUrl && opts.isInheritRedirectURL) {
            urlRedirect = zeus.core.siteHost + zeus.utilities.inheritUrl(opts.returnUrl)
        }
        if (dataNextAction) {
            urlRedirect = dataNextAction
        }
        if (urlRedirect === null) {
            $(document).trigger("widget:registration:complete")
        } else {
            _this.changePage(urlRedirect)
        }
    };
    this.changePage = function(url) {
        if (inRegLightbox) {
            wlzeus.lightbox.lbHide()
        }
        wlzeus.loadingMessage.showLoadingMessage();
        window.location.href = url
    };
    this.validateForm = function() {
        _this.validator = _this.registrationForm.validate({
            rules: {
                "vm.UserName": {
                    alphanumunderscore: true,
                    minlength: opts.minUsernameLength,
                    maxlength: opts.maxUsernameLength,
                    zeusRemote: {
                        type: "post",
                        url: _this.siteRoot + "api/User/Username/Exists/",
                        dataName: "username",
                        desiredResponse: 404
                    }
                },
                "vm.Email": {
                    email: true,
                    customValidEmail: true,
                    zeusRemote: {
                        type: "post",
                        url: _this.siteRoot + "api/User/Email/Exists/",
                        dataName: "email",
                        desiredResponse: 404
                    }
                },
                "vm.Password": {
                    pattern: opts.validPasswordRegex,
                    maxlength: opts.maxPasswordLength
                },
                "vm.ConfirmPassword": {
                    equalTo: "#" + _this.regPassword.attr("Id"),
                    minlength: opts.minPasswordLength,
                    maxlength: opts.maxPasswordLength
                },
                "vm.FirstName": {
                    nameRegex: true
                },
                "vm.LastName": {
                    nameRegex: true
                },
                "vm.DobDay": {
                    require_from_group: [3, ".dob-fields"],
                    date_selectbox: [_this.regDobDaySelector, _this.regDobMonthSelector, _this.regDobYearSelector],
                    checkDOB_selectbox: [_this.regDobDaySelector, _this.regDobMonthSelector, _this.regDobYearSelector]
                },
                "vm.DobMonth": {
                    require_from_group: [3, ".dob-fields"],
                    date_selectbox: [_this.regDobDaySelector, _this.regDobMonthSelector, _this.regDobYearSelector],
                    checkDOB_selectbox: [_this.regDobDaySelector, _this.regDobMonthSelector, _this.regDobYearSelector]
                },
                "vm.DobYear": {
                    require_from_group: [3, ".dob-fields"],
                    date_selectbox: [_this.regDobDaySelector, _this.regDobMonthSelector, _this.regDobYearSelector],
                    checkDOB_selectbox: [_this.regDobDaySelector, _this.regDobMonthSelector, _this.regDobYearSelector]
                },
                "vm.Postcode": {
                    postcodeCheck: true
                },
                "vm.AddressLine1": {
                    address: true
                },
                "vm.AddressLine2": {
                    address: true
                },
                "vm.Town": {
                    address: true
                },
                "vm.County": {
                    address: true
                },
                "vm.ContactNo": {
                    tel: true
                }
            },
            messages: {
                "vm.Title": {
                    required: _this.getTVariable("vm.Title", "required")
                },
                "vm.FirstName": {
                    required: _this.getTVariable("vm.FirstName", "required"),
                    nameRegex: _this.getTVariable("vm.FirstName", "nameRegex")
                },
                "vm.LastName": {
                    required: _this.getTVariable("vm.LastName", "required"),
                    nameRegex: _this.getTVariable("vm.LastName", "nameRegex")
                },
                "vm.DobDay": {
                    required: _this.getTVariable("vm.DobDay", "required"),
                    require_from_group: _this.getTVariable("vm.DobDay", "require_from_group"),
                    date_selectbox: _this.getTVariable("vm.DobDay", "date_selectbox"),
                    checkDOB_selectbox: _this.getTVariable("vm.DobDay", "checkDOB_selectbox")
                },
                "vm.DobMonth": {
                    required: _this.getTVariable("vm.DobMonth", "required"),
                    require_from_group: _this.getTVariable("vm.DobMonth", "require_from_group"),
                    date_selectbox: _this.getTVariable("vm.DobMonth", "date_selectbox"),
                    checkDOB_selectbox: _this.getTVariable("vm.DobMonth", "checkDOB_selectbox")
                },
                "vm.DobYear": {
                    required: _this.getTVariable("vm.DobYear", "required"),
                    require_from_group: _this.getTVariable("vm.DobYear", "require_from_group"),
                    date_selectbox: _this.getTVariable("vm.DobYear", "date_selectbox"),
                    checkDOB_selectbox: _this.getTVariable("vm.DobYear", "checkDOB_selectbox")
                },
                "vm.DateOfBirth": {
                    required: _this.getTVariable("vm.DateOfBirth", "required"),
                    require_from_group: _this.getTVariable("vm.DateOfBirth", "require_from_group"),
                    date_selectbox: _this.getTVariable("vm.DateOfBirth", "date_selectbox"),
                    checkDOB_selectbox: _this.getTVariable("vm.DateOfBirth", "checkDOB_selectbox")
                },
                "vm.Gender": {
                    required: _this.getTVariable("vm.Gender", "required")
                },
                "vm.Email": {
                    required: _this.getTVariable("vm.Email", "required"),
                    zeusRemote: _this.getTVariable("vm.Email", "zeusRemote"),
                    customValidEmail: _this.getTVariable("vm.Email", "email")
                },
                "vm.HouseNumber": {
                    required: _this.getTVariable("vm.HouseNumber", "required")
                },
                "vm.Postcode": {
                    required: _this.getTVariable("vm.Postcode", "required"),
                    postcodeCheck: _this.getTVariable("vm.Postcode", "postcodeCheck"),
                    alphanum: _this.getTVariable("vm.Postcode", "postcodeCheck")
                },
                "vm.AddressLine1": {
                    required: _this.getTVariable("vm.AddressLine1", "required"),
                    address: _this.getTVariable("vm.AddressLine1", "address")
                },
                "vm.AddressLine2": {
                    required: _this.getTVariable("vm.AddressLine2", "required"),
                    address: _this.getTVariable("vm.AddressLine2", "address")
                },
                "vm.Town": {
                    required: _this.getTVariable("vm.Town", "required"),
                    address: _this.getTVariable("vm.Town", "address")
                },
                "vm.County": {
                    required: _this.getTVariable("vm.County", "required"),
                    address: _this.getTVariable("vm.County", "address")
                },
                "vm.ContactNo": {
                    required: _this.getTVariable("vm.ContactNo", "required"),
                    tel: _this.getTVariable("vm.ContactNo", "tel")
                },
                "vm.UserName": {
                    required: _this.getTVariable("vm.UserName", "required"),
                    alphanumunderscore: _this.getTVariable("vm.UserName", "alphanumunderscore"),
                    minlength: _this.getTVariable("vm.UserName", "minlength"),
                    maxlength: _this.getTVariable("vm.UserName", "maxlength"),
                    zeusRemote: _this.getTVariable("vm.UserName", "zeusRemote")
                },
                "vm.Password": {
                    required: _this.getTVariable("vm.Password", "required"),
                    pattern: _this.getTVariable("vm.Password", "error"),
                    maxlength: _this.getTVariable("vm.Password", "maxlength")
                },
                "vm.ConfirmPassword": {
                    required: _this.getTVariable("vm.ConfirmPassword", "required"),
                    equalTo: _this.getTVariable("vm.ConfirmPassword", "equalTo")
                },
                "vm.TermsAndConditionsAgreed": {
                    required: _this.getTVariable("vm.TermsAndConditionsAgreed", "required")
                }
            },
            success: function(label, element) {
                _this.displayTooltip(element, _this.getTVariable(element.name, "tooltip"), "valid")
            },
            errorPlacement: function(error, element) {
                _this.displayTooltip(element, error.text(), "error")
            },
            showErrors: function(errorMap, errorList) {
                var errors = _this.validator.numberOfInvalids();
                var focused = $(":focus");
                if (errors) {
                    $.each(errorList, function() {
                        _this.displayTooltip(this.element, this.message, "error");
                        if ($(this.element).attr("id") === "regPassword" && focused.attr("id") === "regPassword") {
                            _this.showhideTooltip(this.element, "show")
                        }
                    })
                }
                this.defaultShowErrors()
            },
            invalidHandler: function(event, validator) {
                _this.regButton.button("loading");
                var errors = validator.numberOfInvalids();
                if (errors) {
                    var modalTitle = " ";
                    var errorMessages = [];
                    var fieldName;
                    var thisElem;
                    errorsList = [];
                    _this.errorsContainerList.html("");
                    var dialogTitle = errors === 1 ? _this.getTVariable("ErrorsContainerHeader", "error") : _this.getTVariable("ErrorsContainerHeader", "errors");
                    if (zeus.core.isMobile) {
                        modalTitle = dialogTitle
                    } else {
                        _this.errorsContainer.find(".validation-error-header").first().html(dialogTitle)
                    }
                    $.each(validator.errorList, function() {
                        thisElem = $(this.element);
                        if (opts.casinoToolkitVersion) {
                            if (thisElem.attr("id") === "regTermsAndConditionsAgreed") {
                                fieldName = _this.getTVariable("vm.IsTermsAccepted", "errorSummaryHeader")
                            } else if (thisElem.hasClass("select")) {
                                if (thisElem.attr("id") === "regDobDay" || thisElem.attr("id") === "regDobMonth" || thisElem.attr("id") === "regDobYear") {
                                    fieldName = "Date of Birth"
                                } else {
                                    fieldName = thisElem.closest(".form-group").find(".control-label").text().trim()
                                }
                            } else if (thisElem.hasClass("lookup-postcode-input")) {
                                fieldName = thisElem.attr("placeholder")
                            } else {
                                fieldName = thisElem.parent().siblings(".js-col-label").find("label[for]").text().trim()
                            }
                        } else {
                            if (thisElem.attr("id") === "regTermsAndConditionsAgreed") {
                                fieldName = _this.getTVariable("vm.IsTermsAccepted", "errorSummaryHeader")
                            } else {
                                fieldName = thisElem.parent().siblings("label[for]").text().trim()
                            }
                        }
                        if (fieldName === "") {
                            fieldName = thisElem.data("fieldname").trim()
                        }
                        if (errorMessages.indexOf(fieldName) === -1) {
                            errorMessages.push(fieldName);
                            _this.appendError(this.element.id, fieldName)
                        }
                        thisElem.closest(".form-group").removeClass("valid").addClass("error");
                        errorsList.push(fieldName);
                        fieldName = ""
                    });
                    if (typeof ga !== "undefined") {
                        ga.getAll().forEach(function(tracker) {
                            tracker.send("event", "Registration", "Registration Form Submitted With Validation Errors", errorsList.toString())
                        })
                    }
                    var dialogBody = _this.errorsContainer.html();
                    bootbox.alert({
                        message: dialogBody,
                        title: modalTitle,
                        className: "error-modal",
                        callback: function() {
                            _this.regButton.button("reset")
                        }
                    })
                }
            },
            onfocusin: function(element) {
                _this.showhideTooltip(element, "show")
            },
            onfocusout: function(element) {
                _this.showhideTooltip(element, "hide");
                if ($(element).hasClass("dont-validate")) {
                    return
                }
                _this.validator.element(element)
            }
        })
    };
    this.showhideTooltip = function(element, display) {
        $(element).closest(".form-group").tooltip(display)
    };
    this.displayTooltip = function(element, message, status) {
        var removeClass;
        var addClass;
        var isVisible = false;
        var closestFormGroup = $(element).closest(".form-group");
        if (closestFormGroup.next(".tooltip:visible").length) {
            isVisible = true
        }
        if (status === "valid") {
            removeClass = "error";
            addClass = "valid"
        } else {
            removeClass = "valid";
            addClass = "error"
        }
        _this.showhideTooltip(element, "hide");
        closestFormGroup.removeClass(removeClass).addClass(addClass).attr("data-original-title", message).next(".tooltip").find(".tooltip-inner").html(message);
        if (isVisible) {
            _this.showhideTooltip(element, "show")
        }
    };
    this.getTVariable = function(key, value) {
        var string = "";
        if (tVariables[key] !== undefined && tVariables[key][value] !== undefined) {
            string = tVariables[key][value]
        }
        if (key === "vm.Password") {
            string = _this.replaceValue(key, value, string)
        }
        return string
    };
    this.replaceValue = function(key, value, originalString) {
        var newString = "";
        if (key === "vm.Password") {
            newString = originalString.replace(/{{MINPASSWORDLENGTH}}/g, opts.minPasswordLength).replace(/{{MAXPASSWORDLENGTH}}/g, opts.maxPasswordLength)
        }
        return newString
    }
}).apply(wlzeus.RegistrationWidget);
"use strict";
var zeus = zeus || {};
(function(root) {
    root.PendingWithdrawals = function() {
        var depositPage = document.querySelector(".deposit-widget");
        var iframe = document.querySelector(".pending-withdrawal-iframe");
        var iframeSrc = iframe.dataset.iframeUrl;
        var amount = iframe.dataset.amount;
        var nextBtn = document.getElementById("paymentFormSubmitBtn");
        var prevBtn = document.querySelector(".js-cashier-back-btn");
        var sizeIframe = function(height) {
            iframe.setAttribute("height", height)
        };
        var addWidget = function() {
            iframe.src = iframeSrc;
            iframe.classList.remove("hidden")
        };
        var removeWidget = function() {
            iframe.src = "";
            iframe.classList.add("hidden")
        };
        const url = "/api/cashier/PendingWithdrawals/IFrameData?layout=" + (depositPage ? 3 : 1);
        $.ajax({
            url: url,
            success: function(result) {
                amount = result.pendingAmount;
                iframeSrc = result.iframeUrl;
                if (depositPage) {
                    if (iframeSrc !== "" && parseInt(amount, 10) > 0) {
                        addWidget();
                        prevBtn.addEventListener("click", function() {
                            addWidget()
                        })
                    }
                } else {
                    if (iframeSrc !== "") {
                        addWidget()
                    }
                }
            },
            async: false
        });
        window.addEventListener("message", function(e) {
            if (e.origin === "https://ppp-test.safecharge.com" || e.origin === "https://secure.safecharge.com") {
                var resizeObj = JSON.parse(e.data);
                if (resizeObj.action && resizeObj.action === "resizeHeight") sizeIframe(resizeObj.payload);
                else if (resizeObj.resizeIframe) sizeIframe(resizeObj.resizeIframe)
            }
        });
        $(document).on("cashier:deposit:iframeReceived", function() {
            removeWidget()
        })
    };
    return root
})(zeus);
"use strict";
var wlzeus = wlzeus || {};
wlzeus.changePassword = wlzeus.changePassword || {};
wlzeus.changePassword.Model = Orchestra.Model.extend({
    sync: function(method, model, options) {
        var apiUrl = {
            create: zeus.core.siteRoot + "api/PersonalDetailsWidget/ChangePassword"
        };
        options = options || {};
        if (method && method !== "read") {
            var csrf = document.querySelector('meta[name="csrf-token"]');
            var csrfToken = csrf ? csrf.getAttribute("content") : "";
            options.headers = options.headers || {};
            options.headers["X-CSRF-TOKEN"] = csrfToken
        }
        options.url = apiUrl[method.toLowerCase()];
        return Orchestra.sync.apply(this, arguments)
    }
});
"use strict";
var wlzeus = wlzeus || {};
wlzeus.changePassword = wlzeus.changePassword || {};
wlzeus.changePassword.View = Orchestra.View.extend({
    template: _.template($("#changePassword_template").html() || ""),
    el: "#changePassword",
    events: {
        submit: "formSubmit"
    },
    initialize: function(options) {
        this.options = options.widgetOptions;
        this.render()
    },
    render: function() {
        this.$el.html(this.template({
            passwordSubmitBtnText: this.options.tVariables.passwordSubmitBtnText
        }));
        this.setupForm();
        return this
    },
    setupForm: function() {
        this.formEl = $("#changePasswordForm");
        wlzeus.bootstrap.tooltip.initTooltip(this.formEl, this.options.formSettings.messages, {
            useElemID: true
        });
        this.validator = this.formEl.validate(this.options.formSettings)
    },
    formSubmit: function(e) {
        e.preventDefault();
        var self = this;
        var newModel = {
            CurrentPassword: this.$el.find("#currentPassword").val(),
            NewPassword: this.$el.find("#newPassword").val(),
            ConfirmPassword: this.$el.find("#confirmPassword").val(),
            WidgetId: this.options.widgetId
        };
        this.formLoading();
        this.model.save(newModel, {
            success: function() {
                self.formUpdateSuccess()
            },
            error: function() {
                self.formUpdateError()
            }
        })
    },
    formLoading: function() {
        this.formEl.addClass("loading");
        this.formEl.find(".submit-btn").val(this.options.tVariables.passwordSubmitBtnLoading)
    },
    formUpdateSuccess: function() {
        this.render();
        wlzeus.personalDetailsWidget.formHandler.showResponse(this.formEl, this.options.tVariables.passwordSubmitSuccess, "success")
    },
    formUpdateError: function() {
        this.formEl.find(".submit-btn").val(this.options.tVariables.passwordSubmitBtnText);
        wlzeus.personalDetailsWidget.formHandler.showResponse(this.formEl, this.options.tVariables.passwordSubmitError, "danger")
    }
});
var wlzeus = wlzeus || {};
wlzeus.profile = wlzeus.profile || {};
wlzeus.profile.edit = {};
var ProfileWidget = function() {
    "use strict";
    var opts;
    var tVariables;
    var allForms;
    var errorsContainer;
    var errorsContainerList;
    var errorsContainerItems;
    var formButton;
    return {
        init: function(tVariablesJSON, optsJSON) {
            var self = this;
            tVariables = tVariablesJSON;
            opts = optsJSON;
            self.addBindings();
            self.cacheSelectors();
            self.setupPage();
            wlzeus.bootstrap.tooltip.initTooltip(allForms, tVariables, opts);
            self.validateForm()
        },
        addBindings: function() {
            $("#selfExcludeForm").keypress(function(e) {
                if (e.keyCode === 13) {
                    e.preventDefault();
                    $("#selfExclusionBtn").click()
                }
            });
            $(document).on("click", "#selfExclusionBtn", function() {
                if ($("#selfExcludeForm").valid()) {
                    bootbox.dialog({
                        message: zeus.utilities.tVar(tVariables, "SelfExcludePassword", "message"),
                        title: "Self Exclusion",
                        className: "error-modal",
                        buttons: {
                            danger: {
                                label: zeus.utilities.tVar(tVariables, "SelfExcludePassword", "cancelLabel"),
                                className: "btn-secondary"
                            },
                            success: {
                                label: zeus.utilities.tVar(tVariables, "SelfExcludePassword", "confirmLabel"),
                                className: "btn-primary",
                                callback: function() {
                                    $("#selfExcludeForm").submit()
                                }
                            }
                        }
                    })
                }
            })
        },
        cacheSelectors: function() {
            allForms = $("#userContactInfoForm, #changePasswordForm, #selfExcludeForm");
            errorsContainer = $(".validation-summary-errors");
            errorsContainerList = errorsContainer.find("ul");
            errorsContainerItems = errorsContainerList.children("li");
            formButton = $(allForms).find(".btn")
        },
        setupPage: function() {
            var self = this;
            var errorsLength = errorsContainerItems.length;
            if (errorsLength) {
                self.createErrorBootBoxDialog("serverError", errorsLength, "info-modal");
                errorsContainerItems.removeClass("error").addClass("error-invalid-account")
            }
        },
        appendError: function(type, text) {
            errorsContainerList.append('<li class="error-' + type + '">' + text + "</li>")
        },
        validateForm: function() {
            var self = this;
            $.validator.setDefaults({
                errorLabelContainer: ".errors-container",
                errorElement: "li",
                onfocusin: function(element) {
                    wlzeus.bootstrap.tooltip.showhideTooltip(element, "show")
                },
                onfocusout: function(element) {
                    wlzeus.bootstrap.tooltip.showhideTooltip(element, "hide");
                    this.element(element)
                },
                errorPlacement: function(error, element) {
                    wlzeus.bootstrap.tooltip.displayTooltip(element, error.text(), "error")
                },
                success: function(label, element) {
                    if (opts.replacement !== undefined) {
                        var thisID;
                        var thisElem;
                        thisID = element.id;
                        _.each(opts.replacement, function(value, key) {
                            thisElem = $("#" + thisID).attr("name");
                            if (thisElem === key) {
                                wlzeus.bootstrap.tooltip.displayTooltip(element, zeus.utilities.updateValue(zeus.utilities.tVar(tVariables, key, "tooltip"), opts.replacement[key]), "valid")
                            } else {
                                wlzeus.bootstrap.tooltip.displayTooltip(element, zeus.utilities.tVar(tVariables, element.id, "tooltip"), "valid")
                            }
                        })
                    } else {
                        wlzeus.bootstrap.tooltip.displayTooltip(element, zeus.utilities.tVar(tVariables, element.id, "tooltip"), "valid")
                    }
                },
                showErrors: function(errorMap, errorList) {
                    if (this.numberOfInvalids()) {
                        $.each(errorList, function() {
                            wlzeus.bootstrap.tooltip.displayTooltip(this.element, this.message, "error")
                        })
                    }
                    this.defaultShowErrors()
                },
                invalidHandler: function(event, validator) {
                    var errorsLength = validator.numberOfInvalids();
                    var errorMessages = [];
                    var fieldName;
                    var thisElem;
                    errorsContainerList.html("");
                    if (errorsLength) {
                        formButton.button("loading");
                        $.each(validator.errorList, function() {
                            thisElem = $(this.element);
                            fieldName = thisElem.parents().siblings("label[for]").text().trim();
                            if (thisElem.attr("id") === "RegistrationSummary_IsSelfExcludeRequested") {
                                fieldName = zeus.utilities.tVar(tVariables, "RegistrationSummary_IsSelfExcludeRequested", "required")
                            } else if (fieldName === "") {
                                fieldName = thisElem.data("fieldname").trim()
                            }
                            if (errorMessages.indexOf(fieldName) === -1) {
                                errorMessages.push(fieldName);
                                self.appendError(this.element.id, fieldName)
                            }
                            thisElem.closest(".form-group").removeClass("valid").addClass("error");
                            fieldName = ""
                        });
                        self.createErrorBootBoxDialog("inlineError", errorsLength, "error-modal")
                    }
                },
                submitHandler: function(form) {
                    formButton.button("loading");
                    form.submit()
                }
            });
            jQuery.validator.addMethod("customValidEmail", function(value, element) {
                return this.optional(element) || /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(value)
            });
            $("#userContactInfoForm").validate({
                rules: {
                    ContactNo: {
                        tel: true
                    },
                    "RegistrationSummary.Email": {
                        customValidEmail: true
                    }
                },
                messages: {
                    ContactNo: {
                        required: zeus.utilities.tVar(tVariables, "ContactNo", "required"),
                        tel: zeus.utilities.tVar(tVariables, "ContactNo", "tel")
                    },
                    "RegistrationSummary.Email": {
                        required: zeus.utilities.tVar(tVariables, "Email", "required"),
                        customValidEmail: "Please enter a valid email address."
                    }
                }
            });
            $.validator.addMethod("notEqualToCurrentPassword", function(value, element) {
                return $("#CurrentPassword").val() != $("#NewPassword").val()
            });
            $("#changePasswordForm").validate({
                rules: {
                    NewPassword: {
                        alphanum: true,
                        minlength: opts.minPasswordLength,
                        maxlength: opts.maxPasswordLength,
                        notEqualToCurrentPassword: true
                    },
                    ConfirmPassword: {
                        equalTo: "#NewPassword",
                        notEqualToCurrentPassword: true
                    }
                },
                messages: {
                    CurrentPassword: {
                        required: zeus.utilities.tVar(tVariables, "CurrentPassword", "required")
                    },
                    NewPassword: {
                        required: zeus.utilities.updateValue(zeus.utilities.tVar(tVariables, "NewPassword", "required"), opts.replacement.NewPassword),
                        alphanum: zeus.utilities.updateValue(zeus.utilities.tVar(tVariables, "NewPassword", "alphanum"), opts.replacement.NewPassword),
                        minlength: zeus.utilities.updateValue(zeus.utilities.tVar(tVariables, "NewPassword", "minlength"), opts.replacement.NewPassword),
                        maxlength: zeus.utilities.updateValue(zeus.utilities.tVar(tVariables, "NewPassword", "maxlength"), opts.replacement.NewPassword),
                        notEqualToCurrentPassword: "Your new password is the same as your current password. Please enter a new unique password."
                    },
                    ConfirmPassword: {
                        required: zeus.utilities.tVar(tVariables, "ConfirmPassword", "required"),
                        equalTo: zeus.utilities.tVar(tVariables, "ConfirmPassword", "equalTo"),
                        notEqualToCurrentPassword: "Your new password is the same as your current password. Please enter a new unique password."
                    }
                }
            });
            $("#selfExcludeForm").validate({
                rules: {
                    RegistrationSummary_IsSelfExcludeRequested: {
                        required: true
                    }
                },
                messages: {
                    SelfExcludePassword: {
                        required: zeus.utilities.tVar(tVariables, "SelfExcludePassword", "required")
                    },
                    IsSelfExcludeRequested: {
                        required: zeus.utilities.tVar(tVariables, "IsSelfExcludeRequested", "required")
                    },
                    RegistrationSummary_IsSelfExcludeRequested: {
                        required: zeus.utilities.tVar(tVariables, "RegistrationSummary_IsSelfExcludeRequested", "required")
                    }
                }
            })
        },
        createErrorBootBoxDialog: function(titleType, errorsLength, className) {
            var modalTitle = "&nbsp;";
            var dialogTitle;
            if (titleType === "serverError") {
                dialogTitle = zeus.utilities.tVar(tVariables, "ErrorsContainerHeader", "serverError")
            } else {
                dialogTitle = errorsLength === 1 ? zeus.utilities.tVar(tVariables, "ErrorsContainerHeader", "error") : zeus.utilities.tVar(tVariables, "ErrorsContainerHeader", "errors")
            }
            if (zeus.core.isMobile) {
                modalTitle = dialogTitle
            } else {
                errorsContainer.find(".validation-error-header").first().html(dialogTitle)
            }
            var dialogBody = errorsContainer.html();
            bootbox.alert({
                message: dialogBody,
                title: modalTitle,
                className: className,
                callback: function() {
                    formButton.button("reset")
                }
            })
        }
    }
};
if (typeof exports === "object") {
    module.exports = ProfileWidget
}
wlzeus.profile.edit = ProfileWidget;
"use strict";
var wlzeus = wlzeus || {};
wlzeus.personalDetails = wlzeus.personalDetails || {};
wlzeus.personalDetails.Model = Orchestra.Model.extend({
    defaults: {
        Address: {
            Country: {
                Code: null,
                Name: null
            },
            County: null,
            Line1: null,
            Line2: null,
            PostCode: null,
            Town: null
        },
        DateOfBirth: null,
        FormattedDateOfBirth: null,
        Email: null,
        FirstName: null,
        FormAction: null,
        Gender: null,
        IsSelfExcluded: null,
        LastLoginDateTime: null,
        FormattedLastLoginDateTime: null,
        LastName: null,
        Part: null,
        Password: null,
        TelephoneNumber: null,
        WidgetId: null,
        AvailableCountries: null
    },
    initialize: function() {
        this.fetch()
    },
    sync: function(method, model, options) {
        var apiUrl = {
            read: zeus.core.siteRoot + "api/PersonalDetailsWidget/GetPersonalDetails",
            create: zeus.core.siteRoot + "api/PersonalDetailsWidget/Update"
        };
        options = options || {};
        if (method && method !== "read") {
            var csrf = document.querySelector('meta[name="csrf-token"]');
            var csrfToken = csrf ? csrf.getAttribute("content") : "";
            options.headers = options.headers || {};
            options.headers["X-CSRF-TOKEN"] = csrfToken
        }
        options.url = apiUrl[method.toLowerCase()];
        return Orchestra.sync.apply(this, arguments)
    },
    parse: function(data) {
        data.FormattedDateOfBirth = moment(data.DateOfBirth).format("Do MMMM YYYY");
        data.FormattedLastLoginDateTime = data.LastLoginDateTime == null ? "" : moment(data.LastLoginDateTime).format("Do MMMM YYYY, h:mm:ss a");
        return data
    }
});
"use strict";
var wlzeus = wlzeus || {};
wlzeus.personalDetails = wlzeus.personalDetails || {};
wlzeus.personalDetails.View = Orchestra.View.extend({
    template: _.template($("#personalDetails_template").html() || ""),
    el: "#personalDetails",
    ui: {
        country: "#country"
    },
    events: {
        submit: "formSubmit",
        "change @ui.country": "updateCountryAddressFormat"
    },
    initialize: function(options) {
        this.options = options.widgetOptions;
        this.render();
        this.listenToOnce(this.model, "change", this.render)
    },
    render: function() {
        this.$el.html(this.template(this.model.toJSON()));
        this.setupForm();
        return this
    },
    setupForm: function() {
        this.formEl = $("#personalDetailsForm");
        wlzeus.bootstrap.tooltip.initTooltip(this.formEl, this.options.formSettings.messages, {
            useElemID: true
        });
        this.validator = this.formEl.validate(this.options.formSettings);
        this.$("input").on("change keyup", function() {
            var $this = $(this);
            if (!$this.val().length && !$this.hasClass("required")) {
                $this.closest(".form-group").removeClass("valid error")
            }
        })
    },
    formSubmit: function(e) {
        e.preventDefault();
        var self = this;
        this.formLoading();
        var newAddress = this.model.get("Address");
        newAddress.Line1 = this.$("#addressLine1").val();
        newAddress.Line2 = this.$("#addressLine2").val();
        newAddress.Town = this.$("#townCity").val();
        newAddress.County = this.$("#county").val();
        newAddress.PostCode = this.$("#postcode").val();
        newAddress.Country.Code = this.$("#country").val();
        var newData = {
            WidgetId: this.options.widgetId,
            Address: newAddress,
            TelephoneNumber: this.$("#telephone").val(),
            Email: this.$("#email").val(),
            Password: this.$("#personalDetailsPassword").val()
        };
        this.model.set(newData);
        this.model.save(this.model.toJSON(), {
            success: function() {
                self.formUpdateSuccess()
            },
            error: function() {
                self.formUpdateError()
            }
        })
    },
    updateCountryAddressFormat: function() {
        var countryCode = $("#country").val();
        var $postcode = $("#postcode");
        var $postcodeAsterisk = this.$(".postcode-asterisk");
        $postcode.rules("remove");
        if (countryCode === "IE") {
            $postcode.removeClass("required").rules("add", {
                address: true
            });
            $postcodeAsterisk.addClass("hide")
        } else {
            $postcode.addClass("required").rules("add", {
                postcodeCheck: true
            });
            $postcodeAsterisk.removeClass("hide")
        }
        $postcode.removeClass("valid error").closest(".form-group").removeClass("valid error");
        $postcode.valid()
    },
    formLoading: function() {
        this.formEl.addClass("loading");
        this.formEl.find(".submit-btn").val(this.options.tVariables.detailsSubmitBtnLoading)
    },
    formUpdateSuccess: function() {
        this.render();
        wlzeus.personalDetailsWidget.formHandler.showResponse(this.formEl, this.options.tVariables.detailsSubmitSuccess, "success")
    },
    formUpdateError: function() {
        this.formEl.find(".submit-btn").val(this.options.tVariables.detailsSubmitBtnText);
        wlzeus.personalDetailsWidget.formHandler.showResponse(this.formEl, this.options.tVariables.detailsSubmitError, "danger")
    }
});
"use strict";
var wlzeus = wlzeus || {};
wlzeus.personalDetailsSummary = wlzeus.personalDetailsSummary || {};
wlzeus.personalDetailsSummary.View = Orchestra.View.extend({
    template: _.template($("#personalDetailsSummary_template").html() || ""),
    el: "#personalDetailsSummary",
    initialize: function() {
        this.render();
        this.listenTo(this.model, "sync", this.render)
    },
    render: function() {
        this.$el.html(this.template(this.model.toJSON()));
        return this
    }
});
"use strict";
var wlzeus = wlzeus || {};
wlzeus.personalDetailsWidget = wlzeus.personalDetailsWidget || {};
wlzeus.personalDetailsWidget.widget = wlzeus.personalDetailsWidget.widget || {};
var widget = function() {
    return {
        init: function(widgetOptions) {
            $.validator.setDefaults({
                onfocusin: function(element) {
                    wlzeus.bootstrap.tooltip.showhideTooltip(element, "show")
                },
                onfocusout: function(element) {
                    wlzeus.bootstrap.tooltip.showhideTooltip(element, "hide");
                    this.element(element)
                },
                errorPlacement: function(error, element) {
                    wlzeus.bootstrap.tooltip.displayTooltip(element, error.text(), "error")
                },
                success: function(label, element) {
                    wlzeus.bootstrap.tooltip.displayTooltip(element, zeus.utilities.tVar(widgetOptions.formSettings.messages, element.id, "tooltip"), "valid")
                },
                showErrors: function(errorMap, errorList) {
                    if (this.numberOfInvalids()) {
                        $.each(errorList, function() {
                            wlzeus.bootstrap.tooltip.displayTooltip(this.element, this.message, "error")
                        })
                    }
                    this.defaultShowErrors()
                }
            });
            if (widgetOptions.showChangePassword) {
                var changePasswordModel = new wlzeus.changePassword.Model;
                this.changePassword = new wlzeus.changePassword.View({
                    widgetOptions: widgetOptions,
                    model: changePasswordModel
                })
            }
            var personalDetailsModel = new wlzeus.personalDetails.Model;
            this.personalDetails = new wlzeus.personalDetails.View({
                model: personalDetailsModel,
                widgetOptions: widgetOptions
            });
            if (widgetOptions.showSummary) {
                this.personalDetailsSummary = new wlzeus.personalDetailsSummary.View({
                    model: personalDetailsModel
                })
            }
        }
    }
};
wlzeus.personalDetailsWidget.widget = widget;
wlzeus.personalDetailsWidget.formHandler = {
    showResponse: function($form, message, messageClass) {
        var closeExistingAlert = $form.find(".js-close-alert");
        if (closeExistingAlert.length) {
            closeExistingAlert.click()
        }
        var responseHTML = _.template($("#response_template").html(), {
            alertClass: messageClass,
            alertMessage: message
        });
        $form.find(".form-header").after(responseHTML)
    }
};
var wlzeus = wlzeus || {};
wlzeus.promotions = wlzeus.promotions || {};
wlzeus.promotions.common = {};
(function() {
    "use strict";
    this.updateAmountTooltip = function(options) {
        var message;
        if (!options.separateTooltipScript && options.bonusPage !== undefined) {
            message = options.pageScriptUrl.getTVariable("Amount", "tooltip");
            options.pageScriptUrl.displayTooltip(options.bonusPage.amountInput, message, false)
        } else {
            message = zeus.utilities.tVar(wlzeus.bootstrap.tooltip.tVars, "DepositAmount", "tooltip");
            wlzeus.bootstrap.tooltip.displayTooltip($(options.depositSelector), zeus.utilities.updateValue(message, wlzeus.paymentWidget.replacement.replacement.DepositAmount), false)
        }
    };
    this.updateGlobalMinDeposit = function(opts, min) {
        opts.pageScriptUrl.minDepositValue = min
    };
    this.getPageScript = function(type, newScript) {
        var pageScript = null;
        var paymentMethodsJSON = null;
        if (type !== undefined) {
            type = type.toLowerCase()
        }
        if (newScript !== undefined) {
            newScript = newScript.toLowerCase()
        }
        if (typeof wlzeus.banking !== "undefined" && typeof wlzeus.paymentWidget === "undefined") {
            if (typeof wlzeus.banking.deposit !== "undefined" && typeof wlzeus.banking.deposit.paymentJson !== "undefined") {
                pageScript = wlzeus.banking.deposit;
                paymentMethodsJSON = pageScript.paymentJson
            } else if (typeof wlzeus.banking.addCard !== "undefined" && typeof wlzeus.banking.addCard.paymentMethodsJSON !== "undefined") {
                pageScript = wlzeus.banking.addCard;
                paymentMethodsJSON = pageScript.paymentMethodsJSON
            }
        }
        if (typeof wlzeus.paymentWidget !== "undefined") {
            if (typeof wlzeus.paymentWidget.bankCardDeposit !== "undefined" && typeof wlzeus.paymentWidget.bankCardDeposit.paymentJson !== "undefined") {
                pageScript = wlzeus.paymentWidget.bankCardDeposit;
                paymentMethodsJSON = pageScript.paymentJson
            } else if (typeof wlzeus.paymentWidget.addBankCard !== "undefined" && typeof wlzeus.paymentWidget.addBankCard.paymentMethodsJSON !== "undefined") {
                pageScript = wlzeus.paymentWidget.addBankCard;
                paymentMethodsJSON = pageScript.paymentMethodsJSON
            }
        }
        if (newScript !== undefined && typeof wlzeus.paymentWidget !== "undefined") {
            pageScript = null;
            if (newScript !== "addpayment") {
                pageScript = wlzeus.paymentWidget.bankCardDeposit;
                paymentMethodsJSON = pageScript.paymentJson
            } else {
                pageScript = wlzeus.paymentWidget.addBankCard;
                paymentMethodsJSON = pageScript.paymentMethodsJSON
            }
        }
        if (type === "paymentjson") {
            return paymentMethodsJSON
        } else {
            return pageScript
        }
    }
}).apply(wlzeus.promotions.common);
var wlzeus = wlzeus || {};
wlzeus.promotions = wlzeus.promotions || {};
wlzeus.promotions.welcomeBonuses = {};
(function() {
    "use strict";
    var self = this;
    var bonusContainer = ".promotions-list";
    var paymentMethodsJSON = null;
    var pageScriptUrl;
    var minDepositAmount;
    var separateTooltipScript = false;
    var commonOptions = {};
    this.init = function(bonuses, amountEl) {
        self.bonusJSON = bonuses;
        self.amountInput = $(amountEl);
        self.bonusItemTemplate = $("#bonusItemTemplate");
        self.setupTemplates();
        self.addBindings();
        self.checkForBonus();
        if (typeof wlzeus.paymentWidget !== "undefined") {
            separateTooltipScript = true
        }
        pageScriptUrl = wlzeus.promotions.common.getPageScript("script");
        paymentMethodsJSON = wlzeus.promotions.common.getPageScript("paymentJson");
        commonOptions = {
            separateTooltipScript: separateTooltipScript,
            pageScriptUrl: pageScriptUrl,
            bonusPage: wlzeus.promotions.welcomeBonuses
        };
        if (paymentMethodsJSON) {
            self.updateMinDeposit(false)
        }
        $(document).trigger("promotions:bonus:firstDepositSummaryRetrieved", bonuses)
    };
    this.addBindings = function() {
        if (!separateTooltipScript && paymentMethodsJSON) {
            self.amountInput.on("focus", function() {
                wlzeus.promotions.common.updateAmountTooltip(commonOptions)
            })
        }
        $(document).on("addPaymentView", function() {
            pageScriptUrl = wlzeus.promotions.common.getPageScript("script", "addPayment")
        }).on("depositView", function() {
            pageScriptUrl = wlzeus.promotions.common.getPageScript("script", "deposit")
        })
    };
    this.setupTemplates = function() {
        if (self.bonusItemTemplate.length) {
            self.bonusItemTemplate = _.template(self.bonusItemTemplate.html())
        }
    };
    this.checkForBonus = function() {
        if (self.bonusJSON) {
            _.each(self.bonusJSON, function(bonus) {
                if (bonus.enabled) {
                    self.buildBonusTemplate(bonus);
                    if (paymentMethodsJSON) {
                        $('input[name="' + bonus.radioName + '"]').change(function() {
                            self.updateMinDeposit(true)
                        })
                    }
                }
                if (bonus.lastItem) {
                    $(document).trigger("WelcomePromosLoaded")
                }
            })
        }
    };
    this.buildBonusTemplate = function(bonusJSON) {
        var bonusItem = "";
        var bonusTitle = "";
        var bonusText = "";
        var radioName = "";
        var bonusName = "";
        if (bonusJSON.radioName) {
            radioName = bonusJSON.radioName
        }
        if (bonusJSON.name) {
            bonusName = bonusJSON.name
        }
        if (bonusJSON.group === "addCardBonus") {
            if (bonusJSON.title) {
                bonusTitle = self.updateText(bonusJSON, bonusJSON.title)
            }
            if (bonusJSON.bodyText) {
                bonusText = self.updateText(bonusJSON, bonusJSON.bodyText)
            }
        } else if (bonusJSON.group === "firstDepositBonus") {
            if (bonusJSON.fixed) {
                if (bonusJSON.fixedTitle) {
                    bonusTitle = self.updateText(bonusJSON, bonusJSON.fixedTitle)
                }
                if (bonusJSON.fixedText) {
                    bonusText = self.updateText(bonusJSON, bonusJSON.fixedText)
                }
            } else {
                if (bonusJSON.percentTitle) {
                    bonusTitle = self.updateText(bonusJSON, bonusJSON.percentTitle)
                }
                if (bonusJSON.percentText) {
                    bonusText = self.updateText(bonusJSON, bonusJSON.percentText)
                }
            }
        }
        bonusItem += self.bonusItemTemplate({
            groupName: bonusJSON.group,
            radioName: radioName,
            bonusTitle: bonusTitle,
            bonusText: bonusText,
            radioChecked: bonusJSON.optedInByDefault ? 'checked="checked"' : "",
            bonusName: bonusName
        });
        $(bonusContainer).append(bonusItem)
    };
    this.updateText = function(bonus, text) {
        if (bonus.limit) {
            text = text.replace("{{BONUS_LIMIT}}", bonus.limit)
        }
        if (bonus.amount) {
            text = text.replace("{{BONUS_AMOUNT}}", bonus.amount)
        }
        if (bonus.value) {
            text = text.replace("{{BONUS_VALUE}}", bonus.value)
        }
        return text
    };
    this.updateMinDeposit = function(validate) {
        var minDepArr = [];
        if (!isNaN(parseFloat(paymentMethodsJSON.MinDeposit))) {
            minDepArr.push(parseFloat(paymentMethodsJSON.MinDeposit).toFixed(2))
        }
        if ($('input[name="' + self.bonusJSON.addCardBonus.radioName + '"]').prop("checked")) {
            if (!isNaN(parseFloat(self.bonusJSON.addCardBonus.minDeposit))) {
                minDepArr.push(parseFloat(self.bonusJSON.addCardBonus.minDeposit).toFixed(2))
            }
        }
        if ($('input[name="' + self.bonusJSON.firstDepositBonus.radioName + '"]').prop("checked")) {
            if (!isNaN(parseFloat(self.bonusJSON.firstDepositBonus.minDeposit))) {
                minDepArr.push(parseFloat(self.bonusJSON.firstDepositBonus.minDeposit).toFixed(2))
            }
        }
        minDepositAmount = _.max(minDepArr);
        self.newMinDeposit = minDepositAmount;
        $(document).trigger("minDepositUpdate");
        self.amountInput.rules("add", {
            range: [minDepositAmount, paymentMethodsJSON.MaxDeposit]
        });
        if (validate) {
            self.amountInput.valid()
        }
        wlzeus.promotions.common.updateGlobalMinDeposit(commonOptions, minDepositAmount);
        wlzeus.promotions.common.updateAmountTooltip(commonOptions)
    }
}).apply(wlzeus.promotions.welcomeBonuses);
var wlzeus = wlzeus || {};
wlzeus.promotions = wlzeus.promotions || {};
wlzeus.promotions.calculator = {};
(function() {
    "use strict";
    var self = this;
    var amountInput;
    var showTotal;
    var bonusJSON;
    var addCardBonusEnabled;
    var firstDepositBonusEnabled;
    var repeatDepositEnabled = false;
    var addCardBonus;
    var firstDepositBonusAmount;
    var firstDepositBonusLimit;
    var firstDepositBonusPcFactor;
    var firstDepositBonusMinDeposit;
    var firstDepositBonusFixed;
    var currencyCode;
    var currency;
    var calcAddCardBonus = 0;
    var calcDepositAmount = 0;
    var calcNewBonus = 0;
    var calculatorTotal = 0;
    var balanceTotal = 0;
    var calculatorEl = $("#promoCalculator");
    var addCardTableEl = calculatorEl.find(".add-card-bonus");
    var depositTableEl = calculatorEl.find(".deposit-amount");
    var repeatDepositEl = calculatorEl.find(".repeat-deposit-bonus");
    var firstDepositTableEl = calculatorEl.find(".first-deposit-bonus");
    var totalDepositBonus = calculatorEl.find(".total-deposit-bonus");
    var totalTableEl = calculatorEl.find(".total-balance");
    var addCardTextEl = addCardTableEl.find(".value");
    var depositTextEl = depositTableEl.find(".value");
    var repeatDepositTextEl = repeatDepositEl.find(".value");
    var firstDepositTextEl = firstDepositTableEl.find(".value");
    var totalDepositTextEl = totalDepositBonus.find(".value");
    var totalTextEl = totalTableEl.find(".value");
    var addCardRadio;
    var addCardRadioDecline;
    var firstDepositRadio;
    var firstDepositRadioDecline;
    var repeatDeposit = null;
    var repeatDepositAmount;
    var repeatDepositLimit;
    var repeatDepositMinimum;
    var repeatDepositFixed;
    var unformattedDeposit;
    this.init = function(bonuses, amountEl, showBalance) {
        showTotal = showBalance;
        bonusJSON = bonuses;
        amountInput = $(amountEl);
        currencyCode = "GBP";
        currency = zeus.utilities.getCurrencySymbol(currencyCode);
        self.getValues();
        self.setupCalculatorRows();
        self.setCalculatorValues();
        self.setCalculatorTotal();
        self.addBindings()
    };
    this.createBonus = function(createBonus) {
        repeatDeposit = createBonus;
        self.getValues();
        self.setupCalculatorRows();
        self.setCalculatorValues();
        self.setCalculatorTotal()
    };
    this.getValues = function() {
        addCardBonusEnabled = bonusJSON.addCardBonus.enabled;
        addCardBonus = bonusJSON.addCardBonus.amount;
        firstDepositBonusEnabled = bonusJSON.firstDepositBonus.enabled;
        if (firstDepositBonusEnabled) {
            firstDepositBonusAmount = bonusJSON.firstDepositBonus.amount;
            firstDepositBonusLimit = bonusJSON.firstDepositBonus.limit;
            firstDepositBonusPcFactor = bonusJSON.firstDepositBonus.percentageFactor;
            firstDepositBonusMinDeposit = bonusJSON.firstDepositBonus.minDeposit;
            firstDepositBonusFixed = bonusJSON.firstDepositBonus.fixed
        }
        addCardRadio = $('input[name="' + bonusJSON.addCardBonus.radioName + '"]');
        addCardRadioDecline = $('input[name="' + bonusJSON.addCardBonus.radioName + '"]' + ".decline-input");
        firstDepositRadio = $('input[name="' + bonusJSON.firstDepositBonus.radioName + '"]');
        firstDepositRadioDecline = $('input[name="' + bonusJSON.firstDepositBonus.radioName + '"]' + ".decline-input");
        if (repeatDeposit !== null) {
            repeatDepositEnabled = true;
            repeatDepositAmount = repeatDeposit.Amount;
            repeatDepositLimit = repeatDeposit.CreditMax;
            repeatDepositMinimum = repeatDeposit.DepositMinimum;
            repeatDepositFixed = repeatDeposit.CreditTypeFixed
        }
    };
    this.setupCalculatorRows = function() {
        if (!addCardBonusEnabled) {
            addCardTableEl.addClass("hide")
        }
        if (!firstDepositBonusEnabled) {
            firstDepositTableEl.addClass("hide")
        }
        if (!repeatDepositEnabled) {
            self.toggleRepeatDepositRows("hide")
        } else {
            self.toggleRepeatDepositRows("show")
        }
    };
    this.setCalculatorValues = function() {
        if (addCardBonusEnabled) {
            calcAddCardBonus = addCardBonus;
            addCardTextEl.html(currency + zeus.utilities.formatNumber(calcAddCardBonus, currencyCode))
        }
        if (repeatDepositEnabled) {
            self.repeatDepositChanged()
        }
        if (amountInput.val() > 0) {
            self.amountChanged()
        }
        zeus.utilities.formatNumber(balanceTotal, currencyCode)
    };
    this.setCalculatorTotal = function() {
        if (repeatDepositEnabled) {
            unformattedDeposit = numeral().unformat(totalDepositTextEl.text());
            calculatorTotal = numeral(parseFloat(unformattedDeposit) + parseFloat(balanceTotal));
            totalTextEl.html(currency + zeus.utilities.formatNumber(calculatorTotal, currencyCode))
        } else if (addCardBonusEnabled || firstDepositBonusEnabled) {
            if (parseFloat(calcDepositAmount) > 0) {
                calculatorTotal = parseFloat(calcAddCardBonus) + parseFloat(calcDepositAmount) + parseFloat(calcNewBonus)
            } else {
                calculatorTotal = parseFloat(calcAddCardBonus) + parseFloat(calcDepositAmount)
            }
            if (showTotal !== "undefined" && showTotal) {
                calculatorTotal = calculatorTotal + parseFloat(balanceTotal);
                totalTextEl.html(currency + zeus.utilities.formatNumber(calculatorTotal, currencyCode))
            } else {
                totalDepositTextEl.html(currency + zeus.utilities.formatNumber(calculatorTotal, currencyCode))
            }
        } else {
            calculatorTotal = parseFloat(balanceTotal) + parseFloat(calcDepositAmount);
            totalTextEl.html(currency + zeus.utilities.formatNumber(calculatorTotal, currencyCode))
        }
    };
    this.addBindings = function() {
        amountInput.change(self.amountChanged);
        addCardRadio.change(self.addCardBonusChanged);
        firstDepositRadio.change(self.firstDepositBonusChanged);
        $(".btn-show-promo").on("click", function() {
            $(".promos-container").removeClass("hide");
            $(this).remove()
        });
        if (typeof zeus !== "undefined" && zeus.asyncBalance) {
            $(document).on("AsyncBalanceLoaded", function() {
                balanceTotal = numeral().unformat($(".asyncBalance").text());
                zeus.utilities.formatNumber(balanceTotal, currencyCode);
                self.setCalculatorTotal()
            })
        } else {
            $(document).on("balanceLoaded", function() {
                var getTotalBalance = wlzeus.balances ? wlzeus.balances.getTotalBalance : wlzeus.balanceData.obj.TotalBalance;
                balanceTotal = numeral().unformat(getTotalBalance);
                zeus.utilities.formatNumber(balanceTotal, currencyCode);
                self.setCalculatorTotal()
            })
        }
        $(document).on("BonusRemoved", function() {
            if (repeatDepositEnabled) {
                self.toggleRepeatDepositRows("hide");
                repeatDepositAmount = 0;
                repeatDepositEnabled = false
            }
            self.setCalculatorTotal()
        })
    };
    this.amountChanged = function() {
        calcDepositAmount = amountInput.val();
        if (calcDepositAmount === "" || isNaN(calcDepositAmount)) {
            calcDepositAmount = 0
        }
        if (repeatDepositEnabled) {
            self.repeatDepositChanged();
            depositTextEl.html(currency + zeus.utilities.formatNumber(calcDepositAmount, currencyCode))
        } else {
            depositTextEl.html(currency + zeus.utilities.formatNumber(calcDepositAmount, currencyCode))
        }
        self.setCalculatorTotal();
        if (firstDepositBonusEnabled) {
            self.firstDepositBonusChanged()
        }
    };
    this.addCardBonusChanged = function() {
        if (addCardRadio.prop("checked")) {
            calcAddCardBonus = addCardBonus;
            addCardTextEl.html(currency + zeus.utilities.formatNumber(calcAddCardBonus, currencyCode))
        } else {
            calcAddCardBonus = 0;
            addCardTextEl.html(currency + zeus.utilities.formatNumber(calcAddCardBonus, currencyCode))
        }
        self.toggleBonusRows();
        self.setCalculatorTotal()
    };
    this.firstDepositBonusChanged = function() {
        if (firstDepositRadio.prop("checked")) {
            if (firstDepositBonusFixed) {
                calcNewBonus = firstDepositBonusAmount
            } else {
                calcNewBonus = calcDepositAmount * firstDepositBonusPcFactor - calcDepositAmount;
                if (calcNewBonus > firstDepositBonusLimit) {
                    calcNewBonus = firstDepositBonusLimit
                }
            }
        } else {
            calcNewBonus = 0
        }
        if (parseFloat(calcDepositAmount) > 0) {
            firstDepositTextEl.html(currency + zeus.utilities.formatNumber(calcNewBonus, currencyCode))
        } else {
            firstDepositTextEl.html(currency + zeus.utilities.formatNumber("0", currencyCode))
        }
        self.toggleBonusRows();
        self.setCalculatorTotal()
    };
    this.repeatDepositChanged = function() {
        if (repeatDepositFixed) {
            repeatDepositTextEl.html(currency + zeus.utilities.formatNumber(parseFloat(repeatDepositAmount), currencyCode))
        } else {
            repeatDepositTextEl.html(currency + zeus.utilities.formatNumber(parseFloat(calcDepositAmount * repeatDepositAmount / 100), currencyCode))
        }
        unformattedDeposit = numeral().unformat(repeatDepositTextEl.text());
        totalDepositTextEl.html(currency + zeus.utilities.formatNumber(parseFloat(unformattedDeposit) + parseFloat(calcDepositAmount), currencyCode));
        self.setCalculatorTotal()
    };
    this.toggleRepeatDepositRows = function(displayRows) {
        if (displayRows === "hide") {
            repeatDepositEl.addClass("hide");
            if (!firstDepositBonusEnabled && !addCardBonusEnabled) {
                totalDepositBonus.addClass("hide")
            }
        } else {
            repeatDepositEl.removeClass("hide");
            totalDepositBonus.removeClass("hide")
        }
    };
    this.toggleBonusRows = function() {
        if (addCardBonusEnabled) {
            if (addCardRadioDecline.is(":checked")) {
                addCardTableEl.addClass("hide")
            } else {
                addCardTableEl.removeClass("hide")
            }
        }
        if (firstDepositBonusEnabled) {
            if (firstDepositRadioDecline.is(":checked")) {
                firstDepositTableEl.addClass("hide")
            } else {
                firstDepositTableEl.removeClass("hide")
            }
        }
    }
}).apply(wlzeus.promotions.calculator);
var wlzeus = wlzeus || {};
wlzeus.promotions = wlzeus.promotions || {};
wlzeus.promotions.userInput = {};
(function() {
    "use strict";
    var self = this;
    var paymentMethodsJSON = null;
    var commonOptions = {};
    var tVariables;
    var maxDeposit;
    var promoItem = "";
    var promoChecked = "";
    var displayCalcOnBonus;
    var minDepUpdated = false;
    var bonusCode;
    var currencySymbol = zeus.utilities.getCurrencySymbol("gbp");
    var pageScriptUrl;
    self.promoType = "";
    var loadingText = "Loading";
    var claimPromoText = "Claim Promotion";
    var opts = {};
    var refreshPageAfterInstant;
    var separateTooltipScript = false;
    var isCalcActive = false;
    var promo = {};
    var resetPromoBox = false;
    var calcOpts;
    var calcTemplateEl;
    var calculatorEnabled = false;
    var PreviousPromotionType = {
        None: 0,
        Inherit: 1,
        Override: 2
    };
    this.init = function(tVariablesJSON, amountEl, optionsJSON) {
        self.initialised = true;
        self.cacheSelectors();
        if (optionsJSON !== undefined) {
            opts = optionsJSON
        } else {
            opts.boxedPromoInfo = false
        }
        refreshPageAfterInstant = typeof optionsJSON !== "undefined" ? opts.refreshPageAfterInstant : true;
        promo.displayEl.hide();
        tVariables = tVariablesJSON;
        self.amountInput = $(amountEl);
        self.cacheTvars();
        self.setupPage();
        self.addBindings();
        self.setupTemplate()
    };
    this.cacheSelectors = function() {
        promo = {
            API: zeus.core.siteRoot + "api/Promotions/",
            inputEl: $(".js-promo-code"),
            errorEl: $(".js-promo-error"),
            claimEl: $("#claimPromo"),
            templateEl: $("#promoDisplayTemplate"),
            displayEl: $("#promoDisplay"),
            boxEl: $("#promoInput")
        }
    };
    this.updateInput = function(inputEl) {
        self.amountInput = inputEl;
        if (self.amountInput.val() !== "") {
            self.amountInput.valid()
        }
    };
    this.addBindings = function() {
        $(document).on("inputUpdated", function() {
            self.updateInput(wlzeus.paymentWidget.newAmountInput)
        }).on("addPaymentView", function() {
            pageScriptUrl = wlzeus.promotions.common.getPageScript("script", "addPayment")
        }).on("depositView", function() {
            pageScriptUrl = wlzeus.promotions.common.getPageScript("script", "deposit")
        }).on("onPaymentWidgetSubmit", function() {
            enableInputsForPost()
        }).on("click", ".js-show-terms-btn", function() {
            bootbox.alert({
                message: self.promoInfo.TermsAndConditions !== null ? self.promoInfo.TermsAndConditions : "Please accept the terms & conditions",
                title: "Terms and Conditions",
                className: "error-modal"
            })
        });
        promo.claimEl.on("click", function(e) {
            e.preventDefault();
            if (promo.claimEl.hasClass("promo-search")) {
                self.submitPromo()
            } else if (promo.claimEl.hasClass("js-promo-decline")) {
                self.removePromo()
            }
        });
        if (opts.boxedPromoInfo) {
            $(document).on("click", ".js-promo-decline", function() {
                self.removePromo();
                $(".js-promo-input-group").show()
            })
        }
        promo.inputEl.on("keypress", function(e) {
            if (e.keyCode === 13) {
                self.submitPromo();
                $(this).blur();
                return false
            }
        });
        if (!separateTooltipScript) {
            self.amountInput.on("focus", wlzeus.promotions.common.updateAmountTooltip(commonOptions))
        }
        self.amountInput.on("change", function() {
            if (calculatorEnabled && !$(".js-repeat-calculator").hasClass("hide")) {
                self.repeatCalculator()
            }
        })
    };
    this.setupPage = function() {
        if (typeof wlzeus.paymentWidget !== "undefined") {
            separateTooltipScript = true
        }
        pageScriptUrl = wlzeus.promotions.common.getPageScript("script");
        paymentMethodsJSON = wlzeus.promotions.common.getPageScript("paymentJson") || {};
        maxDeposit = paymentMethodsJSON.MaxDeposit;
        if (promo.inputEl.val() !== "") {
            promoChecked = "checked";
            self.getBonusInformation(promo.inputEl.val());
            self.changeInlineValIcon(promo.errorEl, "pending");
            $(".promos-container").removeClass("hide");
            $(".btn-show-promo").remove()
        }
        commonOptions = {
            separateTooltipScript: separateTooltipScript,
            pageScriptUrl: pageScriptUrl,
            bonusPage: wlzeus.promotions.userInput
        }
    };
    this.cacheTvars = function() {
        if (tVariables) {
            if (tVariables.promoButtonText !== undefined && tVariables.promoButtonText.loading !== undefined) {
                loadingText = tVariables.promoButtonText.loading
            }
            if (tVariables.promoButtonText !== undefined && tVariables.promoButtonText.claimPromo !== undefined) {
                claimPromoText = tVariables.promoButtonText.claimPromo
            }
            if (tVariables.displayCalcOnBonus !== undefined) {
                displayCalcOnBonus = tVariables.displayCalcOnBonus
            }
        }
    };
    this.setupTemplate = function() {
        if (promo.templateEl.length) {
            promo.templateEl = _.template(promo.templateEl.html())
        }
    };
    this.submitPromo = function() {
        var promoCode = promo.inputEl.val();
        if (promoCode !== "") {
            promo.inputEl.addClass("disabled");
            self.changeInlineValIcon(promo.errorEl, "pending");
            self.promoInfo = self.getBonusInformation(promoCode)
        } else {
            self.changeInlineValIcon(promo.errorEl, "error")
        }
    };
    this.getBonusInformation = function(promoCode) {
        $.ajax({
            url: promo.API + "ValidatePromotion/" + promoCode,
            dataType: "json",
            success: function(response) {
                if (response) {
                    var getPromotionForUserResult = JSON && JSON.parse(response) || $.parseJSON(response);
                    if (getPromotionForUserResult.Error) {
                        var errorType = "getbonus-fail-" + getPromotionForUserResult.Error.Code;
                        if (self.getTVariable("promoErrors", "message", errorType)) {
                            self.displayInvalidPromotionCodeMessage(errorType)
                        } else {
                            self.displayInvalidPromotionCodeMessage("getbonus-fail")
                        }
                    } else if (getPromotionForUserResult.PromotionUserSummary) {
                        self.addPromo(getPromotionForUserResult.PromotionUserSummary);
                        self.changeInlineValIcon(promo.errorEl, "valid");
                        self.updatePromoButton("decline");
                        $(document).trigger("promotions:bonus:summaryRetrieved", getPromotionForUserResult.PromotionUserSummary);
                        return getPromotionForUserResult.PromotionUserSummary
                    } else {
                        self.displayInvalidPromotionCodeMessage("getbonus-fail")
                    }
                } else {
                    self.displayInvalidPromotionCodeMessage("getbonus-fail")
                }
            },
            error: function() {
                self.changeInlineValIcon(promo.errorEl, "error");
                self.error("error")
            },
            beforeSend: function() {
                promo.inputEl.addClass("disabled");
                promo.claimEl.addClass("disabled").prop("disabled", true)
            },
            complete: function() {
                promo.claimEl.removeClass("disabled").prop("disabled", false)
            }
        })
    };
    this.setupTemplateSelectors = function() {
        promo.termsErrorEl = $(".terms-error");
        promo.claimInstant = $(".claim-instant-button");
        promo.claimInstant.on("click", function(e) {
            e.preventDefault();
            self.claimInstantBonus()
        })
    };
    this.addPromo = function(response) {
        try {
            if ($.type(response) === "string") {
                self.promoInfo = $.parseJSON(response)
            } else {
                self.promoInfo = response
            }
        } catch (err) {
            self.error("error");
            promo.inputEl.removeClass("disabled");
            return false
        }
        if (displayCalcOnBonus) {
            wlzeus.promotions.calculator.createBonus(self.promoInfo)
        }
        var bonusType = self.promoInfo.PromotionType;
        var walletType = self.promoInfo.WalletVertical.toLowerCase();
        if (bonusType === 6) {
            self.promoType = "instant"
        } else {
            self.promoType = "deposit"
        }
        promoItem += promo.templateEl({
            promoName: self.promoInfo.Title,
            promoCode: opts.boxedPromoInfo ? self.promoInfo.PromotionCode : " - " + self.promoInfo.PromotionCode,
            promoDescription: self.promoInfo.Description,
            promoTerms: self.promoInfo.TermsAndConditions,
            promoCheckVal: true,
            promoChecked: promoChecked ? 'checked="checked"' : "",
            promoType: walletType === "none" ? "" : walletType + "-bonus"
        });
        promo.displayEl.append(promoItem);
        if (calculatorEnabled && calcTemplateEl.length && !isCalcActive) {
            promo.displayEl.after(calcTemplateEl);
            isCalcActive = true
        }
        if (opts.boxedPromoInfo) {
            $(".js-promo-input-group").hide();
            promo.boxEl.append(promo.displayEl)
        }
        self.setupTemplateSelectors();
        if (bonusType === 6) {
            promo.claimInstant.removeClass("hide");
            bonusCode = self.promoInfo.PromotionCode
        } else {
            var promoMinDep = self.promoInfo.DepositMinimum;
            promo.claimInstant.addClass("hide");
            if (promoMinDep !== 0 && promoMinDep >= paymentMethodsJSON.MinDeposit) {
                self.updateMinDep("update", promoMinDep)
            }
            if (calculatorEnabled) {
                self.repeatCalculator()
            }
        }
        self.changeInlineValIcon(promo.termsErrorEl, "reset");
        if (zeus.core.isMobile) {
            promo.inputEl.prop("disabled", true)
        }
        promo.displayEl.fadeIn();
        if (minDepUpdated) {
            self.updateMinDep("update", self.promoInfo.DepositMinimum)
        }
        $(document).trigger("BonusAdded")
    };
    this.repeatCalculator = function() {
        var calcTable = $(".js-repeat-calculator");
        var bonusAmount = 0;
        var depositAmount = parseFloat(self.amountInput.val());
        var totalAmount = 0;
        if (self.promoType !== "instant") {
            calcTable.removeClass("hide")
        }
        if (isNaN(depositAmount)) {
            depositAmount = 0
        }
        if (self.promoInfo !== undefined) {
            bonusAmount = parseFloat(self.promoInfo.CreditTypeFixed ? self.promoInfo.Amount : self.promoInfo.Amount / 100 * self.amountInput.val())
        }
        totalAmount = bonusAmount + depositAmount;
        calcTable.find(".js-deposit-amount").html(currencySymbol + depositAmount.toFixed(2));
        calcTable.find(".js-deposit-bonus-amount").html(currencySymbol + bonusAmount.toFixed(2));
        calcTable.find(".js-new-total-amount").html(currencySymbol + totalAmount.toFixed(2))
    };
    this.removePromo = function() {
        self.promoType = "";
        promoItem = "";
        self.updatePromoButton("submit");
        self.changeInlineValIcon(promo.errorEl, "reset");
        bonusCode = "";
        promo.inputEl.val("");
        promo.inputEl.prop("disabled", false);
        promo.inputEl.removeClass("disabled");
        promo.displayEl.closest(".promos-container").fadeOut(200, function() {
            $(this).empty()
        });
        if (minDepUpdated) {
            self.updateMinDep("reset", paymentMethodsJSON.MinDeposit)
        }
        if (resetPromoBox) {
            $(".js-promo-input-group").show();
            resetPromoBox = !resetPromoBox
        }
        if (calculatorEnabled) {
            $(".js-repeat-calculator").addClass("hide")
        }
        $(document).trigger("BonusRemoved")
    };
    this.claimInstantBonus = function() {
        if ($(".js-promo-terms-check").prop("checked")) {
            self.changeInlineValIcon(promo.termsErrorEl, "valid");
            if (opts.inheritWageringWarningEnabled && self.promoInfo.PreviousPromotionType === PreviousPromotionType.Inherit) {
                bootbox.confirm(self.getTVariable("promoMessages", "inherit-wagering-warning"), function(activationConfirmed) {
                    if (activationConfirmed) {
                        self.activateBonus()
                    }
                })
            } else if (opts.overrideWageringWarningEnabled && self.promoInfo.PreviousPromotionType === PreviousPromotionType.Override) {
                bootbox.confirm(self.getTVariable("promoMessages", "override-wagering-warning"), function(activationConfirmed) {
                    if (activationConfirmed) {
                        self.activateBonus()
                    }
                })
            } else {
                self.activateBonus()
            }
        } else {
            self.changeInlineValIcon(promo.termsErrorEl, "error");
            var title = self.getTVariable("promoMessages", "title", "instant-terms");
            var msg = self.getTVariable("promoMessages", "message", "instant-terms");
            bootbox.alert({
                message: msg,
                title: title,
                className: "error-modal"
            })
        }
    };
    this.activateBonus = function() {
        $.ajax({
            url: promo.API + "ActivateBonus/" + bonusCode,
            success: function(resp) {
                if (resp === true || resp === "true") {
                    var title = self.getTVariable("promoMessages", "title", "instant-success");
                    var msg = refreshPageAfterInstant ? self.getTVariable("promoMessages", "message-refreshing", "instant-success") : self.getTVariable("promoMessages", "message", "instant-success");
                    bootbox.alert({
                        message: msg,
                        title: title,
                        className: "error-modal"
                    });
                    if (refreshPageAfterInstant) {
                        self.refreshPage();
                        promo.claimInstant.addClass("success").text("")
                    } else {
                        promo.claimInstant.text(claimPromoText).prop("disabled", false);
                        self.updateButtonState(false);
                        if (typeof wlzeus.balances !== "undefined" && wlzeus.balances.refreshBalances) {
                            wlzeus.balances.refreshBalances()
                        }
                        if (opts.boxedPromoInfo) {
                            resetPromoBox = true
                        }
                        self.removePromo()
                    }
                } else {
                    self.error("error")
                }
            },
            beforeSend: function() {
                if (refreshPageAfterInstant) {
                    wlzeus.loadingMessage.showLoadingMessage()
                }
                promo.claimInstant.text(loadingText).prop("disabled", true);
                self.updateButtonState(true)
            },
            error: function() {
                wlzeus.loadingMessage.clearLoadingMessage();
                promo.claimInstant.text(claimPromoText).prop("disabled", false);
                self.updateButtonState(false);
                self.error("error")
            }
        })
    };
    this.updateButtonState = function(disabled) {
        $(".content-main").find(".btn, input").prop("disabled", disabled)
    };
    this.updatePromoButton = function(type) {
        if (type === "decline") {
            promo.claimEl.text("Cancel");
            promo.claimEl.removeClass("primary-button promo-search").addClass("secondary-button promo-decline js-promo-decline promo-search-hide")
        } else if (type === "submit") {
            promo.claimEl.text("Submit");
            promo.claimEl.removeClass("secondary-button promo-decline js-promo-decline promo-search-hide").addClass("primary-button promo-search")
        }
    };
    this.changeInlineValIcon = function(el, type) {
        var formGroup = ".form-group";
        if (type === "valid") {
            el.removeClass("pending").addClass("validation-feedback");
            el.closest(formGroup).removeClass("error").addClass("valid")
        } else if (type === "error") {
            el.removeClass("pending").addClass("validation-feedback");
            el.closest(formGroup).removeClass("valid").addClass("error")
        } else if (type === "pending") {
            el.removeClass("validation-feedback").addClass("pending").siblings(".js-promo-code-input").addClass("promo-input-width")
        } else {
            el.closest(formGroup).removeClass("valid error");
            el.removeClass("pending").addClass("validation-feedback");
            el.siblings(".js-promo-code-input").removeClass("promo-input-width")
        }
    };
    this.updateMinDep = function(status, min) {
        if (status === "reset") {
            minDepUpdated = false;
            self.amountInput.rules("add", {
                range: [paymentMethodsJSON.MinDeposit, maxDeposit]
            });
            wlzeus.promotions.common.updateGlobalMinDeposit(commonOptions, paymentMethodsJSON.MinDeposit)
        } else if (status === "update") {
            minDepUpdated = true;
            self.amountInput.rules("add", {
                range: [min, maxDeposit]
            });
            wlzeus.promotions.common.updateGlobalMinDeposit(commonOptions, min)
        }
        if (self.amountInput.val() !== "") {
            self.amountInput.valid()
        }
        self.newMinDeposit = min;
        $(document).trigger("minDepositUpdate");
        wlzeus.promotions.common.updateAmountTooltip(commonOptions)
    };
    this.error = function(type) {
        var errorBody = self.getTVariable("promoErrors", "message", type);
        var errorTitle = self.getTVariable("promoErrors", "title", type);
        if (!errorBody) {
            errorBody = self.getTVariable("promoErrors", "message", "error");
            errorTitle = self.getTVariable("promoErrors", "title", "error")
        }
        var msg = "<p>" + errorBody + "</p>";
        if (zeus.core.isMobile) {
            bootbox.alert({
                message: msg,
                title: errorTitle,
                className: "error-modal"
            })
        } else {
            msg = $(msg).prepend("<h1>" + errorTitle + "</h1>");
            bootbox.alert({
                message: msg,
                title: " ",
                className: "error-modal"
            })
        }
        $(document).trigger("promotions:error:" + type)
    };
    this.refreshPage = function() {
        setTimeout(function() {
            location.reload()
        }, 4e3)
    };
    this.getTVariable = function(key, value, subKey) {
        var string = "";
        if (subKey !== undefined) {
            if (tVariables[key][subKey] !== undefined && tVariables[key][subKey][value] !== undefined) {
                string = tVariables[key][subKey][value]
            }
        } else if (tVariables[key] !== undefined && tVariables[key][value] !== undefined) {
            string = tVariables[key][value]
        }
        if (key === "Amount") {
            string = self.replaceValue(key, value, string)
        }
        return string
    };
    this.calculator = function(optionsJSON) {
        calcOpts = optionsJSON;
        calcTemplateEl = $("#repeatCalculatorTemplate");
        calculatorEnabled = true;
        self.setupCalculator()
    };
    this.setupCalculator = function() {
        if (calcTemplateEl.length) {
            calcTemplateEl = _.template(calcTemplateEl.html())
        }
    };
    this.displayInvalidPromotionCodeMessage = function(errorType) {
        promo.inputEl.removeClass("disabled");
        self.error(errorType);
        self.changeInlineValIcon(promo.errorEl, "error")
    };

    function enableInputsForPost() {
        promo.inputEl.prop("disabled", false)
    }
}).apply(wlzeus.promotions.userInput);
var wlzeus = wlzeus || {};
wlzeus.promotions = wlzeus.promotions || {};
wlzeus.promotions.myPromotions = {};
(function() {
    "use strict";
    var self = this;
    var tVariables = null;
    var promotionsJSON = null;
    var currentPromoJSON = null;
    var promoApiUrl;
    var selectedBonusCode;
    var openNewPromo = false;
    var isMobile;
    var promotionsOptions;
    var searchedCode = false;
    var $bonusSelectBtn;
    var $promoCodeInput;
    var $promoInputButton;
    var $promoDisplayTemplate;
    var $promoDisplayEl;
    var $mobPromoDisplayEl;
    var formGroup;
    var $promoErrorEl;
    var $declineButtonEl;
    var promoItem = "";
    var declineButtonId;
    var termsErrorClass;
    var claimInstantOrProgressiveButtonId;
    var claimDepositButtonId;
    var promoTermsCheckClass;
    var promoListClass;
    var promoTermsClass;
    var promoSelectText;
    var promoCancelText;
    var searchSubmitText;
    var searchCancelText;
    var redeemDepositText;
    var redeemInstantText;
    var redeemProgressiveText;
    var declineButtonText;
    var loadingText;
    var termsTitleText;
    var termsMissingText;
    var inheritWageringWarningText;
    var overrideWageringWarningText;
    var showPromoClass = "show-promo";
    var hidePromoClass = "hide-promo";
    var disabledClass = "disabled";
    var searchPromoClass = "promo-search";
    var searchHidePromoClass = "promo-search-hide";
    var primaryBtnClass = "primary-button";
    var secondaryBtnClass = "secondary-button";
    var PromotionType = {
        CashbackOnTotalStake: 2,
        Deposit: 3,
        DepositOverPeriod: 4,
        Instant: 6,
        CashbackOnNetLosses: 8,
        OptIn: 10
    };
    var PreviousPromotionType = {
        None: 0,
        Inherit: 1,
        Override: 2
    };
    this.init = function(tVars, promoJSON, opts) {
        tVariables = tVars;
        promotionsJSON = promoJSON;
        promotionsOptions = opts;
        isMobile = zeus.core.isMobile;
        self.cacheSelectors();
        self.cacheTVars();
        self.addBindings();
        self.setupPage();
        self.convertJsonCase();
        if (!isMobile) {
            $promoDisplayEl.hide()
        } else {
            $mobPromoDisplayEl.hide()
        }
    };
    this.addBindings = function() {
        $bonusSelectBtn.on("click", self.bonusSelectClicked);
        $(document).on("click", "." + searchHidePromoClass, self.removePromo);
        $(document).on("click", "." + searchPromoClass, function() {
            searchedCode = true;
            self.submitPromo()
        });
        $promoCodeInput.on("keypress", function(e) {
            if (e.keyCode === 13) {
                searchedCode = true;
                self.submitPromo();
                return false
            }
        });
        $(document).on("click", claimInstantOrProgressiveButtonId, function(e) {
            e.preventDefault();
            self.claimInstantOrProgressiveBonus()
        });
        $(document).on("click", claimDepositButtonId, function(e) {
            e.preventDefault();
            self.claimDepositBonus()
        });
        $(document).on("click", declineButtonId, self.declineBonus);
        if (isMobile) {
            $(document).on("click", ".js-promo-terms-trigger", self.showTermsModal)
        }
    };
    this.cacheSelectors = function() {
        promoApiUrl = zeus.core.siteRoot + "api/Promotions/";
        $bonusSelectBtn = $(".js-btn-select-bonus");
        $promoCodeInput = $("#promoCodeInput");
        $promoInputButton = $("#claimPromo");
        $promoDisplayTemplate = $("#promoDisplayTemplate");
        $promoDisplayEl = $("#promoDisplay");
        $mobPromoDisplayEl = $(".js-promo-display");
        $promoErrorEl = $(".js-promo-error");
        $declineButtonEl = $("#declinePromo");
        formGroup = ".form-group";
        declineButtonId = "#declinePromo";
        termsErrorClass = ".terms-error";
        claimInstantOrProgressiveButtonId = "#claimInstantOrProgressive";
        claimDepositButtonId = "#claimDeposit";
        promoTermsCheckClass = ".js-promo-terms-check";
        promoListClass = ".js-promo-list";
        promoTermsClass = ".js-promo-terms"
    };
    this.cacheTVars = function() {
        promoSelectText = self.getTVariable("ClaimButton", "Select");
        promoCancelText = self.getTVariable("ClaimButton", "Cancel");
        searchSubmitText = self.getTVariable("SearchButton", "Submit");
        searchCancelText = self.getTVariable("SearchButton", "Cancel");
        redeemDepositText = self.getTVariable("RedeemButton", "Deposit");
        redeemInstantText = self.getTVariable("RedeemButton", "Instant");
        redeemProgressiveText = self.getTVariable("RedeemButton", "Progressive");
        declineButtonText = self.getTVariable("DeclineButton", "Decline");
        loadingText = self.getTVariable("RedeemButton", "Loading");
        termsTitleText = self.getTVariable("promoMessages", "terms-title");
        termsMissingText = self.getTVariable("promoMessages", "terms-missing");
        inheritWageringWarningText = self.getTVariable("promoMessages", "inherit-wagering-warning");
        overrideWageringWarningText = self.getTVariable("promoMessages", "override-wagering-warning")
    };
    this.setupPage = function() {
        $bonusSelectBtn.text(promoSelectText);
        $promoInputButton.text(searchSubmitText);
        if ($promoDisplayTemplate.length) {
            $promoDisplayTemplate = _.template($promoDisplayTemplate.html())
        }
    };
    this.bonusSelectClicked = function() {
        var btn = $(this);
        if (btn.hasClass(showPromoClass)) {
            openNewPromo = true;
            self.resetPage();
            btn.removeClass(showPromoClass + " " + primaryBtnClass).addClass(hidePromoClass + " " + secondaryBtnClass).text(promoCancelText);
            $promoInputButton.addClass(searchHidePromoClass + " " + secondaryBtnClass + " " + "promo-decline").removeClass(searchPromoClass + " " + primaryBtnClass).text(searchCancelText);
            selectedBonusCode = btn.attr("data-bonuscode").toLowerCase();
            self.displayPromo()
        } else if (btn.hasClass(hidePromoClass)) {
            self.removePromo()
        }
    };
    this.submitPromo = function() {
        selectedBonusCode = $promoCodeInput.val().toLowerCase();
        if (selectedBonusCode !== "") {
            self.changeInlineValIcon($promoErrorEl, "pending");
            openNewPromo = true;
            $promoInputButton.addClass(searchHidePromoClass + " " + secondaryBtnClass + " " + "promo-decline").removeClass(searchPromoClass + " " + primaryBtnClass).text(searchCancelText);
            self.displayPromo()
        } else {
            self.changeInlineValIcon($promoErrorEl, "error")
        }
    };
    this.displayPromo = function() {
        self.updateButtonState(true);
        $promoCodeInput.val(selectedBonusCode).addClass(disabledClass);
        if (promotionsJSON !== null) {
            currentPromoJSON = promotionsJSON[selectedBonusCode];
            if (typeof currentPromoJSON !== "undefined") {
                self.outputBonusInformation();
                self.changeInlineValIcon($promoErrorEl, "valid");
                self.updateButtonState(false)
            } else {
                self.getBonusAPI()
            }
        } else {
            self.getBonusAPI()
        }
    };
    this.removePromo = function() {
        openNewPromo = false;
        self.resetPage()
    };
    this.outputBonusInformation = function() {
        var promoButtonId;
        var promoButtonText;
        var currentPromotionType = currentPromoJSON.PromotionType;
        var mobileBreakPoint = 768;
        if (currentPromotionType === PromotionType.Instant) {
            promoButtonId = "claimInstantOrProgressive";
            promoButtonText = redeemInstantText
        } else if (self.isPromotionProgressive(currentPromotionType)) {
            promoButtonId = "claimInstantOrProgressive";
            promoButtonText = redeemProgressiveText
        } else {
            promoButtonId = "claimDeposit";
            promoButtonText = redeemDepositText
        }
        promoItem += $promoDisplayTemplate({
            promoName: currentPromoJSON.Title,
            promoCode: " - " + currentPromoJSON.PromotionCode,
            promoDescription: currentPromoJSON.Description,
            promoTerms: currentPromoJSON.TermsAndConditions,
            promoCheckVal: true,
            promoChecked: "",
            promoButtonId: promoButtonId,
            promoButtonText: promoButtonText,
            declineButtonText: declineButtonText,
            promoId: currentPromoJSON.BonusId || "-"
        });
        if (!isMobile || promotionsOptions.isResponsive) {
            $promoDisplayEl.append(promoItem).fadeIn();
            if ($(window).innerWidth() < mobileBreakPoint) {
                $("html, body").animate({
                    scrollTop: $("#promoDisplay").offset().top - 15
                }, 500)
            }
        } else {
            if (searchedCode) {
                $promoDisplayEl.append(promoItem).fadeIn()
            } else {
                $mobPromoDisplayEl = self.findPromoItem(".js-promo-display");
                $mobPromoDisplayEl.append(promoItem).fadeIn()
            }
        }
        self.updatePromoListBtnStates()
    };
    this.isPromotionProgressive = function(currentPromotionType) {
        switch (currentPromotionType) {
            case PromotionType.CashbackOnTotalStake:
            case PromotionType.CashbackOnNetLosses:
            case PromotionType.DepositOverPeriod:
            case PromotionType.OptIn:
                return true;
            default:
                return false
        }
    };
    this.claimInstantOrProgressiveBonus = function() {
        var messageSubKeys = self.getMessageSubKeysByPromoType(currentPromoJSON.PromotionType);
        if ($(promoTermsCheckClass).prop("checked")) {
            self.changeInlineValIcon($(termsErrorClass), "valid");
            if (promotionsOptions.inheritWageringWarningEnabled && currentPromoJSON.PreviousPromotionType === PreviousPromotionType.Inherit) {
                bootbox.confirm(inheritWageringWarningText, function(activationConfirmed) {
                    if (activationConfirmed) {
                        self.activateBonus(messageSubKeys)
                    }
                })
            } else if (promotionsOptions.overrideWageringWarningEnabled && currentPromoJSON.PreviousPromotionType === PreviousPromotionType.Override) {
                bootbox.confirm(overrideWageringWarningText, function(activationConfirmed) {
                    if (activationConfirmed) {
                        self.activateBonus(messageSubKeys)
                    }
                })
            } else {
                self.activateBonus(messageSubKeys)
            }
        } else {
            self.changeInlineValIcon($(termsErrorClass), "error");
            var title = self.getTVariable("promoMessages", "title", messageSubKeys.terms);
            var msg = self.getTVariable("promoMessages", "message", messageSubKeys.terms);
            self.showBootbox(title, msg, "error-modal")
        }
    };
    this.activateBonus = function(messageSubKeys) {
        $.ajax({
            url: promoApiUrl + "ActivateBonus/" + selectedBonusCode,
            success: function(resp) {
                if (resp === true || resp === "true") {
                    var title = self.getTVariable("promoMessages", "title", messageSubKeys.success);
                    var msg = self.getTVariable("promoMessages", "message", messageSubKeys.success);
                    self.showBootbox(title, msg, "info-modal");
                    if (currentPromoJSON.PromotionType === PromotionType.DepositOverPeriod) {
                        $(claimInstantOrProgressiveButtonId).addClass("success").text("");
                        wlzeus.loadingMessage.showLoadingMessage();
                        setTimeout(function() {
                            window.location.href = zeus.core.siteHost + zeus.core.siteRoot + promotionsOptions.DepositUrl
                        }, 4e3)
                    } else {
                        self.refreshPage();
                        $(claimInstantOrProgressiveButtonId).addClass("success").text("")
                    }
                } else {
                    wlzeus.loadingMessage.clearLoadingMessage();
                    var buttonText = self.isPromotionProgressive(currentPromoJSON.PromotionType) ? redeemProgressiveText : redeemInstantText;
                    $(claimInstantOrProgressiveButtonId).text(buttonText).prop("disabled", false);
                    self.updateButtonState(false);
                    self.error("error")
                }
            },
            beforeSend: function() {
                wlzeus.loadingMessage.showLoadingMessage();
                $(claimInstantOrProgressiveButtonId).text(loadingText).prop("disabled", true);
                self.updateButtonState(true)
            },
            error: function() {
                wlzeus.loadingMessage.clearLoadingMessage();
                var buttonText = self.isPromotionProgressive(currentPromoJSON.PromotionType) ? redeemProgressiveText : redeemInstantText;
                $(claimInstantOrProgressiveButtonId).text(buttonText).prop("disabled", false);
                self.updateButtonState(false);
                self.error("error")
            }
        })
    };
    this.claimDepositBonus = function() {
        if ($(promoTermsCheckClass).prop("checked")) {
            self.changeInlineValIcon($(termsErrorClass), "valid");
            self.updateButtonState(true);
            var titleSuccess = self.getTVariable("promoMessages", "title", "deposit-success");
            var msgSuccess = self.getTVariable("promoMessages", "message", "deposit-success");
            self.showBootbox(titleSuccess, msgSuccess, "error-modal");
            $(claimDepositButtonId).addClass("success").text("");
            wlzeus.loadingMessage.showLoadingMessage();
            setTimeout(function() {
                window.location.href = zeus.core.siteHost + zeus.core.siteRoot + promotionsOptions.DepositUrl + "?PromoCode=" + selectedBonusCode + "&AcceptedTermsAndConditions=true"
            }, 4e3)
        } else {
            self.changeInlineValIcon($(termsErrorClass), "error");
            var titleError = self.getTVariable("promoMessages", "title", "deposit-terms");
            var msgError = self.getTVariable("promoMessages", "message", "deposit-terms");
            self.showBootbox(titleError, msgError, "info-modal")
        }
    };
    this.declineBonus = function() {
        var confirmText = self.getTVariable("DeclineButton", "DeclineConfirmText");
        bootbox.confirm(confirmText, function(result) {
            if (result === true) {
                $.ajax({
                    url: promoApiUrl + "DeclineBonus/" + selectedBonusCode,
                    success: function(response) {
                        if (response === true || response === "true") {
                            self.error("bonus-declined");
                            $declineButtonEl.addClass("success").text("");
                            self.refreshPage()
                        } else {
                            self.error("error")
                        }
                    },
                    beforeSend: function() {
                        wlzeus.loadingMessage.showLoadingMessage();
                        $declineButtonEl.text(loadingText).prop("disabled", true);
                        self.updateButtonState(true)
                    },
                    error: function() {
                        wlzeus.loadingMessage.clearLoadingMessage();
                        $declineButtonEl.text(declineButtonText).prop("disabled", false);
                        self.updateButtonState(false);
                        self.error("error")
                    }
                })
            }
        })
    };
    this.getBonusAPI = function() {
        $.ajax({
            url: promoApiUrl + "ValidatePromotion/" + selectedBonusCode,
            dataType: "json",
            success: function(response) {
                if (response) {
                    try {
                        var getPromotionForUserResult = JSON && JSON.parse(response) || $.parseJSON(response);
                        if (getPromotionForUserResult.Error) {
                            var errorType = "getbonus-fail-" + getPromotionForUserResult.Error.Code;
                            if (self.getTVariable("promoErrors", "message", errorType)) {
                                self.displayInvalidPromotionCodeMessage(errorType)
                            } else {
                                self.displayInvalidPromotionCodeMessage("getbonus-fail")
                            }
                        } else if (getPromotionForUserResult.PromotionUserSummary) {
                            currentPromoJSON = getPromotionForUserResult.PromotionUserSummary;
                            self.outputBonusInformation();
                            self.changeInlineValIcon($promoErrorEl, "valid")
                        } else {
                            self.displayInvalidPromotionCodeMessage("getbonus-fail")
                        }
                    } catch (err) {
                        self.displayInvalidPromotionCodeMessage("error")
                    }
                } else {
                    self.displayInvalidPromotionCodeMessage("getbonus-fail");
                    self.removePromo()
                }
                self.updateButtonState(false)
            },
            error: function() {
                self.error("error");
                self.changeInlineValIcon($promoErrorEl, "error");
                self.updateButtonState(false)
            }
        })
    };
    this.updatePromoListBtnStates = function() {
        var btn = self.findPromoItem("." + showPromoClass);
        btn.removeClass(showPromoClass + " " + primaryBtnClass).addClass(hidePromoClass + " " + secondaryBtnClass).text(promoCancelText)
    };
    this.findPromoItem = function(elToFind) {
        var foundEl = $(promoListClass).find('.js-promo-item[data-promocode="' + selectedBonusCode + '"]').find($(elToFind));
        return foundEl
    };
    this.resetPage = function() {
        $bonusSelectBtn.removeClass(hidePromoClass + " " + secondaryBtnClass).addClass(showPromoClass + " " + primaryBtnClass).text(promoSelectText);
        $promoCodeInput.val("").removeClass(disabledClass);
        $promoInputButton.addClass(searchPromoClass + " " + primaryBtnClass).removeClass(searchHidePromoClass + " " + secondaryBtnClass + " " + "promo-decline").text(searchSubmitText);
        self.changeInlineValIcon($promoErrorEl, "reset");
        selectedBonusCode = "";
        currentPromoJSON = null;
        searchedCode = false;
        promoItem = "";
        if (!isMobile) {
            if (openNewPromo) {
                $promoDisplayEl.empty()
            } else {
                self.fadeAndRemovePromo($promoDisplayEl)
            }
        } else {
            if (openNewPromo) {
                $mobPromoDisplayEl.empty();
                $promoDisplayEl.empty()
            } else {
                self.fadeAndRemovePromo($mobPromoDisplayEl);
                self.fadeAndRemovePromo($promoDisplayEl)
            }
        }
    };
    this.fadeAndRemovePromo = function(el) {
        el.fadeOut(200, function() {
            el.empty()
        })
    };
    this.changeInlineValIcon = function(el, type) {
        switch (type) {
            case "valid":
                el.removeClass("pending").addClass("validation-feedback");
                el.closest(formGroup).removeClass("error").addClass("valid");
                break;
            case "error":
                el.removeClass("pending").addClass("validation-feedback");
                el.closest(formGroup).removeClass("valid").addClass("error");
                break;
            case "pending":
                el.addClass("pending").siblings(".js-promo-code-input").addClass("promo-input-width");
                break;
            default:
                el.closest(formGroup).removeClass("valid error");
                el.removeClass("pending").addClass("validation-feedback");
                el.siblings(".js-promo-code-input").removeClass("promo-input-width")
        }
    };
    this.updateButtonState = function(disabled) {
        $(".content-main").find(".btn, input").prop("disabled", disabled)
    };
    this.showBootbox = function(title, msg, className) {
        if (isMobile) {
            bootbox.alert({
                message: msg,
                title: title,
                className: className
            })
        } else {
            msg = "<h1>" + title + "</h1><p>" + msg + "</p>";
            bootbox.alert({
                message: msg,
                title: " ",
                className: className
            })
        }
        $(".js-promo-title").text("'" + currentPromoJSON.Title + "'")
    };
    this.showTermsModal = function() {
        var promoTermsText;
        if (searchedCode) {
            promoTermsText = $("#promoInput").find(promoTermsClass).html()
        } else {
            promoTermsText = self.findPromoItem(promoTermsClass).html()
        }
        if (promoTermsText === "") {
            promoTermsText = termsMissingText
        }
        self.showBootbox(termsTitleText, promoTermsText, "info-modal")
    };
    this.error = function(type) {
        var errorBody = self.getTVariable("promoErrors", "message", type);
        var errorTitle = self.getTVariable("promoErrors", "title", type);
        if (!errorBody) {
            errorBody = self.getTVariable("promoErrors", "message", "error");
            errorTitle = self.getTVariable("promoErrors", "title", "error")
        }
        self.showBootbox(errorTitle, errorBody, "error-modal")
    };
    this.convertJsonCase = function() {
        var temp;
        var key;
        var keyLower;
        if (promotionsJSON !== null) {
            for (key in promotionsJSON) {
                if (promotionsJSON.hasOwnProperty(key)) {
                    keyLower = key.toLowerCase();
                    if (keyLower !== key) {
                        temp = promotionsJSON[key];
                        delete promotionsJSON[key];
                        promotionsJSON[keyLower] = temp
                    }
                }
            }
        }
    };
    this.refreshPage = function() {
        setTimeout(function() {
            location.reload()
        }, 4e3)
    };
    this.getMessageSubKeysByPromoType = function(promotionType) {
        var success;
        var terms;
        switch (promotionType) {
            case PromotionType.Instant:
                success = "instant-success";
                terms = "instant-terms";
                break;
            case PromotionType.CashbackOnTotalStake:
                success = "cashback-on-total-stake-success";
                terms = "cashback-on-total-stake-terms";
                break;
            case PromotionType.DepositOverPeriod:
                success = "deposit-over-period-success";
                terms = "deposit-over-period-terms";
                break;
            case PromotionType.CashbackOnNetLosses:
                success = "cashback-on-net-losses-success";
                terms = "cashback-on-net-losses-terms";
                break;
            case PromotionType.OptIn:
                success = "opt-in-success";
                terms = "opt-in-terms";
                break
        }
        return {
            success: success,
            terms: terms
        }
    };
    this.getTVariable = function(key, value, subKey) {
        var string = "";
        if (subKey !== undefined) {
            if (tVariables[key][subKey] !== undefined && tVariables[key][subKey][value] !== undefined) {
                string = tVariables[key][subKey][value]
            }
        } else if (tVariables[key] !== undefined && tVariables[key][value] !== undefined) {
            string = tVariables[key][value]
        }
        return string
    };
    this.displayInvalidPromotionCodeMessage = function(errorType) {
        self.error(errorType);
        self.changeInlineValIcon($promoErrorEl, "error")
    }
}).apply(wlzeus.promotions.myPromotions);
var wlzeus = wlzeus || {};
wlzeus.promotions = wlzeus.promotions || {};
wlzeus.promotions.history = wlzeus.promotions.history || {};
(function() {
    "use strict";
    var self = this;
    var tVariables;
    var promoApiUrl = "api/Promotions/";
    self.promoCode = "";
    this.init = function(tVariablesJSON) {
        tVariables = tVariablesJSON;
        self.setupPage();
        self.addBindings()
    };
    this.setupPage = function() {
        promoApiUrl = zeus.core.siteRoot + promoApiUrl
    };
    this.addBindings = function() {
        $(".btn-cancel").on("click", function(e) {
            e.preventDefault();
            var $this = $(this);
            self.promoCode = $this.data("promocode");
            self.popup("cancelBonus")
        });
        if (zeus.core.isMobile) {
            $(".toggle-details").click(function() {
                var toggled = $(this);
                toggled.find(".icon").toggleClass("minus plus");
                $(".details .collapse.in").collapse("hide").closest("tr").prev().find(".icon").removeClass("minus").addClass("plus");
                $(toggled.data("target")).collapse("toggle")
            })
        }
    };
    this.getTVariable = function(key, value) {
        var string = "";
        if (tVariables[key] && tVariables[key][value]) {
            string = tVariables[key][value]
        }
        return string
    };
    this.cancelBonus = function() {
        $.ajax({
            url: promoApiUrl + "CancelBonus/" + self.promoCode,
            success: function(resp) {
                if (resp === "true" || resp === true) {
                    self.popup("success")
                } else {
                    self.popup("error")
                }
            },
            beforeSend: function() {
                wlzeus.loadingMessage.showLoadingMessage()
            },
            complete: function() {
                wlzeus.loadingMessage.clearLoadingMessage()
            },
            error: function() {
                self.popup("error")
            }
        })
    };
    this.popup = function(type) {
        var message = "";
        var title = "";
        var buttons = {};
        var obj = this;
        var modalClass = "info-modal";
        var closeButton = {
            label: zeus.utilities.tVar(tVariables, "modalButtonLabels", "close"),
            className: "btn-default"
        };
        var reloadButton = {
            label: zeus.utilities.tVar(tVariables, "modalButtonLabels", "reload"),
            className: "btn-primary",
            callback: function() {
                location.reload()
            }
        };
        var noButton = {
            label: zeus.utilities.tVar(tVariables, "modalButtonLabels", "no"),
            className: "btn-secondary"
        };
        var yesButton = {
            label: zeus.utilities.tVar(tVariables, "modalButtonLabels", "yes"),
            className: "btn-primary",
            callback: function() {
                obj.cancelBonus()
            }
        };
        switch (type) {
            case "cancelBonus":
                title = zeus.utilities.tVar(tVariables, "cancelModal", "title");
                message = zeus.utilities.tVar(tVariables, "cancelModal", "message");
                buttons = {
                    cancel: noButton,
                    cancelBonus: yesButton
                };
                break;
            case "error":
                title = zeus.utilities.tVar(tVariables, "errorModal", "title");
                message = zeus.utilities.tVar(tVariables, "errorModal", "message");
                buttons = {
                    close: closeButton
                };
                modalClass = "error-modal";
                break;
            case "success":
                title = zeus.utilities.tVar(tVariables, "successModal", "title");
                message = zeus.utilities.tVar(tVariables, "successModal", "message");
                buttons = {
                    proceed: reloadButton
                };
                break;
            default:
                title = zeus.utilities.tVar(tVariables, "defaultModal", "title");
                message = zeus.utilities.tVar(tVariables, "defaultModal", "message");
                buttons = {
                    close: closeButton
                };
                modalClass = "error-modal"
        }
        var infoDialog = bootbox.dialog({
            title: title,
            message: message,
            buttons: buttons,
            className: modalClass
        });
        wlzeus.centreInfoDialog.init(infoDialog)
    };
    this.toggleRow = function(thisElem) {
        $(thisElem).closest("tr").prev().find(".more a i").toggleClass("ico-plus-green ico-minus-green")
    }
}).apply(wlzeus.promotions.history);
var wlzeus = wlzeus || {};
wlzeus.bootstrap = wlzeus.bootstrap || {};
wlzeus.bootstrap.tooltip = {};
(function() {
    "use strict";
    var self = this;
    var tooltipPlacement;
    var disableTooltipAdjustment = false;
    var formElement;
    this.initTooltip = function(formElem, tVariables, opts) {
        var tooltipSelector = "id";
        var tipContainer = false;
        var tipPlacement = "auto left";
        var tipTrigger = "manual";
        var tipText;
        var closestFormGroup;
        var checkWidth;
        var tooltipWidth;
        formElement = formElem;
        self.tVars = tVariables;
        self.addBindings();
        if (opts) {
            if (opts.disableTooltipAdjustment) {
                disableTooltipAdjustment = opts.disableTooltipAdjustment
            }
            if (opts.tooltipPlacement) {
                tooltipPlacement = opts.tooltipPlacement
            }
        }
        if (zeus.core.isMobile) {
            tipPlacement = "auto top"
        }
        if (opts !== undefined && !opts.useElemID) {
            tooltipSelector = "name"
        }
        formElem.find("input, select").each(function() {
            var thisElem = this[tooltipSelector];
            closestFormGroup = $(this).closest(".form-group");
            if (opts && opts.replacement) {
                _.each(opts.replacement, function(value, key) {
                    if (key === thisElem && opts.replacement[key] !== undefined) {
                        tipText = zeus.utilities.updateValue(zeus.utilities.tVar(wlzeus.bootstrap.tooltip.tVars, key, "tooltip"), opts.replacement[key])
                    } else {
                        tipText = zeus.utilities.tVar(self.tVars, thisElem, "tooltip")
                    }
                })
            } else {
                tipText = zeus.utilities.tVar(self.tVars, thisElem, "tooltip")
            }
            if (!closestFormGroup.attr("data-original-title")) {
                closestFormGroup.tooltip({
                    animation: false,
                    title: tipText,
                    placement: function(tip, elem) {
                        if (!disableTooltipAdjustment) {
                            elem = $(elem);
                            if (zeus.core.isMobile) {
                                tipPlacement = "auto top"
                            } else if (tooltipPlacement !== undefined) {
                                tipPlacement = tooltipPlacement
                            } else if (elem.length) {
                                checkWidth = $(window).width() - (elem.offset().left + elem.width());
                                tooltipWidth = 340;
                                if (tooltipWidth >= checkWidth) {
                                    tipPlacement = "auto top"
                                } else {
                                    tipPlacement = "right"
                                }
                            } else {
                                tipPlacement = "auto right"
                            }
                        }
                        return tipPlacement
                    },
                    container: tipContainer,
                    trigger: tipTrigger,
                    delay: {
                        show: 0,
                        hide: 0
                    },
                    html: true
                })
            }
            tipText = ""
        })
    };
    this.showhideTooltip = function(element, display) {
        $(element).closest(".form-group").tooltip(display)
    };
    this.displayTooltip = function(element, message, status) {
        var removeClass;
        var addClass;
        var isVisible = false;
        var closestFormGroup = $(element).closest(".form-group");
        if (closestFormGroup.next(".tooltip:visible").length) {
            isVisible = true
        }
        if (status === "valid") {
            removeClass = "error";
            addClass = "valid"
        } else if (status === "error") {
            removeClass = "valid";
            addClass = "error"
        }
        self.showhideTooltip(element, "hide");
        closestFormGroup.removeClass(removeClass).addClass(addClass);
        if (!closestFormGroup.hasClass("hide-tooltip")) {
            closestFormGroup.attr("data-original-title", message).next(".tooltip").find(".tooltip-inner").html(message)
        }
        if (isVisible) {
            self.showhideTooltip(element, "show")
        }
    };
    this.addBindings = function() {
        if (!disableTooltipAdjustment) {
            $(window).on("resize", function() {
                self.showhideTooltip(formElement.find("input, select"), "hide")
            })
        }
    }
}).apply(wlzeus.bootstrap.tooltip);
"use strict";
var wlzeus = wlzeus || {};
wlzeus.centreInfoDialog = {};
(function() {
    var self = this;
    this.init = function(obj) {
        this.addBindings(obj)
    };
    this.repositionDialog = function(obj) {
        var dialogContainer;
        var dialogContainerHeight;
        var viewportHeight;
        var dialogContainerPos;
        var defaultDialogPos = "20px";
        var objElem = $(obj);
        if (!objElem.hasClass("in")) {
            objElem.show()
        }
        dialogContainer = $(".modal-dialog", obj);
        dialogContainerHeight = dialogContainer.height();
        viewportHeight = $(window).height();
        if (dialogContainerHeight < viewportHeight) {
            dialogContainerPos = viewportHeight / 2 - dialogContainerHeight / 2 + "px"
        } else {
            dialogContainerPos = defaultDialogPos
        }
        dialogContainer.css({
            "margin-top": dialogContainerPos
        })
    };
    this.addBindings = function(obj) {
        obj.on({
            "show.bs.modal": function() {
                var obj = this;
                self.repositionDialog(obj)
            },
            "shown.bs.modal": function() {
                $(window).on("resize", function() {
                    self.repositionDialog(obj)
                })
            },
            "hide.bs.modal": function() {
                $(window).off("resize")
            }
        }).modal("show")
    }
}).apply(wlzeus.centreInfoDialog);
var wlzeus = wlzeus || {};
wlzeus.infoDialog = {};
(function() {
    "use strict";
    var self = this;
    var buttons = {};
    var btnClassPrimary = "btn-primary";
    var btnClassDefault = "btn-default";
    var infoDialog;
    this.init = function(model, tVariables) {
        self.createDialog(model, tVariables)
    };
    this.addToButtons = function(btnName, btnLabel, btnClass, btnUrl) {
        buttons[btnName] = {
            label: btnLabel,
            className: btnClass
        };
        if (btnUrl) {
            $.extend(buttons[btnName], {
                callback: function() {
                    wlzeus.loadingMessage.showLoadingMessage();
                    window.location.href = btnUrl
                }
            })
        }
    };
    this.createDialog = function(model, tVariables) {
        var title = "&nbsp;";
        var message;
        var closeButtonState = false;
        var className = "";
        var hideTitle = false;
        if (model.Title) {
            title = model.Title
        }
        if (model.Text) {
            message = model.Text
        }
        if (model.Close) {
            closeButtonState = true;
            if (!_.isUndefined(model.Close.Text) && !_.isNull(model.Close.Text)) {
                self.addToButtons(tVariables.DefaultLabels.close, model.Close.Text, btnClassDefault, model.Close.Href)
            }
        }
        if (model.Cancel) {
            self.addToButtons(tVariables.DefaultLabels.cancel, model.Cancel.Text, btnClassDefault, model.Cancel.Href)
        }
        if (model.Continue) {
            self.addToButtons(tVariables.DefaultLabels.continue, model.Continue.Text, btnClassPrimary, model.Continue.Href)
        }
        if (model.Action) {
            self.addToButtons(tVariables.DefaultLabels.action, model.Action.Text, btnClassPrimary, model.Action.Href)
        }
        if (tVariables.className !== undefined) {
            className = tVariables.className
        }
        if (tVariables.hideTitle !== undefined) {
            hideTitle = tVariables.hideTitle
        }
        self.createBootBoxDialog(title, message, closeButtonState, className, hideTitle)
    };
    this.createBootBoxDialog = function(title, message, closeButtonState, dialogClass, hideTitle) {
        if (!zeus.core.isMobile) {
            message = "<h1>" + title + "</h1><p>" + message + "</p>";
            title = " "
        }
        if (title === " " && hideTitle) {
            dialogClass = dialogClass + " no-title"
        }
        infoDialog = bootbox.dialog({
            className: "info-modal " + dialogClass,
            title: title,
            message: message,
            buttons: buttons,
            closeButton: closeButtonState
        });
        wlzeus.centreInfoDialog.init(infoDialog)
    }
}).apply(wlzeus.infoDialog);
var wlzeus = wlzeus || {};
wlzeus.loadingMessage = {};
(function() {
    "use strict";
    var messageMarkup = '<div id="loadingMessage" class="icon-pending loading-message"></div>';
    this.showLoadingMessage = function() {
        $("body").prepend(messageMarkup)
    };
    this.clearLoadingMessage = function() {
        $("#loadingMessage").remove()
    }
}).apply(wlzeus.loadingMessage);
var wlzeus = wlzeus || {};
wlzeus.lightbox = {};
(function() {
    "use strict";
    var self = this;
    this.init = function() {
        $(document).trigger("lbInit")
    };
    this.cacheSelectors = function(contents) {
        self.lightboxModal = $("#lightboxModal");
        self.lightboxModalTitle = self.lightboxModal.find(".modal-title");
        self.lightboxModalBody = self.lightboxModal.find(".modal-body");
        self.contentsParent = contents.parent();
        self.lightboxModal.addClass(contents.attr("id"))
    };
    this.clearCachedSelectors = function() {
        delete self.lightboxModal;
        delete self.lightboxModalTitle;
        delete self.lightboxModalBody;
        delete self.contentsParent
    };
    this.lbLaunch = function(contents, title, className) {
        if (self.lightboxModal && self.lightboxModal.hasClass("in")) {
            self.lbClose(contents, className)
        }
        $(document).trigger("lbLaunch");
        this.cacheSelectors(contents);
        self.lightboxModal.addClass(className);
        self.lightboxModalBody.html("").append(contents);
        self.lightboxModalTitle.text(title);
        self.lightboxModal.modal({
            keyboard: false,
            backdrop: "static"
        }).modal("show").on("hidden.bs.modal", function() {
            self.lbClose(contents, className)
        })
    };
    this.lbClose = function(contents, className) {
        var className = className || "";
        var lightboxId = contents.attr("id");
        $(document).trigger("lbClose", [lightboxId]);
        self.lightboxModal.unbind("hidden.bs.modal");
        self.contentsParent.append(self.lightboxModalBody.html());
        self.lightboxModal.removeClass(lightboxId);
        self.lightboxModal.removeClass(className);
        this.clearCachedSelectors()
    };
    this.lbHide = function() {
        self.lightboxModal.modal("hide")
    }
}).apply(wlzeus.lightbox);
$(function() {
    "use strict";
    wlzeus.lightbox.init()
});
var wlzeus = wlzeus || {};
wlzeus.DOBPicker = {};
(function() {
    "use strict";
    var self = this;
    this.cacheSelectors = function() {
        self.dobInput = $("#regDateOfBirth");
        self.day = $("#regDobDay");
        self.month = $("#regDobMonth");
        self.year = $("#regDobYear");
        self.dobFields = $("#regDobDay,#regDobMonth,#regDobYear")
    };
    this.setValues = function() {
        self.minDOB = self.dobInput.attr("min");
        self.maxDOB = self.dobInput.attr("max")
    };
    this.init = function() {
        self.cacheSelectors();
        self.addBindings();
        self.setValues()
    };
    this.addBindings = function() {
        var dobString = self.dobInput.val();
        if (typeof dobString !== "undefined") {
            var dobParts = dobString.split("-");
            if (dobParts[2]) {
                self.day.val(dobParts[2]);
                self.month.val(dobParts[1]);
                self.year.val(dobParts[0])
            }
        }
        self.dobFields.change(function() {
            var day = self.day.val();
            var month = self.month.val();
            var year = self.year.val();
            var dateString = year + "-" + month + "-" + day;
            var isDate = new RegExp("^\\d{4}-\\d{2}-\\d{2}$").test(dateString);
            if (self.dobFields.hasClass("dont-validate") && !isDate) {
                return
            }
            self.dobInput.val(dateString).blur().valid();
            self.dobFields.valid();
            self.dobFields.removeClass("dont-validate")
        })
    }
}).apply(wlzeus.DOBPicker);
var wlzeus = wlzeus || {};
wlzeus.parallax = {};
(function() {
    "use strict";
    var self = this;
    var skrollrInit;
    this.init = function(opts) {
        var mainElem = $(opts.elem);
        var elemPos = mainElem.offset().top;
        var windowHeight = $(window).innerHeight();
        var animFrom = opts.cssProperties.from;
        var animTo = opts.cssProperties.to;
        if (elemPos + opts.boundary > windowHeight) {
            mainElem.attr("data-bottom-bottom", animFrom);
            mainElem.attr("data--" + opts.endPos + "-bottom", animTo)
        } else {
            mainElem.attr("data-" + opts.startPos, animFrom);
            mainElem.attr("data-" + opts.endPos, animTo)
        }
        skrollrInit = skrollr.init({
            forceHeight: false
        });
        self.addBindings();
        self.refresh()
    };
    this.addBindings = function() {
        $(document).on("AsyncSlotsLoaded", function() {
            setTimeout(function() {
                self.refresh()
            }, 2e3)
        })
    };
    this.refresh = function() {
        skrollrInit.refresh()
    }
}).apply(wlzeus.parallax);
var wlzeus = wlzeus || {};
wlzeus.loginValidation = wlzeus.loginValidation || {};
(function() {
    "use strict";
    var self = this;
    this.topLoginValidation = function(tVariablesJSON) {
        var errorsContainer = $("#loginErrors");
        $("#topLogin").validate({
            errorElement: "li",
            messages: {
                userNameOrEmail: {
                    required: self.getTVariable("userNameOrEmail", "required", tVariablesJSON)
                },
                password: {
                    required: self.getTVariable("password", "required", tVariablesJSON)
                }
            },
            errorPlacement: function(error, element) {
                element = $(element);
                if (errorsContainer.is(":empty")) {
                    error.appendTo(errorsContainer)
                }
            },
            submitHandler: function(form) {
                if (typeof ga !== "undefined") {
                    ga.getAll().forEach(function(tracker) {
                        tracker.send("event", "Login", "Login Form Submitted")
                    })
                }
                $(".login-button").prop("disabled", true).button("loading").addClass("loading");
                form.submit()
            },
            success: function(error, element) {
                error.remove();
                errorsContainer.find("[for=" + element.id + "].error").remove()
            },
            showErrors: function() {
                this.defaultShowErrors()
            },
            invalidHandler: function() {
                if (typeof ga !== "undefined") {
                    ga.getAll().forEach(function(tracker) {
                        tracker.send("event", "Login", "Login Form Submitted With Validation Errors")
                    })
                }
            }
        })
    };
    this.loginPageValidation = function(tVariablesJSON) {
        var errorsContainer = "#errorsContainer";
        $("#loginForm").validate({
            errorElement: "li",
            messages: {
                userNameOrEmail: {
                    required: self.getTVariable("userNameOrEmail", "required", tVariablesJSON)
                },
                password: {
                    required: self.getTVariable("password", "required", tVariablesJSON)
                }
            },
            errorPlacement: function(error, element) {
                element = $(element);
                $("#error-" + element.attr("id")).removeClass("valid").addClass("error");
                error.appendTo(errorsContainer);
                error.addClass("error-message message-" + element.attr("id"))
            },
            success: function(error, element) {
                element = $(element);
                $("#error-" + element.attr("id")).html("");
                error.remove()
            },
            submitHandler: function(form) {
                if (typeof ga !== "undefined") {
                    ga.getAll().forEach(function(tracker) {
                        tracker.send("event", "Login", "Login Form Submitted")
                    })
                }
                $(".login-btn").prop("disabled", true).button("loading");
                form.submit()
            },
            showErrors: function() {
                this.defaultShowErrors()
            },
            invalidHandler: function() {
                if (typeof ga !== "undefined") {
                    ga.getAll().forEach(function(tracker) {
                        tracker.send("event", "Login", "Login Form Submitted With Validation Errors")
                    })
                }
            }
        })
    };
    this.modalLoginValidation = function() {
        $("#modalLogin").validate({
            errorPlacement: function() {},
            success: function() {},
            showErrors: function() {
                if ($("#loginModalErrors").is(":empty")) {
                    $("#loginModalErrors").append('<li class="error">Your username/password is incorrect, please try again or click <a href="#" class="live-help-link">Live Help</a> for assistance</li>')
                }
            },
            submitHandler: function() {
                if (typeof ga !== "undefined") {
                    ga.getAll().forEach(function(tracker) {
                        tracker.send("event", "Login", "Login Form Submitted")
                    })
                }
            },
            invalidHandler: function() {
                if (typeof ga !== "undefined") {
                    ga.getAll().forEach(function(tracker) {
                        tracker.send("event", "Login", "Login Form Submitted With Validation Errors")
                    })
                }
            }
        })
    };
    this.getTVariable = function(key, value, tVariables) {
        var string = "";
        if (tVariables[key] !== undefined && tVariables[key][value] !== undefined) {
            string = tVariables[key][value]
        }
        return string
    }
}).apply(wlzeus.loginValidation);
var utag_data = utag_data || {};
$(document).on("click", ".track-game-launch, .js-open-in-popup", function() {
    populateUtagGames(this)
});

function populateUtagGames(element) {
    var gameId = $(element).attr("data-softwareid");
    if (gameId) {
        utag_data.games = utag_data.games || [];
        utag_data.games.push(gameId)
    }
}
var wlzeus = wlzeus || {};
wlzeus.sideGamesSearch = wlzeus.sideGamesSearch || {};
(function() {
    "use strict";
    var self = this;
    var scriptRan = false;
    var apiUrl = "";
    var mockData = [{
        Name: "100 Pandas Game",
        ThumbnailUrl: "http://local-bingostars.bedegaming.net:30320/OrchardLocal/Media/BingoStars/Side%20games/IGT/100-pandas.png",
        Id: 31,
        IsEmbedded: false,
        BackgroundUrl: null,
        ShortDescription: "Game short description",
        Width: 700,
        Height: 500,
        sideGameUrl: "#",
        playUrl: "#",
        demoUrl: "#",
        GameMessage: "Leaving Alderney..."
    }, {
        Name: "Siberian Storm",
        ThumbnailUrl: "https://westeubedesa.blob.core.windows.net/media/BingoStars/Assets/SideGames/Logos/siberian-storm-v2.jpg",
        Id: 1010,
        IsEmbedded: false,
        BackgroundUrl: null,
        ShortDescription: "Game short description",
        Width: 700,
        Height: 500,
        sideGameUrl: "#",
        playUrl: "#",
        demoUrl: "#",
        GameMessage: "Leaving Alderney..."
    }, {
        Name: "Roulette",
        ThumbnailUrl: "http://local-bingostars.bedegaming.net:30320/OrchardLocal/Media/BingoStars/Side%20games/IGT/roulette.jpg",
        Id: 1010,
        IsEmbedded: false,
        BackgroundUrl: null,
        ShortDescription: "Game short description",
        Width: 700,
        Height: 500,
        sideGameUrl: "#",
        playUrl: "#",
        demoUrl: "#",
        GameMessage: "Leaving Alderney..."
    }, {
        Name: "DaVinci Diamonds",
        ThumbnailUrl: "http://local-bingostars.bedegaming.net:30320/OrchardLocal/Media/BingoStars/Side%20games/IGT/da-vinci-diamonds.png",
        Id: 1010,
        IsEmbedded: false,
        BackgroundUrl: null,
        ShortDescription: "Game short description",
        Width: 700,
        Height: 500,
        sideGameUrl: "#",
        playUrl: "#",
        demoUrl: "#",
        GameMessage: "Leaving Alderney..."
    }, {
        Name: "Craps",
        ThumbnailUrl: "http://local-bingostars.bedegaming.net:30320/OrchardLocal/Media/BingoStars/Side%20games/IGT/craps.jpg",
        Id: 1010,
        IsEmbedded: false,
        BackgroundUrl: null,
        ShortDescription: "Game short description",
        Width: 700,
        Height: 500,
        sideGameUrl: "#",
        playUrl: "#",
        demoUrl: "#",
        GameMessage: "Leaving Alderney..."
    }, {
        Name: "Goal",
        ThumbnailUrl: "http://local-bingostars.bedegaming.net:30320/OrchardLocal/Media/BingoStars/Side%20games/IGT/goal.png",
        Id: 1010,
        IsEmbedded: false,
        BackgroundUrl: null,
        ShortDescription: "Game short description",
        Width: 700,
        Height: 500,
        sideGameUrl: "#",
        playUrl: "#",
        demoUrl: "#",
        GameMessage: "Leaving Alderney..."
    }, {
        Name: "Irish Luck - Mini Game",
        ThumbnailUrl: "https://westdevnet.blob.core.windows.net/media/BingoGodz/images/eyecon/Button_IrishLuck_222x150.png",
        Id: 1010,
        IsEmbedded: false,
        BackgroundUrl: null,
        ShortDescription: "Game short description",
        Width: 700,
        Height: 500,
        sideGameUrl: "#",
        playUrl: "#",
        demoUrl: "#",
        GameMessage: "Leaving Alderney..."
    }];
    var animationSpeed = 300;
    var keyupTimeout;
    var gameTemplate;
    var tVariables = {};
    var currentVal = {};
    var searchInputEl;
    var searchContainerName;
    var searchContainerClass;
    var searchContainerEl;
    var resultsContainerEl;
    var loaderContainerEl;
    var resultsListEl;
    var responseTextEl;
    var totalResultsTextEl;
    this.init = function(tVars, widgetId) {
        if (!scriptRan) {
            self.cacheSelectors();
            scriptRan = true
        }
        tVariables[widgetId] = tVars;
        currentVal[widgetId] = "";
        self.addBindings(widgetId)
    };
    this.cacheSelectors = function() {
        gameTemplate = _.template($("#gameSearchGameTemplate").html());
        searchInputEl = $(".js-search-input");
        searchContainerName = "js-game-search-container";
        searchContainerClass = "." + searchContainerName;
        searchContainerEl = $(searchContainerClass);
        resultsContainerEl = $(".js-game-results-container");
        loaderContainerEl = $(".js-game-loader");
        resultsListEl = $(".js-game-results-list");
        responseTextEl = $(".js-response-text");
        totalResultsTextEl = ".js-total-results-text"
    };
    this.addBindings = function(widgetId) {
        $("." + widgetId).find(searchInputEl).on("keyup", self.keyup).on("keypress", self.keypress).on("focus", self.inputFocus);
        $(document).on("click", function(e) {
            if ($(e.target).closest(searchContainerClass).length === 0) {
                self.toggleGamesList("hide", widgetId)
            }
        })
    };
    this.keyup = function(e) {
        var widgetId = self.extractWidgetId($(e.currentTarget), searchContainerClass, searchContainerName, "game-search-container");
        var currentInput = $("." + widgetId).find(searchInputEl);
        if (e.keyCode === 27) {
            self.toggleGamesList("hide", widgetId)
        }
        if (currentInput.val() !== currentVal[widgetId]) {
            if (currentInput.val().length > 1) {
                self.toggleGamesList("show", widgetId);
                self.toggleLoader("show", "loading", widgetId);
                window.clearTimeout(keyupTimeout);
                keyupTimeout = setTimeout(function() {
                    currentVal[widgetId] = currentInput.val();
                    self.fetchMockData(widgetId)
                }, 1e3)
            } else {
                window.clearTimeout(keyupTimeout);
                self.toggleGamesList("show", widgetId);
                self.toggleLoader("show", "moreChars", widgetId);
                $("." + widgetId).find(totalResultsTextEl).text("")
            }
        }
    };
    this.keypress = function(e) {
        var widgetId = self.extractWidgetId($(e.currentTarget), searchContainerClass, searchContainerName, "game-search-container");
        if (e.keyCode === 13) {
            e.preventDefault();
            self.toggleGamesList("show", widgetId)
        }
    };
    this.inputFocus = function(e) {
        var widgetId = self.extractWidgetId($(e.currentTarget), searchContainerClass, searchContainerName, "game-search-container");
        self.hideAnyOtherGamesLists(widgetId);
        self.fixContainerPosition(widgetId);
        if (!$("." + widgetId).find(searchInputEl).val().length) {
            self.toggleGamesList("hide", widgetId)
        } else {
            self.toggleGamesList("show", widgetId)
        }
    };
    this.fetchData = function() {
        var searchTerm = searchInputEl.val();
        var url = apiUrl + searchTerm;
        $.ajax({
            type: "GET",
            url: url + apiUrl,
            dataType: "json",
            success: function(response) {
                console.dir(response)
            }
        })
    };
    this.fetchMockData = function(widgetId) {
        var searchTerm = currentVal[widgetId].toLowerCase();
        var results = _.filter(mockData, function(game) {
            return ~game.Name.toLowerCase().indexOf(searchTerm)
        });
        self.handleResults(results, widgetId)
    };
    this.handleResults = function(results, widgetId) {
        if (results.length) {
            self.createGames(results, widgetId);
            $("." + widgetId).find(totalResultsTextEl).text(zeus.utilities.tVar(tVariables[widgetId], "totalResults") + " " + results.length)
        } else {
            self.toggleLoader("show", "noGames", widgetId);
            $("." + widgetId).find(totalResultsTextEl).text(zeus.utilities.tVar(tVariables[widgetId], "totalResults") + " 0")
        }
    };
    this.createGames = function(gamesArr, widgetId) {
        var widgetResultsList = $("." + widgetId).find(resultsListEl);
        widgetResultsList.empty();
        self.toggleLoader("hide", "", widgetId);
        $("." + widgetId).find(totalResultsTextEl).text("");
        var gamesList = "";
        _.each(gamesArr, function(game) {
            gamesList += gameTemplate({
                gameName: game.Name,
                gameThumb: game.ThumbnailUrl,
                gameID: game.Id,
                gameIsEmbedded: game.IsEmbedded,
                gameBgUrl: game.BackgroundUrl,
                gameShortDescription: game.ShortDescription,
                gameWidth: game.Width,
                gameHeight: game.Height,
                gameInfoUrl: game.sideGameUrl,
                gamePlayUrl: game.playUrl,
                gameDemoUrl: game.demoUrl,
                gameMessage: game.GameMessage
            })
        });
        widgetResultsList.append(gamesList)
    };
    this.toggleGamesList = function(opt, widgetId) {
        if (opt === "show" && !$("." + widgetId).closest(resultsContainerEl).is(":visible")) {
            $("." + widgetId).closest(resultsContainerEl).velocity("transition.slideDownIn", animationSpeed)
        } else if (opt === "hide" && $("." + widgetId).closest(resultsContainerEl).is(":visible")) {
            $("." + widgetId).closest(resultsContainerEl).velocity("transition.slideDownOut", animationSpeed)
        }
    };
    this.hideAnyOtherGamesLists = function(widgetId) {
        var gamesLists = resultsContainerEl.toArray();
        _.each(gamesLists, function(el) {
            if ($(el).hasClass(widgetId)) {
                gamesLists = _.without(gamesLists, el)
            }
        });
        _.each(gamesLists, function(el) {
            var currentWidgetId = self.extractWidgetId($(el), ".js-game-results-container", "js-game-results-container", "game-results-container");
            self.toggleGamesList("hide", currentWidgetId)
        })
    };
    this.toggleLoader = function(opt, text, widgetId) {
        var activeClass = "js-message-active";
        var widgetLoaderContainer = $("." + widgetId).find(loaderContainerEl);
        var loaderVisible = widgetLoaderContainer.is(":visible");
        if (opt === "show" && !loaderVisible) {
            $("." + widgetId).find(responseTextEl).text(zeus.utilities.tVar(tVariables[widgetId], "responseText", text));
            widgetLoaderContainer.velocity("transition.expandIn", animationSpeed);
            $("." + widgetId).find(resultsContainerEl).addClass(activeClass)
        } else if (opt === "hide" && loaderVisible) {
            $("." + widgetId).find(responseTextEl).text("");
            widgetLoaderContainer.velocity("transition.expandOut", animationSpeed);
            $("." + widgetId).find(resultsContainerEl).removeClass(activeClass)
        } else if (opt === "show") {
            $("." + widgetId).find(responseTextEl).text(zeus.utilities.tVar(tVariables[widgetId], "responseText", text));
            $("." + widgetId).find(resultsContainerEl).addClass(activeClass)
        }
    };
    this.extractWidgetId = function(target, findTarget, replaceOne, replaceTwo) {
        return target.closest(findTarget).attr("class").replace(replaceOne, "").replace(replaceTwo, "").replace(/\s+/g, "")
    };
    this.fixContainerPosition = function(widgetId) {
        resultsContainerEl.prependTo("body");
        var widgetSearchInput = $("." + widgetId).find(searchInputEl);
        var inputPos = $("." + widgetId).closest(searchContainerEl).offset().top + widgetSearchInput.outerHeight() + 20;
        $("." + widgetId).closest(resultsContainerEl).css("top", inputPos + "px");
        var arrowPos = widgetSearchInput.offset().left - $(".js-site").offset().left + widgetSearchInput.outerWidth() / 2 - 10;
        $("." + widgetId).find($(".js-game-results-arrow")).css("left", arrowPos + "px")
    }
}).apply(wlzeus.sideGamesSearch);
var wlzeus = wlzeus || {};
wlzeus.LoginFormWidget = {};
var LoginFormWidget = function() {
    "use strict";
    var $formElem;
    var tVariables;
    var widgetOptions;
    var $errorsContainerElem;
    var $loginButtonElem;
    var $loginControlElem;
    var $rememberMeCheckboxElem;
    var $lightboxContainerElem;
    var loginButtonText;
    var loginModalTitle;
    var inLightbox = false;
    var minUsernameLength;
    var minPasswordLength;
    var maxPasswordLength;
    var validateOnFocus;
    var formGroupClass;
    var requireFromGroup;
    var reloadCurrentLocation = false;
    return {
        init: function(tVariablesJSON, widget, opts) {
            var self = this;
            widgetOptions = opts;
            tVariables = tVariablesJSON;
            $formElem = $("#" + widget);
            self.cacheSelectors();
            loginModalTitle = zeus.utilities.tVar(tVariables, "LoginModal", "Title");
            loginButtonText = zeus.utilities.tVar(tVariables, "SubmitButton", "NormalState");
            $loginButtonElem.text(loginButtonText);
            minUsernameLength = zeus.utilities.tVar(opts, "minUsernameLength") || 3;
            minPasswordLength = zeus.utilities.tVar(opts, "minPasswordLength") || 1;
            maxPasswordLength = zeus.utilities.tVar(opts, "maxPasswordLength") || 15;
            validateOnFocus = zeus.utilities.tVar(opts, "validateOnFocus") || false;
            formGroupClass = zeus.utilities.tVar(opts, "formGroupClass") || false;
            requireFromGroup = zeus.utilities.tVar(opts, "requireFromGroup") || false;
            self.checkRememberMe();
            self.addBindings();
            self.validateForm();
            self.lightboxCheck(widget)
        },
        cacheSelectors: function() {
            $loginButtonElem = $formElem.find(".js-login-button");
            $errorsContainerElem = $formElem.find(".js-login-errors-container");
            $loginControlElem = $formElem.find(".js-login-control");
            $rememberMeCheckboxElem = $formElem.find(".js-remember-me");
            $lightboxContainerElem = $("#lightboxModal")
        },
        addBindings: function() {
            var self = this;
            $loginButtonElem.on("click", function() {
                self.checkFormValidity()
            });
            $loginControlElem.on("keypress", function(e) {
                self.onEnterKeyPressed(e)
            })
        },
        validateForm: function() {
            var self = this;
            var requireFromGroupRule = requireFromGroup ? [2, ".js-login-control"] : false;
            self.validator = $($formElem).validate({
                errorElement: "li",
                rules: {
                    "vm.UsernameOrEmail": {
                        require_from_group: requireFromGroupRule,
                        alphanumunderscore: true,
                        minlength: minUsernameLength
                    },
                    "vm.Password": {
                        require_from_group: requireFromGroupRule,
                        minlength: minPasswordLength,
                        maxlength: maxPasswordLength
                    }
                },
                messages: {
                    "vm.UsernameOrEmail": {
                        required: zeus.utilities.tVar(tVariables, "userNameOrEmail", "required"),
                        require_from_group: zeus.utilities.tVar(tVariables, "userNameOrEmail", "required"),
                        alphanumunderscore: zeus.utilities.tVar(tVariables, "userNameOrEmail", "alphanumunderscore")
                    },
                    "vm.Password": {
                        required: zeus.utilities.tVar(tVariables, "password", "required"),
                        require_from_group: zeus.utilities.tVar(tVariables, "password", "required"),
                        alphanum: zeus.utilities.tVar(tVariables, "password", "alphanum")
                    }
                },
                errorPlacement: function(error, element) {
                    element = $(element);
                    if (formGroupClass) {
                        element.closest(formGroupClass).removeClass("valid").addClass("error")
                    }
                    $errorsContainerElem.empty();
                    error.appendTo($errorsContainerElem)
                },
                success: function(error, element) {
                    element = $(element);
                    if (formGroupClass) {
                        element.closest(formGroupClass).addClass("valid").removeClass("error")
                    }
                    error.remove();
                    $errorsContainerElem.empty()
                },
                showErrors: function() {
                    this.defaultShowErrors();
                    $loginButtonElem.attr("disabled", false).removeClass("disabled")
                }
            })
        },
        submitForm: function() {
            var self = this;
            $loginButtonElem = $formElem.find(".js-login-button");
            $loginControlElem = $formElem.find(".js-login-control");
            $lightboxContainerElem = $("#lightboxModal");
            var csrf = document.querySelector('meta[name="csrf-token"]');
            var csrfToken = csrf ? csrf.getAttribute("content") : "";
            $.ajax({
                type: "POST",
                url: $formElem.attr("action"),
                data: $formElem.serialize(),
                timeout: 12e5,
                tryCount: 0,
                headers: {
                    "X-CSRF-Token": csrfToken
                },
                retryLimit: 1,
                beforeSend: function() {
                    $loginButtonElem.button("loading").addClass("loading");
                    $loginControlElem.prop("disabled", true).addClass("disabled")
                },
                success: function(data) {
                    self.handleSuccess(data)
                },
                error: function(xhr, textStatus, data) {
                    if (window.grecaptcha) {
                        window.grecaptcha.reset();
                        $(".js-login-button").prop("disabled", true)
                    }
                    $loginButtonElem.button("reset").removeClass("loading").text(loginButtonText);
                    $loginControlElem.prop("disabled", false).removeClass("disabled");
                    if (xhr.responseJSON === undefined) {
                        xhr.responseJSON = $.parseJSON(xhr.responseText)
                    }
                    self.handleErrors(xhr, textStatus, data)
                }
            })
        },
        handleSuccess: function(data) {
            var self = this;
            var urlRedirect = window.location.href;
            var dataNextAction = data.NextAction;
            if (typeof dataLayer !== "undefined") {
                try {
                    dataLayer.push({
                        BedePlayerId: data.Target.BedePlayerId,
                        event: "login"
                    })
                } catch (err) {}
            }
            if (typeof dataNextAction !== "undefined" && dataNextAction !== "" && dataNextAction !== null) {
                urlRedirect = dataNextAction
            }
            if (widgetOptions.returnUrl !== "" && widgetOptions.isInheritRedirectURL) {
                urlRedirect = zeus.core.siteHost + zeus.utilities.inheritUrl(widgetOptions.returnUrl)
            }
            if ($rememberMeCheckboxElem.is(":checked")) {
                var username = $formElem.find('.js-login-control[name="vm.UsernameOrEmail"]').val();
                self.setRememberCookie(username)
            } else {
                self.setRememberCookie("null", true)
            }
            self.changePage(urlRedirect)
        },
        handleErrors: function(xhr) {
            if (xhr.responseJSON && xhr.responseJSON.Errors && xhr.responseJSON.Errors.length) {
                $errorsContainerElem.empty();
                xhr.responseJSON.Errors.forEach(function(obj) {
                    var message = obj.Message;
                    if (obj.Key === "SignIn") {
                        message = "Login attempt was unsuccessful"
                    } else if (obj.Key === "model.VM.UsernameOrEmail") {
                        message = "Username is required"
                    }
                    $errorsContainerElem.append('<li class="error">' + message + "</li>")
                })
            }
        },
        changePage: function(url) {
            if (inLightbox) {
                wlzeus.lightbox.lbHide()
            }
            wlzeus.loadingMessage.showLoadingMessage();
            if (reloadCurrentLocation) {
                window.location.reload()
            } else {
                window.location.href = url
            }
        },
        onEnterKeyPressed: function(e) {
            var self = this;
            if (e.keyCode === 13) {
                self.checkFormValidity()
            }
        },
        checkFormValidity: function() {
            var self = this;
            if (!$formElem.valid()) {
                return false
            } else {
                self.submitForm()
            }
        },
        lightboxCheck: function(widget) {
            var self = this;
            if ($formElem.parents(".js-login-slots").length || $formElem.parents(".js-login-modal").length) {
                $(document).on("click", ".slots-login-popup", function() {
                    self.emptySlotsLightbox();
                    self.initLightbox(widget);
                    self.getSlotImage(this);
                    self.getSlotDemoBtn(this);
                    if ($(this).data("reload")) {
                        reloadCurrentLocation = $(this).data("reload")
                    } else {
                        reloadCurrentLocation = false
                    }
                })
            }
        },
        initLightbox: function(widget) {
            var self = this;
            inLightbox = true;
            $(".modal-body").empty();
            $formElem = $("#" + widget);
            self.validateForm();
            wlzeus.lightbox.lbLaunch($formElem.parents(".widget"), loginModalTitle);
            $("html, body").addClass("stop-scroll");
            $(document).on("lbClose", function() {
                $("html, body").removeClass("stop-scroll");
                self.closeLightbox();
                window.location.reload()
            });
            $lightboxContainerElem.find(".js-login-button").off("click").on("click", function() {
                $errorsContainerElem = $formElem.find(".js-login-errors-container");
                self.checkFormValidity()
            });
            $(".login-form").on("click", ".moxie", function(e) {
                e.preventDefault();
                window.open("http://Gaming.Ehosts.Net/netagent/cimlogin.aspx?questid=CEC9D107-78E7-4992-95D4-4EBDCA7CB566&portid=3DADF305-47ED-4067-90E1-AAB666DAF973&nareferer=" + escape(document.location), "_blank", "resizable= no,width=490,height=475");
                return false
            })
        },
        closeLightbox: function() {
            var self = this;
            self.validator.resetForm();
            $(document).unbind("lbClose");
            $lightboxContainerElem.unbind("focus");
            $lightboxContainerElem.unbind("keypress")
        },
        getSlotImage: function(btn) {
            if ($(btn).data("noimage")) {
                var image = $(".js-modal-slot-image");
                if (image) {
                    var modalDiv = image.parents(".modal-dialog");
                    var rowDiv = image.parents(".row");
                    if (!modalDiv.hasClass("modal-sm")) {
                        modalDiv.addClass("modal-sm")
                    }
                    var colDivs = rowDiv.children("div");
                    var contentDiv = colDivs.eq(1);
                    contentDiv.removeClass("col-xs-7 col-z-7");
                    contentDiv.addClass("col-xs-12 col-z-12");
                    colDivs.eq(0).remove()
                }
                return
            }
            var imgSrc = $(btn).data("thumb");
            if (!imgSrc) {
                imgSrc = $("#logo").attr("src")
            }
            $(".js-modal-slot-image").attr("src", imgSrc)
        },
        getSlotDemoBtn: function(btn) {
            var $demoBtn = $(btn).closest(".slot-links").find(".btn-demo").clone();
            $demoBtn.attr("data-dismiss", "modal");
            $(".js-modal-slot-info").append($demoBtn)
        },
        emptySlotsLightbox: function() {
            $(".js-modal-slot-info").find(".btn-demo").remove();
            $("#loginModalErrors").empty()
        },
        getRememberCookie: function() {
            var name = "rememberMe=";
            var ca = document.cookie.split(";");
            for (var i = 0, len = ca.length; i < len; i++) {
                var c = ca[i];
                while (c.charAt(0) === " ") c = c.substring(1);
                if (c.indexOf(name) === 0) return c.substring(name.length, c.length)
            }
            return null
        },
        setRememberCookie: function(username, remove) {
            var date = new Date;
            date.setTime(date.getTime() + 365 * 24 * 60 * 60 * 1e3);
            var expireDate = "expires=" + (remove !== true ? date.toUTCString() : "Thu, 01 Jan 1970 00:00:01 GMT;");
            document.cookie = "rememberMe=" + username + "; " + expireDate
        },
        checkRememberMe: function() {
            var self = this;
            var rememberedUsername = self.getRememberCookie();
            if (rememberedUsername !== null) {
                $formElem.find('.js-login-control[name="vm.UsernameOrEmail"]').val(rememberedUsername);
                $rememberMeCheckboxElem.prop("checked", true)
            }
        },
        reCaptchaCallback: function(response, active) {
            $('input[name="vm.Response"]').val(response);
            $(".js-login-button").prop("disabled", false)
        }
    }
};
if (typeof exports === "object") {
    module.exports = LoginFormWidget
}
wlzeus.LoginFormWidget = LoginFormWidget;
var wlzeus = wlzeus || {};
wlzeus.userExcludeWidget = function() {
    "use strict";
    return {
        opts: {},
        init: function(opts) {
            this.opts = opts;
            this.cacheSelectors();
            this.addBindings();
            zeus.utilities.form.setup(opts.formId, opts.formSettings)
        },
        cacheSelectors: function() {
            this.$el = {
                userExcludeContainer: $(this.opts.containerId)
            };
            this.$el.userExcludeForm = $(this.opts.formId);
            this.$el.userExcludeDuration = this.$el.userExcludeContainer.find(".js-user-exclude-duration");
            this.$el.userExcludeSubmit = this.$el.userExcludeContainer.find(".js-user-exclude-submit")
        },
        addBindings: function() {
            var _this = this;
            this.$el.userExcludeSubmit.on("click", function(e) {
                e.preventDefault();
                _this.submitForm()
            })
        },
        submitForm: function() {
            var _this = this;
            var csrf = document.querySelector('meta[name="csrf-token"]');
            var csrfToken = csrf ? csrf.getAttribute("content") : "";
            if (this.$el.userExcludeForm.valid()) {
                var enddate = this.$el.userExcludeDuration.find(":selected").data("enddate");
                var confirmDialog = bootbox.dialog({
                    message: this.opts.confirmDialog.message.replace("{enddate}", enddate),
                    title: this.opts.confirmDialog.confirmTitle,
                    className: "info-modal user-exclude-modal",
                    buttons: {
                        cancel: {
                            label: this.opts.confirmDialog.cancelLabel,
                            className: "btn-secondary"
                        },
                        confirm: {
                            label: this.opts.confirmDialog.confirmLabel,
                            className: "btn-primary js-confirm",
                            callback: function() {
                                $.ajax({
                                    url: _this.opts.apiURL,
                                    type: "POST",
                                    data: _this.$el.userExcludeForm.serialize(),
                                    headers: {
                                        "X-CSRF-Token": csrfToken
                                    },
                                    beforeSend: function() {
                                        confirmDialog.find(".js-confirm").html("Loading...").attr("disabled", "disabled")
                                    }
                                }).done(function(data) {
                                    confirmDialog.modal("hide");
                                    var afterDialogOpts = _this.opts.afterConfirmDialog;
                                    var afterConfirmDialog = bootbox.dialog({
                                        message: afterDialogOpts.message.replace("{enddate}", enddate),
                                        title: afterDialogOpts.confirmTitle,
                                        buttons: {
                                            confirm: {
                                                label: afterDialogOpts.exitLabel,
                                                className: "btn-primary js-confirm",
                                                callback: function logOut() {
                                                    window.location = zeus.core.siteRoot + "Users/Account/LogOff"
                                                }
                                            }
                                        }
                                    });
                                    $(".bootbox.modal").css({
                                        display: "block"
                                    })
                                }).fail(function(data) {
                                    confirmDialog.modal("hide");
                                    if (data.responseText) {
                                        _this.showError(JSON.parse(data.responseText).TextHint)
                                    } else {
                                        _this.showError(siteConfig.responses.default.error)
                                    }
                                });
                                return false
                            }
                        }
                    }
                })
            }
        },
        showError: function(errorMessage) {
            errorMessage = errorMessage ? errorMessage : siteConfig.responses.default.error;
            bootbox.dialog({
                message: errorMessage,
                title: "Error",
                className: "error-modal"
            });
            $(".error-modal").css({
                display: "block"
            })
        }
    }
};
var wlzeus = wlzeus || {};
wlzeus.megajackpot = wlzeus.megajackpot || {};
(function() {
    "use strict";
    var self = this;
    var jackpotUrl = "https://www.betuk.com/ajax/megajackpot/";
    var jackpotSelector = ".megajackpot-counter";
    var currency;
    var currencyCode;
    var jackpotCurrent = 0;
    var jackpotDiff = 0;
    var jackpotTotal = 0;
    var jackpotElements;
    var updateM;
    var updateAv = 1e3;
    var updateRate = 300;
    var refreshRate = 6e5;
    this.init = function() {
        jackpotElements = $(jackpotSelector);
        if (jackpotElements.length) {
            currencyCode = "GBP";
            currency = zeus.utilities.getCurrencySymbol(currencyCode);
            self.fetchData();
            setInterval(function() {
                self.updateJackpots()
            }, updateRate);
            setInterval(function() {
                self.fetchData()
            }, refreshRate)
        }
    };
    this.updateJackpots = function() {
        if (jackpotCurrent < jackpotTotal) {
            jackpotElements.html(currency + zeus.utilities.formatNumber(jackpotCurrent.toFixed(2), currencyCode));
            var update = Math.random();
            update = updateAv * update;
            jackpotCurrent = Number(jackpotCurrent + updateM * update)
        }
    };
    this.fetchData = function() {
        $.ajax({
            type: "GET",
            url: jackpotUrl,
            dataType: "jsonp",
            success: function(response) {
                jackpotCurrent = Number(response.cmjpv);
                jackpotTotal = Number(response.tmjpv);
                jackpotDiff = jackpotTotal - jackpotCurrent;
                updateM = jackpotDiff / refreshRate;
                self.updateJackpots()
            }
        })
    }
}).apply(wlzeus.megajackpot);
wlzeus.megajackpot.init();
var wlzeus = wlzeus || {};
wlzeus.slots = wlzeus.slots || {};
wlzeus.slots.gamesBar = {};
(function() {
    "use strict";
    var _this = this;
    var widgetOptions;
    var widgetElement;
    var templateName;
    var widgetTemplate;
    var gamesArray;
    var gamesElement;
    var hideBtn;
    var recentlyPlayedGames;
    this.initialized = false;
    this.init = function(options) {
        widgetOptions = options;
        widgetElement = $("#gamesBarWidget_" + widgetOptions.WidgetID);
        templateName = "#gamesBarWidgetTemplate_" + widgetOptions.WidgetID;
        recentlyPlayedGames = new _this.RecentlyPlayedGames;
        recentlyPlayedGames.setProvider(widgetOptions.RecentlyPlayedGamesProvder || new _this.RecentlyPlayedGamesLocalStorageProvider);
        widgetTemplate = _.template($(templateName).html());
        gamesArray = _this.getGames();
        gamesElement = widgetElement.find(".games");
        hideBtn = widgetElement.find(".hide-btn");
        _this.drawGames();
        _this.addBindings();
        if (!gamesArray.length) {
            widgetElement.addClass("closed")
        }
        widgetElement.removeClass("hide");
        _this.initialized = true
    };
    this.getGames = function() {
        var gamesArrayName = "gamesArray_" + widgetOptions.WidgetID;
        var games = recentlyPlayedGames.getGames(gamesArrayName);
        if (games.length > widgetOptions.displayQuantity) {
            games.length = widgetOptions.displayQuantity
        }
        return games
    };
    this.drawGames = function() {
        var gamesList = "";
        for (var i = 0; i < gamesArray.length; i++) {
            gamesList += _this.createGameHTML(gamesArray[i])
        }
        gamesElement.append(gamesList)
    };
    this.createGameHTML = function(gameObj, cssClass) {
        cssClass = typeof cssClass === "undefined" ? "" : cssClass + " ";
        cssClass += "loadGame game-" + gameObj.gameID;
        return widgetTemplate({
            cssClass: cssClass,
            gameID: gameObj.gameID,
            gameLink: gameObj.gameLink,
            gameBG: gameObj.gameBG,
            gameWidth: gameObj.gameWidth,
            gameHeight: gameObj.gameHeight,
            gameTitle: gameObj.gameTitle,
            gameThumb: gameObj.gameThumb,
            gameSoftwareId: gameObj.gameSoftwareId,
            gameTableId: gameObj.gameTableId
        })
    };
    this.addBindings = function() {
        var bodyElem = $("body");
        hideBtn.on("click", function() {
            widgetElement.toggleClass("closed")
        });
        bodyElem.on("mouseenter", "#slotsIframe, #bingo-container", function() {
            widgetElement.addClass("closed")
        });
        bodyElem.on("mouseleave", "#slotsIframe, #bingo-container", function() {
            if (gamesArray.length) {
                widgetElement.removeClass("closed")
            }
        });
        $(document).on("slot:game:launched", function(e, element) {
            var element = $(element);
            var game = {
                gameID: element.data("id"),
                gameLink: element.data("url"),
                gameBG: element.data("bg"),
                gameWidth: element.data("width"),
                gameHeight: element.data("height"),
                gameTitle: element.data("title"),
                gameThumb: element.data("thumb"),
                gameSoftwareId: element.data("software-id"),
                gameTableId: element.data("table-id")
            };
            _this.setGame(game)
        })
    };
    this.setGame = function(gameObj) {
        var selectedGame = gamesElement.find(".game-" + gameObj.gameID);
        var selectedGameIndex = selectedGame.index();
        if (selectedGameIndex !== 0) {
            var updatedGames = _this.getGames();
            var newGameObj = gameObj;
            var newGameHTML = _this.createGameHTML(newGameObj, "new-game");
            if (selectedGameIndex > 0) {
                selectedGame.remove();
                updatedGames = _.without(updatedGames, _.findWhere(updatedGames, {
                    gameID: gameObj.gameID
                }))
            } else if (updatedGames.length === widgetOptions.displayQuantity) {
                gamesElement.find("li:last-child").remove();
                updatedGames.pop()
            }
            updatedGames.unshift(newGameObj);
            recentlyPlayedGames.setGames("gamesArray_" + widgetOptions.WidgetID, updatedGames);
            gamesElement.prepend(newGameHTML);
            setTimeout(function() {
                gamesElement.find("li:first-child").removeClass("new-game")
            }, 10);
            if (widgetOptions.hideIfNoGames && widgetElement.hasClass("closed")) {
                widgetElement.removeClass("closed")
            }
        }
    }
}).apply(wlzeus.slots.gamesBar);
(function() {
    "use strict";
    var RecentlyPlayedGames = function() {
        this.provider = null
    };
    RecentlyPlayedGames.prototype = {
        setProvider: function(provider) {
            this.provider = provider
        },
        getGames: function(gamesLookupId) {
            return this.provider.getGames(gamesLookupId)
        },
        setGames: function(gamesLookupId, games) {
            this.provider.setGames(gamesLookupId, games)
        }
    };
    var RecentlyPlayedGamesCookieProvider = function(config) {
        var cookieName = config.RecentlyPlayedGamesCookieName || "RecentlyPlayedGames";

        function getSiteCookie(cookieName) {
            var name = cookieName + "=";
            var ca = document.cookie.split(";");
            for (var i = 0, len = ca.length; i < len; i++) {
                var c = ca[i];
                while (c.charAt(0) === " ") c = c.substring(1);
                if (c.indexOf(name) === 0) return c.substring(name.length, c.length)
            }
            return ""
        }

        function setSiteCookie(cookieName, cookieVal, expiryDays) {
            var date = new Date;
            date.setTime(date.getTime() + expiryDays * 24 * 60 * 60 * 1e3);
            var expireDate = "expires=" + date.toUTCString();
            document.cookie = cookieName + "=" + cookieVal + "; " + expireDate + "; " + "path=/"
        }

        function uriWithSanitizedQuery(uri, sanitizeFunc) {
            var queryIndex = (uri || "").indexOf("?");
            if (queryIndex === -1 || uri.substring(queryIndex).length === 1) return uri;
            var sanitizedQuery = sanitizeFunc(uri.substring(queryIndex + 1));
            return uri.substring(0, queryIndex + 1) + sanitizedQuery
        }
        this.getGames = function(gamesLookupId) {
            var cookie = getSiteCookie(cookieName);
            if (cookie === "") return new Array;
            var lookupRecentlyPlayedGames = JSON.parse(cookie);
            var gameDictEntry = _.find(lookupRecentlyPlayedGames, function(item) {
                return item.WidgetId === gamesLookupId
            });
            if (!gameDictEntry) return new Array;
            var games = _.map(gameDictEntry.Games, function(item) {
                item.gameLink = uriWithSanitizedQuery(item.gameLink, decodeURIComponent);
                return item
            });
            return games
        };
        this.setGames = function(gamesLookupId, games) {
            var cookie = getSiteCookie(cookieName);
            var lookupRecentlyPlayedGames = cookie !== "" ? JSON.parse(cookie) : new Array;
            var dictEntry = _.find(lookupRecentlyPlayedGames, function(item) {
                return item.WidgetId === gamesLookupId
            }) || {};
            games = _.map(games, function(item) {
                item.gameLink = uriWithSanitizedQuery(item.gameLink, encodeURIComponent);
                return item
            });
            dictEntry.WidgetId = gamesLookupId;
            dictEntry.Games = games;
            lookupRecentlyPlayedGames = _.reject(lookupRecentlyPlayedGames, function(item) {
                return item.WidgetId === gamesLookupId
            });
            lookupRecentlyPlayedGames.push(dictEntry);
            setSiteCookie(cookieName, JSON.stringify(lookupRecentlyPlayedGames), 365)
        }
    };
    var RecentlyPlayedGamesLocalStorageProvider = function(config) {
        this.getGames = function(gamesLookupId) {
            var jsonGames = localStorage[gamesLookupId];
            return jsonGames ? JSON.parse(jsonGames) : new Array
        };
        this.setGames = function(gamesLookupId, games) {
            localStorage[gamesLookupId] = JSON.stringify(games)
        }
    };
    wlzeus.slots.gamesBar.RecentlyPlayedGames = RecentlyPlayedGames;
    wlzeus.slots.gamesBar.RecentlyPlayedGamesCookieProvider = RecentlyPlayedGamesCookieProvider;
    wlzeus.slots.gamesBar.RecentlyPlayedGamesLocalStorageProvider = RecentlyPlayedGamesLocalStorageProvider
})();
var zeus = zeus || {};
zeus.mobileSlots = {};
(function() {
    "use strict";
    var self = this;
    var PLAYER_TOKEN = null;
    var PLAYER_ID = null;
    var gameType;
    var gameurl;
    var gameSoftwareId;
    var language;
    var country;
    var currencyCode;
    var tableId;
    var errorMsg;
    var errorMsgToken;
    var siteRoot = window.location.protocol + "//" + window.location.host + "/";
    var isAuthenticated;
    var gameLaunchElement;
    self.slotsInitalised = false;
    this.init = function(slotVariables) {
        self.siteCode = slotVariables.siteCode || 0;
        self.isPopout = slotVariables.popout !== "" ? slotVariables.popout : "false";
        self.slotContainer = slotVariables.slotContainer !== "" ? slotVariables.slotContainer : ".slotsWidget";
        self.slotsList = slotVariables.slotsList !== "" ? slotVariables.slotsList : "#slotGames";
        self.inGame = slotVariables.inGame !== "" ? slotVariables.inGame : "#bingoContainer";
        self.inGameContainer = slotVariables.inGameContainer !== "" ? slotVariables.inGameContainer : "#inGameSlots";
        self.loadGame = slotVariables.loadGame !== "" ? slotVariables.loadGame : ".playSlotButton";
        self.slotClose = slotVariables.slotClose !== "" ? slotVariables.slotClose : "#slotsClose";
        self.slotFrame = slotVariables.slotFrame !== "" ? slotVariables.slotFrame : "#slotGame";
        self.slotGameContainer = slotVariables.slotGameContainer !== "" ? slotVariables.slotGameContainer : "#slotGameContainer";
        errorMsg = slotVariables.errorMsg;
        errorMsgToken = slotVariables.errorMsgToken;
        isAuthenticated = slotVariables.isAuthenticated;
        self.addBindings();
        self.slotsInitalised = true
    };
    this.addBindings = function() {
        self.bodyElem = $("body");
        self.bodyElem.on("click", self.loadGame, function() {
            if (!isAuthenticated) {
                $(document).trigger("popup:login:open", [{
                    loginForm: "slots"
                }]);
                gameLaunchElement = this
            } else {
                self.launchSlotsContainer(this)
            }
        });
        $(document).on("widget:login:loginSuccessful", function(e, loginForm) {
            if (loginForm === "slots") {
                self.launchSlotsContainer(gameLaunchElement)
            }
        })
    };
    this.launchSlotsContainer = function(thisElem) {
        var clickedElem = $(thisElem);
        gameurl = clickedElem.data("gameurl");
        gameSoftwareId = clickedElem.data("softwareid");
        language = clickedElem.data("language");
        country = clickedElem.data("country");
        currencyCode = clickedElem.data("currencycode");
        tableId = clickedElem.data("tableid");
        if (clickedElem.hasClass("demo")) {
            gameType = "demo"
        } else {
            gameType = "game"
        }
        self.getTokenAndId(function(err, data) {
            if (err) {
                self.error(data)
            } else {
                self.launchGame(data)
            }
        })
    };
    this.getTokenAndId = function(callback) {
        if (PLAYER_TOKEN !== null && PLAYER_ID !== null) {
            callback(false, {
                playerToken: PLAYER_TOKEN,
                playerId: PLAYER_ID
            })
        } else {
            $.get(siteRoot + "api/Lobby/PlayerToken").success(function(m) {
                if (m !== null) {
                    if (m.GameToken !== "undefined" && m.UserId !== "undefined") {
                        callback(false, {
                            playerToken: m.GameToken,
                            playerId: m.UserId
                        })
                    } else {
                        callback(true, "userToken")
                    }
                } else if (gameType === "demo") {
                    callback(false, {
                        playerToken: "NULL",
                        playerId: "PLAYER01"
                    })
                } else {
                    callback(true, "userToken")
                }
            }).fail(function() {
                callback(true, "")
            })
        }
    };
    this.launchGame = function(player) {
        if (gameurl === "gms") {
            player = {
                PlayerId: player.playerId,
                PlayerToken: gameType === "demo" ? "demotoken" : player.playerToken,
                Currency: "GBP",
                Channel: "mobile",
                Language: "EN",
                AutoLaunch: false,
                IsDemo: gameType === "demo" ? true : false,
                SourceUrl: "",
                SourceArea: "",
                TableId: tableId,
                Technology: "Html5"
            };
            self.getGMSLaunchURl(player, function(err, data) {
                if (err) {
                    return self.error()
                } else {
                    gameurl = data.launchUrl;
                    window.location.href = gameurl
                }
            })
        } else {
            gameurl = gameurl.replace("{PLAYER_TOKEN}", player.playerToken).replace("{PLAYER_ID}", player.playerId).replace("{SOFTWARE_ID}", gameSoftwareId).replace("{LANGUAGE}", language).replace("{COUNTRY}", country).replace("{CURRENCY_CODE}", currencyCode);
            window.location.href = gameurl
        }
    };
    this.getGMSLaunchURl = function(player, callback) {
        var csrf = document.querySelector('meta[name="csrf-token"]');
        var csrfToken = csrf ? csrf.getAttribute("content") : "";
        $.ajax({
            url: "/gamelaunch/v1/games/" + gameSoftwareId.toString() + "/launch",
            type: "post",
            contentType: "application/json",
            data: JSON.stringify(player),
            headers: {
                "X-Correlation-Token": window.uuid.v4(),
                "X-Site-Code": self.siteCode || 0,
                "X-CSRF-Token": csrfToken
            },
            success: function(data) {
                callback(null, data)
            },
            error: function(xhr, ajaxOptions, thrownError) {
                callback(true, thrownError)
            }
        })
    };
    this.error = function(type) {
        if (type === "userToken") {
            gameurl = gameurl.replace("{SOFTWARE_ID}", gameSoftwareId).replace("{LANGUAGE}", language).replace("{COUNTRY}", country).replace("{CURRENCY_CODE}", currencyCode);
            var loginUrl = siteRoot + "gameslogin?gametype=" + gameType + "&tableid=" + tableId + "&gamesoftwareid=" + gameSoftwareId + "&gameurl=" + gameurl;
            window.location.href = loginUrl
        } else {
            window.alert(errorMsg)
        }
    }
}).apply(zeus.mobileSlots);
var SlotsWidget = function() {
    "use strict";
    var opts = null;
    var $slotsContainerElem;
    var $slotsLoadingMessageArea;
    var gameTemplate = "";
    return {
        init: function(options) {
            var self = this;
            opts = options;
            $slotsContainerElem = $(opts.slotsContainer);
            $slotsLoadingMessageArea = $(opts.slotsArea).find(".js-slots-loading-message");
            self.addBindings();
            self.initTabs()
        },
        addBindings: function() {
            var self = this;
            $(".js-tab-anchor").on("click", function(e) {
                e.preventDefault();
                var $tab = $(this).parent();
                if (!$tab.hasClass("active")) {
                    self.showCategory($tab.data("categoryid"))
                }
            })
        },
        setupTemplatesAndJitCall: function() {
            var self = this;
            gameTemplate = _.template($("#singleGameTemplate").html());
            var jitCommands = {
                "get-sideGames": function(response) {
                    self.createSlots(response)
                }
            };
            $.extend(zeus.jit.responseCommands, jitCommands)
        },
        showCategory: function(catId) {
            var self = this;
            var $category = $(opts.categoryAreaPartID + catId);
            if (!$category.data("catpreloaded") && !$category.find(".js-slot-game").length) {
                if (!gameTemplate) {
                    self.setupTemplatesAndJitCall()
                }
                self.getSlots(catId)
            } else {
                $slotsContainerElem.hide().fadeIn(500);
                $slotsLoadingMessageArea.hide()
            }
        },
        getSlots: function(catId) {
            $slotsLoadingMessageArea.show();
            zeus.jit.add([{
                Name: "CasinoCategorySummary",
                Args: [catId]
            }, "get-sideGames"])
        },
        handleError: function() {
            $slotsLoadingMessageArea.fadeOut(500, function() {
                $(this).html("<p>" + opts.errorMsg + "</p>").fadeIn()
            })
        },
        createSlots: function(response, fromLocalStorage) {
            var self = this;
            var gamesList = "";
            if (response !== null && response.DidSucceed && response.Response.Games !== null || fromLocalStorage) {
                var responseData = fromLocalStorage ? response : response.Response;
                var listOfGames = responseData.Games;
                var catId = responseData.CategoryId;
                var catName = responseData.CategoryName;
                var gameNameAttr = "";
                _.each(listOfGames, function(game) {
                    if (game !== null) {
                        gameNameAttr = game.Name.replace(/\s+/g, "-").toLowerCase();
                        gamesList += gameTemplate({
                            gameName: game.Name,
                            gameID: game.Id,
                            gameIsEmbedded: game.Embedded,
                            gameThumb: game.ThumbnailSource,
                            gameBgUrl: game.BackgroundImageSource,
                            gameShortDescription: game.Description,
                            gameWidth: game.WidthPx,
                            gameHeight: game.HeightPx,
                            gameInfoUrl: game.GameInfoUrl,
                            gamePlayUrl: game.UseGmsForLaunch ? "gms" : game.LaunchUrl,
                            gameDemoUrl: game.UseGmsForLaunch ? "gms" : game.DemoUrl,
                            isAuthenticated: zeus.core.isAuthenticated,
                            categoryName: catName,
                            categoryId: catId,
                            gameNameAttr: gameNameAttr,
                            gameMessage: game.PlayerMessage,
                            gameUseGmsForLaunch: game.UseGmsForLaunch,
                            gameSoftwareId: game.SoftwareId,
                            gameTableId: game.TableId,
                            gameTechnology: game.Technology
                        })
                    }
                });
                if (gamesList === "") {
                    self.handleError();
                    return
                }
                $slotsContainerElem.fadeOut(500, function() {
                    $slotsLoadingMessageArea.hide();
                    $(opts.categoryAreaPartID + catId).find(".js-slot-category").append(gamesList);
                    $slotsContainerElem.fadeIn(500);
                    $(document).trigger("AsyncSlotsLoaded", listOfGames)
                })
            } else {
                self.handleError()
            }
        },
        initTabs: function() {
            var self = this;
            var $tabSelectorElem = $(opts.tabHeaderArea).find(".js-tab-trigger:first").find(".js-tab-anchor");
            if ($tabSelectorElem.length) {
                self.showCategory($tabSelectorElem.parent().data("categoryid"));
                $tabSelectorElem.tab("show");
                $($tabSelectorElem.data("categorylocation")).addClass("fade in")
            }
        }
    }
};
if (typeof exports === "object") {
    module.exports = SlotsWidget
}
$(function() {
    "use strict";
    var $fixedHeader = $(".header-content");
    var $siteBody = $(".site-body");
    if ($fixedHeader.css("position") === "fixed") {
        $siteBody.on("focus", "input, select", function() {
            $fixedHeader.css("position", "absolute")
        });
        $siteBody.on("blur", "input, select", function() {
            $fixedHeader.css("position", "fixed")
        })
    }
});
var wlzeus = wlzeus || {};
wlzeus.postcodeLookup = {};
(function() {
    "use strict";
    var self = this;
    var clickEvent = "click";
    var opts;
    var tVariables;
    var postcodeLookupForm;
    var enterManuallyHidden = false;
    var defaultMessages = {
        postcodeMessages: {
            success: {
                longMessage: "We found an exact match for your house number/postcode.",
                shortMessage: "Success."
            },
            "postcode-required": {
                longMessage: "Postcode is required for a postal lookup.",
                shortMessage: "Postcode required"
            },
            "no-results": {
                longMessage: "Lookup provided no results for your postcode.",
                shortMessage: "No results found."
            },
            loading: {
                longMessage: "Looking for the address from your postcode",
                shortMessage: "Loading postcode...."
            },
            "not-recognised": {
                longMessage: "Postcode not recognised, please try again or enter your address manually.",
                shortMessage: "Postcode not recognised"
            },
            fail: {
                longMessage: "Postcode lookup has failed, please try again or enter your address manually.",
                shortMessage: "Lookup failed, please enter manually"
            },
            default: {
                longMessage: "Postcode lookup has failed, please try again or enter your address manually.",
                shortMessage: "Lookup failed, please enter manually"
            }
        }
    };
    this.init = function(postcodeLookupOptions, optsJSON, tVariablesJSON) {
        opts = optsJSON;
        tVariables = tVariablesJSON;
        self.setOptions(postcodeLookupOptions);
        self.addBindings();
        var lookupPostcodeArea = postcodeLookupOptions.OnPostcodeFindSuccess.lookupPostcodeContainer;
        self.requestVerificationToken = $('input[name="__RequestVerificationToken"]').val();
        postcodeLookupForm = $('<div class="' + lookupPostcodeArea.substr(1) + '">').append($(lookupPostcodeArea).clone()).html()
    };
    this.setOptions = function(opt) {
        opt = opt || self.lookupOpts;
        self.lookupOpts = opt;
        if (opt.ShowPartialAddressFields) {
            $(opt.EnterAddressManually.Container).hide();
            enterManuallyHidden = true
        }
        self.lookupHouseNumberElem = $(opt.LookupHouseNumber);
        self.lookupPostcodeElem = $(opt.LookupPostcode);
        self.postcodeResultContainer = $(opt.PostcodeResultContainer);
        self.errorSummaryArea = $(opt.ErrorSummaryArea);
        self.postcodeErrorArea = $(opt.PostcodeErrorArea);
        self.postcodeElem = $(opt.Postcode);
        self.postcodeLookupButton = opt.PostcodeLookupButton;
        self.postcodeLookupButtonElem = $(self.postcodeLookupButton)
    };
    this.addBindings = function() {
        $(self.postcodeLookupButton).off(clickEvent).on(clickEvent, function(e) {
            e.preventDefault();
            $(this).focusout();
            if ($.validator && !self.lookupPostcodeElem.valid()) {
                return false
            }
            self.postcodeLookup();
            self.lookupOpts.PostcodeLookupButtonClickFunc()
        });
        if (!enterManuallyHidden) {
            $(self.lookupOpts.EnterAddressManually.Button).off(clickEvent).on(clickEvent, function(e) {
                e.preventDefault();
                self.updateAddressFields()
            })
        }
        $(self.lookupOpts.LookupPostcode).off("keypress").on("keypress", function(e) {
            if (e.keyCode === 13) {
                self.postcodeLookup();
                return false
            }
        })
    };
    this.postcodeLookup = function() {
        var postcodeValue = self.lookupPostcodeElem.val();
        if (postcodeValue.length <= 0) {
            self.postcodeMessage("postcode-required");
            return
        }

<<<<<<< HEAD
<<<<<<< HEAD
				var data = [
=======
	var data =  [
>>>>>>> 3e766dd... none
=======
				var data = [
>>>>>>> dadab26... none
      {
        "id": "GB|RM|A|14436038",
        "text": "5D, Nash Street, Manchester, M15 5NZ"
<<<<<<< HEAD
<<<<<<< HEAD
=======
      },
      {
        "id": "GB|RM|A|14436037",
        "text": "5C, Nash Street, Manchester, M15 5NZ"
      },
      {
        "id": "GB|RM|A|14436026",
        "text": "2A, Nash Street, Manchester, M15 5NZ"
      },
      {
        "id": "GB|RM|A|14436027",
        "text": "2B, Nash Street, Manchester, M15 5NZ"
      },
      {
        "id": "GB|RM|A|14436028",
        "text": "2C, Nash Street, Manchester, M15 5NZ"
      },
      {
        "id": "GB|RM|A|14436036",
        "text": "5B, Nash Street, Manchester, M15 5NZ"
      },
      {
        "id": "GB|RM|A|14436035",
        "text": "5A, Nash Street, Manchester, M15 5NZ"
      },
      {
        "id": "GB|RM|A|14436018",
        "text": "1 Nash Street, Manchester, M15 5NZ"
      },
      {
        "id": "GB|RM|A|14436032",
        "text": "3 Nash Street, Manchester, M15 5NZ"
      },
      {
        "id": "GB|RM|A|14436033",
        "text": "4 Nash Street, Manchester, M15 5NZ"
      },
      {
        "id": "GB|RM|A|14436034",
        "text": "5 Nash Street, Manchester, M15 5NZ"
      },
      {
        "id": "GB|RM|A|14436039",
        "text": "6 Nash Street, Manchester, M15 5NZ"
      },
      {
        "id": "GB|RM|A|14436040",
        "text": "7 Nash Street, Manchester, M15 5NZ"
      },
      {
        "id": "GB|RM|A|14436041",
        "text": "8 Nash Street, Manchester, M15 5NZ"
      },
      {
        "id": "GB|RM|A|14436042",
        "text": "9 Nash Street, Manchester, M15 5NZ"
      },
      {
        "id": "GB|RM|A|14436019",
        "text": "10 Nash Street, Manchester, M15 5NZ"
      },
      {
        "id": "GB|RM|A|14436020",
        "text": "11 Nash Street, Manchester, M15 5NZ"
      },
      {
        "id": "GB|RM|A|14436021",
        "text": "12 Nash Street, Manchester, M15 5NZ"
      },
      {
        "id": "GB|RM|A|14436022",
        "text": "13 Nash Street, Manchester, M15 5NZ"
      },
      {
        "id": "GB|RM|A|14436023",
        "text": "14 Nash Street, Manchester, M15 5NZ"
      },
      {
        "id": "GB|RM|A|14436024",
        "text": "16 Nash Street, Manchester, M15 5NZ"
      },
      {
        "id": "GB|RM|A|14436025",
        "text": "18 Nash Street, Manchester, M15 5NZ"
      },
      {
        "id": "GB|RM|A|14436029",
        "text": "20 Nash Street, Manchester, M15 5NZ"
      },
      {
        "id": "GB|RM|A|14436030",
        "text": "22 Nash Street, Manchester, M15 5NZ"
      },
      {
        "id": "GB|RM|A|14436031",
        "text": "24 Nash Street, Manchester, M15 5NZ"
>>>>>>> 49aed02... none
=======
>>>>>>> e1692dd... none
      }
<<<<<<< HEAD
<<<<<<< HEAD
    ]
=======
    ];
>>>>>>> 3e766dd... none
=======
    ]
>>>>>>> dadab26... none

                if (data) {
                    if (data.length > 1) {
                        self.createAddressList(data)
                    } else if (data.length === 1) {
                        self.getAddressDetails(data[0].id);
                        self.postcodeMessage("success")
                    } else {
                        self.postcodeMessage("no-results")
                    }
                } else {
                    if (data.message !== "Postcode not recognised") {
                        self.postcodeMessage("fail")
                    } else {
                        self.postcodeMessage("not-recognised")
                    }
                }
                self.lookupOpts.OnPostcodeFindSuccess.func()

    };
    this.createAddressList = function(lookupResult) {
        var links = "";
        var addressLine;
        var resultsHTML;
        var displayAddressOpts = self.lookupOpts.DisplayAddressesOptions;
        if (displayAddressOpts.displayAs === "list") {
            resultsHTML = '<li class="address-results-list-item"><a id="{UNIQUEID}" class="address-line">{ADDRESSLINE}</a></li>'
        } else {
            resultsHTML = '<option id="{UNIQUEID}" value="{UNIQUEID}" class="address-line">{ADDRESSLINE}</option>'
        }
        for (var i = 0; i < lookupResult.length; i++) {
            addressLine = lookupResult[i].text;
            links += resultsHTML.replace(/{UNIQUEID}/g, lookupResult[i].id).replace(/{ADDRESSLINE}/g, addressLine)
        }
        var resultsContainerHTML = '<div class="results">';
        if (displayAddressOpts.displayAs === "list") {
            resultsContainerHTML += '<ul class="address-results-list">';
            resultsContainerHTML += links;
            resultsContainerHTML += "</ul>"
        } else {
            resultsContainerHTML += '<select class="address-results-list">';
            resultsContainerHTML += links;
            resultsContainerHTML += "</select>"
        }
        resultsContainerHTML += "</div>";
        if (displayAddressOpts.displayIn === "modal") {
            var modalTitle = " ";
            if (zeus.core.isMobile) {
                modalTitle = displayAddressOpts.SelectAddressHeader
            }
            bootbox.dialog({
                message: resultsContainerHTML,
                title: modalTitle,
                className: "postcode-result-modal coloured-header",
                backdrop: displayAddressOpts.showBackDrop ? true : false
            })
        } else {
            self.postcodeResultContainer.show()
        }
        $(".address-line").click(function() {
            self.getAddressDetails($(this).attr("id"))
        }).on("keypress", function(e) {
            if (e.keyCode === 13) {
                self.getAddressDetails($(this).attr("id"))
            }
        })
    };
    this.getAddressDetails = function(id) {
        $.ajax({
            type: "GET",
            url: "/api/PostCodeLookup/" + id,
            header: self.requestVerificationToken,
            dataType: "json",
            success: function(data) {
                if (data) {
                    self.updateAddressDetails(data)
                } else {
                    self.postcodeMessage("fail");
                    return false
                }
            },
            error: function() {
                self.postcodeMessage("fail")
            },
            beforeSend: function() {
                self.postcodeLoading()
            },
            complete: function() {
                self.updatePostcodeButton("reset")
            }
        })
    };
    this.postcodeLoading = function() {
        if (self.lookupOpts.PostcodeLoading.ShowLoadingMessage) {
            self.postcodeMessage("loading")
        }
        self.updatePostcodeButton("loading")
    };
    this.updatePostcodeButton = function(option) {
        if (self.lookupOpts.PostcodeLoading.AddLoadingToButton) {
            self.postcodeLookupButtonElem.button(option)
        }
    };
    this.updateAddressDetails = function(result) {
        var townElem = $(self.lookupOpts.Town);
        self.lookupHouseNumberElem.val(result.houseNumber);
        self.lookupPostcodeElem.val(result.postCode);
        $(self.lookupOpts.AddressLine1).val(result.streetAddress1);
        $(self.lookupOpts.AddressLine2).val(result.streetAddress2);
        townElem.val(result.townCity);
        $(self.lookupOpts.Postcode).val(result.postCode);
        $(self.lookupOpts.County).val(townElem.val().toLowerCase() === "london" ? "London" : result.county);
        self.updateAddressFields();
        if (self.lookupOpts.DisplayAddressesOptions.displayIn === "modal") {
            $(".postcode-result-modal").modal("hide")
        }
        if (self.lookupOpts.DisplayAddressesOptions.multiStep) {
            self.nextStep.click()
        }
        $(document).trigger("postcodeLookup:addressUpdated", [self.lookupOpts.AddressFields])
    };
    this.postcodeMessage = function(type) {
        var longMessage = "";
        var shortMessage = "";
        var msgClass = "error";
        if (wlzeus.postcodeLookup.override && wlzeus.postcodeLookup.override.postcodeMessage) {
            var overrideVariables = wlzeus.postcodeLookup.override.postcodeMessage(type);
            longMessage = overrideVariables[0];
            shortMessage = overrideVariables[0];
            msgClass = overrideVariables[1]
        } else {
            var messages = self.getPoscodeMessage(type);
            longMessage = messages[0];
            shortMessage = messages[1];
            if (type === "success") {
                msgClass = "success"
            } else if (type === "loading") {
                msgClass = "loading-postcode"
            }
        }
        self.showPostcodeMessage(longMessage, shortMessage, msgClass)
    };
    this.getPoscodeMessage = function(type) {
        var longMsg = "";
        var shortMsg = "";
        if (tVariables && tVariables.postcodeMessages !== undefined && tVariables.postcodeMessages[type] !== undefined) {
            longMsg = tVariables.postcodeMessages[type].longMessage;
            shortMsg = tVariables.postcodeMessages[type].shortMessage
        } else {
            longMsg = defaultMessages.postcodeMessages[type].longMessage;
            shortMsg = defaultMessages.postcodeMessages[type].shortMessage;
            if (longMsg === undefined) {
                longMsg = defaultMessages.postcodeMessages["default"].longMessage
            }
            if (shortMsg === undefined) {
                shortMsg = defaultMessages.postcodeMessages["default"].shortMessage
            }
        }
        return [longMsg, shortMsg]
    };
    this.showPostcodeMessage = function(longMessage, shortMessage, msgClass) {
        if (self.lookupOpts.TooltipMessages) {
            var inputGroup = $(self.lookupPostcodeElem).closest(".form-group");
            if (msgClass !== "success") {
                inputGroup.removeClass("valid").addClass("error")
            }
            inputGroup.attr("data-original-title", longMessage).next(".tooltip").find(".tooltip-inner").html(longMessage);
            inputGroup.tooltip("show");
            setTimeout(function() {
                inputGroup.tooltip("hide")
            }, 4e3)
        } else {
            self.postcodeErrorArea.html('<li class="' + msgClass + '">' + shortMessage + "</li>").show()
        }
        if (self.lookupOpts.OnPostcodeError.DisableButton) {
            self.postcodeLookupButtonElem.prop("disabled", true);
            setTimeout(function() {
                self.postcodeErrorArea.fadeOut(1e3, function() {
                    $(this).empty()
                });
                self.postcodeLookupButtonElem.prop("disabled", false)
            }, 1500)
        }
    };
    this.updateAddressFields = function() {
        var lookupPostcodeVal = self.lookupPostcodeElem.val();
        if (lookupPostcodeVal !== "") {
            $(self.lookupOpts.Postcode).val(lookupPostcodeVal)
        }
        var registerAddressFields = $(self.lookupOpts.AddressFields);
        registerAddressFields.each(function() {
            var thisElem = $(this);
            thisElem.blur();
            thisElem.prop("disabled", false);
            if ($.validator) {
                thisElem.find("input,select").each(function() {
                    if (this.value) {
                        $(this).valid()
                    }
                })
            }
        });
        if (self.lookupOpts.OnPostcodeFindSuccess.ShowHiddenAddressFields) {
            self.postcodeElem.removeClass("dont-submit").parents(".form-group").removeClass("hide");
            registerAddressFields.removeClass("hide")
        }
        if (self.lookupOpts.OnPostcodeFindSuccess.HideLookupPostcode) {
            $(self.lookupOpts.OnPostcodeFindSuccess.lookupPostcodeContainer).remove()
        }
    };
    this.resetForm = function() {
        if (!$(self.lookupOpts.OnPostcodeFindSuccess.lookupPostcodeContainer).length) {
            $(self.lookupOpts.AddressFields).addClass("hide").before(postcodeLookupForm)
        }
        self.setOptions();
        self.addBindings();
        self.lookupPostcodeElem.val($("#regPostcode").val())
    }
}).apply(wlzeus.postcodeLookup);
var wlzeus = wlzeus || {};
wlzeus.balancesWithRingFencedBonuses = function() {
    "use strict";
    return {
        init: function(widgetOptions) {
            this.options = widgetOptions;
            this.cacheSelectors();
            this.addBindings();
            this.createWalletsList();
            wlzeus.balanceData.getBalances()
        },
        cacheSelectors: function() {
            this.template = {
                wallet: _.template($(this.options.selectors.walletTemplate).html())
            };
            this.$el = {
                widgetContainer: $(this.options.selectors.widgetContainer),
                allBalanceWidgets: $(".js-balance-widget"),
                walletsContainer: $(this.options.selectors.walletsContainer),
                ringFencedWalletsContainer: $(this.options.selectors.ringFencedWalletsContainer)
            };
            this.$el.hideBalanceToggle = this.$el.widgetContainer.find(".js-hide-balance-toggle")
        },
        addBindings: function() {
            var _this = this;
            this.$el.widgetContainer.find(".balance-dropdown-trigger").on("click", function() {
                $(this).closest(".balance-dropdown").toggleClass("drop-active")
            });
            this.$el.widgetContainer.find(".balance-refresh").on("click", function() {
                wlzeus.balanceData.getBalances()
            });
            this.$el.hideBalanceToggle.on("click", function() {
                var isBalanceHidden = $(this).prop("checked");
                _this.$el.allBalanceWidgets.find(".js-hide-balance-toggle").prop("checked", isBalanceHidden);
                _this.$el.allBalanceWidgets.toggleClass("hidden-balance")
            });
            $(document).on("balanceLoaded", function() {
                _this.createRingFencedBonuses()
            })
        },
        createWalletsList: function() {
            var wallets = "";
            var defaultBalances = this.options.defaultBalances;
            this.defaultEnabledBalances = JSON.parse(this.options.defaultEnabledBalances);
            var defaultEnabledBalancesLength = this.defaultEnabledBalances.length;
            for (var i = 0; i < defaultEnabledBalancesLength; i++) {
                var balanceType = this.defaultEnabledBalances[i];
                if (defaultBalances[balanceType]) {
                    var walletData = balanceType == "DefaultCash" ? "cash" : balanceType.toLowerCase();
                    wallets += this.template.wallet({
                        walletClass: balanceType.toLowerCase(),
                        walletLabel: defaultBalances[balanceType],
                        walletData: walletData,
                        balanceValue: "-"
                    })
                }
            }
            this.$el.walletsContainer.append(wallets)
        },
        createRingFencedBonuses: function() {
            var balances = wlzeus.balanceData.list;
            var balancesLength = balances.length;
            var ringFencedWallets = "";
            for (var i = 0; i < balancesLength; i++) {
                var balance = balances[i];
                if (!this.options.defaultBalances.hasOwnProperty(balance.BalanceName.replace(/\s+/g, ""))) {
                    var balanceLabel = balance.BalanceName.toLowerCase().replace(/\s+/g, "");
                    ringFencedWallets += this.template.wallet({
                        walletClass: balanceLabel,
                        walletLabel: balance.BalanceName,
                        walletData: balanceLabel,
                        balanceValue: balance.Value
                    })
                }
            }
            this.$el.ringFencedWalletsContainer.html(ringFencedWallets)
        }
    }
};
"use strict";
var wlzeus = wlzeus || {};
wlzeus.banking = wlzeus.banking || {};
wlzeus.banking.cashierWithdraw = function() {
    return {
        init: function(options) {
            this.opts = options || {};
            this.cacheSelectors();
            this.addBindings();
            zeus.utilities.form.setup(this.selectors.cashierWithdrawForm, {
                rules: {
                    "vm.Amount": {
                        required: true,
                        currency: true
                    }
                },
                messages: {
                    "vm.Amount": {
                        tooltip: siteConfig.validation.withdrawAmount.tooltip,
                        required: siteConfig.validation.withdrawAmount.required,
                        currency: siteConfig.validation.withdrawAmount.currency
                    },
                    "vm.Password": {
                        tooltip: siteConfig.validation.password.tooltip,
                        required: siteConfig.validation.password.required
                    }
                }
            })
        },
        cacheSelectors: function() {
            this.templates = {
                alertTemplate: _.template($("#alert_template").html())
            };
            this.selectors = {
                withdrawalCotentHeader: "#withdrawalCotentHeader",
                cashierWithdrawForm: "#cashierWithdrawForm",
                withdrawalAmount: "#withdrawalAmount",
                withdrawFormSubmitBtn: "#withdrawFormSubmitBtn",
                withdrawalMethod: "#withdrawalMethod",
                withdrawIframe: "#cashierwithdrawIframe",
                withdrawAmountInput: "#withdrawAmountInput",
                predefinedAmounts: ".js-cashier-predefined-amount",
                withdrawSteps: ".js-withdraw-step",
                backBtn: ".js-cashier-back-btn"
            };
            this.$el = {
                withdrawalCotentHeader: $("#withdrawalCotentHeader"),
                cashierWithdrawForm: $("#cashierWithdrawForm"),
                withdrawalAmount: $("#withdrawalAmount"),
                withdrawFormSubmitBtn: $("#withdrawFormSubmitBtn"),
                withdrawalMethod: $("#withdrawalMethod"),
                withdrawIframe: $("#cashierwithdrawIframe"),
                withdrawAmountInput: $("#withdrawAmountInput"),
                predefinedAmounts: $(".js-cashier-predefined-amount"),
                withdrawSteps: $(".js-withdraw-step"),
                backBtn: $(".js-cashier-back-btn")
            };
            this.withdrawMethodHtml = this.$el.withdrawalMethod.html();
            this.passwordErrorMessage = this.opts.configuredPasswordInvalidMessage
        },
        addBindings: function() {
            var _this = this;
            this.$el.backBtn.on("click", function() {
                if (_this.$el.withdrawalAmount.hasClass("hide")) {
                    _this.resetIframe()
                }
            });
            this.$el.withdrawAmountInput.on("keyup", function() {
                if (this.value) {
                    _this.$el.withdrawFormSubmitBtn.prop("disabled", false)
                } else {
                    _this.$el.withdrawFormSubmitBtn.prop("disabled", "disabled")
                }
            });
            this.$el.withdrawAmountInput.on("change", function() {
                this.value = parseFloat(this.value).toFixed(2)
            });
            this.$el.cashierWithdrawForm.on("submit", function(e) {
                e.preventDefault();
                if (_this.$el.cashierWithdrawForm.valid() && !_this.$el.cashierWithdrawForm.hasClass("loading")) {
                    _this.$el.cashierWithdrawForm.addClass("loading");
                    $.ajax({
                        type: "GET",
                        url: "/api/PromotionsHistory?pageNumber=1&itemsPerPage=1&promoStatuses=Active&promoStatuses=PartQualified",
                        dataType: "json",
                        timeout: 2e4,
                        success: function(data) {
                            if (data.TotalItems > 0) {
                                bootbox.confirm({
                                    message: "Are you sure you want to process this withdrawal?<br> Any active bonus balances will be forfeited as a result.",
                                    buttons: {
                                        cancel: {
                                            label: "Cancel"
                                        },
                                        confirm: {
                                            label: "Continue"
                                        }
                                    },
                                    callback: function(result) {
                                        if (result) {
                                            _this.submitWithdrawal()
                                        } else {
                                            _this.$el.cashierWithdrawForm.removeClass("loading")
                                        }
                                    }
                                })
                            } else {
                                _this.submitWithdrawal()
                            }
                        },
                        error: function() {
                            bootbox.confirm({
                                message: "Are you sure you want to process this withdrawal?<br> Any active bonus balances will be forfeited as a result.",
                                buttons: {
                                    cancel: {
                                        label: "Cancel"
                                    },
                                    confirm: {
                                        label: "Continue"
                                    }
                                },
                                callback: function(result) {
                                    if (result) {
                                        _this.submitWithdrawal()
                                    } else {
                                        _this.$el.cashierWithdrawForm.removeClass("loading")
                                    }
                                }
                            })
                        }
                    })
                }
            })
        },
        submitWithdrawal: function() {
            var _this = this;
            this.$el.withdrawalAmount.find(".alert").find(".close").click();
            var serializedForm = this.$el.cashierWithdrawForm.serialize();
            var csrf = document.querySelector('meta[name="csrf-token"]');
            var csrfToken = csrf ? csrf.getAttribute("content") : "";
            $.ajax({
                type: "POST",
                url: "/api/Bede.GRMS.Orchard.CasinoToolkit/CashierWithdrawalWidget",
                data: serializedForm,
                timeout: 12e5,
                tryCount: 0,
                retryLimit: 1,
                dataType: "json",
                headers: {
                    "X-CSRF-Token": csrfToken
                }
            }).done(function(data) {
                if (data.IFrameUrl) {
                    _this.loadPaymentMethod(data.IFrameUrl, _this)
                } else {
                    _this.showError(data.responseJSON)
                }
            }).fail(function(data) {
                _this.showError(data.responseJSON)
            })
        },
        loadPaymentMethod: function(url, context) {
            var _this = context;
            _this.$el.withdrawIframe = $(_this.selectors.withdrawIframe);
            _this.$el.withdrawIframe.width(390);
            _this.$el.withdrawIframe.attr("src", url);
            _this.$el.withdrawIframe.load(function() {
                if (_this.$el.withdrawalMethod.hasClass("hide")) {
                    _this.toggleWithdrawalProgress()
                }
            });
            $(window).on("message", function(e) {
                if (e.originalEvent.data === "change_amount") {
                    _this.resetIframe()
                } else if (e.originalEvent.data === '"success"' || e.originalEvent.data === "done") {
                    $(document).trigger("updateBalances");
                    window.location.href = "/"
                } else {
                    const data = JSON.parse(e.originalEvent.data);
                    if (data.action && data.action === "resizeHeight") _this.$el.withdrawIframe.height(data.payload + "px")
                }
            })
        },
        resetIframe: function() {
            $(window).off("message");
            this.toggleWithdrawalProgress();
            this.$el.withdrawIframe.remove();
            this.$el.withdrawalMethod.html(this.withdrawMethodHtml)
        },
        toggleWithdrawalProgress: function() {
            this.$el.cashierWithdrawForm.removeClass("loading");
            this.$el.withdrawSteps.toggleClass("selected");
            this.$el.backBtn.toggleClass("hide");
            this.$el.withdrawalAmount.toggleClass("hide");
            this.$el.withdrawalMethod.toggleClass("hide")
        },
        showError: function(data) {
            var errors = data.Errors;
            var errorsLength = errors.length;
            this.$el.cashierWithdrawForm.removeClass("loading");
            for (var i = 0; i < errorsLength; i++) {
                var errorMessage = errors[i].Key === "UserValidation" ? this.passwordErrorMessage : errors[i].Message;
                this.$el.withdrawalAmount.prepend(this.templates.alertTemplate({
                    alertMessage: errorMessage || errors[i]
                }))
            }
        }
    }
};
"use strict";
var zeus = zeus || {};
(function(root) {
    root.FinanceLimitsPrompt = function(options) {
        this.initialize = function() {
            this.options = options;
            this.cacheSelectors();
            this.addBindings()
        };
        this.cacheSelectors = function() {
            this.$el = {
                container: $("#financeLimitPrompt")
            };
            this.$el.financeLimitsForm = this.$el.container.find("#flp-form");
            this.$el.setLimitsRadio = this.$el.container.find(".js-flp-setLimits");
            this.$el.continueBtn = this.$el.container.find(".js-flp-continue")
        };
        this.addBindings = function() {
            var _this = this;
            this.$el.continueBtn.off("click").on("click", function(e) {
                e.preventDefault();
                if (_this.$el.financeLimitsForm.valid()) {
                    var setLimits = _this.$el.setLimitsRadio.find('input:radio[name="flp-setLimits"]:checked').val();
                    _this.submitForm(setLimits)
                }
            });
            $(document).on("widget:registration:complete", function() {
                $(document).trigger("widget:registration:hide");
                if (_this.$el.container.closest(".modal").length) {
                    $(document).on("lbClose", function() {
                        _this.submitForm("no")
                    })
                }
                _this.showPrompt()
            })
        };
        this.showPrompt = function() {
            $("#financeLimitPrompt").show();
            document.getElementById("financeLimitPrompt").scrollIntoView();
            this.$el.financeLimitsForm.validate({
                rules: {
                    "flp-setLimits": {
                        required: true
                    }
                },
                messages: {
                    "flp-setLimits": "Please select an anwser to continue"
                },
                errorPlacement: function(error, element) {
                    error.appendTo(element.parents(".form-group"))
                }
            })
        };
        this.submitForm = function(setLimits) {
            var nextActionUrl = setLimits === "yes" ? this.options.nextAction.yes : this.options.nextAction.no;
            if (setLimits === "yes") {
                window.location.href = nextActionUrl
            } else {
                if (window.promotionReturnURL) {
                    window.location.href = window.promotionReturnURL
                } else {
                    window.location.href = nextActionUrl
                }
            }
        };
        this.initialize()
    };
    return root
})(zeus);
(function() {
    var j = false;
    window.JQClass = function() {};
    JQClass.classes = {};
    JQClass.extend = function extender(f) {
        var g = this.prototype;
        j = true;
        var h = new this;
        j = false;
        for (var i in f) {
            h[i] = typeof f[i] == "function" && typeof g[i] == "function" ? function(d, e) {
                return function() {
                    var b = this._super;
                    this._super = function(a) {
                        return g[d].apply(this, a)
                    };
                    var c = e.apply(this, arguments);
                    this._super = b;
                    return c
                }
            }(i, f[i]) : f[i]
        }

        function JQClass() {
            if (!j && this._init) {
                this._init.apply(this, arguments)
            }
        }
        JQClass.prototype = h;
        JQClass.prototype.constructor = JQClass;
        JQClass.extend = extender;
        return JQClass
    }
})();
(function($) {
    JQClass.classes.JQPlugin = JQClass.extend({
        name: "plugin",
        defaultOptions: {},
        regionalOptions: {},
        _getters: [],
        _getMarker: function() {
            return "is-" + this.name
        },
        _init: function() {
            $.extend(this.defaultOptions, this.regionalOptions && this.regionalOptions[""] || {});
            var c = camelCase(this.name);
            $[c] = this;
            $.fn[c] = function(a) {
                var b = Array.prototype.slice.call(arguments, 1);
                if ($[c]._isNotChained(a, b)) {
                    return $[c][a].apply($[c], [this[0]].concat(b))
                }
                return this.each(function() {
                    if (typeof a === "string") {
                        if (a[0] === "_" || !$[c][a]) {
                            throw "Unknown method: " + a
                        }
                        $[c][a].apply($[c], [this].concat(b))
                    } else {
                        $[c]._attach(this, a)
                    }
                })
            }
        },
        setDefaults: function(a) {
            $.extend(this.defaultOptions, a || {})
        },
        _isNotChained: function(a, b) {
            if (a === "option" && (b.length === 0 || b.length === 1 && typeof b[0] === "string")) {
                return true
            }
            return $.inArray(a, this._getters) > -1
        },
        _attach: function(a, b) {
            a = $(a);
            if (a.hasClass(this._getMarker())) {
                return
            }
            a.addClass(this._getMarker());
            b = $.extend({}, this.defaultOptions, this._getMetadata(a), b || {});
            var c = $.extend({
                name: this.name,
                elem: a,
                options: b
            }, this._instSettings(a, b));
            a.data(this.name, c);
            this._postAttach(a, c);
            this.option(a, b)
        },
        _instSettings: function(a, b) {
            return {}
        },
        _postAttach: function(a, b) {},
        _getMetadata: function(d) {
            try {
                var f = d.data(this.name.toLowerCase()) || "";
                f = f.replace(/'/g, '"');
                f = f.replace(/([a-zA-Z0-9]+):/g, function(a, b, i) {
                    var c = f.substring(0, i).match(/"/g);
                    return !c || c.length % 2 === 0 ? '"' + b + '":' : b + ":"
                });
                f = $.parseJSON("{" + f + "}");
                for (var g in f) {
                    var h = f[g];
                    if (typeof h === "string" && h.match(/^new Date\((.*)\)$/)) {
                        f[g] = eval(h)
                    }
                }
                return f
            } catch (e) {
                return {}
            }
        },
        _getInst: function(a) {
            return $(a).data(this.name) || {}
        },
        option: function(a, b, c) {
            a = $(a);
            var d = a.data(this.name);
            if (!b || typeof b === "string" && c == null) {
                var e = (d || {}).options;
                return e && b ? e[b] : e
            }
            if (!a.hasClass(this._getMarker())) {
                return
            }
            var e = b || {};
            if (typeof b === "string") {
                e = {};
                e[b] = c
            }
            this._optionsChanged(a, d, e);
            $.extend(d.options, e)
        },
        _optionsChanged: function(a, b, c) {},
        destroy: function(a) {
            a = $(a);
            if (!a.hasClass(this._getMarker())) {
                return
            }
            this._preDestroy(a, this._getInst(a));
            a.removeData(this.name).removeClass(this._getMarker())
        },
        _preDestroy: function(a, b) {}
    });

    function camelCase(c) {
        return c.replace(/-([a-z])/g, function(a, b) {
            return b.toUpperCase()
        })
    }
    $.JQPlugin = {
        createPlugin: function(a, b) {
            if (typeof a === "object") {
                b = a;
                a = "JQPlugin"
            }
            a = camelCase(a);
            var c = camelCase(b.name);
            JQClass.classes[c] = JQClass.classes[a].extend(b);
            new JQClass.classes[c]
        }
    }
})(jQuery);
var zeus = zeus || {};
zeus.slots = {};
(function() {
    "use strict";
    var _this = this;
    var PLAYER_TOKEN = null;
    var PLAYER_ID = null;
    var gameType;
    var gameName = "Login";
    var link;
    var clickedElem;
    var gameSoftwareId;
    var language;
    var country;
    var currencyCode;
    var tableId;
    var siteRoot = window.location.protocol + "//" + window.location.host + "/";
    var errorMsg;
    var errorMsgToken;
    var isAuthenticated;
    var gameLaunchElement;
    var technology;
    this.init = function(slotVariables) {
        _this.siteCode = slotVariables.siteCode || 0;
        _this.loadGame = slotVariables.loadGame !== "" ? slotVariables.loadGame : ".load-game";
        _this.demoClass = slotVariables.demoClass !== "" ? slotVariables.demoClass : "btn-demo";
        errorMsg = slotVariables.errorMsg;
        errorMsgToken = slotVariables.errorMsgToken;
        isAuthenticated = slotVariables.isAuthenticated;
        _this.addBindings()
    };
    this.addBindings = function() {
        _this.bodyElem = $("body");
        _this.bodyElem.on("click", _this.loadGame, function(e) {
            technology = $(e.target).attr("data-technology") || "Flash";
            if (!isAuthenticated) {
                $(document).trigger("popup:login:open", [{
                    loginForm: "slots"
                }]);
                gameLaunchElement = this
            } else {
                _this.launchSlotsContainer(this)
            }
        });
        $(document).on("widget:login:loginSuccessful", function(e, loginForm) {
            if (loginForm === "slots") {
                _this.launchSlotsContainer(gameLaunchElement)
            }
        })
    };
    this.getTokenAndId = function(callback) {
        if (PLAYER_TOKEN !== null && PLAYER_ID !== null) {
            callback(false, {
                playerToken: PLAYER_TOKEN,
                playerId: PLAYER_ID
            })
        } else {
            $.get(siteRoot + "api/Lobby/PlayerToken").success(function(m) {
                if (m !== null) {
                    if (m.GameToken !== "undefined" && m.UserId !== "undefined") {
                        callback(false, {
                            playerToken: m.GameToken,
                            playerId: m.UserId
                        })
                    } else {
                        callback(true, "userToken")
                    }
                } else if (gameType === "demo") {
                    callback(false, {
                        playerToken: "NULL",
                        playerId: "PLAYER01"
                    })
                } else {
                    callback(true, "userToken")
                }
            }).fail(function() {
                callback(true, "")
            })
        }
    };
    this.launchSlotsContainer = function(thisElem) {
        clickedElem = $(thisElem);
        link = clickedElem.data("gameurl");
        gameSoftwareId = clickedElem.data("softwareid");
        gameName = clickedElem.data("gamename");
        language = clickedElem.data("language");
        country = clickedElem.data("country");
        currencyCode = clickedElem.data("currencycode");
        tableId = clickedElem.data("tableid");
        if (clickedElem.hasClass(_this.demoClass)) {
            gameType = "demo"
        } else {
            gameType = "game"
        }
        _this.getTokenAndId(function(err, data) {
            if (err) {
                _this.error(data)
            } else {
                _this.launchSlot(data)
            }
        })
    };
    this.getGMSLaunchURl = function(player, callback) {
        var csrf = document.querySelector('meta[name="csrf-token"]');
        var csrfToken = csrf ? csrf.getAttribute("content") : "";
        $.ajax({
            url: "/gamelaunch/v1/games/" + gameSoftwareId.toString() + "/launch",
            type: "post",
            contentType: "application/json",
            data: JSON.stringify(player),
            headers: {
                "X-Correlation-Token": window.uuid.v4(),
                "X-Site-Code": _this.siteCode || 0,
                "X-CSRF-Token": csrfToken
            },
            success: function(data) {
                callback(null, data)
            },
            error: function(xhr, ajaxOptions, thrownError) {
                callback(true, thrownError)
            }
        })
    };
    this.setSlotSource = function(url) {
        wlzeus.gameLaunch.handler(url, function(redirect) {
            var left = $(window).width() / 2 - 1200 / 2;
            var top = $(window).height() / 2 - 900 / 2;
            window.open(redirect, gameName, "width=1100, height=900, top=" + top + ", left=" + left)
        })
    };
    this.launchSlot = function(player) {
        if (link === "gms") {
            player = {
                PlayerId: player.playerId,
                PlayerToken: gameType === "demo" ? "demotoken" : player.playerToken,
                Currency: "GBP",
                Channel: "desktop",
                Language: "EN",
                AutoLaunch: false,
                IsDemo: gameType === "demo" ? true : false,
                SourceUrl: "",
                SourceArea: "",
                TableId: tableId,
                Technology: technology || "Flash"
            };
            _this.getGMSLaunchURl(player, function(err, data) {
                if (err) {
                    return _this.error()
                }
                link = data.launchUrl;
                _this.setPlayerData({
                    id: player.PlayerId,
                    token: player.PlayerToken
                });
                _this.setSlotSource(link)
            })
        } else {
            link = link.replace("{PLAYER_TOKEN}", player.playerToken).replace("{PLAYER_ID}", player.playerId).replace("{SOFTWARE_ID}", gameSoftwareId).replace("{LANGUAGE}", language).replace("{COUNTRY}", country).replace("{CURRENCY_CODE}", currencyCode);
            _this.setPlayerData({
                id: player.playerId,
                token: player.playerToken
            });
            _this.setSlotSource(link)
        }
        $(document).trigger("widget:login:continue")
    };
    this.setPlayerData = function(player) {
        var playerData = {
            siteCode: _this.siteCode,
            playerId: player.id,
            token: player.token
        };
        localStorage.setItem("player", JSON.stringify(playerData))
    };
    this.error = function(type) {
        if (type === "userToken") {
            link = link.replace("{SOFTWARE_ID}", gameSoftwareId).replace("{LANGUAGE}", language).replace("{COUNTRY}", country).replace("{CURRENCY_CODE}", currencyCode);
            var loginUrl = siteRoot + "gameslogin?gametype=" + gameType + "&tableid=" + tableId + "&gamesoftwareid=" + gameSoftwareId + "&gameurl=" + link;
            _this.setSlotSource(loginUrl)
        } else {
            window.alert(errorMsg)
        }
    }
}).apply(zeus.slots);
var zeus = zeus || {};
zeus.asyncSlots = {};
(function() {
    "use strict";
    var self = this;
    var countryCode = "";
    self.inGame = false;
    this.init = function(slotsArea, sideGameInfoBaseURL, categoryAreaPartID, slotsContainer, inGame, tabHeaderArea, isMobile) {
        self.slotsArea = slotsArea;
        self.sideGameInfoBaseURL = sideGameInfoBaseURL;
        self.categoryAreaPartID = categoryAreaPartID;
        self.slotsContainer = slotsContainer;
        self.inGame = inGame;
        self.tabHeaderArea = tabHeaderArea;
        if (isMobile !== "" || isMobile !== undefined) {
            self.isMobile = true
        } else {
            self.isMobile = false
        }
        countryCode = $("#countryCode").val();
        self.cacheSelectors();
        self.addBindings();
        self.setupTemplates()
    };
    this.cacheSelectors = function() {
        self.slotsAreaElem = $(self.slotsArea);
        self.tabHeaderAreaElem = $(self.tabHeaderArea);
        self.slotsContainerElem = $(self.slotsContainer)
    };
    this.getCategoryFromElem = function(categoryElem) {
        if (_.isUndefined(categoryElem)) {
            categoryElem = self.tabHeaderAreaElem.find("li:first")
        }
        var categoryInfo = self.getCategoryInfo(categoryElem);
        self.setupCategory(categoryInfo[0], categoryInfo[1])
    };
    this.getCategoryInfo = function(categoryElem) {
        var elemCategoryID = categoryElem.data("categoryid");
        var elemCategoryName = categoryElem.data("categoryname");
        var elemCategoryIsMobile = categoryElem.data("categoryismobile");
        return [elemCategoryID, elemCategoryName, elemCategoryIsMobile]
    };
    this.addBindings = function() {
        $("body").on("click", "#reload", function(e) {
            e.preventDefault();
            self.getCategoryFromElem()
        });
        if (self.inGame) {
            $(document).off("click", "li.slot-tab-header").on("click", "li.slot-tab-header", function(e) {
                e.preventDefault();
                self.slotsAreaElem.addClass("category-loading");
                self.getCategoryFromElem($(this))
            })
        }
        $(document).on("room-switched", function() {
            self.addBindings()
        })
    };
    this.setupTemplates = function() {
        var categoryContainerTemplate = $("#categoryContainerTemplate");
        if (categoryContainerTemplate.length) {
            self.categoryContainerTemplate = _.template(categoryContainerTemplate.html())
        }
        self.gameTemplate = _.template($("#singleGameTemplate").html())
    };
    this.setupCategory = function(catId, catName) {
        if (catName !== "" && catName !== undefined) {
            catName = catName.replace(" ", "-").toLowerCase()
        }
        if (self.inGame) {
            if (!$(self.categoryAreaPartID + catName).find("li").length) {
                self.slotsContainerElem.fadeIn(500);
                self.getSlots(catId, catName)
            } else {
                self.slotsAreaElem.removeClass("category-loading")
            }
        } else {
            if (!$(self.categoryAreaPartID + catId).length) {
                var categoryGamesContainer = "";
                categoryGamesContainer += self.categoryContainerTemplate({
                    categoryId: catId,
                    categoryName: catName
                });
                self.slotsContainerElem.prepend(categoryGamesContainer).fadeIn(500);
                self.getSlots(catId, catName)
            } else {
                self.slotsAreaElem.removeClass("category-loading")
            }
        }
    };
    this.getSlots = function(catId, catName) {
        var siteRoot = $("*[data-siteroot]").data("siteroot");
        self.slotsLoadingMessageArea = $(self.slotsArea + " #slotsLoadingArea");
        self.slotsLoadingMessageArea.show();
        $.get(siteRoot + "api/Lobby/SideGameData?categoryid=" + catId).success(function(m) {
            if (m !== null && m !== undefined && m.Games !== null && m.Games !== undefined) {
                self.slotsContainerElem.fadeOut(500, function() {
                    self.listOfGames = m.Games;
                    self.loadGames(catName, catId);
                    self.tabHeaderAreaElem.removeClass("hide");
                    self.slotsAreaElem.removeClass("slots-loading").removeClass("category-loading");
                    self.slotsLoadingMessageArea.hide();
                    $(document).trigger("AsyncSlotsLoaded", m)
                })
            } else {
                self.error()
            }
        }).fail(function() {
            self.error()
        })
    };
    this.error = function() {
        self.slotsLoadingMessageArea.fadeOut(500, function() {
            $(this).html('Sorry, there was an issue loading the slot games, <a id="reload" href="#">click here to refresh</a>').fadeIn()
        })
    };
    this.loadGames = function(catName, catId) {
        var gamesList = "";
        var playUrl;
        var demoUrl;
        var sideGameUrl;
        var userAuthenticated;
        var slotDisplayClass = "display-center";
        if (typeof zeus !== "undefined") {
            userAuthenticated = zeus.core.isAuthenticated
        } else {
            userAuthenticated = $("html").hasClass("authenticated")
        }
        _.each(self.listOfGames, function(game) {
            playUrl = "";
            demoUrl = "";
            sideGameUrl = "";
            if (game !== null && game.IsPublished) {
                if (game.GameUrl !== null) {
                    playUrl = self.updateURL(game, game.GameUrl)
                }
                if (game.DemoUrl !== null) {
                    demoUrl = self.updateURL(game, game.DemoUrl)
                }
                if (self.sideGameInfoBaseURL !== "" && self.sideGameInfoBaseURL !== undefined) {
                    var rebuiltSideGameURL = self.sideGameInfoBaseURL.substring(0, self.sideGameInfoBaseURL.length - 1);
                    sideGameUrl = rebuiltSideGameURL + "" + game.Id
                }
                var gameNameAttr = game.Name.replace(/\s+/g, "-").toLowerCase();
                gamesList += self.gameTemplate({
                    gameName: game.Name,
                    gameID: game.Id,
                    gameIsEmbedded: game.IsEmbedded,
                    gameThumb: game.ThumbnailUrl,
                    gameBgUrl: game.BackgroundUrl,
                    gameShortDescription: game.ShortDescription,
                    gameWidth: game.Width,
                    gameHeight: game.Height,
                    gameInfoUrl: sideGameUrl,
                    gamePlayUrl: game.UseGmsForLaunch ? "gms" : playUrl,
                    gameDemoUrl: game.UseGmsForLaunch ? "gms" : demoUrl,
                    isAuthenticated: userAuthenticated,
                    categoryName: catName,
                    categoryId: catId,
                    displayClass: slotDisplayClass,
                    gameNameAttr: gameNameAttr,
                    gameMessage: game.GameMessage,
                    gameUseGmsForLaunch: game.UseGmsForLaunch,
                    gameSoftwareId: game.SoftwareId,
                    gameTechnology: game.Technology
                });
                if (self.isMobile) {
                    if (slotDisplayClass === "display-center") {
                        slotDisplayClass = "display-right"
                    } else if (slotDisplayClass === "display-right") {
                        slotDisplayClass = "off-right"
                    }
                }
            }
        });
        var appendTo = "";
        if (self.inGame) {
            appendTo = self.categoryAreaPartID + catName
        } else {
            appendTo = self.categoryAreaPartID + catId
        }
        $(appendTo).find("ul").append(gamesList);
        self.slotsContainerElem.fadeIn(500)
    };
    this.updateURL = function(game, url) {
        if (game.Language !== null) {
            url = url.replace("{LANGUAGE}", game.Language)
        }
        if (game.CurrencyCode !== null) {
            url = url.replace("{CURRENCY_CODE}", game.CurrencyCode)
        }
        if (game.SoftwareId !== null) {
            url = url.replace("{SOFTWARE_ID}", game.SoftwareId)
        }
        if (countryCode !== null || countryCode !== "") {
            url = url.replace("{COUNTRY}", countryCode)
        }
        return url
    };
    this.initUISlotsTabs = function(selector) {
        $(selector).tabs({
            fx: {
                opacity: "toggle"
            },
            show: function(event, ui) {
                var parentElem = $(ui.tab).parent();
                var catId = parentElem.data("categoryid");
                var catName = parentElem.data("categoryname");
                if (typeof zeus !== "undefined" && zeus.asyncSlots && zeus.asyncSlots.setupCategory) {
                    zeus.asyncSlots.slotsAreaElem.addClass("category-loading");
                    zeus.asyncSlots.setupCategory(catId, catName)
                }
            }
        })
    };
    this.initBootstrapTabs = function() {
        $('.tab-trigger a[data-toggle="tab"]').on("click", function(e) {
            e.preventDefault();
            var tab = $(this).parent();
            self.loadTab(tab)
        });
        var tabSelectorElem = $(self.tabHeaderArea + " li:first a");
        self.loadTab(tabSelectorElem.parent());
        tabSelectorElem.tab("show");
        var catContainerId = tabSelectorElem.attr("href");
        $(catContainerId).addClass("fade in")
    };
    this.loadTab = function(tab) {
        var catId = tab.data("categoryid");
        var catName = tab.data("categoryname");
        zeus.asyncSlots.slotsAreaElem.addClass("category-loading");
        zeus.asyncSlots.setupCategory(catId, catName)
    }
}).apply(zeus.asyncSlots);
var zeus = zeus || {};
zeus.dynamicLobby = zeus.dynamicLobby || {};
(function() {
    "use strict";
    var self = this;
    var nextGameChannelArray = [];
    var gameSummaryChannelArray = [];
    var gamePlayerBase = {};
    var tVars;
    var pNub;
    var gracePeriod = 30;
    var currencyCode = "GBP";
    var gameStartedClass = "now-playing";
    var gameStartedText = "Now playing";
    var channelPrefixSummary = "Dev.Bede.Lobby.GameSummary.";
    var channelPrefixNextGame = "Dev.Bede.Lobby.NextGame.";
    var dynamicClassGameSummary = ".dynamic-game-summary";
    var dynamicClassPlayerCount = ".dynamic-player-count";
    var dynamicClassPrizePool = ".dynamic-prize-pool";
    var dynamicClassStartTime = ".dynamic-start-time";
    var dynamicClassTicketPrice = ".dynamic-ticket-price";
    var countdownLayout = '{d<}<span class="days">{dn}d</span>{d>} {h<}<span class="hrs">{hn}h</span>{h>} <span class="mins">{mn}</span><span class="secs">:{snn}</span>';
    var countdownFormat = "dhMs";
    this.init = function(tVarDynamic) {
        tVars = tVarDynamic;
        self.setVars()
    };
    this.setVars = function() {
        gracePeriod = zeus.utilities.tVar(tVars, "GracePeriod") || gracePeriod;
        currencyCode = zeus.utilities.tVar(tVars, "currencyCode") || currencyCode;
        gameStartedClass = zeus.utilities.tVar(tVars, "inplay", "class") || gameStartedClass;
        gameStartedText = zeus.utilities.tVar(tVars, "inplay", "text") || gameStartedText;
        channelPrefixSummary = zeus.utilities.tVar(tVars, "pubnubLobby", "gamesummarychannelprefix") || channelPrefixSummary;
        channelPrefixNextGame = zeus.utilities.tVar(tVars, "pubnubLobby", "nextgamechannelprefix") || channelPrefixNextGame;
        dynamicClassGameSummary = zeus.utilities.tVar(tVars, "dynamicclass", "gamesummary") || dynamicClassGameSummary;
        dynamicClassPlayerCount = zeus.utilities.tVar(tVars, "dynamicclass", "playercount") || dynamicClassPlayerCount;
        dynamicClassPrizePool = zeus.utilities.tVar(tVars, "dynamicclass", "prizepool") || dynamicClassPrizePool;
        dynamicClassStartTime = zeus.utilities.tVar(tVars, "dynamicclass", "starttime") || dynamicClassStartTime;
        dynamicClassTicketPrice = zeus.utilities.tVar(tVars, "dynamicclass", "ticketprice") || dynamicClassTicketPrice;
        countdownLayout = zeus.utilities.tVar(tVars, "countdown", "layout") || countdownLayout;
        countdownFormat = zeus.utilities.tVar(tVars, "countdown", "format") || countdownFormat
    };
    this.pubnubInit = function() {
        pNub = PUBNUB.init({
            noleave: true,
            publish_key: zeus.utilities.tVar(tVars, "pubnubLobby", "pubkey"),
            subscribe_key: zeus.utilities.tVar(tVars, "pubnubLobby", "subkey"),
            ssl: window.location.protocol === "https:"
        });
        self.pubnubSetupSubscriptions()
    };
    this.pubnubSetupSubscriptions = function() {
        $(dynamicClassGameSummary).each(function() {
            var thisElement = $(this);
            var gameId = thisElement.data("gameid");
            var gameSummaryChannelName = channelPrefixSummary + gameId;
            gameSummaryChannelArray.push(gameSummaryChannelName);
            var nextGameChannelName = channelPrefixNextGame + gameId;
            nextGameChannelArray.push(nextGameChannelName);
            gamePlayerBase[gameId] = thisElement.find(dynamicClassPlayerCount).html()
        });
        this.pubnubSubscribe(gameSummaryChannelArray, nextGameChannelArray)
    };
    this.pubnubRefresh = function() {
        self.pubnubUnsubscribe();
        gameSummaryChannelArray = [];
        nextGameChannelArray = [];
        self.pubnubSetupSubscriptions()
    };
    this.pubnubSubscribe = function(summaryArray, nextArray) {
        pNub.subscribe({
            channel: [summaryArray, nextArray],
            message: self.pubnubReceiver
        })
    };
    this.pubnubUnsubscribe = function() {
        pNub.unsubscribe({
            channel: [gameSummaryChannelArray, nextGameChannelArray]
        })
    };
    this.pubnubReceiver = function(m, envelope, channel) {
        var receiverGameId = channel.split(".")[4];
        var gameElements = $(dynamicClassGameSummary + '[data-gameid="' + receiverGameId + '"]');
        var startsin = gameElements.find(dynamicClassStartTime);
        var prizePool = gameElements.find(dynamicClassPrizePool);
        var playerCount = gameElements.find(dynamicClassPlayerCount);
        var playerCountBase = gamePlayerBase[receiverGameId] || 0;
        var playersWithTickets = m.PlayersWithTickets || 0;
        var playersInRoom = m.PlayersInRoom || 0;
        var playerCountNew = Math.max(playerCountBase, Math.max(playersInRoom, playersWithTickets));
        var configCode = m.RemoteId;
        if (channel.indexOf("GameSummary") >= 0) {
            playerCount.html(playerCountNew);
            prizePool.html(zeus.utilities.formatNumber(m.PrizeFund, currencyCode))
        } else if (channel.indexOf("NextGame") >= 0) {
            var thisNextGameChannel = channel;
            var thisGameSummaryChannel = thisNextGameChannel.replace("NextGame", "GameSummary");
            pNub.unsubscribe({
                channel: [thisGameSummaryChannel, thisNextGameChannel]
            });
            setTimeout(function() {
                var index = gameSummaryChannelArray.indexOf(thisGameSummaryChannel);
                if (index > -1) {
                    gameSummaryChannelArray.splice(index, 1)
                }
                index = nextGameChannelArray.indexOf(thisNextGameChannel);
                if (index > -1) {
                    nextGameChannelArray.splice(index, 1)
                }
                var secs = moment(m.StartTime).diff(moment(m.ServerTime), "seconds") - gracePeriod;
                startsin.attr("data-startsin", secs);
                $(document).trigger("lobbySort");
                self.applyCountdowns(gameElements);
                gameElements.find(dynamicClassTicketPrice).html(zeus.utilities.formatNumber(m.TicketPrice, currencyCode));
                playerCount.html(playersInRoom);
                prizePool.html(zeus.utilities.formatNumber(m.PrizeFund, currencyCode));
                gamePlayerBase[receiverGameId] = Math.max(playerCountBase, playersInRoom);
                gameElements.attr("data-gameid", configCode);
                $(document).trigger("GameStarted");
                var gameSummaryChannelName = channelPrefixSummary + configCode;
                var nextGameChannelName = channelPrefixNextGame + configCode;
                gameSummaryChannelArray.push(gameSummaryChannelName);
                nextGameChannelArray.push(nextGameChannelName);
                self.pubnubSubscribe(gameSummaryChannelName, nextGameChannelName)
            }, gracePeriod * 1e3)
        }
    };
    this.applyCountdowns = function(gameElements) {
        gameElements.find(dynamicClassStartTime).each(function() {
            var timeElement = $(this);
            var startsin = parseInt(timeElement.attr("data-startsin"));
            var difference = startsin + "s";
            if (startsin <= 1) {
                timeElement.text(gameStartedText);
                self.nowPlaying(timeElement);
                return
            }
            timeElement.countdown("destroy").countdown({
                expiryText: gameStartedText,
                until: difference,
                layout: countdownLayout,
                format: countdownFormat,
                onExpiry: function() {
                    self.nowPlaying(timeElement)
                },
                onTick: function(periods) {
                    var secs = $.countdown.periodsToSeconds(periods);
                    $(this).attr("data-startsin", secs)
                }
            });
            timeElement.removeClass(gameStartedClass);
            timeElement.parent(".timeMob").removeClass(gameStartedClass)
        })
    };
    this.nowPlaying = function(timeSpan) {
        timeSpan.countdown("destroy");
        timeSpan.addClass(gameStartedClass);
        timeSpan.siblings(".startsIn").attr("data-startsin", 0).hide();
        timeSpan.parent(".timeMob").addClass(gameStartedClass)
    };
    this.sortGames = function(gamesList, sortBy) {
        sortBy = sortBy || "startsin";
        var games = gamesList.find(dynamicClassGameSummary);
        games = _.sortBy(games, function(game) {
            game = $(game);
            return game.find(dynamicClassStartTime).data(sortBy)
        })
    }
}).apply(zeus.dynamicLobby);
(function($) {
    var w = "countdown";
    var Y = 0;
    var O = 1;
    var W = 2;
    var D = 3;
    var H = 4;
    var M = 5;
    var S = 6;
    $.JQPlugin.createPlugin({
        name: w,
        defaultOptions: {
            until: null,
            since: null,
            timezone: null,
            serverSync: null,
            format: "dHMS",
            layout: "",
            compact: false,
            padZeroes: false,
            significant: 0,
            description: "",
            expiryUrl: "",
            expiryText: "",
            alwaysExpire: false,
            onExpiry: null,
            onTick: null,
            tickInterval: 1
        },
        regionalOptions: {
            "": {
                labels: ["Years", "Months", "Weeks", "Days", "Hours", "Minutes", "Seconds"],
                labels1: ["Year", "Month", "Week", "Day", "Hour", "Minute", "Second"],
                compactLabels: ["y", "m", "w", "d"],
                whichLabels: null,
                digits: ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"],
                timeSeparator: ":",
                isRTL: false
            }
        },
        _getters: ["getTimes"],
        _rtlClass: w + "-rtl",
        _sectionClass: w + "-section",
        _amountClass: w + "-amount",
        _periodClass: w + "-period",
        _rowClass: w + "-row",
        _holdingClass: w + "-holding",
        _showClass: w + "-show",
        _descrClass: w + "-descr",
        _timerElems: [],
        _init: function() {
            var c = this;
            this._super();
            this._serverSyncs = [];
            var d = typeof Date.now == "function" ? Date.now : function() {
                return (new Date).getTime()
            };
            var e = window.performance && typeof window.performance.now == "function";

            function timerCallBack(a) {
                var b = a < 1e12 ? e ? performance.now() + performance.timing.navigationStart : d() : a || d();
                if (b - g >= 1e3) {
                    c._updateElems();
                    g = b
                }
                f(timerCallBack)
            }
            var f = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || null;
            var g = 0;
            if (!f || $.noRequestAnimationFrame) {
                $.noRequestAnimationFrame = null;
                setInterval(function() {
                    c._updateElems()
                }, 980)
            } else {
                g = window.animationStartTime || window.webkitAnimationStartTime || window.mozAnimationStartTime || window.oAnimationStartTime || window.msAnimationStartTime || d();
                f(timerCallBack)
            }
        },
        UTCDate: function(a, b, c, e, f, g, h, i) {
            if (typeof b == "object" && b.constructor == Date) {
                i = b.getMilliseconds();
                h = b.getSeconds();
                g = b.getMinutes();
                f = b.getHours();
                e = b.getDate();
                c = b.getMonth();
                b = b.getFullYear()
            }
            var d = new Date;
            d.setUTCFullYear(b);
            d.setUTCDate(1);
            d.setUTCMonth(c || 0);
            d.setUTCDate(e || 1);
            d.setUTCHours(f || 0);
            d.setUTCMinutes((g || 0) - (Math.abs(a) < 30 ? a * 60 : a));
            d.setUTCSeconds(h || 0);
            d.setUTCMilliseconds(i || 0);
            return d
        },
        periodsToSeconds: function(a) {
            return a[0] * 31557600 + a[1] * 2629800 + a[2] * 604800 + a[3] * 86400 + a[4] * 3600 + a[5] * 60 + a[6]
        },
        _instSettings: function(a, b) {
            return {
                _periods: [0, 0, 0, 0, 0, 0, 0]
            }
        },
        _addElem: function(a) {
            if (!this._hasElem(a)) {
                this._timerElems.push(a)
            }
        },
        _hasElem: function(a) {
            return $.inArray(a, this._timerElems) > -1
        },
        _removeElem: function(b) {
            this._timerElems = $.map(this._timerElems, function(a) {
                return a == b ? null : a
            })
        },
        _updateElems: function() {
            for (var i = this._timerElems.length - 1; i >= 0; i--) {
                this._updateCountdown(this._timerElems[i])
            }
        },
        _optionsChanged: function(a, b, c) {
            if (c.layout) {
                c.layout = c.layout.replace(/&lt;/g, "<").replace(/&gt;/g, ">")
            }
            this._resetExtraLabels(b.options, c);
            var d = b.options.timezone != c.timezone;
            $.extend(b.options, c);
            this._adjustSettings(a, b, c.until != null || c.since != null || d);
            var e = new Date;
            if (b._since && b._since < e || b._until && b._until > e) {
                this._addElem(a[0])
            }
            this._updateCountdown(a, b)
        },
        _updateCountdown: function(a, b) {
            a = a.jquery ? a : $(a);
            b = b || a.data(this.name);
            if (!b) {
                return
            }
            a.html(this._generateHTML(b)).toggleClass(this._rtlClass, b.options.isRTL);
            if ($.isFunction(b.options.onTick)) {
                var c = b._hold != "lap" ? b._periods : this._calculatePeriods(b, b._show, b.options.significant, new Date);
                if (b.options.tickInterval == 1 || this.periodsToSeconds(c) % b.options.tickInterval == 0) {
                    b.options.onTick.apply(a[0], [c])
                }
            }
            var d = b._hold != "pause" && (b._since ? b._now.getTime() < b._since.getTime() : b._now.getTime() >= b._until.getTime());
            if (d && !b._expiring) {
                b._expiring = true;
                if (this._hasElem(a[0]) || b.options.alwaysExpire) {
                    this._removeElem(a[0]);
                    if ($.isFunction(b.options.onExpiry)) {
                        b.options.onExpiry.apply(a[0], [])
                    }
                    if (b.options.expiryText) {
                        var e = b.options.layout;
                        b.options.layout = b.options.expiryText;
                        this._updateCountdown(a[0], b);
                        b.options.layout = e
                    }
                    if (b.options.expiryUrl) {
                        window.location = b.options.expiryUrl
                    }
                }
                b._expiring = false
            } else if (b._hold == "pause") {
                this._removeElem(a[0])
            }
        },
        _resetExtraLabels: function(a, b) {
            var c = false;
            for (var n in b) {
                if (n != "whichLabels" && n.match(/[Ll]abels/)) {
                    c = true;
                    break
                }
            }
            if (c) {
                for (var n in a) {
                    if (n.match(/[Ll]abels[02-9]|compactLabels1/)) {
                        a[n] = null
                    }
                }
            }
        },
        _adjustSettings: function(a, b, c) {
            var d;
            var e = 0;
            var f = null;
            for (var i = 0; i < this._serverSyncs.length; i++) {
                if (this._serverSyncs[i][0] == b.options.serverSync) {
                    f = this._serverSyncs[i][1];
                    break
                }
            }
            if (f != null) {
                e = b.options.serverSync ? f : 0;
                d = new Date
            } else {
                var g = $.isFunction(b.options.serverSync) ? b.options.serverSync.apply(a[0], []) : null;
                d = new Date;
                e = g ? d.getTime() - g.getTime() : 0;
                this._serverSyncs.push([b.options.serverSync, e])
            }
            var h = b.options.timezone;
            h = h == null ? -d.getTimezoneOffset() : h;
            if (c || !c && b._until == null && b._since == null) {
                b._since = b.options.since;
                if (b._since != null) {
                    b._since = this.UTCDate(h, this._determineTime(b._since, null));
                    if (b._since && e) {
                        b._since.setMilliseconds(b._since.getMilliseconds() + e)
                    }
                }
                b._until = this.UTCDate(h, this._determineTime(b.options.until, d));
                if (e) {
                    b._until.setMilliseconds(b._until.getMilliseconds() + e)
                }
            }
            b._show = this._determineShow(b)
        },
        _preDestroy: function(a, b) {
            this._removeElem(a[0]);
            a.empty()
        },
        pause: function(a) {
            this._hold(a, "pause")
        },
        lap: function(a) {
            this._hold(a, "lap")
        },
        resume: function(a) {
            this._hold(a, null)
        },
        toggle: function(a) {
            var b = $.data(a, this.name) || {};
            this[!b._hold ? "pause" : "resume"](a)
        },
        toggleLap: function(a) {
            var b = $.data(a, this.name) || {};
            this[!b._hold ? "lap" : "resume"](a)
        },
        _hold: function(a, b) {
            var c = $.data(a, this.name);
            if (c) {
                if (c._hold == "pause" && !b) {
                    c._periods = c._savePeriods;
                    var d = c._since ? "-" : "+";
                    c[c._since ? "_since" : "_until"] = this._determineTime(d + c._periods[0] + "y" + d + c._periods[1] + "o" + d + c._periods[2] + "w" + d + c._periods[3] + "d" + d + c._periods[4] + "h" + d + c._periods[5] + "m" + d + c._periods[6] + "s");
                    this._addElem(a)
                }
                c._hold = b;
                c._savePeriods = b == "pause" ? c._periods : null;
                $.data(a, this.name, c);
                this._updateCountdown(a, c)
            }
        },
        getTimes: function(a) {
            var b = $.data(a, this.name);
            return !b ? null : b._hold == "pause" ? b._savePeriods : !b._hold ? b._periods : this._calculatePeriods(b, b._show, b.options.significant, new Date)
        },
        _determineTime: function(k, l) {
            var m = this;
            var n = function(a) {
                var b = new Date;
                b.setTime(b.getTime() + a * 1e3);
                return b
            };
            var o = function(a) {
                a = a.toLowerCase();
                var b = new Date;
                var c = b.getFullYear();
                var d = b.getMonth();
                var e = b.getDate();
                var f = b.getHours();
                var g = b.getMinutes();
                var h = b.getSeconds();
                var i = /([+-]?[0-9]+)\s*(s|m|h|d|w|o|y)?/g;
                var j = i.exec(a);
                while (j) {
                    switch (j[2] || "s") {
                        case "s":
                            h += parseInt(j[1], 10);
                            break;
                        case "m":
                            g += parseInt(j[1], 10);
                            break;
                        case "h":
                            f += parseInt(j[1], 10);
                            break;
                        case "d":
                            e += parseInt(j[1], 10);
                            break;
                        case "w":
                            e += parseInt(j[1], 10) * 7;
                            break;
                        case "o":
                            d += parseInt(j[1], 10);
                            e = Math.min(e, m._getDaysInMonth(c, d));
                            break;
                        case "y":
                            c += parseInt(j[1], 10);
                            e = Math.min(e, m._getDaysInMonth(c, d));
                            break
                    }
                    j = i.exec(a)
                }
                return new Date(c, d, e, f, g, h, 0)
            };
            var p = k == null ? l : typeof k == "string" ? o(k) : typeof k == "number" ? n(k) : k;
            if (p) p.setMilliseconds(0);
            return p
        },
        _getDaysInMonth: function(a, b) {
            return 32 - new Date(a, b, 32).getDate()
        },
        _normalLabels: function(a) {
            return a
        },
        _generateHTML: function(c) {
            var d = this;
            c._periods = c._hold ? c._periods : this._calculatePeriods(c, c._show, c.options.significant, new Date);
            var e = false;
            var f = 0;
            var g = c.options.significant;
            var h = $.extend({}, c._show);
            for (var i = Y; i <= S; i++) {
                e |= c._show[i] == "?" && c._periods[i] > 0;
                h[i] = c._show[i] == "?" && !e ? null : c._show[i];
                f += h[i] ? 1 : 0;
                g -= c._periods[i] > 0 ? 1 : 0
            }
            var j = [false, false, false, false, false, false, false];
            for (var i = S; i >= Y; i--) {
                if (c._show[i]) {
                    if (c._periods[i]) {
                        j[i] = true
                    } else {
                        j[i] = g > 0;
                        g--
                    }
                }
            }
            var k = c.options.compact ? c.options.compactLabels : c.options.labels;
            var l = c.options.whichLabels || this._normalLabels;
            var m = function(a) {
                var b = c.options["compactLabels" + l(c._periods[a])];
                return h[a] ? d._translateDigits(c, c._periods[a]) + (b ? b[a] : k[a]) + " " : ""
            };
            var n = c.options.padZeroes ? 2 : 1;
            var o = function(a) {
                var b = c.options["labels" + l(c._periods[a])];
                return !c.options.significant && h[a] || c.options.significant && j[a] ? '<span class="' + d._sectionClass + '">' + '<span class="' + d._amountClass + '">' + d._minDigits(c, c._periods[a], n) + "</span>" + '<span class="' + d._periodClass + '">' + (b ? b[a] : k[a]) + "</span></span>" : ""
            };
            return c.options.layout ? this._buildLayout(c, h, c.options.layout, c.options.compact, c.options.significant, j) : (c.options.compact ? '<span class="' + this._rowClass + " " + this._amountClass + (c._hold ? " " + this._holdingClass : "") + '">' + m(Y) + m(O) + m(W) + m(D) + (h[H] ? this._minDigits(c, c._periods[H], 2) : "") + (h[M] ? (h[H] ? c.options.timeSeparator : "") + this._minDigits(c, c._periods[M], 2) : "") + (h[S] ? (h[H] || h[M] ? c.options.timeSeparator : "") + this._minDigits(c, c._periods[S], 2) : "") : '<span class="' + this._rowClass + " " + this._showClass + (c.options.significant || f) + (c._hold ? " " + this._holdingClass : "") + '">' + o(Y) + o(O) + o(W) + o(D) + o(H) + o(M) + o(S)) + "</span>" + (c.options.description ? '<span class="' + this._rowClass + " " + this._descrClass + '">' + c.options.description + "</span>" : "")
        },
        _buildLayout: function(c, d, e, f, g, h) {
            var j = c.options[f ? "compactLabels" : "labels"];
            var k = c.options.whichLabels || this._normalLabels;
            var l = function(a) {
                return (c.options[(f ? "compactLabels" : "labels") + k(c._periods[a])] || j)[a]
            };
            var m = function(a, b) {
                return c.options.digits[Math.floor(a / b) % 10]
            };
            var o = {
                desc: c.options.description,
                sep: c.options.timeSeparator,
                yl: l(Y),
                yn: this._minDigits(c, c._periods[Y], 1),
                ynn: this._minDigits(c, c._periods[Y], 2),
                ynnn: this._minDigits(c, c._periods[Y], 3),
                y1: m(c._periods[Y], 1),
                y10: m(c._periods[Y], 10),
                y100: m(c._periods[Y], 100),
                y1000: m(c._periods[Y], 1e3),
                ol: l(O),
                on: this._minDigits(c, c._periods[O], 1),
                onn: this._minDigits(c, c._periods[O], 2),
                onnn: this._minDigits(c, c._periods[O], 3),
                o1: m(c._periods[O], 1),
                o10: m(c._periods[O], 10),
                o100: m(c._periods[O], 100),
                o1000: m(c._periods[O], 1e3),
                wl: l(W),
                wn: this._minDigits(c, c._periods[W], 1),
                wnn: this._minDigits(c, c._periods[W], 2),
                wnnn: this._minDigits(c, c._periods[W], 3),
                w1: m(c._periods[W], 1),
                w10: m(c._periods[W], 10),
                w100: m(c._periods[W], 100),
                w1000: m(c._periods[W], 1e3),
                dl: l(D),
                dn: this._minDigits(c, c._periods[D], 1),
                dnn: this._minDigits(c, c._periods[D], 2),
                dnnn: this._minDigits(c, c._periods[D], 3),
                d1: m(c._periods[D], 1),
                d10: m(c._periods[D], 10),
                d100: m(c._periods[D], 100),
                d1000: m(c._periods[D], 1e3),
                hl: l(H),
                hn: this._minDigits(c, c._periods[H], 1),
                hnn: this._minDigits(c, c._periods[H], 2),
                hnnn: this._minDigits(c, c._periods[H], 3),
                h1: m(c._periods[H], 1),
                h10: m(c._periods[H], 10),
                h100: m(c._periods[H], 100),
                h1000: m(c._periods[H], 1e3),
                ml: l(M),
                mn: this._minDigits(c, c._periods[M], 1),
                mnn: this._minDigits(c, c._periods[M], 2),
                mnnn: this._minDigits(c, c._periods[M], 3),
                m1: m(c._periods[M], 1),
                m10: m(c._periods[M], 10),
                m100: m(c._periods[M], 100),
                m1000: m(c._periods[M], 1e3),
                sl: l(S),
                sn: this._minDigits(c, c._periods[S], 1),
                snn: this._minDigits(c, c._periods[S], 2),
                snnn: this._minDigits(c, c._periods[S], 3),
                s1: m(c._periods[S], 1),
                s10: m(c._periods[S], 10),
                s100: m(c._periods[S], 100),
                s1000: m(c._periods[S], 1e3)
            };
            var p = e;
            for (var i = Y; i <= S; i++) {
                var q = "yowdhms".charAt(i);
                var r = new RegExp("\\{" + q + "<\\}([\\s\\S]*)\\{" + q + ">\\}", "g");
                p = p.replace(r, !g && d[i] || g && h[i] ? "$1" : "")
            }
            $.each(o, function(n, v) {
                var a = new RegExp("\\{" + n + "\\}", "g");
                p = p.replace(a, v)
            });
            return p
        },
        _minDigits: function(a, b, c) {
            b = "" + b;
            if (b.length >= c) {
                return this._translateDigits(a, b)
            }
            b = "0000000000" + b;
            return this._translateDigits(a, b.substr(b.length - c))
        },
        _translateDigits: function(b, c) {
            return ("" + c).replace(/[0-9]/g, function(a) {
                return b.options.digits[a]
            })
        },
        _determineShow: function(a) {
            var b = a.options.format;
            var c = [];
            c[Y] = b.match("y") ? "?" : b.match("Y") ? "!" : null;
            c[O] = b.match("o") ? "?" : b.match("O") ? "!" : null;
            c[W] = b.match("w") ? "?" : b.match("W") ? "!" : null;
            c[D] = b.match("d") ? "?" : b.match("D") ? "!" : null;
            c[H] = b.match("h") ? "?" : b.match("H") ? "!" : null;
            c[M] = b.match("m") ? "?" : b.match("M") ? "!" : null;
            c[S] = b.match("s") ? "?" : b.match("S") ? "!" : null;
            return c
        },
        _calculatePeriods: function(c, d, e, f) {
            c._now = f;
            c._now.setMilliseconds(0);
            var g = new Date(c._now.getTime());
            if (c._since) {
                if (f.getTime() < c._since.getTime()) {
                    c._now = f = g
                } else {
                    f = c._since
                }
            } else {
                g.setTime(c._until.getTime());
                if (f.getTime() > c._until.getTime()) {
                    c._now = f = g
                }
            }
            var h = [0, 0, 0, 0, 0, 0, 0];
            if (d[Y] || d[O]) {
                var i = this._getDaysInMonth(f.getFullYear(), f.getMonth());
                var j = this._getDaysInMonth(g.getFullYear(), g.getMonth());
                var k = g.getDate() == f.getDate() || g.getDate() >= Math.min(i, j) && f.getDate() >= Math.min(i, j);
                var l = function(a) {
                    return (a.getHours() * 60 + a.getMinutes()) * 60 + a.getSeconds()
                };
                var m = Math.max(0, (g.getFullYear() - f.getFullYear()) * 12 + g.getMonth() - f.getMonth() + (g.getDate() < f.getDate() && !k || k && l(g) < l(f) ? -1 : 0));
                h[Y] = d[Y] ? Math.floor(m / 12) : 0;
                h[O] = d[O] ? m - h[Y] * 12 : 0;
                f = new Date(f.getTime());
                var n = f.getDate() == i;
                var o = this._getDaysInMonth(f.getFullYear() + h[Y], f.getMonth() + h[O]);
                if (f.getDate() > o) {
                    f.setDate(o)
                }
                f.setFullYear(f.getFullYear() + h[Y]);
                f.setMonth(f.getMonth() + h[O]);
                if (n) {
                    f.setDate(o)
                }
            }
            var p = Math.floor((g.getTime() - f.getTime()) / 1e3);
            var q = function(a, b) {
                h[a] = d[a] ? Math.floor(p / b) : 0;
                p -= h[a] * b
            };
            q(W, 604800);
            q(D, 86400);
            q(H, 3600);
            q(M, 60);
            q(S, 1);
            if (p > 0 && !c._since) {
                var r = [1, 12, 4.3482, 7, 24, 60, 60];
                var s = S;
                var t = 1;
                for (var u = S; u >= Y; u--) {
                    if (d[u]) {
                        if (h[s] >= t) {
                            h[s] = 0;
                            p = 1
                        }
                        if (p > 0) {
                            h[u]++;
                            p = 0;
                            s = u;
                            t = 1
                        }
                    }
                    t *= r[u]
                }
            }
            if (e) {
                for (var u = Y; u <= S; u++) {
                    if (e && h[u]) {
                        e--
                    } else if (!e) {
                        h[u] = 0
                    }
                }
            }
            return h
        }
    })
})(jQuery);
var zeus = zeus || {};
zeus.bingo = zeus.bingo || {};
zeus.bingo.sideGames = {};
(function() {
    "use strict";
    var self = this;
    var fetchSideGameAdvertsBool = false;
    self.gameData = [];
    this.init = function(channelId, fetchSideGameAdverts) {
        if (channelId === undefined) {
            throw new Error("channelId cannot be undefined")
        }
        if (fetchSideGameAdverts !== undefined) {
            fetchSideGameAdvertsBool = fetchSideGameAdverts
        }
        self.createVars();
        self.createDataListeners();
        self.fetchSideGameData(channelId);
        if (fetchSideGameAdvertsBool) {
            self.fetchSideGameAdverts(channelId)
        }
    };
    this.createVars = function() {
        if (!zeus.siteRoot) {
            zeus.siteRoot = $("*[data-siteroot]").data("siteroot")
        }
    };
    this.fetchSideGameData = function(channelId) {
        $.get(zeus.siteRoot + "api/Lobby/GetChannelSummaryById/" + channelId, function(data) {
            self.gameData = data
        }).fail(function() {
            self.gameData = []
        }).always(function() {
            $(document).trigger("gameDataReceived")
        })
    };
    this.fetchSideGameAdverts = function(channelId) {
        $.get(zeus.siteRoot + "api/Lobby/GetSideGameAdvertsByChannelId/" + channelId, function(data) {
            self.gameAdverts = data
        }).fail(function() {
            self.gameAdverts = []
        }).always(function() {
            $(document).trigger("gameAdvertsReceived")
        })
    };
    this.createDataListeners = function() {
        $(document).on("gameAdvertsReceived", function() {
            if (self.gameData) {
                self.checkBingoReady()
            }
        }).on("gameDataReceived", function() {
            if (fetchSideGameAdvertsBool && self.gameAdverts) {
                self.checkBingoReady()
            }
        })
    };
    this.destroyDataListeners = function() {
        $(document).unbind("gameDataReceived").unbind("gameAdvertsReceived")
    };
    this.checkBingoReady = function() {
        self.destroyDataListeners();
        $(document).trigger("bingoReady")
    }
}).apply(zeus.bingo.sideGames);
var zeus = zeus || {};
zeus.bingo = zeus.bingo || {};
zeus.bingo.lobby = {};
(function() {
    "use strict";
    var self = this;
    var vm = null;
    var additionalParameters = null;
    var assetsPath = "https://az416404.vo.msecnd.net/assets/";
    var lobbyButtons;
    var lobbyElem;
    var bingoSocket;
    var sideGamesData = null;
    var bingoSideGamesReady = false;
    var sideGamesPassedThrough = false;
    var analyticsToken;
    this.init = function(viewModel, addParams, analytics) {
        vm = viewModel;
        additionalParameters = addParams;
        analyticsToken = analytics;
        zeus.bingo.sideGames.init(vm.SideGameChannelId);
        $("span.my-account").text(vm.UserName);
        lobbyElem = $(".games-list, #gamesList");
        lobbyButtons = lobbyElem.find(".btn");
        self.addBindings();
        self.loadPassedInRoom()
    };
    this.addBindings = function() {
        if (zeus && zeus.core && !zeus.core.isMobile) {
            $(".btn-play-lobby").click(function(e) {
                e.preventDefault();
                var btn = $(this);
                var gameData = {};
                gameData.roomCode = btn.data("roomcode");
                gameData.roomId = btn.data("chatroomid");
                gameData.apiUrl = btn.data("addr");
                gameData.uiMode = vm.UiMode;
                gameData.siteCode = vm.SiteCode;
                gameData.chatUrl = vm.BingoClientPath;
                gameData.assetsPath = assetsPath;
                gameData.bingoClientCDNPath = vm.BingoClientCdnPath;
                gameData.analyticsToken = analyticsToken;
                $(document).unbind("bingoReady");
                lobbyButtons.attr("disabled", true);
                if (typeof $.fn.modal === "undefined") {
                    $(this).text($(this).data("loading-text"))
                } else {
                    $(this).button("loading")
                }
                self.loadBingo(gameData)
            })
        }
        $(document).on("gameDataReceived", function() {
            sideGamesData = zeus.bingo.sideGames.gameData;
            self.sendSideGames()
        })
    };
    this.loadPassedInRoom = function() {
        $(window).load(function() {
            if (additionalParameters.roomcode !== "") {
                $('.games-list a[data-roomcode="' + additionalParameters.roomcode + '"], #gamesList a[data-roomcode="' + additionalParameters.roomcode + '"]').first().trigger("click")
            }
        })
    };
    this.addBingoBindings = function() {
        $(document).on("click", "#closeDialog", function(e) {
            e.preventDefault();
            window.location.href = window.location.href.split("?")[0]
        }).on("click", "#lobby-back", function(e) {
            e.preventDefault();
            $("#bingoContainer").remove();
            window.location.href = window.location.href.split("?")[0]
        })
    };
    this.loadBingo = function(gameData) {
        $("body").append('<div id="bingo-overlay"></div><div id="bingo-container"></div>');
        window.scrollTo(0, 0);
        var bingoElems = $("#bingo-overlay, #bingo-container");
        bingoElems.show();
        var bingoNavigation = {
            "my-promotions": function() {
                window.location = zeus.core.siteRoot + "User/Promotions"
            },
            deposit: function() {
                window.location = zeus.core.siteRoot + "User/Banking/Deposit"
            },
            "my-account": function() {
                window.location = zeus.core.siteRoot + "User/Profile/Edit"
            },
            help: function() {
                window.location = zeus.core.siteRoot + "support"
            },
            lobby: function() {
                bingoSocket.destroy();
                bingoElems.remove()
            },
            close: function() {
                bingoSocket.destroy();
                bingoElems.remove();
                if (typeof wlzeus !== "undefined" && wlzeus.balances && wlzeus.balances.refreshBalances) {
                    wlzeus.balances.refreshBalances()
                }
            }
        };
        bingoSocket = new easyXDM.Socket({
            remote: vm.BingoClientPath,
            onMessage: function(msg) {
                var msgData = JSON.parse(msg);
                if (msgData.event === "nav-item-clicked") {
                    bingoNavigation[msgData.data]()
                } else if (msgData.event === "bingoSideGamesReady") {
                    bingoSideGamesReady = true;
                    self.sendSideGames()
                }
            },
            container: document.getElementById("bingo-container")
        });
        $.get(zeus.core.siteRoot + "api/Lobby/PlayerToken", function(data) {
            var userData = {};
            userData.userId = data.UserId;
            userData.userName = data.UserName;
            userData.gameToken = data.GameToken;
            var config = self.createBingoConfig(userData, gameData);
            bingoSocket.postMessage(JSON.stringify(config))
        }, "json");
        if (typeof $.fn.modal !== "undefined") {
            lobbyButtons.button("reset")
        } else {
            var playButton = lobbyElem.find(".btn.btn-play");
            var depositButton = lobbyElem.find(".btn.btn-deposit");
            var playButtonText = playButton.data("button-text");
            var depositButtonText = depositButton.data("button-text");
            playButton.text(playButtonText);
            depositButton.text(depositButtonText)
        }
        lobbyButtons.attr("disabled", false);
        return false
    };
    this.sendSideGames = function() {
        if (bingoSideGamesReady && !sideGamesPassedThrough && sideGamesData) {
            bingoSocket.postMessage(JSON.stringify({
                event: "sideGamesData",
                data: sideGamesData
            }));
            sideGamesPassedThrough = true
        }
    };
    this.createBingoConfig = function(userData, gameData) {
        var configSideGamesData = [];
        if (sideGamesData) {
            configSideGamesData = sideGamesData;
            sideGamesPassedThrough = true
        }
        var config = {
            user: {
                id: userData.userId,
                roles: [],
                nickname: userData.userName,
                token: userData.gameToken
            },
            api: {
                url: gameData.apiUrl
            },
            app: {
                assetsPath: gameData.bingoClientCDNPath,
                platform: gameData.uiMode,
                site: {
                    code: gameData.siteCode
                },
                room: {
                    code: gameData.roomCode
                },
                analytics: {
                    token: gameData.analyticsToken
                },
                components: {
                    "orchestra-chat": {
                        config: {
                            url: gameData.chatUrl,
                            roomId: gameData.roomId
                        }
                    },
                    "orchestra-tickets": {
                        config: {
                            purchaser: {
                                assetsPath: gameData.assetsPath
                            }
                        }
                    },
                    "orchestra-slots-listings": {
                        config: {
                            slots: configSideGamesData
                        }
                    },
                    "orchestra-calls": {
                        config: {
                            calls: {
                                assetsPath: gameData.assetsPath
                            }
                        }
                    },
                    "orchestra-preloader": {
                        config: {
                            assetsPath: gameData.assetsPath
                        }
                    },
                    "orchestra-sound-manager": {
                        config: {
                            assetsPath: gameData.assetsPath
                        }
                    }
                }
            }
        };
        return config
    }
}).apply(zeus.bingo.lobby);
var zeus = zeus || {};
zeus.bingo = zeus.bingo || {};
zeus.bingo.mobiilegamelauncher = {};
(function() {
    "use strict";
    var self = this;
    var vm = null;
    var additionalParameters = null;
    var assetsPath = null;
    var apiUrl = null;
    var playerTokenUrl = null;
    var bingoSocket;
    var sideGamesData = null;
    var bingoSideGamesReady = false;
    var sideGamesPassedThrough = false;
    this.init = function(viewModel) {
        self.setVars(viewModel);
        self.launchBingo();
        zeus.bingo.sideGames.init(vm.SideGameChannelId)
    };
    this.setVars = function(viewModel) {
        vm = viewModel;
        additionalParameters = JSON.parse(vm.AdditionalParameters);
        assetsPath = "https://az416404.vo.msecnd.net/assets/";
        apiUrl = additionalParameters.addr;
        playerTokenUrl = zeus.core.siteRoot + "api/Lobby/PlayerToken"
    };
    this.addBingoBindings = function() {
        $(window).on("orientationchange", function() {
            bingoSocket.postMessage(JSON.stringify({
                event: "parentOrientation",
                data: window.orientation
            }))
        });
        $(document).on("gameDataReceived", function() {
            sideGamesData = zeus.bingo.sideGames.gameData;
            self.sendSideGames()
        })
    };
    this.sendSideGames = function() {
        if (bingoSideGamesReady && !sideGamesPassedThrough && sideGamesData) {
            bingoSocket.postMessage(JSON.stringify({
                event: "sideGamesData",
                data: sideGamesData
            }));
            sideGamesPassedThrough = true
        }
    };
    this.launchBingo = function() {
        $("body").append('<div id="bingo-overlay"></div><div id="bingo-container"></div>');
        self.loadBingo()
    };
    this.loadBingo = function() {
        $("#bingo-overlay, #bingo-container").show();
        var bingoNavigation = {
            "my-promotions": function() {
                window.location = zeus.core.siteRoot + "User/Promotions"
            },
            deposit: function() {
                window.location = zeus.core.siteRoot + "User/Banking/Deposit"
            },
            "my-account": function() {
                window.location = zeus.core.siteRoot + "User/Profile/Edit"
            },
            help: function() {
                window.location = zeus.core.siteRoot + "support"
            },
            lobby: function() {
                window.location = zeus.core.siteRoot + "lobby"
            },
            close: function() {
                window.location = zeus.core.siteRoot + "lobby"
            }
        };
        bingoSocket = new easyXDM.Socket({
            remote: additionalParameters.bingoclientpath,
            onMessage: function(msg) {
                var msgData = JSON.parse(msg);
                if (msgData.event === "nav-item-clicked") {
                    bingoNavigation[msgData.data]()
                } else if (msgData.event === "checkOrientation") {
                    bingoSocket.postMessage(JSON.stringify({
                        event: "parentOrientation",
                        data: window.orientation
                    }))
                } else if (msgData.event === "bingoSideGamesReady") {
                    bingoSideGamesReady = true;
                    self.sendSideGames()
                }
            },
            container: document.getElementById("bingo-container")
        });
        self.addBingoBindings();
        var configSideGamesData = [];
        if (zeus.bingo.sideGames.gameData.length) {
            configSideGamesData = zeus.bingo.sideGames.gameData;
            sideGamesPassedThrough = true
        }
        $.get(playerTokenUrl, function(data) {
            var config = {
                user: {
                    id: data.UserId,
                    roles: [],
                    nickname: data.UserName,
                    token: data.GameToken
                },
                api: {
                    url: apiUrl
                },
                app: {
                    assetsPath: additionalParameters.bingoClientCDNPath,
                    platform: vm.UiMode,
                    site: {
                        code: additionalParameters.SiteCode
                    },
                    room: {
                        code: additionalParameters.room_code
                    },
                    analytics: {
                        token: additionalParameters.analyticsToken
                    },
                    components: {
                        "orchestra-chat": {
                            config: {
                                url: additionalParameters.bingoclientpath,
                                roomId: additionalParameters.room_id
                            }
                        },
                        "orchestra-tickets": {
                            config: {
                                purchaser: {
                                    assetsPath: assetsPath
                                }
                            }
                        },
                        "orchestra-slots-listings": {
                            config: {
                                slots: configSideGamesData
                            }
                        },
                        "orchestra-calls": {
                            config: {
                                calls: {
                                    assetsPath: assetsPath
                                }
                            }
                        },
                        "orchestra-preloader": {
                            config: {
                                assetsPath: assetsPath
                            }
                        },
                        "orchestra-sound-manager": {
                            config: {
                                assetsPath: assetsPath
                            }
                        }
                    }
                }
            };
            bingoSocket.postMessage(JSON.stringify(config))
        }, "json");
        return false
    }
}).apply(zeus.bingo.mobiilegamelauncher);
(function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof require == "function" && require;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e)
            }, l, l.exports, e, t, n, r)
        }
        return n[o].exports
    }
    var i = typeof require == "function" && require;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s
})({
    "./src/CasinoToolkit_Base/Scripts/Widgets/CasinoGamesSearch/casinoGamesSearch.js": [function(require, module, exports) {
        (function(global) {
            "use strict";

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                }
            }
            var _AppApp = require("./App/app");
            var _AppApp2 = _interopRequireDefault(_AppApp);
            var zeus = typeof global.zeus !== "undefined" ? global.zeus : global.zeus = {};
            (function(root) {
                root.CasinoGamesSearch = function(options) {
                    this.initialize = function() {
                        var app = new _AppApp2["default"](options);
                        app.start()
                    };
                    this.initialize()
                }
            })(zeus)
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {
        "./App/app": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\src\\CasinoToolkit_Base\\Scripts\\Widgets\\CasinoGamesSearch\\App\\app.js"
    }],
    "c:\\Users\\jakescutt\\CasinoToolkitThemes\\node_modules\\handlebars\\dist\\cjs\\handlebars.runtime.js": [function(require, module, exports) {
        "use strict";
        var _interopRequireWildcard = function(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        };
        exports.__esModule = true;
        var _import = require("./handlebars/base");
        var base = _interopRequireWildcard(_import);
        var _SafeString = require("./handlebars/safe-string");
        var _SafeString2 = _interopRequireWildcard(_SafeString);
        var _Exception = require("./handlebars/exception");
        var _Exception2 = _interopRequireWildcard(_Exception);
        var _import2 = require("./handlebars/utils");
        var Utils = _interopRequireWildcard(_import2);
        var _import3 = require("./handlebars/runtime");
        var runtime = _interopRequireWildcard(_import3);
        var _noConflict = require("./handlebars/no-conflict");
        var _noConflict2 = _interopRequireWildcard(_noConflict);

        function create() {
            var hb = new base.HandlebarsEnvironment;
            Utils.extend(hb, base);
            hb.SafeString = _SafeString2["default"];
            hb.Exception = _Exception2["default"];
            hb.Utils = Utils;
            hb.escapeExpression = Utils.escapeExpression;
            hb.VM = runtime;
            hb.template = function(spec) {
                return runtime.template(spec, hb)
            };
            return hb
        }
        var inst = create();
        inst.create = create;
        _noConflict2["default"](inst);
        inst["default"] = inst;
        exports["default"] = inst;
        module.exports = exports["default"]
    }, {
        "./handlebars/base": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\node_modules\\handlebars\\dist\\cjs\\handlebars\\base.js",
        "./handlebars/exception": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\node_modules\\handlebars\\dist\\cjs\\handlebars\\exception.js",
        "./handlebars/no-conflict": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\node_modules\\handlebars\\dist\\cjs\\handlebars\\no-conflict.js",
        "./handlebars/runtime": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\node_modules\\handlebars\\dist\\cjs\\handlebars\\runtime.js",
        "./handlebars/safe-string": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\node_modules\\handlebars\\dist\\cjs\\handlebars\\safe-string.js",
        "./handlebars/utils": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\node_modules\\handlebars\\dist\\cjs\\handlebars\\utils.js"
    }],
    "c:\\Users\\jakescutt\\CasinoToolkitThemes\\node_modules\\handlebars\\dist\\cjs\\handlebars\\base.js": [function(require, module, exports) {
        "use strict";
        var _interopRequireWildcard = function(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        };
        exports.__esModule = true;
        exports.HandlebarsEnvironment = HandlebarsEnvironment;
        exports.createFrame = createFrame;
        var _import = require("./utils");
        var Utils = _interopRequireWildcard(_import);
        var _Exception = require("./exception");
        var _Exception2 = _interopRequireWildcard(_Exception);
        var VERSION = "3.0.1";
        exports.VERSION = VERSION;
        var COMPILER_REVISION = 6;
        exports.COMPILER_REVISION = COMPILER_REVISION;
        var REVISION_CHANGES = {
            1: "<= 1.0.rc.2",
            2: "== 1.0.0-rc.3",
            3: "== 1.0.0-rc.4",
            4: "== 1.x.x",
            5: "== 2.0.0-alpha.x",
            6: ">= 2.0.0-beta.1"
        };
        exports.REVISION_CHANGES = REVISION_CHANGES;
        var isArray = Utils.isArray,
            isFunction = Utils.isFunction,
            toString = Utils.toString,
            objectType = "[object Object]";

        function HandlebarsEnvironment(helpers, partials) {
            this.helpers = helpers || {};
            this.partials = partials || {};
            registerDefaultHelpers(this)
        }
        HandlebarsEnvironment.prototype = {
            constructor: HandlebarsEnvironment,
            logger: logger,
            log: log,
            registerHelper: function registerHelper(name, fn) {
                if (toString.call(name) === objectType) {
                    if (fn) {
                        throw new _Exception2["default"]("Arg not supported with multiple helpers")
                    }
                    Utils.extend(this.helpers, name)
                } else {
                    this.helpers[name] = fn
                }
            },
            unregisterHelper: function unregisterHelper(name) {
                delete this.helpers[name]
            },
            registerPartial: function registerPartial(name, partial) {
                if (toString.call(name) === objectType) {
                    Utils.extend(this.partials, name)
                } else {
                    if (typeof partial === "undefined") {
                        throw new _Exception2["default"]("Attempting to register a partial as undefined")
                    }
                    this.partials[name] = partial
                }
            },
            unregisterPartial: function unregisterPartial(name) {
                delete this.partials[name]
            }
        };

        function registerDefaultHelpers(instance) {
            instance.registerHelper("helperMissing", function() {
                if (arguments.length === 1) {
                    return undefined
                } else {
                    throw new _Exception2["default"]('Missing helper: "' + arguments[arguments.length - 1].name + '"')
                }
            });
            instance.registerHelper("blockHelperMissing", function(context, options) {
                var inverse = options.inverse,
                    fn = options.fn;
                if (context === true) {
                    return fn(this)
                } else if (context === false || context == null) {
                    return inverse(this)
                } else if (isArray(context)) {
                    if (context.length > 0) {
                        if (options.ids) {
                            options.ids = [options.name]
                        }
                        return instance.helpers.each(context, options)
                    } else {
                        return inverse(this)
                    }
                } else {
                    if (options.data && options.ids) {
                        var data = createFrame(options.data);
                        data.contextPath = Utils.appendContextPath(options.data.contextPath, options.name);
                        options = {
                            data: data
                        }
                    }
                    return fn(context, options)
                }
            });
            instance.registerHelper("each", function(context, options) {
                if (!options) {
                    throw new _Exception2["default"]("Must pass iterator to #each")
                }
                var fn = options.fn,
                    inverse = options.inverse,
                    i = 0,
                    ret = "",
                    data = undefined,
                    contextPath = undefined;
                if (options.data && options.ids) {
                    contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]) + "."
                }
                if (isFunction(context)) {
                    context = context.call(this)
                }
                if (options.data) {
                    data = createFrame(options.data)
                }

                function execIteration(field, index, last) {
                    if (data) {
                        data.key = field;
                        data.index = index;
                        data.first = index === 0;
                        data.last = !!last;
                        if (contextPath) {
                            data.contextPath = contextPath + field
                        }
                    }
                    ret = ret + fn(context[field], {
                        data: data,
                        blockParams: Utils.blockParams([context[field], field], [contextPath + field, null])
                    })
                }
                if (context && typeof context === "object") {
                    if (isArray(context)) {
                        for (var j = context.length; i < j; i++) {
                            execIteration(i, i, i === context.length - 1)
                        }
                    } else {
                        var priorKey = undefined;
                        for (var key in context) {
                            if (context.hasOwnProperty(key)) {
                                if (priorKey) {
                                    execIteration(priorKey, i - 1)
                                }
                                priorKey = key;
                                i++
                            }
                        }
                        if (priorKey) {
                            execIteration(priorKey, i - 1, true)
                        }
                    }
                }
                if (i === 0) {
                    ret = inverse(this)
                }
                return ret
            });
            instance.registerHelper("if", function(conditional, options) {
                if (isFunction(conditional)) {
                    conditional = conditional.call(this)
                }
                if (!options.hash.includeZero && !conditional || Utils.isEmpty(conditional)) {
                    return options.inverse(this)
                } else {
                    return options.fn(this)
                }
            });
            instance.registerHelper("unless", function(conditional, options) {
                return instance.helpers["if"].call(this, conditional, {
                    fn: options.inverse,
                    inverse: options.fn,
                    hash: options.hash
                })
            });
            instance.registerHelper("with", function(context, options) {
                if (isFunction(context)) {
                    context = context.call(this)
                }
                var fn = options.fn;
                if (!Utils.isEmpty(context)) {
                    if (options.data && options.ids) {
                        var data = createFrame(options.data);
                        data.contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]);
                        options = {
                            data: data
                        }
                    }
                    return fn(context, options)
                } else {
                    return options.inverse(this)
                }
            });
            instance.registerHelper("log", function(message, options) {
                var level = options.data && options.data.level != null ? parseInt(options.data.level, 10) : 1;
                instance.log(level, message)
            });
            instance.registerHelper("lookup", function(obj, field) {
                return obj && obj[field]
            })
        }
        var logger = {
            methodMap: {
                0: "debug",
                1: "info",
                2: "warn",
                3: "error"
            },
            DEBUG: 0,
            INFO: 1,
            WARN: 2,
            ERROR: 3,
            level: 1,
            log: function log(level, message) {
                if (typeof console !== "undefined" && logger.level <= level) {
                    var method = logger.methodMap[level];
                    (console[method] || console.log).call(console, message)
                }
            }
        };
        exports.logger = logger;
        var log = logger.log;
        exports.log = log;

        function createFrame(object) {
            var frame = Utils.extend({}, object);
            frame._parent = object;
            return frame
        }
    }, {
        "./exception": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\node_modules\\handlebars\\dist\\cjs\\handlebars\\exception.js",
        "./utils": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\node_modules\\handlebars\\dist\\cjs\\handlebars\\utils.js"
    }],
    "c:\\Users\\jakescutt\\CasinoToolkitThemes\\node_modules\\handlebars\\dist\\cjs\\handlebars\\exception.js": [function(require, module, exports) {
        "use strict";
        exports.__esModule = true;
        var errorProps = ["description", "fileName", "lineNumber", "message", "name", "number", "stack"];

        function Exception(message, node) {
            var loc = node && node.loc,
                line = undefined,
                column = undefined;
            if (loc) {
                line = loc.start.line;
                column = loc.start.column;
                message += " - " + line + ":" + column
            }
            var tmp = Error.prototype.constructor.call(this, message);
            for (var idx = 0; idx < errorProps.length; idx++) {
                this[errorProps[idx]] = tmp[errorProps[idx]]
            }
            if (Error.captureStackTrace) {
                Error.captureStackTrace(this, Exception)
            }
            if (loc) {
                this.lineNumber = line;
                this.column = column
            }
        }
        Exception.prototype = new Error;
        exports["default"] = Exception;
        module.exports = exports["default"]
    }, {}],
    "c:\\Users\\jakescutt\\CasinoToolkitThemes\\node_modules\\handlebars\\dist\\cjs\\handlebars\\no-conflict.js": [function(require, module, exports) {
        (function(global) {
            "use strict";
            exports.__esModule = true;
            exports["default"] = function(Handlebars) {
                var root = typeof global !== "undefined" ? global : window,
                    $Handlebars = root.Handlebars;
                Handlebars.noConflict = function() {
                    if (root.Handlebars === Handlebars) {
                        root.Handlebars = $Handlebars
                    }
                }
            };
            module.exports = exports["default"]
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {}],
    "c:\\Users\\jakescutt\\CasinoToolkitThemes\\node_modules\\handlebars\\dist\\cjs\\handlebars\\runtime.js": [function(require, module, exports) {
        "use strict";
        var _interopRequireWildcard = function(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        };
        exports.__esModule = true;
        exports.checkRevision = checkRevision;
        exports.template = template;
        exports.wrapProgram = wrapProgram;
        exports.resolvePartial = resolvePartial;
        exports.invokePartial = invokePartial;
        exports.noop = noop;
        var _import = require("./utils");
        var Utils = _interopRequireWildcard(_import);
        var _Exception = require("./exception");
        var _Exception2 = _interopRequireWildcard(_Exception);
        var _COMPILER_REVISION$REVISION_CHANGES$createFrame = require("./base");

        function checkRevision(compilerInfo) {
            var compilerRevision = compilerInfo && compilerInfo[0] || 1,
                currentRevision = _COMPILER_REVISION$REVISION_CHANGES$createFrame.COMPILER_REVISION;
            if (compilerRevision !== currentRevision) {
                if (compilerRevision < currentRevision) {
                    var runtimeVersions = _COMPILER_REVISION$REVISION_CHANGES$createFrame.REVISION_CHANGES[currentRevision],
                        compilerVersions = _COMPILER_REVISION$REVISION_CHANGES$createFrame.REVISION_CHANGES[compilerRevision];
                    throw new _Exception2["default"]("Template was precompiled with an older version of Handlebars than the current runtime. " + "Please update your precompiler to a newer version (" + runtimeVersions + ") or downgrade your runtime to an older version (" + compilerVersions + ").")
                } else {
                    throw new _Exception2["default"]("Template was precompiled with a newer version of Handlebars than the current runtime. " + "Please update your runtime to a newer version (" + compilerInfo[1] + ").")
                }
            }
        }

        function template(templateSpec, env) {
            if (!env) {
                throw new _Exception2["default"]("No environment passed to template")
            }
            if (!templateSpec || !templateSpec.main) {
                throw new _Exception2["default"]("Unknown template object: " + typeof templateSpec)
            }
            env.VM.checkRevision(templateSpec.compiler);

            function invokePartialWrapper(partial, context, options) {
                if (options.hash) {
                    context = Utils.extend({}, context, options.hash)
                }
                partial = env.VM.resolvePartial.call(this, partial, context, options);
                var result = env.VM.invokePartial.call(this, partial, context, options);
                if (result == null && env.compile) {
                    options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
                    result = options.partials[options.name](context, options)
                }
                if (result != null) {
                    if (options.indent) {
                        var lines = result.split("\n");
                        for (var i = 0, l = lines.length; i < l; i++) {
                            if (!lines[i] && i + 1 === l) {
                                break
                            }
                            lines[i] = options.indent + lines[i]
                        }
                        result = lines.join("\n")
                    }
                    return result
                } else {
                    throw new _Exception2["default"]("The partial " + options.name + " could not be compiled when running in runtime-only mode")
                }
            }
            var container = {
                strict: function strict(obj, name) {
                    if (!(name in obj)) {
                        throw new _Exception2["default"]('"' + name + '" not defined in ' + obj)
                    }
                    return obj[name]
                },
                lookup: function lookup(depths, name) {
                    var len = depths.length;
                    for (var i = 0; i < len; i++) {
                        if (depths[i] && depths[i][name] != null) {
                            return depths[i][name]
                        }
                    }
                },
                lambda: function lambda(current, context) {
                    return typeof current === "function" ? current.call(context) : current
                },
                escapeExpression: Utils.escapeExpression,
                invokePartial: invokePartialWrapper,
                fn: function fn(i) {
                    return templateSpec[i]
                },
                programs: [],
                program: function program(i, data, declaredBlockParams, blockParams, depths) {
                    var programWrapper = this.programs[i],
                        fn = this.fn(i);
                    if (data || depths || blockParams || declaredBlockParams) {
                        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths)
                    } else if (!programWrapper) {
                        programWrapper = this.programs[i] = wrapProgram(this, i, fn)
                    }
                    return programWrapper
                },
                data: function data(value, depth) {
                    while (value && depth--) {
                        value = value._parent
                    }
                    return value
                },
                merge: function merge(param, common) {
                    var obj = param || common;
                    if (param && common && param !== common) {
                        obj = Utils.extend({}, common, param)
                    }
                    return obj
                },
                noop: env.VM.noop,
                compilerInfo: templateSpec.compiler
            };

            function ret(context) {
                var options = arguments[1] === undefined ? {} : arguments[1];
                var data = options.data;
                ret._setup(options);
                if (!options.partial && templateSpec.useData) {
                    data = initData(context, data)
                }
                var depths = undefined,
                    blockParams = templateSpec.useBlockParams ? [] : undefined;
                if (templateSpec.useDepths) {
                    depths = options.depths ? [context].concat(options.depths) : [context]
                }
                return templateSpec.main.call(container, context, container.helpers, container.partials, data, blockParams, depths)
            }
            ret.isTop = true;
            ret._setup = function(options) {
                if (!options.partial) {
                    container.helpers = container.merge(options.helpers, env.helpers);
                    if (templateSpec.usePartial) {
                        container.partials = container.merge(options.partials, env.partials)
                    }
                } else {
                    container.helpers = options.helpers;
                    container.partials = options.partials
                }
            };
            ret._child = function(i, data, blockParams, depths) {
                if (templateSpec.useBlockParams && !blockParams) {
                    throw new _Exception2["default"]("must pass block params")
                }
                if (templateSpec.useDepths && !depths) {
                    throw new _Exception2["default"]("must pass parent depths")
                }
                return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths)
            };
            return ret
        }

        function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
            function prog(context) {
                var options = arguments[1] === undefined ? {} : arguments[1];
                return fn.call(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), depths && [context].concat(depths))
            }
            prog.program = i;
            prog.depth = depths ? depths.length : 0;
            prog.blockParams = declaredBlockParams || 0;
            return prog
        }

        function resolvePartial(partial, context, options) {
            if (!partial) {
                partial = options.partials[options.name]
            } else if (!partial.call && !options.name) {
                options.name = partial;
                partial = options.partials[partial]
            }
            return partial
        }

        function invokePartial(partial, context, options) {
            options.partial = true;
            if (partial === undefined) {
                throw new _Exception2["default"]("The partial " + options.name + " could not be found")
            } else if (partial instanceof Function) {
                return partial(context, options)
            }
        }

        function noop() {
            return ""
        }

        function initData(context, data) {
            if (!data || !("root" in data)) {
                data = data ? _COMPILER_REVISION$REVISION_CHANGES$createFrame.createFrame(data) : {};
                data.root = context
            }
            return data
        }
    }, {
        "./base": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\node_modules\\handlebars\\dist\\cjs\\handlebars\\base.js",
        "./exception": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\node_modules\\handlebars\\dist\\cjs\\handlebars\\exception.js",
        "./utils": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\node_modules\\handlebars\\dist\\cjs\\handlebars\\utils.js"
    }],
    "c:\\Users\\jakescutt\\CasinoToolkitThemes\\node_modules\\handlebars\\dist\\cjs\\handlebars\\safe-string.js": [function(require, module, exports) {
        "use strict";
        exports.__esModule = true;

        function SafeString(string) {
            this.string = string
        }
        SafeString.prototype.toString = SafeString.prototype.toHTML = function() {
            return "" + this.string
        };
        exports["default"] = SafeString;
        module.exports = exports["default"]
    }, {}],
    "c:\\Users\\jakescutt\\CasinoToolkitThemes\\node_modules\\handlebars\\dist\\cjs\\handlebars\\utils.js": [function(require, module, exports) {
        "use strict";
        exports.__esModule = true;
        exports.extend = extend;
        exports.indexOf = indexOf;
        exports.escapeExpression = escapeExpression;
        exports.isEmpty = isEmpty;
        exports.blockParams = blockParams;
        exports.appendContextPath = appendContextPath;
        var escape = {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#x27;",
            "`": "&#x60;"
        };
        var badChars = /[&<>"'`]/g,
            possible = /[&<>"'`]/;

        function escapeChar(chr) {
            return escape[chr]
        }

        function extend(obj) {
            for (var i = 1; i < arguments.length; i++) {
                for (var key in arguments[i]) {
                    if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
                        obj[key] = arguments[i][key]
                    }
                }
            }
            return obj
        }
        var toString = Object.prototype.toString;
        exports.toString = toString;
        var isFunction = function isFunction(value) {
            return typeof value === "function"
        };
        if (isFunction(/x/)) {
            exports.isFunction = isFunction = function(value) {
                return typeof value === "function" && toString.call(value) === "[object Function]"
            }
        }
        var isFunction;
        exports.isFunction = isFunction;
        var isArray = Array.isArray || function(value) {
            return value && typeof value === "object" ? toString.call(value) === "[object Array]" : false
        };
        exports.isArray = isArray;

        function indexOf(array, value) {
            for (var i = 0, len = array.length; i < len; i++) {
                if (array[i] === value) {
                    return i
                }
            }
            return -1
        }

        function escapeExpression(string) {
            if (typeof string !== "string") {
                if (string && string.toHTML) {
                    return string.toHTML()
                } else if (string == null) {
                    return ""
                } else if (!string) {
                    return string + ""
                }
                string = "" + string
            }
            if (!possible.test(string)) {
                return string
            }
            return string.replace(badChars, escapeChar)
        }

        function isEmpty(value) {
            if (!value && value !== 0) {
                return true
            } else if (isArray(value) && value.length === 0) {
                return true
            } else {
                return false
            }
        }

        function blockParams(params, ids) {
            params.path = ids;
            return params
        }

        function appendContextPath(contextPath, id) {
            return (contextPath ? contextPath + "." : "") + id
        }
    }, {}],
    "c:\\Users\\jakescutt\\CasinoToolkitThemes\\node_modules\\handlebars\\runtime.js": [function(require, module, exports) {
        module.exports = require("./dist/cjs/handlebars.runtime")["default"]
    }, {
        "./dist/cjs/handlebars.runtime": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\node_modules\\handlebars\\dist\\cjs\\handlebars.runtime.js"
    }],
    "c:\\Users\\jakescutt\\CasinoToolkitThemes\\node_modules\\hbsfy\\runtime.js": [function(require, module, exports) {
        module.exports = require("handlebars/runtime")["default"]
    }, {
        "handlebars/runtime": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\node_modules\\handlebars\\runtime.js"
    }],
    "c:\\Users\\jakescutt\\CasinoToolkitThemes\\src\\CasinoToolkit_Base\\Scripts\\Widgets\\CasinoGamesSearch\\App\\app.js": [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var _layout = require("./layout");
        var _layout2 = _interopRequireDefault(_layout);
        var _SearchBarView = require("../SearchBar/view");
        var _SearchBarView2 = _interopRequireDefault(_SearchBarView);
        var _ResultsView = require("../Results/view");
        var _ResultsView2 = _interopRequireDefault(_ResultsView);
        var _HelpersGetGames = require("../Helpers/getGames");
        var _HelpersGetGames2 = _interopRequireDefault(_HelpersGetGames);
        var _GamesCollection = require("../Games/collection");
        var _GamesCollection2 = _interopRequireDefault(_GamesCollection);
        var _FlashesErrorView = require("../Flashes/errorView");
        var _FlashesErrorView2 = _interopRequireDefault(_FlashesErrorView);
        var $ = _orchestra2["default"].$;
        var _ = _orchestra2["default"]._;
        exports["default"] = _orchestra2["default"].Application.extend({
            initialize: function initialize(options) {
                var _this2 = this;
                var _this = this;
                this.options = options;
                this.layoutView = new _layout2["default"]({
                    containerId: this.options.containerId
                });
                this.layoutView.render();
                (0, _HelpersGetGames2["default"])(function(err, data) {
                    if (err) {
                        _this2.hasError = true
                    } else {
                        _this2.games = data
                    }
                });
                $("html").on("click", function() {
                    _this.hideResults()
                })
            },
            onStart: function onStart() {
                this.searchView = new _SearchBarView2["default"];
                this.layoutView.getRegion("search").show(this.searchView);
                this.listenTo(this.searchView, "render:results", this.renderResults);
                this.listenTo(this.searchView, "hide:results", this.hideResults)
            },
            renderResults: function renderResults(name) {
                if (this.hasError) {
                    this.layoutView.getRegion("search").empty();
                    this.layoutView.getRegion("results").empty();
                    this.layoutView.getRegion("flash").show(new _FlashesErrorView2["default"])
                }
                if (name === "") {
                    this.hideResults()
                } else {
                    var collection = _.filter(this.games, function(game) {
                        return game.Name.toLowerCase().indexOf(name.toLowerCase().trim()) > -1
                    });
                    if (collection.length >= 10) {
                        collection = collection.slice(0, 10)
                    }
                    this.resultsView = new _ResultsView2["default"]({
                        collection: new _GamesCollection2["default"](collection),
                        loadEmptyView: collection.length ? false : true,
                        moreGamesUrl: this.options.moreGamesUrl || "#",
                        emptySearchText: this.options.emptySearchText || "",
                        authenticated: this.options.authenticated === "True" ? true : false
                    });
                    this.layoutView.getRegion("results").show(this.resultsView)
                }
            },
            hideResults: function hideResults() {
                this.layoutView.getRegion("results").empty()
            }
        });
        module.exports = exports["default"]
    }, {
        "../Flashes/errorView": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\src\\CasinoToolkit_Base\\Scripts\\Widgets\\CasinoGamesSearch\\Flashes\\errorView.js",
        "../Games/collection": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\src\\CasinoToolkit_Base\\Scripts\\Widgets\\CasinoGamesSearch\\Games\\collection.js",
        "../Helpers/getGames": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\src\\CasinoToolkit_Base\\Scripts\\Widgets\\CasinoGamesSearch\\Helpers\\getGames.js",
        "../Results/view": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\src\\CasinoToolkit_Base\\Scripts\\Widgets\\CasinoGamesSearch\\Results\\view.js",
        "../SearchBar/view": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\src\\CasinoToolkit_Base\\Scripts\\Widgets\\CasinoGamesSearch\\SearchBar\\view.js",
        "./layout": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\src\\CasinoToolkit_Base\\Scripts\\Widgets\\CasinoGamesSearch\\App\\layout.js"
    }],
    "c:\\Users\\jakescutt\\CasinoToolkitThemes\\src\\CasinoToolkit_Base\\Scripts\\Widgets\\CasinoGamesSearch\\App\\layout.js": [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var _templateHbs = require("./template.hbs");
        var _templateHbs2 = _interopRequireDefault(_templateHbs);
        exports["default"] = _orchestra2["default"].LayoutView.extend({
            initialize: function initialize(options) {
                this.options = options
            },
            el: function el() {
                return this.options.containerId
            },
            template: _templateHbs2["default"],
            regions: {
                search: ".search-container",
                results: ".results-container",
                flash: ".flash-container"
            }
        });
        module.exports = exports["default"]
    }, {
        "./template.hbs": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\src\\CasinoToolkit_Base\\Scripts\\Widgets\\CasinoGamesSearch\\App\\template.hbs"
    }],
    "c:\\Users\\jakescutt\\CasinoToolkitThemes\\src\\CasinoToolkit_Base\\Scripts\\Widgets\\CasinoGamesSearch\\App\\template.hbs": [function(require, module, exports) {
        var HandlebarsCompiler = require("hbsfy/runtime");
        module.exports = HandlebarsCompiler.template({
            compiler: [6, ">= 2.0.0-beta.1"],
            main: function(depth0, helpers, partials, data) {
                return '<div class="flash-container"></div>\r\n<div class="search-container"></div>\r\n<div class="results-container"></div>'
            },
            useData: true
        })
    }, {
        "hbsfy/runtime": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\node_modules\\hbsfy\\runtime.js"
    }],
    "c:\\Users\\jakescutt\\CasinoToolkitThemes\\src\\CasinoToolkit_Base\\Scripts\\Widgets\\CasinoGamesSearch\\Flashes\\errorTemplate.hbs": [function(require, module, exports) {
        var HandlebarsCompiler = require("hbsfy/runtime");
        module.exports = HandlebarsCompiler.template({
            compiler: [6, ">= 2.0.0-beta.1"],
            main: function(depth0, helpers, partials, data) {
                var helper;
                return 'Sorry, an error has occured. Please refresh or <a href="' + this.escapeExpression((helper = (helper = helpers.moreGamesUrl || (depth0 != null ? depth0.moreGamesUrl : depth0)) != null ? helper : helpers.helperMissing, typeof helper === "function" ? helper.call(depth0, {
                    name: "moreGamesUrl",
                    hash: {},
                    data: data
                }) : helper)) + '">View All Games</a>'
            },
            useData: true
        })
    }, {
        "hbsfy/runtime": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\node_modules\\hbsfy\\runtime.js"
    }],
    "c:\\Users\\jakescutt\\CasinoToolkitThemes\\src\\CasinoToolkit_Base\\Scripts\\Widgets\\CasinoGamesSearch\\Flashes\\errorView.js": [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var _errorTemplateHbs = require("./errorTemplate.hbs");
        var _errorTemplateHbs2 = _interopRequireDefault(_errorTemplateHbs);
        exports["default"] = _orchestra2["default"].ItemView.extend({
            template: _errorTemplateHbs2["default"],
            tagName: "li",
            className: "result",
            initialize: function initialize() {
                this.model.set("moreGamesUrl", this.options.moreGamesUrl)
            }
        });
        module.exports = exports["default"]
    }, {
        "./errorTemplate.hbs": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\src\\CasinoToolkit_Base\\Scripts\\Widgets\\CasinoGamesSearch\\Flashes\\errorTemplate.hbs"
    }],
    "c:\\Users\\jakescutt\\CasinoToolkitThemes\\src\\CasinoToolkit_Base\\Scripts\\Widgets\\CasinoGamesSearch\\Games\\collection.js": [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var _model = require("./model");
        var _model2 = _interopRequireDefault(_model);
        exports["default"] = _orchestra2["default"].Collection.extend({
            model: _model2["default"]
        });
        module.exports = exports["default"]
    }, {
        "./model": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\src\\CasinoToolkit_Base\\Scripts\\Widgets\\CasinoGamesSearch\\Games\\model.js"
    }],
    "c:\\Users\\jakescutt\\CasinoToolkitThemes\\src\\CasinoToolkit_Base\\Scripts\\Widgets\\CasinoGamesSearch\\Games\\model.js": [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        exports["default"] = _orchestra2["default"].Model.extend({
            idAttribute: "Id"
        });
        module.exports = exports["default"]
    }, {}],
    "c:\\Users\\jakescutt\\CasinoToolkitThemes\\src\\CasinoToolkit_Base\\Scripts\\Widgets\\CasinoGamesSearch\\Games\\template.hbs": [function(require, module, exports) {
        var HandlebarsCompiler = require("hbsfy/runtime");
        module.exports = HandlebarsCompiler.template({
            1: function(depth0, helpers, partials, data) {
                return "/users/account/logon"
            },
            3: function(depth0, helpers, partials, data) {
                return "Play Now"
            },
            5: function(depth0, helpers, partials, data) {
                return "Log in"
            },
            compiler: [6, ">= 2.0.0-beta.1"],
            main: function(depth0, helpers, partials, data) {
                var stack1, helper, alias1 = helpers.helperMissing,
                    alias2 = "function",
                    alias3 = this.escapeExpression;
                return '<a href="' + alias3((helper = (helper = helpers.GameInfoUrl || (depth0 != null ? depth0.GameInfoUrl : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "GameInfoUrl",
                    hash: {},
                    data: data
                }) : helper)) + '" target="_blank"><span class="slot-name">' + alias3((helper = (helper = helpers.Name || (depth0 != null ? depth0.Name : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "Name",
                    hash: {},
                    data: data
                }) : helper)) + '</span></a>\r\n<a href="' + ((stack1 = helpers.unless.call(depth0, depth0 != null ? depth0.authenticated : depth0, {
                    name: "unless",
                    hash: {},
                    fn: this.program(1, data, 0),
                    inverse: this.noop,
                    data: data
                })) != null ? stack1 : "") + '#" data-table-id="' + alias3((helper = (helper = helpers.TableId || (depth0 != null ? depth0.TableId : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "TableId",
                    hash: {},
                    data: data
                }) : helper)) + '"data-title="' + alias3((helper = (helper = helpers.Name || (depth0 != null ? depth0.Name : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "Name",
                    hash: {},
                    data: data
                }) : helper)) + '" data-software-id="' + alias3((helper = (helper = helpers.SoftwareId || (depth0 != null ? depth0.SoftwareId : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "SoftwareId",
                    hash: {},
                    data: data
                }) : helper)) + '" data-id="' + alias3((helper = (helper = helpers.Id || (depth0 != null ? depth0.Id : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "Id",
                    hash: {},
                    data: data
                }) : helper)) + '" data-url="' + alias3((helper = (helper = helpers.LaunchUrl || (depth0 != null ? depth0.LaunchUrl : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "LaunchUrl",
                    hash: {},
                    data: data
                }) : helper)) + '" data-bg="' + alias3((helper = (helper = helpers.BackgroundImageSource || (depth0 != null ? depth0.BackgroundImageSource : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "BackgroundImageSource",
                    hash: {},
                    data: data
                }) : helper)) + '" class="loadGame slots-login-popup"><span class="btn primary-btn play-now">' + ((stack1 = helpers["if"].call(depth0, depth0 != null ? depth0.authenticated : depth0, {
                    name: "if",
                    hash: {},
                    fn: this.program(3, data, 0),
                    inverse: this.program(5, data, 0),
                    data: data
                })) != null ? stack1 : "") + "</span></a>"
            },
            useData: true
        })
    }, {
        "hbsfy/runtime": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\node_modules\\hbsfy\\runtime.js"
    }],
    "c:\\Users\\jakescutt\\CasinoToolkitThemes\\src\\CasinoToolkit_Base\\Scripts\\Widgets\\CasinoGamesSearch\\Games\\view.js": [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var _templateHbs = require("./template.hbs");
        var _templateHbs2 = _interopRequireDefault(_templateHbs);
        exports["default"] = _orchestra2["default"].ItemView.extend({
            initialize: function initialize() {
                this.model.set("authenticated", this.options.authenticated);
                if (this.model.get("UseGmsForLaunch")) {
                    this.model.set("LaunchUrl", "gms")
                }
            },
            className: "result game",
            tagName: "li",
            template: _templateHbs2["default"]
        });
        module.exports = exports["default"]
    }, {
        "./template.hbs": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\src\\CasinoToolkit_Base\\Scripts\\Widgets\\CasinoGamesSearch\\Games\\template.hbs"
    }],
    "c:\\Users\\jakescutt\\CasinoToolkitThemes\\src\\CasinoToolkit_Base\\Scripts\\Widgets\\CasinoGamesSearch\\Helpers\\getGames.js": [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var $ = _orchestra2["default"].$;
        exports["default"] = function(callback) {
            var getting = $.get("/api/Bede.GRMS.Orchard.CasinoToolkit/CasinoGamesSearch");
            var gamesIcon = $(".games-search-icon");
            getting.done(function(data) {
                gamesIcon.removeClass("loading");
                callback(null, data)
            });
            getting.fail(function(data) {
                callback(true, data)
            })
        };
        module.exports = exports["default"]
    }, {}],
    "c:\\Users\\jakescutt\\CasinoToolkitThemes\\src\\CasinoToolkit_Base\\Scripts\\Widgets\\CasinoGamesSearch\\Results\\emptyTemplate.hbs": [function(require, module, exports) {
        var HandlebarsCompiler = require("hbsfy/runtime");
        module.exports = HandlebarsCompiler.template({
            compiler: [6, ">= 2.0.0-beta.1"],
            main: function(depth0, helpers, partials, data) {
                var stack1, helper;
                return ((stack1 = (helper = (helper = helpers.message || (depth0 != null ? depth0.message : depth0)) != null ? helper : helpers.helperMissing, typeof helper === "function" ? helper.call(depth0, {
                    name: "message",
                    hash: {},
                    data: data
                }) : helper)) != null ? stack1 : "") + "\r\n"
            },
            useData: true
        })
    }, {
        "hbsfy/runtime": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\node_modules\\hbsfy\\runtime.js"
    }],
    "c:\\Users\\jakescutt\\CasinoToolkitThemes\\src\\CasinoToolkit_Base\\Scripts\\Widgets\\CasinoGamesSearch\\Results\\emptyView.js": [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var _emptyTemplateHbs = require("./emptyTemplate.hbs");
        var _emptyTemplateHbs2 = _interopRequireDefault(_emptyTemplateHbs);
        var SearchView = _orchestra2["default"].ItemView.extend({
            template: _emptyTemplateHbs2["default"],
            tagName: "li",
            className: "result empty",
            initialize: function initialize() {
                this.model.set("message", this.options.emptyMessage)
            }
        });
        exports["default"] = SearchView;
        module.exports = exports["default"]
    }, {
        "./emptyTemplate.hbs": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\src\\CasinoToolkit_Base\\Scripts\\Widgets\\CasinoGamesSearch\\Results\\emptyTemplate.hbs"
    }],
    "c:\\Users\\jakescutt\\CasinoToolkitThemes\\src\\CasinoToolkit_Base\\Scripts\\Widgets\\CasinoGamesSearch\\Results\\view.js": [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var _GamesView = require("../Games/view");
        var _GamesView2 = _interopRequireDefault(_GamesView);
        var _emptyView = require("./emptyView");
        var _emptyView2 = _interopRequireDefault(_emptyView);
        var _ = _orchestra2["default"]._;
        exports["default"] = _orchestra2["default"].CollectionView.extend({
            initialize: function initialize(options) {
                this.options = options
            },
            tagName: "ul",
            className: "results",
            ui: {
                showMore: ".view-more"
            },
            childView: _GamesView2["default"],
            isEmpty: function isEmpty() {
                return this.options.loadEmptyView
            },
            emptyView: _emptyView2["default"],
            emptyViewOptions: function emptyViewOptions() {
                return {
                    emptyMessage: _.unescape(this.options.emptySearchText),
                    moreGamesUrl: _.unescape(this.options.moreGamesUrl)
                }
            },
            childViewOptions: function childViewOptions() {
                return {
                    authenticated: this.options.authenticated
                }
            },
            onBeforeRender: function onBeforeRender() {
                this.$(".view-more").remove()
            },
            onRender: function onRender() {
                if (this.collection.length >= 10) {
                    this.$el.append('<li class="result view-more"><a href="' + this.options.moreGamesUrl + '" class="show-more">Show More Results</a></li>')
                }
                this.$el.removeClass("inactive")
            }
        });
        module.exports = exports["default"]
    }, {
        "../Games/view": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\src\\CasinoToolkit_Base\\Scripts\\Widgets\\CasinoGamesSearch\\Games\\view.js",
        "./emptyView": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\src\\CasinoToolkit_Base\\Scripts\\Widgets\\CasinoGamesSearch\\Results\\emptyView.js"
    }],
    "c:\\Users\\jakescutt\\CasinoToolkitThemes\\src\\CasinoToolkit_Base\\Scripts\\Widgets\\CasinoGamesSearch\\SearchBar\\template.hbs": [function(require, module, exports) {
        var HandlebarsCompiler = require("hbsfy/runtime");
        module.exports = HandlebarsCompiler.template({
            compiler: [6, ">= 2.0.0-beta.1"],
            main: function(depth0, helpers, partials, data) {
                return '<span class="games-search-icon">Search</span>\r\n<input class="search-input" placeholder="Search for a game" type="text">'
            },
            useData: true
        })
    }, {
        "hbsfy/runtime": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\node_modules\\hbsfy\\runtime.js"
    }],
    "c:\\Users\\jakescutt\\CasinoToolkitThemes\\src\\CasinoToolkit_Base\\Scripts\\Widgets\\CasinoGamesSearch\\SearchBar\\view.js": [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var _templateHbs = require("./template.hbs");
        var _templateHbs2 = _interopRequireDefault(_templateHbs);
        exports["default"] = _orchestra2["default"].ItemView.extend({
            template: _templateHbs2["default"],
            className: "input-container",
            ui: {
                search: 'input[type="text"]'
            },
            events: {
                "keyup @ui.search": "renderResults",
                "focus @ui.search": "renderResults",
                click: function click(e) {
                    e.stopPropagation()
                }
            },
            renderResults: function renderResults() {
                this.trigger("render:results", this.ui.search.val())
            },
            hideResults: function hideResults() {
                this.trigger("hide:results")
            }
        });
        module.exports = exports["default"]
    }, {
        "./template.hbs": "c:\\Users\\jakescutt\\CasinoToolkitThemes\\src\\CasinoToolkit_Base\\Scripts\\Widgets\\CasinoGamesSearch\\SearchBar\\template.hbs"
    }]
}, {}, ["./src/CasinoToolkit_Base/Scripts/Widgets/CasinoGamesSearch/casinoGamesSearch.js"]);
(function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof require == "function" && require;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e)
            }, l, l.exports, e, t, n, r)
        }
        return n[o].exports
    }
    var i = typeof require == "function" && require;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s
})({
    1: [function(require, module, exports) {
        (function(global) {
            "use strict";

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                }
            }
            var _appApp = require("./app/app");
            var _appApp2 = _interopRequireDefault(_appApp);
            var _playerInboxMessagesConfig = require("./config/messages.js");
            var _playerInboxMessagesConfig2 = _interopRequireDefault(_playerInboxMessagesConfig);
            var zeus = typeof global.zeus !== "undefined" ? global.zeus : global.zeus = {};
            (function(root) {
                root.PlayerInboxWidget = function(options) {
                    this.initialize = function() {
                        var items = [{
                            name: ""
                        }, {
                            name: "Subject"
                        }, {
                            name: "Sent"
                        }];
                        var controls = {
                            prevPage: _playerInboxMessagesConfig2["default"].controls.prevPage || "Previous",
                            nextPage: _playerInboxMessagesConfig2["default"].controls.nextPage || "Next",
                            deleteEmail: _playerInboxMessagesConfig2["default"].controls.deleteEmail || "Delete message(s)",
                            selectAll: _playerInboxMessagesConfig2["default"].controls.selectAll || "Select all"
                        };
                        var title = typeof options.inboxTitle !== "undefined" ? options.inboxTitle : "My Inbox";
                        var app = new _appApp2["default"]({
                            tableHeaders: options.tableHeaders || items,
                            inboxTitle: title,
                            inboxControls: options.inboxControls || controls
                        });
                        app.start()
                    };
                    this.initialize()
                }
            })(zeus)
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {
        "./app/app": 19,
        "./config/messages.js": 23
    }],
    2: [function(require, module, exports) {
        (function(factory) {
            if (typeof exports == "object") {
                module.exports = factory(require("underscore"), require("backbone"))
            } else if (typeof define == "function" && define.amd) {
                define(["underscore", "backbone"], factory)
            } else if (typeof _ !== "undefined" && typeof Backbone !== "undefined") {
                var oldPageableCollection = Backbone.PageableCollection;
                var PageableCollection = factory(_, Backbone);
                Backbone.PageableCollection.noConflict = function() {
                    Backbone.PageableCollection = oldPageableCollection;
                    return PageableCollection
                }
            }
        })(function(_, Backbone) {
            "use strict";
            var _extend = _.extend;
            var _omit = _.omit;
            var _clone = _.clone;
            var _each = _.each;
            var _pick = _.pick;
            var _contains = _.contains;
            var _isEmpty = _.isEmpty;
            var _pairs = _.pairs;
            var _invert = _.invert;
            var _isArray = _.isArray;
            var _isFunction = _.isFunction;
            var _isObject = _.isObject;
            var _keys = _.keys;
            var _isUndefined = _.isUndefined;
            var ceil = Math.ceil;
            var floor = Math.floor;
            var max = Math.max;
            var BBColProto = Backbone.Collection.prototype;

            function finiteInt(val, name) {
                if (!_.isNumber(val) || _.isNaN(val) || !_.isFinite(val) || ~~val !== val) {
                    throw new TypeError("`" + name + "` must be a finite integer")
                }
                return val
            }

            function queryStringToParams(qs) {
                var kvp, k, v, ls, params = {},
                    decode = decodeURIComponent;
                var kvps = qs.split("&");
                for (var i = 0, l = kvps.length; i < l; i++) {
                    var param = kvps[i];
                    kvp = param.split("="), k = kvp[0], v = kvp[1] || true;
                    k = decode(k), v = decode(v), ls = params[k];
                    if (_isArray(ls)) ls.push(v);
                    else if (ls) params[k] = [ls, v];
                    else params[k] = v
                }
                return params
            }

            function runOnceAtLastHandler(col, event, func) {
                var eventHandlers = col._events[event];
                if (eventHandlers && eventHandlers.length) {
                    var lastHandler = eventHandlers[eventHandlers.length - 1];
                    var oldCallback = lastHandler.callback;
                    lastHandler.callback = function() {
                        try {
                            oldCallback.apply(this, arguments);
                            func()
                        } catch (e) {
                            throw e
                        } finally {
                            lastHandler.callback = oldCallback
                        }
                    }
                } else func()
            }
            var PARAM_TRIM_RE = /[\s'"]/g;
            var URL_TRIM_RE = /[<>\s'"]/g;
            var PageableCollection = Backbone.PageableCollection = Backbone.Collection.extend({
                state: {
                    firstPage: 1,
                    lastPage: null,
                    currentPage: null,
                    pageSize: 25,
                    totalPages: null,
                    totalRecords: null,
                    sortKey: null,
                    order: -1
                },
                mode: "server",
                queryParams: {
                    currentPage: "page",
                    pageSize: "per_page",
                    totalPages: "total_pages",
                    totalRecords: "total_entries",
                    sortKey: "sort_by",
                    order: "order",
                    directions: {
                        "-1": "asc",
                        1: "desc"
                    }
                },
                constructor: function(models, options) {
                    BBColProto.constructor.apply(this, arguments);
                    options = options || {};
                    var mode = this.mode = options.mode || this.mode || PageableProto.mode;
                    var queryParams = _extend({}, PageableProto.queryParams, this.queryParams, options.queryParams || {});
                    queryParams.directions = _extend({}, PageableProto.queryParams.directions, this.queryParams.directions, queryParams.directions || {});
                    this.queryParams = queryParams;
                    var state = this.state = _extend({}, PageableProto.state, this.state, options.state || {});
                    state.currentPage = state.currentPage == null ? state.firstPage : state.currentPage;
                    if (!_isArray(models)) models = models ? [models] : [];
                    models = models.slice();
                    if (mode != "server" && state.totalRecords == null && !_isEmpty(models)) {
                        state.totalRecords = models.length
                    }
                    this.switchMode(mode, _extend({
                        fetch: false,
                        resetState: false,
                        models: models
                    }, options));
                    var comparator = options.comparator;
                    if (state.sortKey && !comparator) {
                        this.setSorting(state.sortKey, state.order, options)
                    }
                    if (mode != "server") {
                        var fullCollection = this.fullCollection;
                        if (comparator && options.full) {
                            this.comparator = null;
                            fullCollection.comparator = comparator
                        }
                        if (options.full) fullCollection.sort();
                        if (models && !_isEmpty(models)) {
                            this.reset(models, _extend({
                                silent: true
                            }, options));
                            this.getPage(state.currentPage);
                            models.splice.apply(models, [0, models.length].concat(this.models))
                        }
                    }
                    this._initState = _clone(this.state)
                },
                _makeFullCollection: function(models, options) {
                    var properties = ["url", "model", "sync", "comparator"];
                    var thisProto = this.constructor.prototype;
                    var i, length, prop;
                    var proto = {};
                    for (i = 0, length = properties.length; i < length; i++) {
                        prop = properties[i];
                        if (!_isUndefined(thisProto[prop])) {
                            proto[prop] = thisProto[prop]
                        }
                    }
                    var fullCollection = new(Backbone.Collection.extend(proto))(models, options);
                    for (i = 0, length = properties.length; i < length; i++) {
                        prop = properties[i];
                        if (this[prop] !== thisProto[prop]) {
                            fullCollection[prop] = this[prop]
                        }
                    }
                    return fullCollection
                },
                _makeCollectionEventHandler: function(pageCol, fullCol) {
                    return function collectionEventHandler(event, model, collection, options) {
                        var handlers = pageCol._handlers;
                        _each(_keys(handlers), function(event) {
                            var handler = handlers[event];
                            pageCol.off(event, handler);
                            fullCol.off(event, handler)
                        });
                        var state = _clone(pageCol.state);
                        var firstPage = state.firstPage;
                        var currentPage = firstPage === 0 ? state.currentPage : state.currentPage - 1;
                        var pageSize = state.pageSize;
                        var pageStart = currentPage * pageSize,
                            pageEnd = pageStart + pageSize;
                        if (event == "add") {
                            var pageIndex, fullIndex, addAt, colToAdd, options = options || {};
                            if (collection == fullCol) {
                                fullIndex = fullCol.indexOf(model);
                                if (fullIndex >= pageStart && fullIndex < pageEnd) {
                                    colToAdd = pageCol;
                                    pageIndex = addAt = fullIndex - pageStart
                                }
                            } else {
                                pageIndex = pageCol.indexOf(model);
                                fullIndex = pageStart + pageIndex;
                                colToAdd = fullCol;
                                var addAt = !_isUndefined(options.at) ? options.at + pageStart : fullIndex
                            }
                            if (!options.onRemove) {
                                ++state.totalRecords;
                                delete options.onRemove
                            }
                            pageCol.state = pageCol._checkState(state);
                            if (colToAdd) {
                                colToAdd.add(model, _extend({}, options || {}, {
                                    at: addAt
                                }));
                                var modelToRemove = pageIndex >= pageSize ? model : !_isUndefined(options.at) && addAt < pageEnd && pageCol.length > pageSize ? pageCol.at(pageSize) : null;
                                if (modelToRemove) {
                                    runOnceAtLastHandler(collection, event, function() {
                                        pageCol.remove(modelToRemove, {
                                            onAdd: true
                                        })
                                    })
                                }
                            }
                        }
                        if (event == "remove") {
                            if (!options.onAdd) {
                                if (!--state.totalRecords) {
                                    state.totalRecords = null;
                                    state.totalPages = null
                                } else {
                                    var totalPages = state.totalPages = ceil(state.totalRecords / pageSize);
                                    state.lastPage = firstPage === 0 ? totalPages - 1 : totalPages || firstPage;
                                    if (state.currentPage > totalPages) state.currentPage = state.lastPage
                                }
                                pageCol.state = pageCol._checkState(state);
                                var nextModel, removedIndex = options.index;
                                if (collection == pageCol) {
                                    if (nextModel = fullCol.at(pageEnd)) {
                                        runOnceAtLastHandler(pageCol, event, function() {
                                            pageCol.push(nextModel, {
                                                onRemove: true
                                            })
                                        })
                                    } else if (!pageCol.length && state.totalRecords) {
                                        pageCol.reset(fullCol.models.slice(pageStart - pageSize, pageEnd - pageSize), _extend({}, options, {
                                            parse: false
                                        }))
                                    }
                                    fullCol.remove(model)
                                } else if (removedIndex >= pageStart && removedIndex < pageEnd) {
                                    if (nextModel = fullCol.at(pageEnd - 1)) {
                                        runOnceAtLastHandler(pageCol, event, function() {
                                            pageCol.push(nextModel, {
                                                onRemove: true
                                            })
                                        })
                                    }
                                    pageCol.remove(model);
                                    if (!pageCol.length && state.totalRecords) {
                                        pageCol.reset(fullCol.models.slice(pageStart - pageSize, pageEnd - pageSize), _extend({}, options, {
                                            parse: false
                                        }))
                                    }
                                }
                            } else delete options.onAdd
                        }
                        if (event == "reset") {
                            options = collection;
                            collection = model;
                            if (collection == pageCol && options.from == null && options.to == null) {
                                var head = fullCol.models.slice(0, pageStart);
                                var tail = fullCol.models.slice(pageStart + pageCol.models.length);
                                fullCol.reset(head.concat(pageCol.models).concat(tail), options)
                            } else if (collection == fullCol) {
                                if (!(state.totalRecords = fullCol.models.length)) {
                                    state.totalRecords = null;
                                    state.totalPages = null
                                }
                                if (pageCol.mode == "client") {
                                    state.lastPage = state.currentPage = state.firstPage
                                }
                                pageCol.state = pageCol._checkState(state);
                                pageCol.reset(fullCol.models.slice(pageStart, pageEnd), _extend({}, options, {
                                    parse: false
                                }))
                            }
                        }
                        if (event == "sort") {
                            options = collection;
                            collection = model;
                            if (collection === fullCol) {
                                pageCol.reset(fullCol.models.slice(pageStart, pageEnd), _extend({}, options, {
                                    parse: false
                                }))
                            }
                        }
                        _each(_keys(handlers), function(event) {
                            var handler = handlers[event];
                            _each([pageCol, fullCol], function(col) {
                                col.on(event, handler);
                                var callbacks = col._events[event] || [];
                                callbacks.unshift(callbacks.pop())
                            })
                        })
                    }
                },
                _checkState: function(state) {
                    var mode = this.mode;
                    var links = this.links;
                    var totalRecords = state.totalRecords;
                    var pageSize = state.pageSize;
                    var currentPage = state.currentPage;
                    var firstPage = state.firstPage;
                    var totalPages = state.totalPages;
                    if (totalRecords != null && pageSize != null && currentPage != null && firstPage != null && (mode == "infinite" ? links : true)) {
                        totalRecords = finiteInt(totalRecords, "totalRecords");
                        pageSize = finiteInt(pageSize, "pageSize");
                        currentPage = finiteInt(currentPage, "currentPage");
                        firstPage = finiteInt(firstPage, "firstPage");
                        if (pageSize < 1) {
                            throw new RangeError("`pageSize` must be >= 1")
                        }
                        totalPages = state.totalPages = ceil(totalRecords / pageSize);
                        if (firstPage < 0 || firstPage > 1) {
                            throw new RangeError("`firstPage must be 0 or 1`")
                        }
                        state.lastPage = firstPage === 0 ? max(0, totalPages - 1) : totalPages || firstPage;
                        if (mode == "infinite") {
                            if (!links[currentPage + ""]) {
                                throw new RangeError("No link found for page " + currentPage)
                            }
                        } else if (currentPage < firstPage || totalPages > 0 && (firstPage ? currentPage > totalPages : currentPage >= totalPages)) {
                            throw new RangeError("`currentPage` must be firstPage <= currentPage " + (firstPage ? ">" : ">=") + " totalPages if " + firstPage + "-based. Got " + currentPage + ".")
                        }
                    }
                    return state
                },
                setPageSize: function(pageSize, options) {
                    pageSize = finiteInt(pageSize, "pageSize");
                    options = options || {
                        first: false
                    };
                    var state = this.state;
                    var totalPages = ceil(state.totalRecords / pageSize);
                    var currentPage = totalPages ? max(state.firstPage, floor(totalPages * state.currentPage / state.totalPages)) : state.firstPage;
                    state = this.state = this._checkState(_extend({}, state, {
                        pageSize: pageSize,
                        currentPage: options.first ? state.firstPage : currentPage,
                        totalPages: totalPages
                    }));
                    return this.getPage(state.currentPage, _omit(options, ["first"]))
                },
                switchMode: function(mode, options) {
                    if (!_contains(["server", "client", "infinite"], mode)) {
                        throw new TypeError('`mode` must be one of "server", "client" or "infinite"')
                    }
                    options = options || {
                        fetch: true,
                        resetState: true
                    };
                    var state = this.state = options.resetState ? _clone(this._initState) : this._checkState(_extend({}, this.state));
                    this.mode = mode;
                    var self = this;
                    var fullCollection = this.fullCollection;
                    var handlers = this._handlers = this._handlers || {},
                        handler;
                    if (mode != "server" && !fullCollection) {
                        fullCollection = this._makeFullCollection(options.models || [], options);
                        fullCollection.pageableCollection = this;
                        this.fullCollection = fullCollection;
                        var allHandler = this._makeCollectionEventHandler(this, fullCollection);
                        _each(["add", "remove", "reset", "sort"], function(event) {
                            handlers[event] = handler = _.bind(allHandler, {}, event);
                            self.on(event, handler);
                            fullCollection.on(event, handler)
                        });
                        fullCollection.comparator = this._fullComparator
                    } else if (mode == "server" && fullCollection) {
                        _each(_keys(handlers), function(event) {
                            handler = handlers[event];
                            self.off(event, handler);
                            fullCollection.off(event, handler)
                        });
                        delete this._handlers;
                        this._fullComparator = fullCollection.comparator;
                        delete this.fullCollection
                    }
                    if (mode == "infinite") {
                        var links = this.links = {};
                        var firstPage = state.firstPage;
                        var totalPages = ceil(state.totalRecords / state.pageSize);
                        var lastPage = firstPage === 0 ? max(0, totalPages - 1) : totalPages || firstPage;
                        for (var i = state.firstPage; i <= lastPage; i++) {
                            links[i] = this.url
                        }
                    } else if (this.links) delete this.links;
                    return options.fetch ? this.fetch(_omit(options, "fetch", "resetState")) : this
                },
                hasPreviousPage: function() {
                    var state = this.state;
                    var currentPage = state.currentPage;
                    if (this.mode != "infinite") return currentPage > state.firstPage;
                    return !!this.links[currentPage - 1]
                },
                hasNextPage: function() {
                    var state = this.state;
                    var currentPage = this.state.currentPage;
                    if (this.mode != "infinite") return currentPage < state.lastPage;
                    return !!this.links[currentPage + 1]
                },
                getFirstPage: function(options) {
                    return this.getPage("first", options)
                },
                getPreviousPage: function(options) {
                    return this.getPage("prev", options)
                },
                getNextPage: function(options) {
                    return this.getPage("next", options)
                },
                getLastPage: function(options) {
                    return this.getPage("last", options)
                },
                getPage: function(index, options) {
                    var mode = this.mode,
                        fullCollection = this.fullCollection;
                    options = options || {
                        fetch: false
                    };
                    var state = this.state,
                        firstPage = state.firstPage,
                        currentPage = state.currentPage,
                        lastPage = state.lastPage,
                        pageSize = state.pageSize;
                    var pageNum = index;
                    switch (index) {
                        case "first":
                            pageNum = firstPage;
                            break;
                        case "prev":
                            pageNum = currentPage - 1;
                            break;
                        case "next":
                            pageNum = currentPage + 1;
                            break;
                        case "last":
                            pageNum = lastPage;
                            break;
                        default:
                            pageNum = finiteInt(index, "index")
                    }
                    this.state = this._checkState(_extend({}, state, {
                        currentPage: pageNum
                    }));
                    options.from = currentPage, options.to = pageNum;
                    var pageStart = (firstPage === 0 ? pageNum : pageNum - 1) * pageSize;
                    var pageModels = fullCollection && fullCollection.length ? fullCollection.models.slice(pageStart, pageStart + pageSize) : [];
                    if ((mode == "client" || mode == "infinite" && !_isEmpty(pageModels)) && !options.fetch) {
                        this.reset(pageModels, _omit(options, "fetch"));
                        return this
                    }
                    if (mode == "infinite") options.url = this.links[pageNum];
                    return this.fetch(_omit(options, "fetch"))
                },
                getPageByOffset: function(offset, options) {
                    if (offset < 0) {
                        throw new RangeError("`offset must be > 0`")
                    }
                    offset = finiteInt(offset);
                    var page = floor(offset / this.state.pageSize);
                    if (this.state.firstPage !== 0) page++;
                    if (page > this.state.lastPage) page = this.state.lastPage;
                    return this.getPage(page, options)
                },
                sync: function(method, model, options) {
                    var self = this;
                    if (self.mode == "infinite") {
                        var success = options.success;
                        var currentPage = self.state.currentPage;
                        options.success = function(resp, status, xhr) {
                            var links = self.links;
                            var newLinks = self.parseLinks(resp, _extend({
                                xhr: xhr
                            }, options));
                            if (newLinks.first) links[self.state.firstPage] = newLinks.first;
                            if (newLinks.prev) links[currentPage - 1] = newLinks.prev;
                            if (newLinks.next) links[currentPage + 1] = newLinks.next;
                            if (success) success(resp, status, xhr)
                        }
                    }
                    return (BBColProto.sync || Backbone.sync).call(self, method, model, options)
                },
                parseLinks: function(resp, options) {
                    var links = {};
                    var linkHeader = options.xhr.getResponseHeader("Link");
                    if (linkHeader) {
                        var relations = ["first", "prev", "next"];
                        _each(linkHeader.split(","), function(linkValue) {
                            var linkParts = linkValue.split(";");
                            var url = linkParts[0].replace(URL_TRIM_RE, "");
                            var params = linkParts.slice(1);
                            _each(params, function(param) {
                                var paramParts = param.split("=");
                                var key = paramParts[0].replace(PARAM_TRIM_RE, "");
                                var value = paramParts[1].replace(PARAM_TRIM_RE, "");
                                if (key == "rel" && _contains(relations, value)) links[value] = url
                            })
                        })
                    }
                    return links
                },
                parse: function(resp, options) {
                    var newState = this.parseState(resp, _clone(this.queryParams), _clone(this.state), options);
                    if (newState) this.state = this._checkState(_extend({}, this.state, newState));
                    return this.parseRecords(resp, options)
                },
                parseState: function(resp, queryParams, state, options) {
                    if (resp && resp.length === 2 && _isObject(resp[0]) && _isArray(resp[1])) {
                        var newState = _clone(state);
                        var serverState = resp[0];
                        _each(_pairs(_omit(queryParams, "directions")), function(kvp) {
                            var k = kvp[0],
                                v = kvp[1];
                            var serverVal = serverState[v];
                            if (!_isUndefined(serverVal) && !_.isNull(serverVal)) newState[k] = serverState[v]
                        });
                        if (serverState.order) {
                            newState.order = _invert(queryParams.directions)[serverState.order] * 1
                        }
                        return newState
                    }
                },
                parseRecords: function(resp, options) {
                    if (resp && resp.length === 2 && _isObject(resp[0]) && _isArray(resp[1])) {
                        return resp[1]
                    }
                    return resp
                },
                fetch: function(options) {
                    options = options || {};
                    var state = this._checkState(this.state);
                    var mode = this.mode;
                    if (mode == "infinite" && !options.url) {
                        options.url = this.links[state.currentPage]
                    }
                    var data = options.data || {};
                    var url = options.url || this.url || "";
                    if (_isFunction(url)) url = url.call(this);
                    var qsi = url.indexOf("?");
                    if (qsi != -1) {
                        _extend(data, queryStringToParams(url.slice(qsi + 1)));
                        url = url.slice(0, qsi)
                    }
                    options.url = url;
                    options.data = data;
                    var queryParams = this.mode == "client" ? _pick(this.queryParams, "sortKey", "order") : _omit(_pick(this.queryParams, _keys(PageableProto.queryParams)), "directions");
                    var i, kvp, k, v, kvps = _pairs(queryParams),
                        thisCopy = _clone(this);
                    for (i = 0; i < kvps.length; i++) {
                        kvp = kvps[i], k = kvp[0], v = kvp[1];
                        v = _isFunction(v) ? v.call(thisCopy) : v;
                        if (state[k] != null && v != null) {
                            data[v] = state[k]
                        }
                    }
                    if (state.sortKey && state.order) {
                        var o = _isFunction(queryParams.order) ? queryParams.order.call(thisCopy) : queryParams.order;
                        data[o] = this.queryParams.directions[state.order + ""]
                    } else if (!state.sortKey) delete data[queryParams.order];
                    var extraKvps = _pairs(_omit(this.queryParams, _keys(PageableProto.queryParams)));
                    for (i = 0; i < extraKvps.length; i++) {
                        kvp = extraKvps[i];
                        v = kvp[1];
                        v = _isFunction(v) ? v.call(thisCopy) : v;
                        if (v != null) data[kvp[0]] = v
                    }
                    if (mode != "server") {
                        var self = this,
                            fullCol = this.fullCollection;
                        var success = options.success;
                        options.success = function(col, resp, opts) {
                            opts = opts || {};
                            if (_isUndefined(options.silent)) delete opts.silent;
                            else opts.silent = options.silent;
                            var models = col.models;
                            if (mode == "client") fullCol.reset(models, opts);
                            else {
                                fullCol.add(models, _extend({
                                    at: fullCol.length
                                }, _extend(opts, {
                                    parse: false
                                })));
                                self.trigger("reset", self, opts)
                            }
                            if (success) success(col, resp, opts)
                        };
                        return BBColProto.fetch.call(this, _extend({}, options, {
                            silent: true
                        }))
                    }
                    return BBColProto.fetch.call(this, options)
                },
                _makeComparator: function(sortKey, order, sortValue) {
                    var state = this.state;
                    sortKey = sortKey || state.sortKey;
                    order = order || state.order;
                    if (!sortKey || !order) return;
                    if (!sortValue) sortValue = function(model, attr) {
                        return model.get(attr)
                    };
                    return function(left, right) {
                        var l = sortValue(left, sortKey),
                            r = sortValue(right, sortKey),
                            t;
                        if (order === 1) t = l, l = r, r = t;
                        if (l === r) return 0;
                        else if (l < r) return -1;
                        return 1
                    }
                },
                setSorting: function(sortKey, order, options) {
                    var state = this.state;
                    state.sortKey = sortKey;
                    state.order = order = order || state.order;
                    var fullCollection = this.fullCollection;
                    var delComp = false,
                        delFullComp = false;
                    if (!sortKey) delComp = delFullComp = true;
                    var mode = this.mode;
                    options = _extend({
                        side: mode == "client" ? mode : "server",
                        full: true
                    }, options);
                    var comparator = this._makeComparator(sortKey, order, options.sortValue);
                    var full = options.full,
                        side = options.side;
                    if (side == "client") {
                        if (full) {
                            if (fullCollection) fullCollection.comparator = comparator;
                            delComp = true
                        } else {
                            this.comparator = comparator;
                            delFullComp = true
                        }
                    } else if (side == "server" && !full) {
                        this.comparator = comparator
                    }
                    if (delComp) this.comparator = null;
                    if (delFullComp && fullCollection) fullCollection.comparator = null;
                    return this
                }
            });
            var PageableProto = PageableCollection.prototype;
            return PageableCollection
        })
    }, {
        backbone: 3,
        underscore: 18
    }],
    3: [function(require, module, exports) {
        (function(global) {
            (function(factory) {
                var root = typeof self == "object" && self.self == self && self || typeof global == "object" && global.global == global && global;
                if (typeof define === "function" && define.amd) {
                    define(["underscore", "jquery", "exports"], function(_, $, exports) {
                        root.Backbone = factory(root, exports, _, $)
                    })
                } else if (typeof exports !== "undefined") {
                    var _ = require("underscore"),
                        $;
                    try {
                        $ = require("jquery")
                    } catch (e) {}
                    factory(root, exports, _, $)
                } else {
                    root.Backbone = factory(root, {}, root._, root.jQuery || root.Zepto || root.ender || root.$)
                }
            })(function(root, Backbone, _, $) {
                var previousBackbone = root.Backbone;
                var slice = Array.prototype.slice;
                Backbone.VERSION = "1.2.3";
                Backbone.$ = $;
                Backbone.noConflict = function() {
                    root.Backbone = previousBackbone;
                    return this
                };
                Backbone.emulateHTTP = false;
                Backbone.emulateJSON = false;
                var addMethod = function(length, method, attribute) {
                    switch (length) {
                        case 1:
                            return function() {
                                return _[method](this[attribute])
                            };
                        case 2:
                            return function(value) {
                                return _[method](this[attribute], value)
                            };
                        case 3:
                            return function(iteratee, context) {
                                return _[method](this[attribute], cb(iteratee, this), context)
                            };
                        case 4:
                            return function(iteratee, defaultVal, context) {
                                return _[method](this[attribute], cb(iteratee, this), defaultVal, context)
                            };
                        default:
                            return function() {
                                var args = slice.call(arguments);
                                args.unshift(this[attribute]);
                                return _[method].apply(_, args)
                            }
                    }
                };
                var addUnderscoreMethods = function(Class, methods, attribute) {
                    _.each(methods, function(length, method) {
                        if (_[method]) Class.prototype[method] = addMethod(length, method, attribute)
                    })
                };
                var cb = function(iteratee, instance) {
                    if (_.isFunction(iteratee)) return iteratee;
                    if (_.isObject(iteratee) && !instance._isModel(iteratee)) return modelMatcher(iteratee);
                    if (_.isString(iteratee)) return function(model) {
                        return model.get(iteratee)
                    };
                    return iteratee
                };
                var modelMatcher = function(attrs) {
                    var matcher = _.matches(attrs);
                    return function(model) {
                        return matcher(model.attributes)
                    }
                };
                var Events = Backbone.Events = {};
                var eventSplitter = /\s+/;
                var eventsApi = function(iteratee, events, name, callback, opts) {
                    var i = 0,
                        names;
                    if (name && typeof name === "object") {
                        if (callback !== void 0 && "context" in opts && opts.context === void 0) opts.context = callback;
                        for (names = _.keys(name); i < names.length; i++) {
                            events = eventsApi(iteratee, events, names[i], name[names[i]], opts)
                        }
                    } else if (name && eventSplitter.test(name)) {
                        for (names = name.split(eventSplitter); i < names.length; i++) {
                            events = iteratee(events, names[i], callback, opts)
                        }
                    } else {
                        events = iteratee(events, name, callback, opts)
                    }
                    return events
                };
                Events.on = function(name, callback, context) {
                    return internalOn(this, name, callback, context)
                };
                var internalOn = function(obj, name, callback, context, listening) {
                    obj._events = eventsApi(onApi, obj._events || {}, name, callback, {
                        context: context,
                        ctx: obj,
                        listening: listening
                    });
                    if (listening) {
                        var listeners = obj._listeners || (obj._listeners = {});
                        listeners[listening.id] = listening
                    }
                    return obj
                };
                Events.listenTo = function(obj, name, callback) {
                    if (!obj) return this;
                    var id = obj._listenId || (obj._listenId = _.uniqueId("l"));
                    var listeningTo = this._listeningTo || (this._listeningTo = {});
                    var listening = listeningTo[id];
                    if (!listening) {
                        var thisId = this._listenId || (this._listenId = _.uniqueId("l"));
                        listening = listeningTo[id] = {
                            obj: obj,
                            objId: id,
                            id: thisId,
                            listeningTo: listeningTo,
                            count: 0
                        }
                    }
                    internalOn(obj, name, callback, this, listening);
                    return this
                };
                var onApi = function(events, name, callback, options) {
                    if (callback) {
                        var handlers = events[name] || (events[name] = []);
                        var context = options.context,
                            ctx = options.ctx,
                            listening = options.listening;
                        if (listening) listening.count++;
                        handlers.push({
                            callback: callback,
                            context: context,
                            ctx: context || ctx,
                            listening: listening
                        })
                    }
                    return events
                };
                Events.off = function(name, callback, context) {
                    if (!this._events) return this;
                    this._events = eventsApi(offApi, this._events, name, callback, {
                        context: context,
                        listeners: this._listeners
                    });
                    return this
                };
                Events.stopListening = function(obj, name, callback) {
                    var listeningTo = this._listeningTo;
                    if (!listeningTo) return this;
                    var ids = obj ? [obj._listenId] : _.keys(listeningTo);
                    for (var i = 0; i < ids.length; i++) {
                        var listening = listeningTo[ids[i]];
                        if (!listening) break;
                        listening.obj.off(name, callback, this)
                    }
                    if (_.isEmpty(listeningTo)) this._listeningTo = void 0;
                    return this
                };
                var offApi = function(events, name, callback, options) {
                    if (!events) return;
                    var i = 0,
                        listening;
                    var context = options.context,
                        listeners = options.listeners;
                    if (!name && !callback && !context) {
                        var ids = _.keys(listeners);
                        for (; i < ids.length; i++) {
                            listening = listeners[ids[i]];
                            delete listeners[listening.id];
                            delete listening.listeningTo[listening.objId]
                        }
                        return
                    }
                    var names = name ? [name] : _.keys(events);
                    for (; i < names.length; i++) {
                        name = names[i];
                        var handlers = events[name];
                        if (!handlers) break;
                        var remaining = [];
                        for (var j = 0; j < handlers.length; j++) {
                            var handler = handlers[j];
                            if (callback && callback !== handler.callback && callback !== handler.callback._callback || context && context !== handler.context) {
                                remaining.push(handler)
                            } else {
                                listening = handler.listening;
                                if (listening && --listening.count === 0) {
                                    delete listeners[listening.id];
                                    delete listening.listeningTo[listening.objId]
                                }
                            }
                        }
                        if (remaining.length) {
                            events[name] = remaining
                        } else {
                            delete events[name]
                        }
                    }
                    if (_.size(events)) return events
                };
                Events.once = function(name, callback, context) {
                    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.off, this));
                    return this.on(events, void 0, context)
                };
                Events.listenToOnce = function(obj, name, callback) {
                    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.stopListening, this, obj));
                    return this.listenTo(obj, events)
                };
                var onceMap = function(map, name, callback, offer) {
                    if (callback) {
                        var once = map[name] = _.once(function() {
                            offer(name, once);
                            callback.apply(this, arguments)
                        });
                        once._callback = callback
                    }
                    return map
                };
                Events.trigger = function(name) {
                    if (!this._events) return this;
                    var length = Math.max(0, arguments.length - 1);
                    var args = Array(length);
                    for (var i = 0; i < length; i++) args[i] = arguments[i + 1];
                    eventsApi(triggerApi, this._events, name, void 0, args);
                    return this
                };
                var triggerApi = function(objEvents, name, cb, args) {
                    if (objEvents) {
                        var events = objEvents[name];
                        var allEvents = objEvents.all;
                        if (events && allEvents) allEvents = allEvents.slice();
                        if (events) triggerEvents(events, args);
                        if (allEvents) triggerEvents(allEvents, [name].concat(args))
                    }
                    return objEvents
                };
                var triggerEvents = function(events, args) {
                    var ev, i = -1,
                        l = events.length,
                        a1 = args[0],
                        a2 = args[1],
                        a3 = args[2];
                    switch (args.length) {
                        case 0:
                            while (++i < l)(ev = events[i]).callback.call(ev.ctx);
                            return;
                        case 1:
                            while (++i < l)(ev = events[i]).callback.call(ev.ctx, a1);
                            return;
                        case 2:
                            while (++i < l)(ev = events[i]).callback.call(ev.ctx, a1, a2);
                            return;
                        case 3:
                            while (++i < l)(ev = events[i]).callback.call(ev.ctx, a1, a2, a3);
                            return;
                        default:
                            while (++i < l)(ev = events[i]).callback.apply(ev.ctx, args);
                            return
                    }
                };
                Events.bind = Events.on;
                Events.unbind = Events.off;
                _.extend(Backbone, Events);
                var Model = Backbone.Model = function(attributes, options) {
                    var attrs = attributes || {};
                    options || (options = {});
                    this.cid = _.uniqueId(this.cidPrefix);
                    this.attributes = {};
                    if (options.collection) this.collection = options.collection;
                    if (options.parse) attrs = this.parse(attrs, options) || {};
                    attrs = _.defaults({}, attrs, _.result(this, "defaults"));
                    this.set(attrs, options);
                    this.changed = {};
                    this.initialize.apply(this, arguments)
                };
                _.extend(Model.prototype, Events, {
                    changed: null,
                    validationError: null,
                    idAttribute: "id",
                    cidPrefix: "c",
                    initialize: function() {},
                    toJSON: function(options) {
                        return _.clone(this.attributes)
                    },
                    sync: function() {
                        return Backbone.sync.apply(this, arguments)
                    },
                    get: function(attr) {
                        return this.attributes[attr]
                    },
                    escape: function(attr) {
                        return _.escape(this.get(attr))
                    },
                    has: function(attr) {
                        return this.get(attr) != null
                    },
                    matches: function(attrs) {
                        return !!_.iteratee(attrs, this)(this.attributes)
                    },
                    set: function(key, val, options) {
                        if (key == null) return this;
                        var attrs;
                        if (typeof key === "object") {
                            attrs = key;
                            options = val
                        } else {
                            (attrs = {})[key] = val
                        }
                        options || (options = {});
                        if (!this._validate(attrs, options)) return false;
                        var unset = options.unset;
                        var silent = options.silent;
                        var changes = [];
                        var changing = this._changing;
                        this._changing = true;
                        if (!changing) {
                            this._previousAttributes = _.clone(this.attributes);
                            this.changed = {}
                        }
                        var current = this.attributes;
                        var changed = this.changed;
                        var prev = this._previousAttributes;
                        for (var attr in attrs) {
                            val = attrs[attr];
                            if (!_.isEqual(current[attr], val)) changes.push(attr);
                            if (!_.isEqual(prev[attr], val)) {
                                changed[attr] = val
                            } else {
                                delete changed[attr]
                            }
                            unset ? delete current[attr] : current[attr] = val
                        }
                        this.id = this.get(this.idAttribute);
                        if (!silent) {
                            if (changes.length) this._pending = options;
                            for (var i = 0; i < changes.length; i++) {
                                this.trigger("change:" + changes[i], this, current[changes[i]], options)
                            }
                        }
                        if (changing) return this;
                        if (!silent) {
                            while (this._pending) {
                                options = this._pending;
                                this._pending = false;
                                this.trigger("change", this, options)
                            }
                        }
                        this._pending = false;
                        this._changing = false;
                        return this
                    },
                    unset: function(attr, options) {
                        return this.set(attr, void 0, _.extend({}, options, {
                            unset: true
                        }))
                    },
                    clear: function(options) {
                        var attrs = {};
                        for (var key in this.attributes) attrs[key] = void 0;
                        return this.set(attrs, _.extend({}, options, {
                            unset: true
                        }))
                    },
                    hasChanged: function(attr) {
                        if (attr == null) return !_.isEmpty(this.changed);
                        return _.has(this.changed, attr)
                    },
                    changedAttributes: function(diff) {
                        if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
                        var old = this._changing ? this._previousAttributes : this.attributes;
                        var changed = {};
                        for (var attr in diff) {
                            var val = diff[attr];
                            if (_.isEqual(old[attr], val)) continue;
                            changed[attr] = val
                        }
                        return _.size(changed) ? changed : false
                    },
                    previous: function(attr) {
                        if (attr == null || !this._previousAttributes) return null;
                        return this._previousAttributes[attr]
                    },
                    previousAttributes: function() {
                        return _.clone(this._previousAttributes)
                    },
                    fetch: function(options) {
                        options = _.extend({
                            parse: true
                        }, options);
                        var model = this;
                        var success = options.success;
                        options.success = function(resp) {
                            var serverAttrs = options.parse ? model.parse(resp, options) : resp;
                            if (!model.set(serverAttrs, options)) return false;
                            if (success) success.call(options.context, model, resp, options);
                            model.trigger("sync", model, resp, options)
                        };
                        wrapError(this, options);
                        return this.sync("read", this, options)
                    },
                    save: function(key, val, options) {
                        var attrs;
                        if (key == null || typeof key === "object") {
                            attrs = key;
                            options = val
                        } else {
                            (attrs = {})[key] = val
                        }
                        options = _.extend({
                            validate: true,
                            parse: true
                        }, options);
                        var wait = options.wait;
                        if (attrs && !wait) {
                            if (!this.set(attrs, options)) return false
                        } else {
                            if (!this._validate(attrs, options)) return false
                        }
                        var model = this;
                        var success = options.success;
                        var attributes = this.attributes;
                        options.success = function(resp) {
                            model.attributes = attributes;
                            var serverAttrs = options.parse ? model.parse(resp, options) : resp;
                            if (wait) serverAttrs = _.extend({}, attrs, serverAttrs);
                            if (serverAttrs && !model.set(serverAttrs, options)) return false;
                            if (success) success.call(options.context, model, resp, options);
                            model.trigger("sync", model, resp, options)
                        };
                        wrapError(this, options);
                        if (attrs && wait) this.attributes = _.extend({}, attributes, attrs);
                        var method = this.isNew() ? "create" : options.patch ? "patch" : "update";
                        if (method === "patch" && !options.attrs) options.attrs = attrs;
                        var xhr = this.sync(method, this, options);
                        this.attributes = attributes;
                        return xhr
                    },
                    destroy: function(options) {
                        options = options ? _.clone(options) : {};
                        var model = this;
                        var success = options.success;
                        var wait = options.wait;
                        var destroy = function() {
                            model.stopListening();
                            model.trigger("destroy", model, model.collection, options)
                        };
                        options.success = function(resp) {
                            if (wait) destroy();
                            if (success) success.call(options.context, model, resp, options);
                            if (!model.isNew()) model.trigger("sync", model, resp, options)
                        };
                        var xhr = false;
                        if (this.isNew()) {
                            _.defer(options.success)
                        } else {
                            wrapError(this, options);
                            xhr = this.sync("delete", this, options)
                        }
                        if (!wait) destroy();
                        return xhr
                    },
                    url: function() {
                        var base = _.result(this, "urlRoot") || _.result(this.collection, "url") || urlError();
                        if (this.isNew()) return base;
                        var id = this.get(this.idAttribute);
                        return base.replace(/[^\/]$/, "$&/") + encodeURIComponent(id)
                    },
                    parse: function(resp, options) {
                        return resp
                    },
                    clone: function() {
                        return new this.constructor(this.attributes)
                    },
                    isNew: function() {
                        return !this.has(this.idAttribute)
                    },
                    isValid: function(options) {
                        return this._validate({}, _.defaults({
                            validate: true
                        }, options))
                    },
                    _validate: function(attrs, options) {
                        if (!options.validate || !this.validate) return true;
                        attrs = _.extend({}, this.attributes, attrs);
                        var error = this.validationError = this.validate(attrs, options) || null;
                        if (!error) return true;
                        this.trigger("invalid", this, error, _.extend(options, {
                            validationError: error
                        }));
                        return false
                    }
                });
                var modelMethods = {
                    keys: 1,
                    values: 1,
                    pairs: 1,
                    invert: 1,
                    pick: 0,
                    omit: 0,
                    chain: 1,
                    isEmpty: 1
                };
                addUnderscoreMethods(Model, modelMethods, "attributes");
                var Collection = Backbone.Collection = function(models, options) {
                    options || (options = {});
                    if (options.model) this.model = options.model;
                    if (options.comparator !== void 0) this.comparator = options.comparator;
                    this._reset();
                    this.initialize.apply(this, arguments);
                    if (models) this.reset(models, _.extend({
                        silent: true
                    }, options))
                };
                var setOptions = {
                    add: true,
                    remove: true,
                    merge: true
                };
                var addOptions = {
                    add: true,
                    remove: false
                };
                var splice = function(array, insert, at) {
                    at = Math.min(Math.max(at, 0), array.length);
                    var tail = Array(array.length - at);
                    var length = insert.length;
                    for (var i = 0; i < tail.length; i++) tail[i] = array[i + at];
                    for (i = 0; i < length; i++) array[i + at] = insert[i];
                    for (i = 0; i < tail.length; i++) array[i + length + at] = tail[i]
                };
                _.extend(Collection.prototype, Events, {
                    model: Model,
                    initialize: function() {},
                    toJSON: function(options) {
                        return this.map(function(model) {
                            return model.toJSON(options)
                        })
                    },
                    sync: function() {
                        return Backbone.sync.apply(this, arguments)
                    },
                    add: function(models, options) {
                        return this.set(models, _.extend({
                            merge: false
                        }, options, addOptions))
                    },
                    remove: function(models, options) {
                        options = _.extend({}, options);
                        var singular = !_.isArray(models);
                        models = singular ? [models] : _.clone(models);
                        var removed = this._removeModels(models, options);
                        if (!options.silent && removed) this.trigger("update", this, options);
                        return singular ? removed[0] : removed
                    },
                    set: function(models, options) {
                        if (models == null) return;
                        options = _.defaults({}, options, setOptions);
                        if (options.parse && !this._isModel(models)) models = this.parse(models, options);
                        var singular = !_.isArray(models);
                        models = singular ? [models] : models.slice();
                        var at = options.at;
                        if (at != null) at = +at;
                        if (at < 0) at += this.length + 1;
                        var set = [];
                        var toAdd = [];
                        var toRemove = [];
                        var modelMap = {};
                        var add = options.add;
                        var merge = options.merge;
                        var remove = options.remove;
                        var sort = false;
                        var sortable = this.comparator && at == null && options.sort !== false;
                        var sortAttr = _.isString(this.comparator) ? this.comparator : null;
                        var model;
                        for (var i = 0; i < models.length; i++) {
                            model = models[i];
                            var existing = this.get(model);
                            if (existing) {
                                if (merge && model !== existing) {
                                    var attrs = this._isModel(model) ? model.attributes : model;
                                    if (options.parse) attrs = existing.parse(attrs, options);
                                    existing.set(attrs, options);
                                    if (sortable && !sort) sort = existing.hasChanged(sortAttr)
                                }
                                if (!modelMap[existing.cid]) {
                                    modelMap[existing.cid] = true;
                                    set.push(existing)
                                }
                                models[i] = existing
                            } else if (add) {
                                model = models[i] = this._prepareModel(model, options);
                                if (model) {
                                    toAdd.push(model);
                                    this._addReference(model, options);
                                    modelMap[model.cid] = true;
                                    set.push(model)
                                }
                            }
                        }
                        if (remove) {
                            for (i = 0; i < this.length; i++) {
                                model = this.models[i];
                                if (!modelMap[model.cid]) toRemove.push(model)
                            }
                            if (toRemove.length) this._removeModels(toRemove, options)
                        }
                        var orderChanged = false;
                        var replace = !sortable && add && remove;
                        if (set.length && replace) {
                            orderChanged = this.length != set.length || _.some(this.models, function(model, index) {
                                return model !== set[index]
                            });
                            this.models.length = 0;
                            splice(this.models, set, 0);
                            this.length = this.models.length
                        } else if (toAdd.length) {
                            if (sortable) sort = true;
                            splice(this.models, toAdd, at == null ? this.length : at);
                            this.length = this.models.length
                        }
                        if (sort) this.sort({
                            silent: true
                        });
                        if (!options.silent) {
                            for (i = 0; i < toAdd.length; i++) {
                                if (at != null) options.index = at + i;
                                model = toAdd[i];
                                model.trigger("add", model, this, options)
                            }
                            if (sort || orderChanged) this.trigger("sort", this, options);
                            if (toAdd.length || toRemove.length) this.trigger("update", this, options)
                        }
                        return singular ? models[0] : models
                    },
                    reset: function(models, options) {
                        options = options ? _.clone(options) : {};
                        for (var i = 0; i < this.models.length; i++) {
                            this._removeReference(this.models[i], options)
                        }
                        options.previousModels = this.models;
                        this._reset();
                        models = this.add(models, _.extend({
                            silent: true
                        }, options));
                        if (!options.silent) this.trigger("reset", this, options);
                        return models
                    },
                    push: function(model, options) {
                        return this.add(model, _.extend({
                            at: this.length
                        }, options))
                    },
                    pop: function(options) {
                        var model = this.at(this.length - 1);
                        return this.remove(model, options)
                    },
                    unshift: function(model, options) {
                        return this.add(model, _.extend({
                            at: 0
                        }, options))
                    },
                    shift: function(options) {
                        var model = this.at(0);
                        return this.remove(model, options)
                    },
                    slice: function() {
                        return slice.apply(this.models, arguments)
                    },
                    get: function(obj) {
                        if (obj == null) return void 0;
                        var id = this.modelId(this._isModel(obj) ? obj.attributes : obj);
                        return this._byId[obj] || this._byId[id] || this._byId[obj.cid]
                    },
                    at: function(index) {
                        if (index < 0) index += this.length;
                        return this.models[index]
                    },
                    where: function(attrs, first) {
                        return this[first ? "find" : "filter"](attrs)
                    },
                    findWhere: function(attrs) {
                        return this.where(attrs, true)
                    },
                    sort: function(options) {
                        var comparator = this.comparator;
                        if (!comparator) throw new Error("Cannot sort a set without a comparator");
                        options || (options = {});
                        var length = comparator.length;
                        if (_.isFunction(comparator)) comparator = _.bind(comparator, this);
                        if (length === 1 || _.isString(comparator)) {
                            this.models = this.sortBy(comparator)
                        } else {
                            this.models.sort(comparator)
                        }
                        if (!options.silent) this.trigger("sort", this, options);
                        return this
                    },
                    pluck: function(attr) {
                        return _.invoke(this.models, "get", attr)
                    },
                    fetch: function(options) {
                        options = _.extend({
                            parse: true
                        }, options);
                        var success = options.success;
                        var collection = this;
                        options.success = function(resp) {
                            var method = options.reset ? "reset" : "set";
                            collection[method](resp, options);
                            if (success) success.call(options.context, collection, resp, options);
                            collection.trigger("sync", collection, resp, options)
                        };
                        wrapError(this, options);
                        return this.sync("read", this, options)
                    },
                    create: function(model, options) {
                        options = options ? _.clone(options) : {};
                        var wait = options.wait;
                        model = this._prepareModel(model, options);
                        if (!model) return false;
                        if (!wait) this.add(model, options);
                        var collection = this;
                        var success = options.success;
                        options.success = function(model, resp, callbackOpts) {
                            if (wait) collection.add(model, callbackOpts);
                            if (success) success.call(callbackOpts.context, model, resp, callbackOpts)
                        };
                        model.save(null, options);
                        return model
                    },
                    parse: function(resp, options) {
                        return resp
                    },
                    clone: function() {
                        return new this.constructor(this.models, {
                            model: this.model,
                            comparator: this.comparator
                        })
                    },
                    modelId: function(attrs) {
                        return attrs[this.model.prototype.idAttribute || "id"]
                    },
                    _reset: function() {
                        this.length = 0;
                        this.models = [];
                        this._byId = {}
                    },
                    _prepareModel: function(attrs, options) {
                        if (this._isModel(attrs)) {
                            if (!attrs.collection) attrs.collection = this;
                            return attrs
                        }
                        options = options ? _.clone(options) : {};
                        options.collection = this;
                        var model = new this.model(attrs, options);
                        if (!model.validationError) return model;
                        this.trigger("invalid", this, model.validationError, options);
                        return false
                    },
                    _removeModels: function(models, options) {
                        var removed = [];
                        for (var i = 0; i < models.length; i++) {
                            var model = this.get(models[i]);
                            if (!model) continue;
                            var index = this.indexOf(model);
                            this.models.splice(index, 1);
                            this.length--;
                            if (!options.silent) {
                                options.index = index;
                                model.trigger("remove", model, this, options)
                            }
                            removed.push(model);
                            this._removeReference(model, options)
                        }
                        return removed.length ? removed : false
                    },
                    _isModel: function(model) {
                        return model instanceof Model
                    },
                    _addReference: function(model, options) {
                        this._byId[model.cid] = model;
                        var id = this.modelId(model.attributes);
                        if (id != null) this._byId[id] = model;
                        model.on("all", this._onModelEvent, this)
                    },
                    _removeReference: function(model, options) {
                        delete this._byId[model.cid];
                        var id = this.modelId(model.attributes);
                        if (id != null) delete this._byId[id];
                        if (this === model.collection) delete model.collection;
                        model.off("all", this._onModelEvent, this)
                    },
                    _onModelEvent: function(event, model, collection, options) {
                        if ((event === "add" || event === "remove") && collection !== this) return;
                        if (event === "destroy") this.remove(model, options);
                        if (event === "change") {
                            var prevId = this.modelId(model.previousAttributes());
                            var id = this.modelId(model.attributes);
                            if (prevId !== id) {
                                if (prevId != null) delete this._byId[prevId];
                                if (id != null) this._byId[id] = model
                            }
                        }
                        this.trigger.apply(this, arguments)
                    }
                });
                var collectionMethods = {
                    forEach: 3,
                    each: 3,
                    map: 3,
                    collect: 3,
                    reduce: 4,
                    foldl: 4,
                    inject: 4,
                    reduceRight: 4,
                    foldr: 4,
                    find: 3,
                    detect: 3,
                    filter: 3,
                    select: 3,
                    reject: 3,
                    every: 3,
                    all: 3,
                    some: 3,
                    any: 3,
                    include: 3,
                    includes: 3,
                    contains: 3,
                    invoke: 0,
                    max: 3,
                    min: 3,
                    toArray: 1,
                    size: 1,
                    first: 3,
                    head: 3,
                    take: 3,
                    initial: 3,
                    rest: 3,
                    tail: 3,
                    drop: 3,
                    last: 3,
                    without: 0,
                    difference: 0,
                    indexOf: 3,
                    shuffle: 1,
                    lastIndexOf: 3,
                    isEmpty: 1,
                    chain: 1,
                    sample: 3,
                    partition: 3,
                    groupBy: 3,
                    countBy: 3,
                    sortBy: 3,
                    indexBy: 3
                };
                addUnderscoreMethods(Collection, collectionMethods, "models");
                var View = Backbone.View = function(options) {
                    this.cid = _.uniqueId("view");
                    _.extend(this, _.pick(options, viewOptions));
                    this._ensureElement();
                    this.initialize.apply(this, arguments)
                };
                var delegateEventSplitter = /^(\S+)\s*(.*)$/;
                var viewOptions = ["model", "collection", "el", "id", "attributes", "className", "tagName", "events"];
                _.extend(View.prototype, Events, {
                    tagName: "div",
                    $: function(selector) {
                        return this.$el.find(selector)
                    },
                    initialize: function() {},
                    render: function() {
                        return this
                    },
                    remove: function() {
                        this._removeElement();
                        this.stopListening();
                        return this
                    },
                    _removeElement: function() {
                        this.$el.remove()
                    },
                    setElement: function(element) {
                        this.undelegateEvents();
                        this._setElement(element);
                        this.delegateEvents();
                        return this
                    },
                    _setElement: function(el) {
                        this.$el = el instanceof Backbone.$ ? el : Backbone.$(el);
                        this.el = this.$el[0]
                    },
                    delegateEvents: function(events) {
                        events || (events = _.result(this, "events"));
                        if (!events) return this;
                        this.undelegateEvents();
                        for (var key in events) {
                            var method = events[key];
                            if (!_.isFunction(method)) method = this[method];
                            if (!method) continue;
                            var match = key.match(delegateEventSplitter);
                            this.delegate(match[1], match[2], _.bind(method, this))
                        }
                        return this
                    },
                    delegate: function(eventName, selector, listener) {
                        this.$el.on(eventName + ".delegateEvents" + this.cid, selector, listener);
                        return this
                    },
                    undelegateEvents: function() {
                        if (this.$el) this.$el.off(".delegateEvents" + this.cid);
                        return this
                    },
                    undelegate: function(eventName, selector, listener) {
                        this.$el.off(eventName + ".delegateEvents" + this.cid, selector, listener);
                        return this
                    },
                    _createElement: function(tagName) {
                        return document.createElement(tagName)
                    },
                    _ensureElement: function() {
                        if (!this.el) {
                            var attrs = _.extend({}, _.result(this, "attributes"));
                            if (this.id) attrs.id = _.result(this, "id");
                            if (this.className) attrs["class"] = _.result(this, "className");
                            this.setElement(this._createElement(_.result(this, "tagName")));
                            this._setAttributes(attrs)
                        } else {
                            this.setElement(_.result(this, "el"))
                        }
                    },
                    _setAttributes: function(attributes) {
                        this.$el.attr(attributes)
                    }
                });
                Backbone.sync = function(method, model, options) {
                    var type = methodMap[method];
                    _.defaults(options || (options = {}), {
                        emulateHTTP: Backbone.emulateHTTP,
                        emulateJSON: Backbone.emulateJSON
                    });
                    var params = {
                        type: type,
                        dataType: "json"
                    };
                    if (!options.url) {
                        params.url = _.result(model, "url") || urlError()
                    }
                    if (options.data == null && model && (method === "create" || method === "update" || method === "patch")) {
                        params.contentType = "application/json";
                        params.data = JSON.stringify(options.attrs || model.toJSON(options))
                    }
                    if (options.emulateJSON) {
                        params.contentType = "application/x-www-form-urlencoded";
                        params.data = params.data ? {
                            model: params.data
                        } : {}
                    }
                    if (options.emulateHTTP && (type === "PUT" || type === "DELETE" || type === "PATCH")) {
                        params.type = "POST";
                        if (options.emulateJSON) params.data._method = type;
                        var beforeSend = options.beforeSend;
                        options.beforeSend = function(xhr) {
                            xhr.setRequestHeader("X-HTTP-Method-Override", type);
                            if (beforeSend) return beforeSend.apply(this, arguments)
                        }
                    }
                    if (params.type !== "GET" && !options.emulateJSON) {
                        params.processData = false
                    }
                    var error = options.error;
                    options.error = function(xhr, textStatus, errorThrown) {
                        options.textStatus = textStatus;
                        options.errorThrown = errorThrown;
                        if (error) error.call(options.context, xhr, textStatus, errorThrown)
                    };
                    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
                    model.trigger("request", model, xhr, options);
                    return xhr
                };
                var methodMap = {
                    create: "POST",
                    update: "PUT",
                    patch: "PATCH",
                    delete: "DELETE",
                    read: "GET"
                };
                Backbone.ajax = function() {
                    return Backbone.$.ajax.apply(Backbone.$, arguments)
                };
                var Router = Backbone.Router = function(options) {
                    options || (options = {});
                    if (options.routes) this.routes = options.routes;
                    this._bindRoutes();
                    this.initialize.apply(this, arguments)
                };
                var optionalParam = /\((.*?)\)/g;
                var namedParam = /(\(\?)?:\w+/g;
                var splatParam = /\*\w+/g;
                var escapeRegExp = /[\-{}\[\]+?.,\\\^$|#\s]/g;
                _.extend(Router.prototype, Events, {
                    initialize: function() {},
                    route: function(route, name, callback) {
                        if (!_.isRegExp(route)) route = this._routeToRegExp(route);
                        if (_.isFunction(name)) {
                            callback = name;
                            name = ""
                        }
                        if (!callback) callback = this[name];
                        var router = this;
                        Backbone.history.route(route, function(fragment) {
                            var args = router._extractParameters(route, fragment);
                            if (router.execute(callback, args, name) !== false) {
                                router.trigger.apply(router, ["route:" + name].concat(args));
                                router.trigger("route", name, args);
                                Backbone.history.trigger("route", router, name, args)
                            }
                        });
                        return this
                    },
                    execute: function(callback, args, name) {
                        if (callback) callback.apply(this, args)
                    },
                    navigate: function(fragment, options) {
                        Backbone.history.navigate(fragment, options);
                        return this
                    },
                    _bindRoutes: function() {
                        if (!this.routes) return;
                        this.routes = _.result(this, "routes");
                        var route, routes = _.keys(this.routes);
                        while ((route = routes.pop()) != null) {
                            this.route(route, this.routes[route])
                        }
                    },
                    _routeToRegExp: function(route) {
                        route = route.replace(escapeRegExp, "\\$&").replace(optionalParam, "(?:$1)?").replace(namedParam, function(match, optional) {
                            return optional ? match : "([^/?]+)"
                        }).replace(splatParam, "([^?]*?)");
                        return new RegExp("^" + route + "(?:\\?([\\s\\S]*))?$")
                    },
                    _extractParameters: function(route, fragment) {
                        var params = route.exec(fragment).slice(1);
                        return _.map(params, function(param, i) {
                            if (i === params.length - 1) return param || null;
                            return param ? decodeURIComponent(param) : null
                        })
                    }
                });
                var History = Backbone.History = function() {
                    this.handlers = [];
                    this.checkUrl = _.bind(this.checkUrl, this);
                    if (typeof window !== "undefined") {
                        this.location = window.location;
                        this.history = window.history
                    }
                };
                var routeStripper = /^[#\/]|\s+$/g;
                var rootStripper = /^\/+|\/+$/g;
                var pathStripper = /#.*$/;
                History.started = false;
                _.extend(History.prototype, Events, {
                    interval: 50,
                    atRoot: function() {
                        var path = this.location.pathname.replace(/[^\/]$/, "$&/");
                        return path === this.root && !this.getSearch()
                    },
                    matchRoot: function() {
                        var path = this.decodeFragment(this.location.pathname);
                        var root = path.slice(0, this.root.length - 1) + "/";
                        return root === this.root
                    },
                    decodeFragment: function(fragment) {
                        return decodeURI(fragment.replace(/%25/g, "%2525"))
                    },
                    getSearch: function() {
                        var match = this.location.href.replace(/#.*/, "").match(/\?.+/);
                        return match ? match[0] : ""
                    },
                    getHash: function(window) {
                        var match = (window || this).location.href.match(/#(.*)$/);
                        return match ? match[1] : ""
                    },
                    getPath: function() {
                        var path = this.decodeFragment(this.location.pathname + this.getSearch()).slice(this.root.length - 1);
                        return path.charAt(0) === "/" ? path.slice(1) : path
                    },
                    getFragment: function(fragment) {
                        if (fragment == null) {
                            if (this._usePushState || !this._wantsHashChange) {
                                fragment = this.getPath()
                            } else {
                                fragment = this.getHash()
                            }
                        }
                        return fragment.replace(routeStripper, "")
                    },
                    start: function(options) {
                        if (History.started) throw new Error("Backbone.history has already been started");
                        History.started = true;
                        this.options = _.extend({
                            root: "/"
                        }, this.options, options);
                        this.root = this.options.root;
                        this._wantsHashChange = this.options.hashChange !== false;
                        this._hasHashChange = "onhashchange" in window && (document.documentMode === void 0 || document.documentMode > 7);
                        this._useHashChange = this._wantsHashChange && this._hasHashChange;
                        this._wantsPushState = !!this.options.pushState;
                        this._hasPushState = !!(this.history && this.history.pushState);
                        this._usePushState = this._wantsPushState && this._hasPushState;
                        this.fragment = this.getFragment();
                        this.root = ("/" + this.root + "/").replace(rootStripper, "/");
                        if (this._wantsHashChange && this._wantsPushState) {
                            if (!this._hasPushState && !this.atRoot()) {
                                var root = this.root.slice(0, -1) || "/";
                                this.location.replace(root + "#" + this.getPath());
                                return true
                            } else if (this._hasPushState && this.atRoot()) {
                                this.navigate(this.getHash(), {
                                    replace: true
                                })
                            }
                        }
                        if (!this._hasHashChange && this._wantsHashChange && !this._usePushState) {
                            this.iframe = document.createElement("iframe");
                            this.iframe.src = "javascript:0";
                            this.iframe.style.display = "none";
                            this.iframe.tabIndex = -1;
                            var body = document.body;
                            var iWindow = body.insertBefore(this.iframe, body.firstChild).contentWindow;
                            iWindow.document.open();
                            iWindow.document.close();
                            iWindow.location.hash = "#" + this.fragment
                        }
                        var addEventListener = window.addEventListener || function(eventName, listener) {
                            return attachEvent("on" + eventName, listener)
                        };
                        if (this._usePushState) {
                            addEventListener("popstate", this.checkUrl, false)
                        } else if (this._useHashChange && !this.iframe) {
                            addEventListener("hashchange", this.checkUrl, false)
                        } else if (this._wantsHashChange) {
                            this._checkUrlInterval = setInterval(this.checkUrl, this.interval)
                        }
                        if (!this.options.silent) return this.loadUrl()
                    },
                    stop: function() {
                        var removeEventListener = window.removeEventListener || function(eventName, listener) {
                            return detachEvent("on" + eventName, listener)
                        };
                        if (this._usePushState) {
                            removeEventListener("popstate", this.checkUrl, false)
                        } else if (this._useHashChange && !this.iframe) {
                            removeEventListener("hashchange", this.checkUrl, false)
                        }
                        if (this.iframe) {
                            document.body.removeChild(this.iframe);
                            this.iframe = null
                        }
                        if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);
                        History.started = false
                    },
                    route: function(route, callback) {
                        this.handlers.unshift({
                            route: route,
                            callback: callback
                        })
                    },
                    checkUrl: function(e) {
                        var current = this.getFragment();
                        if (current === this.fragment && this.iframe) {
                            current = this.getHash(this.iframe.contentWindow)
                        }
                        if (current === this.fragment) return false;
                        if (this.iframe) this.navigate(current);
                        this.loadUrl()
                    },
                    loadUrl: function(fragment) {
                        if (!this.matchRoot()) return false;
                        fragment = this.fragment = this.getFragment(fragment);
                        return _.some(this.handlers, function(handler) {
                            if (handler.route.test(fragment)) {
                                handler.callback(fragment);
                                return true
                            }
                        })
                    },
                    navigate: function(fragment, options) {
                        if (!History.started) return false;
                        if (!options || options === true) options = {
                            trigger: !!options
                        };
                        fragment = this.getFragment(fragment || "");
                        var root = this.root;
                        if (fragment === "" || fragment.charAt(0) === "?") {
                            root = root.slice(0, -1) || "/"
                        }
                        var url = root + fragment;
                        fragment = this.decodeFragment(fragment.replace(pathStripper, ""));
                        if (this.fragment === fragment) return;
                        this.fragment = fragment;
                        if (this._usePushState) {
                            this.history[options.replace ? "replaceState" : "pushState"]({}, document.title, url)
                        } else if (this._wantsHashChange) {
                            this._updateHash(this.location, fragment, options.replace);
                            if (this.iframe && fragment !== this.getHash(this.iframe.contentWindow)) {
                                var iWindow = this.iframe.contentWindow;
                                if (!options.replace) {
                                    iWindow.document.open();
                                    iWindow.document.close()
                                }
                                this._updateHash(iWindow.location, fragment, options.replace)
                            }
                        } else {
                            return this.location.assign(url)
                        }
                        if (options.trigger) return this.loadUrl(fragment)
                    },
                    _updateHash: function(location, fragment, replace) {
                        if (replace) {
                            var href = location.href.replace(/(javascript:|#).*$/, "");
                            location.replace(href + "#" + fragment)
                        } else {
                            location.hash = "#" + fragment
                        }
                    }
                });
                Backbone.history = new History;
                var extend = function(protoProps, staticProps) {
                    var parent = this;
                    var child;
                    if (protoProps && _.has(protoProps, "constructor")) {
                        child = protoProps.constructor
                    } else {
                        child = function() {
                            return parent.apply(this, arguments)
                        }
                    }
                    _.extend(child, parent, staticProps);
                    var Surrogate = function() {
                        this.constructor = child
                    };
                    Surrogate.prototype = parent.prototype;
                    child.prototype = new Surrogate;
                    if (protoProps) _.extend(child.prototype, protoProps);
                    child.__super__ = parent.prototype;
                    return child
                };
                Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;
                var urlError = function() {
                    throw new Error('A "url" property or function must be specified')
                };
                var wrapError = function(model, options) {
                    var error = options.error;
                    options.error = function(resp) {
                        if (error) error.call(options.context, model, resp, options);
                        model.trigger("error", model, resp, options)
                    }
                };
                return Backbone
            })
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {
        jquery: 16,
        underscore: 18
    }],
    4: [function(require, module, exports) {
        (function(root, factory) {
            if (typeof define === "function" && define.amd) {
                define(["backbone", "underscore"], function(Backbone, _) {
                    return factory(Backbone, _)
                })
            } else if (typeof exports !== "undefined") {
                var Backbone = require("backbone");
                var _ = require("underscore");
                module.exports = factory(Backbone, _)
            } else {
                factory(root.Backbone, root._)
            }
        })(this, function(Backbone, _) {
            "use strict";
            var previousRadio = Backbone.Radio;
            var Radio = Backbone.Radio = {};
            Radio.VERSION = "0.9.0";
            Radio.noConflict = function() {
                Backbone.Radio = previousRadio;
                return this
            };
            Radio.DEBUG = false;
            Radio._debugText = function(warning, eventName, channelName) {
                return warning + (channelName ? " on the " + channelName + " channel" : "") + ': "' + eventName + '"'
            };
            Radio.debugLog = function(warning, eventName, channelName) {
                if (Radio.DEBUG && console && console.warn) {
                    console.warn(Radio._debugText(warning, eventName, channelName))
                }
            };
            var eventSplitter = /\s+/;
            Radio._eventsApi = function(obj, action, name, rest) {
                if (!name) {
                    return false
                }
                var results = {};
                if (typeof name === "object") {
                    for (var key in name) {
                        var result = obj[action].apply(obj, [key, name[key]].concat(rest));
                        eventSplitter.test(key) ? _.extend(results, result) : results[key] = result
                    }
                    return results
                }
                if (eventSplitter.test(name)) {
                    var names = name.split(eventSplitter);
                    for (var i = 0, l = names.length; i < l; i++) {
                        results[names[i]] = obj[action].apply(obj, [names[i]].concat(rest))
                    }
                    return results
                }
                return false
            };
            Radio._callHandler = function(callback, context, args) {
                var a1 = args[0],
                    a2 = args[1],
                    a3 = args[2];
                switch (args.length) {
                    case 0:
                        return callback.call(context);
                    case 1:
                        return callback.call(context, a1);
                    case 2:
                        return callback.call(context, a1, a2);
                    case 3:
                        return callback.call(context, a1, a2, a3);
                    default:
                        return callback.apply(context, args)
                }
            };

            function removeHandler(store, name, callback, context) {
                var event = store[name];
                if ((!callback || (callback === event.callback || callback === event.callback._callback)) && (!context || context === event.context)) {
                    delete store[name];
                    return true
                }
            }

            function removeHandlers(store, name, callback, context) {
                store || (store = {});
                var names = name ? [name] : _.keys(store);
                var matched = false;
                for (var i = 0, length = names.length; i < length; i++) {
                    name = names[i];
                    if (!store[name]) {
                        continue
                    }
                    if (removeHandler(store, name, callback, context)) {
                        matched = true
                    }
                }
                return matched
            }
            var _logs = {};

            function _partial(channelName) {
                return _logs[channelName] || (_logs[channelName] = _.partial(Radio.log, channelName))
            }
            _.extend(Radio, {
                log: function(channelName, eventName) {
                    var args = _.rest(arguments, 2);
                    console.log("[" + channelName + '] "' + eventName + '"', args)
                },
                tuneIn: function(channelName) {
                    var channel = Radio.channel(channelName);
                    channel._tunedIn = true;
                    channel.on("all", _partial(channelName));
                    return this
                },
                tuneOut: function(channelName) {
                    var channel = Radio.channel(channelName);
                    channel._tunedIn = false;
                    channel.off("all", _partial(channelName));
                    delete _logs[channelName];
                    return this
                }
            });
            Radio.Commands = {
                command: function(name) {
                    var args = _.rest(arguments);
                    if (Radio._eventsApi(this, "command", name, args)) {
                        return this
                    }
                    var channelName = this.channelName;
                    var commands = this._commands;
                    if (channelName && this._tunedIn) {
                        Radio.log.apply(this, [channelName, name].concat(args))
                    }
                    if (commands && (commands[name] || commands["default"])) {
                        var handler = commands[name] || commands["default"];
                        args = commands[name] ? args : arguments;
                        Radio._callHandler(handler.callback, handler.context, args)
                    } else {
                        Radio.debugLog("An unhandled command was fired", name, channelName)
                    }
                    return this
                },
                comply: function(name, callback, context) {
                    if (Radio._eventsApi(this, "comply", name, [callback, context])) {
                        return this
                    }
                    this._commands || (this._commands = {});
                    if (this._commands[name]) {
                        Radio.debugLog("A command was overwritten", name, this.channelName)
                    }
                    this._commands[name] = {
                        callback: callback,
                        context: context || this
                    };
                    return this
                },
                complyOnce: function(name, callback, context) {
                    if (Radio._eventsApi(this, "complyOnce", name, [callback, context])) {
                        return this
                    }
                    var self = this;
                    var once = _.once(function() {
                        self.stopComplying(name);
                        return callback.apply(this, arguments)
                    });
                    return this.comply(name, once, context)
                },
                stopComplying: function(name, callback, context) {
                    if (Radio._eventsApi(this, "stopComplying", name)) {
                        return this
                    }
                    if (!name && !callback && !context) {
                        delete this._commands
                    } else if (!removeHandlers(this._commands, name, callback, context)) {
                        Radio.debugLog("Attempted to remove the unregistered command", name, this.channelName)
                    }
                    return this
                }
            };

            function makeCallback(callback) {
                return _.isFunction(callback) ? callback : function() {
                    return callback
                }
            }
            Radio.Requests = {
                request: function(name) {
                    var args = _.rest(arguments);
                    var results = Radio._eventsApi(this, "request", name, args);
                    if (results) {
                        return results
                    }
                    var channelName = this.channelName;
                    var requests = this._requests;
                    if (channelName && this._tunedIn) {
                        Radio.log.apply(this, [channelName, name].concat(args))
                    }
                    if (requests && (requests[name] || requests["default"])) {
                        var handler = requests[name] || requests["default"];
                        args = requests[name] ? args : arguments;
                        return Radio._callHandler(handler.callback, handler.context, args)
                    } else {
                        Radio.debugLog("An unhandled request was fired", name, channelName)
                    }
                },
                reply: function(name, callback, context) {
                    if (Radio._eventsApi(this, "reply", name, [callback, context])) {
                        return this
                    }
                    this._requests || (this._requests = {});
                    if (this._requests[name]) {
                        Radio.debugLog("A request was overwritten", name, this.channelName)
                    }
                    this._requests[name] = {
                        callback: makeCallback(callback),
                        context: context || this
                    };
                    return this
                },
                replyOnce: function(name, callback, context) {
                    if (Radio._eventsApi(this, "replyOnce", name, [callback, context])) {
                        return this
                    }
                    var self = this;
                    var once = _.once(function() {
                        self.stopReplying(name);
                        return makeCallback(callback).apply(this, arguments)
                    });
                    return this.reply(name, once, context)
                },
                stopReplying: function(name, callback, context) {
                    if (Radio._eventsApi(this, "stopReplying", name)) {
                        return this
                    }
                    if (!name && !callback && !context) {
                        delete this._requests
                    } else if (!removeHandlers(this._requests, name, callback, context)) {
                        Radio.debugLog("Attempted to remove the unregistered request", name, this.channelName)
                    }
                    return this
                }
            };
            Radio._channels = {};
            Radio.channel = function(channelName) {
                if (!channelName) {
                    throw new Error("You must provide a name for the channel.")
                }
                if (Radio._channels[channelName]) {
                    return Radio._channels[channelName]
                } else {
                    return Radio._channels[channelName] = new Radio.Channel(channelName)
                }
            };
            Radio.Channel = function(channelName) {
                this.channelName = channelName
            };
            _.extend(Radio.Channel.prototype, Backbone.Events, Radio.Commands, Radio.Requests, {
                reset: function() {
                    this.off();
                    this.stopListening();
                    this.stopComplying();
                    this.stopReplying();
                    return this
                }
            });
            var channel, args, systems = [Backbone.Events, Radio.Commands, Radio.Requests];
            _.each(systems, function(system) {
                _.each(system, function(method, methodName) {
                    Radio[methodName] = function(channelName) {
                        args = _.rest(arguments);
                        channel = this.channel(channelName);
                        return channel[methodName].apply(channel, args)
                    }
                })
            });
            Radio.reset = function(channelName) {
                var channels = !channelName ? this._channels : [this._channels[channelName]];
                _.invoke(channels, "reset")
            };
            return Radio
        })
    }, {
        backbone: 5,
        underscore: 6
    }],
    5: [function(require, module, exports) {
        (function(root, factory) {
            if (typeof define === "function" && define.amd) {
                define(["underscore", "jquery", "exports"], function(_, $, exports) {
                    root.Backbone = factory(root, exports, _, $)
                })
            } else if (typeof exports !== "undefined") {
                var _ = require("underscore");
                factory(root, exports, _)
            } else {
                root.Backbone = factory(root, {}, root._, root.jQuery || root.Zepto || root.ender || root.$)
            }
        })(this, function(root, Backbone, _, $) {
            var previousBackbone = root.Backbone;
            var array = [];
            var push = array.push;
            var slice = array.slice;
            var splice = array.splice;
            Backbone.VERSION = "1.1.2";
            Backbone.$ = $;
            Backbone.noConflict = function() {
                root.Backbone = previousBackbone;
                return this
            };
            Backbone.emulateHTTP = false;
            Backbone.emulateJSON = false;
            var Events = Backbone.Events = {
                on: function(name, callback, context) {
                    if (!eventsApi(this, "on", name, [callback, context]) || !callback) return this;
                    this._events || (this._events = {});
                    var events = this._events[name] || (this._events[name] = []);
                    events.push({
                        callback: callback,
                        context: context,
                        ctx: context || this
                    });
                    return this
                },
                once: function(name, callback, context) {
                    if (!eventsApi(this, "once", name, [callback, context]) || !callback) return this;
                    var self = this;
                    var once = _.once(function() {
                        self.off(name, once);
                        callback.apply(this, arguments)
                    });
                    once._callback = callback;
                    return this.on(name, once, context)
                },
                off: function(name, callback, context) {
                    var retain, ev, events, names, i, l, j, k;
                    if (!this._events || !eventsApi(this, "off", name, [callback, context])) return this;
                    if (!name && !callback && !context) {
                        this._events = void 0;
                        return this
                    }
                    names = name ? [name] : _.keys(this._events);
                    for (i = 0, l = names.length; i < l; i++) {
                        name = names[i];
                        if (events = this._events[name]) {
                            this._events[name] = retain = [];
                            if (callback || context) {
                                for (j = 0, k = events.length; j < k; j++) {
                                    ev = events[j];
                                    if (callback && callback !== ev.callback && callback !== ev.callback._callback || context && context !== ev.context) {
                                        retain.push(ev)
                                    }
                                }
                            }
                            if (!retain.length) delete this._events[name]
                        }
                    }
                    return this
                },
                trigger: function(name) {
                    if (!this._events) return this;
                    var args = slice.call(arguments, 1);
                    if (!eventsApi(this, "trigger", name, args)) return this;
                    var events = this._events[name];
                    var allEvents = this._events.all;
                    if (events) triggerEvents(events, args);
                    if (allEvents) triggerEvents(allEvents, arguments);
                    return this
                },
                stopListening: function(obj, name, callback) {
                    var listeningTo = this._listeningTo;
                    if (!listeningTo) return this;
                    var remove = !name && !callback;
                    if (!callback && typeof name === "object") callback = this;
                    if (obj)(listeningTo = {})[obj._listenId] = obj;
                    for (var id in listeningTo) {
                        obj = listeningTo[id];
                        obj.off(name, callback, this);
                        if (remove || _.isEmpty(obj._events)) delete this._listeningTo[id]
                    }
                    return this
                }
            };
            var eventSplitter = /\s+/;
            var eventsApi = function(obj, action, name, rest) {
                if (!name) return true;
                if (typeof name === "object") {
                    for (var key in name) {
                        obj[action].apply(obj, [key, name[key]].concat(rest))
                    }
                    return false
                }
                if (eventSplitter.test(name)) {
                    var names = name.split(eventSplitter);
                    for (var i = 0, l = names.length; i < l; i++) {
                        obj[action].apply(obj, [names[i]].concat(rest))
                    }
                    return false
                }
                return true
            };
            var triggerEvents = function(events, args) {
                var ev, i = -1,
                    l = events.length,
                    a1 = args[0],
                    a2 = args[1],
                    a3 = args[2];
                switch (args.length) {
                    case 0:
                        while (++i < l)(ev = events[i]).callback.call(ev.ctx);
                        return;
                    case 1:
                        while (++i < l)(ev = events[i]).callback.call(ev.ctx, a1);
                        return;
                    case 2:
                        while (++i < l)(ev = events[i]).callback.call(ev.ctx, a1, a2);
                        return;
                    case 3:
                        while (++i < l)(ev = events[i]).callback.call(ev.ctx, a1, a2, a3);
                        return;
                    default:
                        while (++i < l)(ev = events[i]).callback.apply(ev.ctx, args);
                        return
                }
            };
            var listenMethods = {
                listenTo: "on",
                listenToOnce: "once"
            };
            _.each(listenMethods, function(implementation, method) {
                Events[method] = function(obj, name, callback) {
                    var listeningTo = this._listeningTo || (this._listeningTo = {});
                    var id = obj._listenId || (obj._listenId = _.uniqueId("l"));
                    listeningTo[id] = obj;
                    if (!callback && typeof name === "object") callback = this;
                    obj[implementation](name, callback, this);
                    return this
                }
            });
            Events.bind = Events.on;
            Events.unbind = Events.off;
            _.extend(Backbone, Events);
            var Model = Backbone.Model = function(attributes, options) {
                var attrs = attributes || {};
                options || (options = {});
                this.cid = _.uniqueId("c");
                this.attributes = {};
                if (options.collection) this.collection = options.collection;
                if (options.parse) attrs = this.parse(attrs, options) || {};
                attrs = _.defaults({}, attrs, _.result(this, "defaults"));
                this.set(attrs, options);
                this.changed = {};
                this.initialize.apply(this, arguments)
            };
            _.extend(Model.prototype, Events, {
                changed: null,
                validationError: null,
                idAttribute: "id",
                initialize: function() {},
                toJSON: function(options) {
                    return _.clone(this.attributes)
                },
                sync: function() {
                    return Backbone.sync.apply(this, arguments)
                },
                get: function(attr) {
                    return this.attributes[attr]
                },
                escape: function(attr) {
                    return _.escape(this.get(attr))
                },
                has: function(attr) {
                    return this.get(attr) != null
                },
                set: function(key, val, options) {
                    var attr, attrs, unset, changes, silent, changing, prev, current;
                    if (key == null) return this;
                    if (typeof key === "object") {
                        attrs = key;
                        options = val
                    } else {
                        (attrs = {})[key] = val
                    }
                    options || (options = {});
                    if (!this._validate(attrs, options)) return false;
                    unset = options.unset;
                    silent = options.silent;
                    changes = [];
                    changing = this._changing;
                    this._changing = true;
                    if (!changing) {
                        this._previousAttributes = _.clone(this.attributes);
                        this.changed = {}
                    }
                    current = this.attributes, prev = this._previousAttributes;
                    if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];
                    for (attr in attrs) {
                        val = attrs[attr];
                        if (!_.isEqual(current[attr], val)) changes.push(attr);
                        if (!_.isEqual(prev[attr], val)) {
                            this.changed[attr] = val
                        } else {
                            delete this.changed[attr]
                        }
                        unset ? delete current[attr] : current[attr] = val
                    }
                    if (!silent) {
                        if (changes.length) this._pending = options;
                        for (var i = 0, l = changes.length; i < l; i++) {
                            this.trigger("change:" + changes[i], this, current[changes[i]], options)
                        }
                    }
                    if (changing) return this;
                    if (!silent) {
                        while (this._pending) {
                            options = this._pending;
                            this._pending = false;
                            this.trigger("change", this, options)
                        }
                    }
                    this._pending = false;
                    this._changing = false;
                    return this
                },
                unset: function(attr, options) {
                    return this.set(attr, void 0, _.extend({}, options, {
                        unset: true
                    }))
                },
                clear: function(options) {
                    var attrs = {};
                    for (var key in this.attributes) attrs[key] = void 0;
                    return this.set(attrs, _.extend({}, options, {
                        unset: true
                    }))
                },
                hasChanged: function(attr) {
                    if (attr == null) return !_.isEmpty(this.changed);
                    return _.has(this.changed, attr)
                },
                changedAttributes: function(diff) {
                    if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
                    var val, changed = false;
                    var old = this._changing ? this._previousAttributes : this.attributes;
                    for (var attr in diff) {
                        if (_.isEqual(old[attr], val = diff[attr])) continue;
                        (changed || (changed = {}))[attr] = val
                    }
                    return changed
                },
                previous: function(attr) {
                    if (attr == null || !this._previousAttributes) return null;
                    return this._previousAttributes[attr]
                },
                previousAttributes: function() {
                    return _.clone(this._previousAttributes)
                },
                fetch: function(options) {
                    options = options ? _.clone(options) : {};
                    if (options.parse === void 0) options.parse = true;
                    var model = this;
                    var success = options.success;
                    options.success = function(resp) {
                        if (!model.set(model.parse(resp, options), options)) return false;
                        if (success) success(model, resp, options);
                        model.trigger("sync", model, resp, options)
                    };
                    wrapError(this, options);
                    return this.sync("read", this, options)
                },
                save: function(key, val, options) {
                    var attrs, method, xhr, attributes = this.attributes;
                    if (key == null || typeof key === "object") {
                        attrs = key;
                        options = val
                    } else {
                        (attrs = {})[key] = val
                    }
                    options = _.extend({
                        validate: true
                    }, options);
                    if (attrs && !options.wait) {
                        if (!this.set(attrs, options)) return false
                    } else {
                        if (!this._validate(attrs, options)) return false
                    }
                    if (attrs && options.wait) {
                        this.attributes = _.extend({}, attributes, attrs)
                    }
                    if (options.parse === void 0) options.parse = true;
                    var model = this;
                    var success = options.success;
                    options.success = function(resp) {
                        model.attributes = attributes;
                        var serverAttrs = model.parse(resp, options);
                        if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);
                        if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {
                            return false
                        }
                        if (success) success(model, resp, options);
                        model.trigger("sync", model, resp, options)
                    };
                    wrapError(this, options);
                    method = this.isNew() ? "create" : options.patch ? "patch" : "update";
                    if (method === "patch") options.attrs = attrs;
                    xhr = this.sync(method, this, options);
                    if (attrs && options.wait) this.attributes = attributes;
                    return xhr
                },
                destroy: function(options) {
                    options = options ? _.clone(options) : {};
                    var model = this;
                    var success = options.success;
                    var destroy = function() {
                        model.trigger("destroy", model, model.collection, options)
                    };
                    options.success = function(resp) {
                        if (options.wait || model.isNew()) destroy();
                        if (success) success(model, resp, options);
                        if (!model.isNew()) model.trigger("sync", model, resp, options)
                    };
                    if (this.isNew()) {
                        options.success();
                        return false
                    }
                    wrapError(this, options);
                    var xhr = this.sync("delete", this, options);
                    if (!options.wait) destroy();
                    return xhr
                },
                url: function() {
                    var base = _.result(this, "urlRoot") || _.result(this.collection, "url") || urlError();
                    if (this.isNew()) return base;
                    return base.replace(/([^\/])$/, "$1/") + encodeURIComponent(this.id)
                },
                parse: function(resp, options) {
                    return resp
                },
                clone: function() {
                    return new this.constructor(this.attributes)
                },
                isNew: function() {
                    return !this.has(this.idAttribute)
                },
                isValid: function(options) {
                    return this._validate({}, _.extend(options || {}, {
                        validate: true
                    }))
                },
                _validate: function(attrs, options) {
                    if (!options.validate || !this.validate) return true;
                    attrs = _.extend({}, this.attributes, attrs);
                    var error = this.validationError = this.validate(attrs, options) || null;
                    if (!error) return true;
                    this.trigger("invalid", this, error, _.extend(options, {
                        validationError: error
                    }));
                    return false
                }
            });
            var modelMethods = ["keys", "values", "pairs", "invert", "pick", "omit"];
            _.each(modelMethods, function(method) {
                Model.prototype[method] = function() {
                    var args = slice.call(arguments);
                    args.unshift(this.attributes);
                    return _[method].apply(_, args)
                }
            });
            var Collection = Backbone.Collection = function(models, options) {
                options || (options = {});
                if (options.model) this.model = options.model;
                if (options.comparator !== void 0) this.comparator = options.comparator;
                this._reset();
                this.initialize.apply(this, arguments);
                if (models) this.reset(models, _.extend({
                    silent: true
                }, options))
            };
            var setOptions = {
                add: true,
                remove: true,
                merge: true
            };
            var addOptions = {
                add: true,
                remove: false
            };
            _.extend(Collection.prototype, Events, {
                model: Model,
                initialize: function() {},
                toJSON: function(options) {
                    return this.map(function(model) {
                        return model.toJSON(options)
                    })
                },
                sync: function() {
                    return Backbone.sync.apply(this, arguments)
                },
                add: function(models, options) {
                    return this.set(models, _.extend({
                        merge: false
                    }, options, addOptions))
                },
                remove: function(models, options) {
                    var singular = !_.isArray(models);
                    models = singular ? [models] : _.clone(models);
                    options || (options = {});
                    var i, l, index, model;
                    for (i = 0, l = models.length; i < l; i++) {
                        model = models[i] = this.get(models[i]);
                        if (!model) continue;
                        delete this._byId[model.id];
                        delete this._byId[model.cid];
                        index = this.indexOf(model);
                        this.models.splice(index, 1);
                        this.length--;
                        if (!options.silent) {
                            options.index = index;
                            model.trigger("remove", model, this, options)
                        }
                        this._removeReference(model, options)
                    }
                    return singular ? models[0] : models
                },
                set: function(models, options) {
                    options = _.defaults({}, options, setOptions);
                    if (options.parse) models = this.parse(models, options);
                    var singular = !_.isArray(models);
                    models = singular ? models ? [models] : [] : _.clone(models);
                    var i, l, id, model, attrs, existing, sort;
                    var at = options.at;
                    var targetModel = this.model;
                    var sortable = this.comparator && at == null && options.sort !== false;
                    var sortAttr = _.isString(this.comparator) ? this.comparator : null;
                    var toAdd = [],
                        toRemove = [],
                        modelMap = {};
                    var add = options.add,
                        merge = options.merge,
                        remove = options.remove;
                    var order = !sortable && add && remove ? [] : false;
                    for (i = 0, l = models.length; i < l; i++) {
                        attrs = models[i] || {};
                        if (attrs instanceof Model) {
                            id = model = attrs
                        } else {
                            id = attrs[targetModel.prototype.idAttribute || "id"]
                        }
                        if (existing = this.get(id)) {
                            if (remove) modelMap[existing.cid] = true;
                            if (merge) {
                                attrs = attrs === model ? model.attributes : attrs;
                                if (options.parse) attrs = existing.parse(attrs, options);
                                existing.set(attrs, options);
                                if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true
                            }
                            models[i] = existing
                        } else if (add) {
                            model = models[i] = this._prepareModel(attrs, options);
                            if (!model) continue;
                            toAdd.push(model);
                            this._addReference(model, options)
                        }
                        model = existing || model;
                        if (order && (model.isNew() || !modelMap[model.id])) order.push(model);
                        modelMap[model.id] = true
                    }
                    if (remove) {
                        for (i = 0, l = this.length; i < l; ++i) {
                            if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model)
                        }
                        if (toRemove.length) this.remove(toRemove, options)
                    }
                    if (toAdd.length || order && order.length) {
                        if (sortable) sort = true;
                        this.length += toAdd.length;
                        if (at != null) {
                            for (i = 0, l = toAdd.length; i < l; i++) {
                                this.models.splice(at + i, 0, toAdd[i])
                            }
                        } else {
                            if (order) this.models.length = 0;
                            var orderedModels = order || toAdd;
                            for (i = 0, l = orderedModels.length; i < l; i++) {
                                this.models.push(orderedModels[i])
                            }
                        }
                    }
                    if (sort) this.sort({
                        silent: true
                    });
                    if (!options.silent) {
                        for (i = 0, l = toAdd.length; i < l; i++) {
                            (model = toAdd[i]).trigger("add", model, this, options)
                        }
                        if (sort || order && order.length) this.trigger("sort", this, options)
                    }
                    return singular ? models[0] : models
                },
                reset: function(models, options) {
                    options || (options = {});
                    for (var i = 0, l = this.models.length; i < l; i++) {
                        this._removeReference(this.models[i], options)
                    }
                    options.previousModels = this.models;
                    this._reset();
                    models = this.add(models, _.extend({
                        silent: true
                    }, options));
                    if (!options.silent) this.trigger("reset", this, options);
                    return models
                },
                push: function(model, options) {
                    return this.add(model, _.extend({
                        at: this.length
                    }, options))
                },
                pop: function(options) {
                    var model = this.at(this.length - 1);
                    this.remove(model, options);
                    return model
                },
                unshift: function(model, options) {
                    return this.add(model, _.extend({
                        at: 0
                    }, options))
                },
                shift: function(options) {
                    var model = this.at(0);
                    this.remove(model, options);
                    return model
                },
                slice: function() {
                    return slice.apply(this.models, arguments)
                },
                get: function(obj) {
                    if (obj == null) return void 0;
                    return this._byId[obj] || this._byId[obj.id] || this._byId[obj.cid]
                },
                at: function(index) {
                    return this.models[index]
                },
                where: function(attrs, first) {
                    if (_.isEmpty(attrs)) return first ? void 0 : [];
                    return this[first ? "find" : "filter"](function(model) {
                        for (var key in attrs) {
                            if (attrs[key] !== model.get(key)) return false
                        }
                        return true
                    })
                },
                findWhere: function(attrs) {
                    return this.where(attrs, true)
                },
                sort: function(options) {
                    if (!this.comparator) throw new Error("Cannot sort a set without a comparator");
                    options || (options = {});
                    if (_.isString(this.comparator) || this.comparator.length === 1) {
                        this.models = this.sortBy(this.comparator, this)
                    } else {
                        this.models.sort(_.bind(this.comparator, this))
                    }
                    if (!options.silent) this.trigger("sort", this, options);
                    return this
                },
                pluck: function(attr) {
                    return _.invoke(this.models, "get", attr)
                },
                fetch: function(options) {
                    options = options ? _.clone(options) : {};
                    if (options.parse === void 0) options.parse = true;
                    var success = options.success;
                    var collection = this;
                    options.success = function(resp) {
                        var method = options.reset ? "reset" : "set";
                        collection[method](resp, options);
                        if (success) success(collection, resp, options);
                        collection.trigger("sync", collection, resp, options)
                    };
                    wrapError(this, options);
                    return this.sync("read", this, options)
                },
                create: function(model, options) {
                    options = options ? _.clone(options) : {};
                    if (!(model = this._prepareModel(model, options))) return false;
                    if (!options.wait) this.add(model, options);
                    var collection = this;
                    var success = options.success;
                    options.success = function(model, resp) {
                        if (options.wait) collection.add(model, options);
                        if (success) success(model, resp, options)
                    };
                    model.save(null, options);
                    return model
                },
                parse: function(resp, options) {
                    return resp
                },
                clone: function() {
                    return new this.constructor(this.models)
                },
                _reset: function() {
                    this.length = 0;
                    this.models = [];
                    this._byId = {}
                },
                _prepareModel: function(attrs, options) {
                    if (attrs instanceof Model) return attrs;
                    options = options ? _.clone(options) : {};
                    options.collection = this;
                    var model = new this.model(attrs, options);
                    if (!model.validationError) return model;
                    this.trigger("invalid", this, model.validationError, options);
                    return false
                },
                _addReference: function(model, options) {
                    this._byId[model.cid] = model;
                    if (model.id != null) this._byId[model.id] = model;
                    if (!model.collection) model.collection = this;
                    model.on("all", this._onModelEvent, this)
                },
                _removeReference: function(model, options) {
                    if (this === model.collection) delete model.collection;
                    model.off("all", this._onModelEvent, this)
                },
                _onModelEvent: function(event, model, collection, options) {
                    if ((event === "add" || event === "remove") && collection !== this) return;
                    if (event === "destroy") this.remove(model, options);
                    if (model && event === "change:" + model.idAttribute) {
                        delete this._byId[model.previous(model.idAttribute)];
                        if (model.id != null) this._byId[model.id] = model
                    }
                    this.trigger.apply(this, arguments)
                }
            });
            var methods = ["forEach", "each", "map", "collect", "reduce", "foldl", "inject", "reduceRight", "foldr", "find", "detect", "filter", "select", "reject", "every", "all", "some", "any", "include", "contains", "invoke", "max", "min", "toArray", "size", "first", "head", "take", "initial", "rest", "tail", "drop", "last", "without", "difference", "indexOf", "shuffle", "lastIndexOf", "isEmpty", "chain", "sample"];
            _.each(methods, function(method) {
                Collection.prototype[method] = function() {
                    var args = slice.call(arguments);
                    args.unshift(this.models);
                    return _[method].apply(_, args)
                }
            });
            var attributeMethods = ["groupBy", "countBy", "sortBy", "indexBy"];
            _.each(attributeMethods, function(method) {
                Collection.prototype[method] = function(value, context) {
                    var iterator = _.isFunction(value) ? value : function(model) {
                        return model.get(value)
                    };
                    return _[method](this.models, iterator, context)
                }
            });
            var View = Backbone.View = function(options) {
                this.cid = _.uniqueId("view");
                options || (options = {});
                _.extend(this, _.pick(options, viewOptions));
                this._ensureElement();
                this.initialize.apply(this, arguments);
                this.delegateEvents()
            };
            var delegateEventSplitter = /^(\S+)\s*(.*)$/;
            var viewOptions = ["model", "collection", "el", "id", "attributes", "className", "tagName", "events"];
            _.extend(View.prototype, Events, {
                tagName: "div",
                $: function(selector) {
                    return this.$el.find(selector)
                },
                initialize: function() {},
                render: function() {
                    return this
                },
                remove: function() {
                    this.$el.remove();
                    this.stopListening();
                    return this
                },
                setElement: function(element, delegate) {
                    if (this.$el) this.undelegateEvents();
                    this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);
                    this.el = this.$el[0];
                    if (delegate !== false) this.delegateEvents();
                    return this
                },
                delegateEvents: function(events) {
                    if (!(events || (events = _.result(this, "events")))) return this;
                    this.undelegateEvents();
                    for (var key in events) {
                        var method = events[key];
                        if (!_.isFunction(method)) method = this[events[key]];
                        if (!method) continue;
                        var match = key.match(delegateEventSplitter);
                        var eventName = match[1],
                            selector = match[2];
                        method = _.bind(method, this);
                        eventName += ".delegateEvents" + this.cid;
                        if (selector === "") {
                            this.$el.on(eventName, method)
                        } else {
                            this.$el.on(eventName, selector, method)
                        }
                    }
                    return this
                },
                undelegateEvents: function() {
                    this.$el.off(".delegateEvents" + this.cid);
                    return this
                },
                _ensureElement: function() {
                    if (!this.el) {
                        var attrs = _.extend({}, _.result(this, "attributes"));
                        if (this.id) attrs.id = _.result(this, "id");
                        if (this.className) attrs["class"] = _.result(this, "className");
                        var $el = Backbone.$("<" + _.result(this, "tagName") + ">").attr(attrs);
                        this.setElement($el, false)
                    } else {
                        this.setElement(_.result(this, "el"), false)
                    }
                }
            });
            Backbone.sync = function(method, model, options) {
                var type = methodMap[method];
                _.defaults(options || (options = {}), {
                    emulateHTTP: Backbone.emulateHTTP,
                    emulateJSON: Backbone.emulateJSON
                });
                var params = {
                    type: type,
                    dataType: "json"
                };
                if (!options.url) {
                    params.url = _.result(model, "url") || urlError()
                }
                if (options.data == null && model && (method === "create" || method === "update" || method === "patch")) {
                    params.contentType = "application/json";
                    params.data = JSON.stringify(options.attrs || model.toJSON(options))
                }
                if (options.emulateJSON) {
                    params.contentType = "application/x-www-form-urlencoded";
                    params.data = params.data ? {
                        model: params.data
                    } : {}
                }
                if (options.emulateHTTP && (type === "PUT" || type === "DELETE" || type === "PATCH")) {
                    params.type = "POST";
                    if (options.emulateJSON) params.data._method = type;
                    var beforeSend = options.beforeSend;
                    options.beforeSend = function(xhr) {
                        xhr.setRequestHeader("X-HTTP-Method-Override", type);
                        if (beforeSend) return beforeSend.apply(this, arguments)
                    }
                }
                if (params.type !== "GET" && !options.emulateJSON) {
                    params.processData = false
                }
                if (params.type === "PATCH" && noXhrPatch) {
                    params.xhr = function() {
                        return new ActiveXObject("Microsoft.XMLHTTP")
                    }
                }
                var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
                model.trigger("request", model, xhr, options);
                return xhr
            };
            var noXhrPatch = typeof window !== "undefined" && !!window.ActiveXObject && !(window.XMLHttpRequest && (new XMLHttpRequest).dispatchEvent);
            var methodMap = {
                create: "POST",
                update: "PUT",
                patch: "PATCH",
                delete: "DELETE",
                read: "GET"
            };
            Backbone.ajax = function() {
                return Backbone.$.ajax.apply(Backbone.$, arguments)
            };
            var Router = Backbone.Router = function(options) {
                options || (options = {});
                if (options.routes) this.routes = options.routes;
                this._bindRoutes();
                this.initialize.apply(this, arguments)
            };
            var optionalParam = /\((.*?)\)/g;
            var namedParam = /(\(\?)?:\w+/g;
            var splatParam = /\*\w+/g;
            var escapeRegExp = /[\-{}\[\]+?.,\\\^$|#\s]/g;
            _.extend(Router.prototype, Events, {
                initialize: function() {},
                route: function(route, name, callback) {
                    if (!_.isRegExp(route)) route = this._routeToRegExp(route);
                    if (_.isFunction(name)) {
                        callback = name;
                        name = ""
                    }
                    if (!callback) callback = this[name];
                    var router = this;
                    Backbone.history.route(route, function(fragment) {
                        var args = router._extractParameters(route, fragment);
                        router.execute(callback, args);
                        router.trigger.apply(router, ["route:" + name].concat(args));
                        router.trigger("route", name, args);
                        Backbone.history.trigger("route", router, name, args)
                    });
                    return this
                },
                execute: function(callback, args) {
                    if (callback) callback.apply(this, args)
                },
                navigate: function(fragment, options) {
                    Backbone.history.navigate(fragment, options);
                    return this
                },
                _bindRoutes: function() {
                    if (!this.routes) return;
                    this.routes = _.result(this, "routes");
                    var route, routes = _.keys(this.routes);
                    while ((route = routes.pop()) != null) {
                        this.route(route, this.routes[route])
                    }
                },
                _routeToRegExp: function(route) {
                    route = route.replace(escapeRegExp, "\\$&").replace(optionalParam, "(?:$1)?").replace(namedParam, function(match, optional) {
                        return optional ? match : "([^/?]+)"
                    }).replace(splatParam, "([^?]*?)");
                    return new RegExp("^" + route + "(?:\\?([\\s\\S]*))?$")
                },
                _extractParameters: function(route, fragment) {
                    var params = route.exec(fragment).slice(1);
                    return _.map(params, function(param, i) {
                        if (i === params.length - 1) return param || null;
                        return param ? decodeURIComponent(param) : null
                    })
                }
            });
            var History = Backbone.History = function() {
                this.handlers = [];
                _.bindAll(this, "checkUrl");
                if (typeof window !== "undefined") {
                    this.location = window.location;
                    this.history = window.history
                }
            };
            var routeStripper = /^[#\/]|\s+$/g;
            var rootStripper = /^\/+|\/+$/g;
            var isExplorer = /msie [\w.]+/;
            var trailingSlash = /\/$/;
            var pathStripper = /#.*$/;
            History.started = false;
            _.extend(History.prototype, Events, {
                interval: 50,
                atRoot: function() {
                    return this.location.pathname.replace(/[^\/]$/, "$&/") === this.root
                },
                getHash: function(window) {
                    var match = (window || this).location.href.match(/#(.*)$/);
                    return match ? match[1] : ""
                },
                getFragment: function(fragment, forcePushState) {
                    if (fragment == null) {
                        if (this._hasPushState || !this._wantsHashChange || forcePushState) {
                            fragment = decodeURI(this.location.pathname + this.location.search);
                            var root = this.root.replace(trailingSlash, "");
                            if (!fragment.indexOf(root)) fragment = fragment.slice(root.length)
                        } else {
                            fragment = this.getHash()
                        }
                    }
                    return fragment.replace(routeStripper, "")
                },
                start: function(options) {
                    if (History.started) throw new Error("Backbone.history has already been started");
                    History.started = true;
                    this.options = _.extend({
                        root: "/"
                    }, this.options, options);
                    this.root = this.options.root;
                    this._wantsHashChange = this.options.hashChange !== false;
                    this._wantsPushState = !!this.options.pushState;
                    this._hasPushState = !!(this.options.pushState && this.history && this.history.pushState);
                    var fragment = this.getFragment();
                    var docMode = document.documentMode;
                    var oldIE = isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7);
                    this.root = ("/" + this.root + "/").replace(rootStripper, "/");
                    if (oldIE && this._wantsHashChange) {
                        var frame = Backbone.$('<iframe src="javascript:0" tabindex="-1">');
                        this.iframe = frame.hide().appendTo("body")[0].contentWindow;
                        this.navigate(fragment)
                    }
                    if (this._hasPushState) {
                        Backbone.$(window).on("popstate", this.checkUrl)
                    } else if (this._wantsHashChange && "onhashchange" in window && !oldIE) {
                        Backbone.$(window).on("hashchange", this.checkUrl)
                    } else if (this._wantsHashChange) {
                        this._checkUrlInterval = setInterval(this.checkUrl, this.interval)
                    }
                    this.fragment = fragment;
                    var loc = this.location;
                    if (this._wantsHashChange && this._wantsPushState) {
                        if (!this._hasPushState && !this.atRoot()) {
                            this.fragment = this.getFragment(null, true);
                            this.location.replace(this.root + "#" + this.fragment);
                            return true
                        } else if (this._hasPushState && this.atRoot() && loc.hash) {
                            this.fragment = this.getHash().replace(routeStripper, "");
                            this.history.replaceState({}, document.title, this.root + this.fragment)
                        }
                    }
                    if (!this.options.silent) return this.loadUrl()
                },
                stop: function() {
                    Backbone.$(window).off("popstate", this.checkUrl).off("hashchange", this.checkUrl);
                    if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);
                    History.started = false
                },
                route: function(route, callback) {
                    this.handlers.unshift({
                        route: route,
                        callback: callback
                    })
                },
                checkUrl: function(e) {
                    var current = this.getFragment();
                    if (current === this.fragment && this.iframe) {
                        current = this.getFragment(this.getHash(this.iframe))
                    }
                    if (current === this.fragment) return false;
                    if (this.iframe) this.navigate(current);
                    this.loadUrl()
                },
                loadUrl: function(fragment) {
                    fragment = this.fragment = this.getFragment(fragment);
                    return _.any(this.handlers, function(handler) {
                        if (handler.route.test(fragment)) {
                            handler.callback(fragment);
                            return true
                        }
                    })
                },
                navigate: function(fragment, options) {
                    if (!History.started) return false;
                    if (!options || options === true) options = {
                        trigger: !!options
                    };
                    var url = this.root + (fragment = this.getFragment(fragment || ""));
                    fragment = fragment.replace(pathStripper, "");
                    if (this.fragment === fragment) return;
                    this.fragment = fragment;
                    if (fragment === "" && url !== "/") url = url.slice(0, -1);
                    if (this._hasPushState) {
                        this.history[options.replace ? "replaceState" : "pushState"]({}, document.title, url)
                    } else if (this._wantsHashChange) {
                        this._updateHash(this.location, fragment, options.replace);
                        if (this.iframe && fragment !== this.getFragment(this.getHash(this.iframe))) {
                            if (!options.replace) this.iframe.document.open().close();
                            this._updateHash(this.iframe.location, fragment, options.replace)
                        }
                    } else {
                        return this.location.assign(url)
                    }
                    if (options.trigger) return this.loadUrl(fragment)
                },
                _updateHash: function(location, fragment, replace) {
                    if (replace) {
                        var href = location.href.replace(/(javascript:|#).*$/, "");
                        location.replace(href + "#" + fragment)
                    } else {
                        location.hash = "#" + fragment
                    }
                }
            });
            Backbone.history = new History;
            var extend = function(protoProps, staticProps) {
                var parent = this;
                var child;
                if (protoProps && _.has(protoProps, "constructor")) {
                    child = protoProps.constructor
                } else {
                    child = function() {
                        return parent.apply(this, arguments)
                    }
                }
                _.extend(child, parent, staticProps);
                var Surrogate = function() {
                    this.constructor = child
                };
                Surrogate.prototype = parent.prototype;
                child.prototype = new Surrogate;
                if (protoProps) _.extend(child.prototype, protoProps);
                child.__super__ = parent.prototype;
                return child
            };
            Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;
            var urlError = function() {
                throw new Error('A "url" property or function must be specified')
            };
            var wrapError = function(model, options) {
                var error = options.error;
                options.error = function(resp) {
                    if (error) error(model, resp, options);
                    model.trigger("error", model, resp, options)
                }
            };
            return Backbone
        })
    }, {
        underscore: 6
    }],
    6: [function(require, module, exports) {
        (function() {
            var root = this;
            var previousUnderscore = root._;
            var ArrayProto = Array.prototype,
                ObjProto = Object.prototype,
                FuncProto = Function.prototype;
            var push = ArrayProto.push,
                slice = ArrayProto.slice,
                concat = ArrayProto.concat,
                toString = ObjProto.toString,
                hasOwnProperty = ObjProto.hasOwnProperty;
            var nativeIsArray = Array.isArray,
                nativeKeys = Object.keys,
                nativeBind = FuncProto.bind;
            var _ = function(obj) {
                if (obj instanceof _) return obj;
                if (!(this instanceof _)) return new _(obj);
                this._wrapped = obj
            };
            if (typeof exports !== "undefined") {
                if (typeof module !== "undefined" && module.exports) {
                    exports = module.exports = _
                }
                exports._ = _
            } else {
                root._ = _
            }
            _.VERSION = "1.7.0";
            var createCallback = function(func, context, argCount) {
                if (context === void 0) return func;
                switch (argCount == null ? 3 : argCount) {
                    case 1:
                        return function(value) {
                            return func.call(context, value)
                        };
                    case 2:
                        return function(value, other) {
                            return func.call(context, value, other)
                        };
                    case 3:
                        return function(value, index, collection) {
                            return func.call(context, value, index, collection)
                        };
                    case 4:
                        return function(accumulator, value, index, collection) {
                            return func.call(context, accumulator, value, index, collection)
                        }
                }
                return function() {
                    return func.apply(context, arguments)
                }
            };
            _.iteratee = function(value, context, argCount) {
                if (value == null) return _.identity;
                if (_.isFunction(value)) return createCallback(value, context, argCount);
                if (_.isObject(value)) return _.matches(value);
                return _.property(value)
            };
            _.each = _.forEach = function(obj, iteratee, context) {
                if (obj == null) return obj;
                iteratee = createCallback(iteratee, context);
                var i, length = obj.length;
                if (length === +length) {
                    for (i = 0; i < length; i++) {
                        iteratee(obj[i], i, obj)
                    }
                } else {
                    var keys = _.keys(obj);
                    for (i = 0, length = keys.length; i < length; i++) {
                        iteratee(obj[keys[i]], keys[i], obj)
                    }
                }
                return obj
            };
            _.map = _.collect = function(obj, iteratee, context) {
                if (obj == null) return [];
                iteratee = _.iteratee(iteratee, context);
                var keys = obj.length !== +obj.length && _.keys(obj),
                    length = (keys || obj).length,
                    results = Array(length),
                    currentKey;
                for (var index = 0; index < length; index++) {
                    currentKey = keys ? keys[index] : index;
                    results[index] = iteratee(obj[currentKey], currentKey, obj)
                }
                return results
            };
            var reduceError = "Reduce of empty array with no initial value";
            _.reduce = _.foldl = _.inject = function(obj, iteratee, memo, context) {
                if (obj == null) obj = [];
                iteratee = createCallback(iteratee, context, 4);
                var keys = obj.length !== +obj.length && _.keys(obj),
                    length = (keys || obj).length,
                    index = 0,
                    currentKey;
                if (arguments.length < 3) {
                    if (!length) throw new TypeError(reduceError);
                    memo = obj[keys ? keys[index++] : index++]
                }
                for (; index < length; index++) {
                    currentKey = keys ? keys[index] : index;
                    memo = iteratee(memo, obj[currentKey], currentKey, obj)
                }
                return memo
            };
            _.reduceRight = _.foldr = function(obj, iteratee, memo, context) {
                if (obj == null) obj = [];
                iteratee = createCallback(iteratee, context, 4);
                var keys = obj.length !== +obj.length && _.keys(obj),
                    index = (keys || obj).length,
                    currentKey;
                if (arguments.length < 3) {
                    if (!index) throw new TypeError(reduceError);
                    memo = obj[keys ? keys[--index] : --index]
                }
                while (index--) {
                    currentKey = keys ? keys[index] : index;
                    memo = iteratee(memo, obj[currentKey], currentKey, obj)
                }
                return memo
            };
            _.find = _.detect = function(obj, predicate, context) {
                var result;
                predicate = _.iteratee(predicate, context);
                _.some(obj, function(value, index, list) {
                    if (predicate(value, index, list)) {
                        result = value;
                        return true
                    }
                });
                return result
            };
            _.filter = _.select = function(obj, predicate, context) {
                var results = [];
                if (obj == null) return results;
                predicate = _.iteratee(predicate, context);
                _.each(obj, function(value, index, list) {
                    if (predicate(value, index, list)) results.push(value)
                });
                return results
            };
            _.reject = function(obj, predicate, context) {
                return _.filter(obj, _.negate(_.iteratee(predicate)), context)
            };
            _.every = _.all = function(obj, predicate, context) {
                if (obj == null) return true;
                predicate = _.iteratee(predicate, context);
                var keys = obj.length !== +obj.length && _.keys(obj),
                    length = (keys || obj).length,
                    index, currentKey;
                for (index = 0; index < length; index++) {
                    currentKey = keys ? keys[index] : index;
                    if (!predicate(obj[currentKey], currentKey, obj)) return false
                }
                return true
            };
            _.some = _.any = function(obj, predicate, context) {
                if (obj == null) return false;
                predicate = _.iteratee(predicate, context);
                var keys = obj.length !== +obj.length && _.keys(obj),
                    length = (keys || obj).length,
                    index, currentKey;
                for (index = 0; index < length; index++) {
                    currentKey = keys ? keys[index] : index;
                    if (predicate(obj[currentKey], currentKey, obj)) return true
                }
                return false
            };
            _.contains = _.include = function(obj, target) {
                if (obj == null) return false;
                if (obj.length !== +obj.length) obj = _.values(obj);
                return _.indexOf(obj, target) >= 0
            };
            _.invoke = function(obj, method) {
                var args = slice.call(arguments, 2);
                var isFunc = _.isFunction(method);
                return _.map(obj, function(value) {
                    return (isFunc ? method : value[method]).apply(value, args)
                })
            };
            _.pluck = function(obj, key) {
                return _.map(obj, _.property(key))
            };
            _.where = function(obj, attrs) {
                return _.filter(obj, _.matches(attrs))
            };
            _.findWhere = function(obj, attrs) {
                return _.find(obj, _.matches(attrs))
            };
            _.max = function(obj, iteratee, context) {
                var result = -Infinity,
                    lastComputed = -Infinity,
                    value, computed;
                if (iteratee == null && obj != null) {
                    obj = obj.length === +obj.length ? obj : _.values(obj);
                    for (var i = 0, length = obj.length; i < length; i++) {
                        value = obj[i];
                        if (value > result) {
                            result = value
                        }
                    }
                } else {
                    iteratee = _.iteratee(iteratee, context);
                    _.each(obj, function(value, index, list) {
                        computed = iteratee(value, index, list);
                        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
                            result = value;
                            lastComputed = computed
                        }
                    })
                }
                return result
            };
            _.min = function(obj, iteratee, context) {
                var result = Infinity,
                    lastComputed = Infinity,
                    value, computed;
                if (iteratee == null && obj != null) {
                    obj = obj.length === +obj.length ? obj : _.values(obj);
                    for (var i = 0, length = obj.length; i < length; i++) {
                        value = obj[i];
                        if (value < result) {
                            result = value
                        }
                    }
                } else {
                    iteratee = _.iteratee(iteratee, context);
                    _.each(obj, function(value, index, list) {
                        computed = iteratee(value, index, list);
                        if (computed < lastComputed || computed === Infinity && result === Infinity) {
                            result = value;
                            lastComputed = computed
                        }
                    })
                }
                return result
            };
            _.shuffle = function(obj) {
                var set = obj && obj.length === +obj.length ? obj : _.values(obj);
                var length = set.length;
                var shuffled = Array(length);
                for (var index = 0, rand; index < length; index++) {
                    rand = _.random(0, index);
                    if (rand !== index) shuffled[index] = shuffled[rand];
                    shuffled[rand] = set[index]
                }
                return shuffled
            };
            _.sample = function(obj, n, guard) {
                if (n == null || guard) {
                    if (obj.length !== +obj.length) obj = _.values(obj);
                    return obj[_.random(obj.length - 1)]
                }
                return _.shuffle(obj).slice(0, Math.max(0, n))
            };
            _.sortBy = function(obj, iteratee, context) {
                iteratee = _.iteratee(iteratee, context);
                return _.pluck(_.map(obj, function(value, index, list) {
                    return {
                        value: value,
                        index: index,
                        criteria: iteratee(value, index, list)
                    }
                }).sort(function(left, right) {
                    var a = left.criteria;
                    var b = right.criteria;
                    if (a !== b) {
                        if (a > b || a === void 0) return 1;
                        if (a < b || b === void 0) return -1
                    }
                    return left.index - right.index
                }), "value")
            };
            var group = function(behavior) {
                return function(obj, iteratee, context) {
                    var result = {};
                    iteratee = _.iteratee(iteratee, context);
                    _.each(obj, function(value, index) {
                        var key = iteratee(value, index, obj);
                        behavior(result, value, key)
                    });
                    return result
                }
            };
            _.groupBy = group(function(result, value, key) {
                if (_.has(result, key)) result[key].push(value);
                else result[key] = [value]
            });
            _.indexBy = group(function(result, value, key) {
                result[key] = value
            });
            _.countBy = group(function(result, value, key) {
                if (_.has(result, key)) result[key]++;
                else result[key] = 1
            });
            _.sortedIndex = function(array, obj, iteratee, context) {
                iteratee = _.iteratee(iteratee, context, 1);
                var value = iteratee(obj);
                var low = 0,
                    high = array.length;
                while (low < high) {
                    var mid = low + high >>> 1;
                    if (iteratee(array[mid]) < value) low = mid + 1;
                    else high = mid
                }
                return low
            };
            _.toArray = function(obj) {
                if (!obj) return [];
                if (_.isArray(obj)) return slice.call(obj);
                if (obj.length === +obj.length) return _.map(obj, _.identity);
                return _.values(obj)
            };
            _.size = function(obj) {
                if (obj == null) return 0;
                return obj.length === +obj.length ? obj.length : _.keys(obj).length
            };
            _.partition = function(obj, predicate, context) {
                predicate = _.iteratee(predicate, context);
                var pass = [],
                    fail = [];
                _.each(obj, function(value, key, obj) {
                    (predicate(value, key, obj) ? pass : fail).push(value)
                });
                return [pass, fail]
            };
            _.first = _.head = _.take = function(array, n, guard) {
                if (array == null) return void 0;
                if (n == null || guard) return array[0];
                if (n < 0) return [];
                return slice.call(array, 0, n)
            };
            _.initial = function(array, n, guard) {
                return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)))
            };
            _.last = function(array, n, guard) {
                if (array == null) return void 0;
                if (n == null || guard) return array[array.length - 1];
                return slice.call(array, Math.max(array.length - n, 0))
            };
            _.rest = _.tail = _.drop = function(array, n, guard) {
                return slice.call(array, n == null || guard ? 1 : n)
            };
            _.compact = function(array) {
                return _.filter(array, _.identity)
            };
            var flatten = function(input, shallow, strict, output) {
                if (shallow && _.every(input, _.isArray)) {
                    return concat.apply(output, input)
                }
                for (var i = 0, length = input.length; i < length; i++) {
                    var value = input[i];
                    if (!_.isArray(value) && !_.isArguments(value)) {
                        if (!strict) output.push(value)
                    } else if (shallow) {
                        push.apply(output, value)
                    } else {
                        flatten(value, shallow, strict, output)
                    }
                }
                return output
            };
            _.flatten = function(array, shallow) {
                return flatten(array, shallow, false, [])
            };
            _.without = function(array) {
                return _.difference(array, slice.call(arguments, 1))
            };
            _.uniq = _.unique = function(array, isSorted, iteratee, context) {
                if (array == null) return [];
                if (!_.isBoolean(isSorted)) {
                    context = iteratee;
                    iteratee = isSorted;
                    isSorted = false
                }
                if (iteratee != null) iteratee = _.iteratee(iteratee, context);
                var result = [];
                var seen = [];
                for (var i = 0, length = array.length; i < length; i++) {
                    var value = array[i];
                    if (isSorted) {
                        if (!i || seen !== value) result.push(value);
                        seen = value
                    } else if (iteratee) {
                        var computed = iteratee(value, i, array);
                        if (_.indexOf(seen, computed) < 0) {
                            seen.push(computed);
                            result.push(value)
                        }
                    } else if (_.indexOf(result, value) < 0) {
                        result.push(value)
                    }
                }
                return result
            };
            _.union = function() {
                return _.uniq(flatten(arguments, true, true, []))
            };
            _.intersection = function(array) {
                if (array == null) return [];
                var result = [];
                var argsLength = arguments.length;
                for (var i = 0, length = array.length; i < length; i++) {
                    var item = array[i];
                    if (_.contains(result, item)) continue;
                    for (var j = 1; j < argsLength; j++) {
                        if (!_.contains(arguments[j], item)) break
                    }
                    if (j === argsLength) result.push(item)
                }
                return result
            };
            _.difference = function(array) {
                var rest = flatten(slice.call(arguments, 1), true, true, []);
                return _.filter(array, function(value) {
                    return !_.contains(rest, value)
                })
            };
            _.zip = function(array) {
                if (array == null) return [];
                var length = _.max(arguments, "length").length;
                var results = Array(length);
                for (var i = 0; i < length; i++) {
                    results[i] = _.pluck(arguments, i)
                }
                return results
            };
            _.object = function(list, values) {
                if (list == null) return {};
                var result = {};
                for (var i = 0, length = list.length; i < length; i++) {
                    if (values) {
                        result[list[i]] = values[i]
                    } else {
                        result[list[i][0]] = list[i][1]
                    }
                }
                return result
            };
            _.indexOf = function(array, item, isSorted) {
                if (array == null) return -1;
                var i = 0,
                    length = array.length;
                if (isSorted) {
                    if (typeof isSorted == "number") {
                        i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted
                    } else {
                        i = _.sortedIndex(array, item);
                        return array[i] === item ? i : -1
                    }
                }
                for (; i < length; i++)
                    if (array[i] === item) return i;
                return -1
            };
            _.lastIndexOf = function(array, item, from) {
                if (array == null) return -1;
                var idx = array.length;
                if (typeof from == "number") {
                    idx = from < 0 ? idx + from + 1 : Math.min(idx, from + 1)
                }
                while (--idx >= 0)
                    if (array[idx] === item) return idx;
                return -1
            };
            _.range = function(start, stop, step) {
                if (arguments.length <= 1) {
                    stop = start || 0;
                    start = 0
                }
                step = step || 1;
                var length = Math.max(Math.ceil((stop - start) / step), 0);
                var range = Array(length);
                for (var idx = 0; idx < length; idx++, start += step) {
                    range[idx] = start
                }
                return range
            };
            var Ctor = function() {};
            _.bind = function(func, context) {
                var args, bound;
                if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
                if (!_.isFunction(func)) throw new TypeError("Bind must be called on a function");
                args = slice.call(arguments, 2);
                bound = function() {
                    if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
                    Ctor.prototype = func.prototype;
                    var self = new Ctor;
                    Ctor.prototype = null;
                    var result = func.apply(self, args.concat(slice.call(arguments)));
                    if (_.isObject(result)) return result;
                    return self
                };
                return bound
            };
            _.partial = function(func) {
                var boundArgs = slice.call(arguments, 1);
                return function() {
                    var position = 0;
                    var args = boundArgs.slice();
                    for (var i = 0, length = args.length; i < length; i++) {
                        if (args[i] === _) args[i] = arguments[position++]
                    }
                    while (position < arguments.length) args.push(arguments[position++]);
                    return func.apply(this, args)
                }
            };
            _.bindAll = function(obj) {
                var i, length = arguments.length,
                    key;
                if (length <= 1) throw new Error("bindAll must be passed function names");
                for (i = 1; i < length; i++) {
                    key = arguments[i];
                    obj[key] = _.bind(obj[key], obj)
                }
                return obj
            };
            _.memoize = function(func, hasher) {
                var memoize = function(key) {
                    var cache = memoize.cache;
                    var address = hasher ? hasher.apply(this, arguments) : key;
                    if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
                    return cache[address]
                };
                memoize.cache = {};
                return memoize
            };
            _.delay = function(func, wait) {
                var args = slice.call(arguments, 2);
                return setTimeout(function() {
                    return func.apply(null, args)
                }, wait)
            };
            _.defer = function(func) {
                return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)))
            };
            _.throttle = function(func, wait, options) {
                var context, args, result;
                var timeout = null;
                var previous = 0;
                if (!options) options = {};
                var later = function() {
                    previous = options.leading === false ? 0 : _.now();
                    timeout = null;
                    result = func.apply(context, args);
                    if (!timeout) context = args = null
                };
                return function() {
                    var now = _.now();
                    if (!previous && options.leading === false) previous = now;
                    var remaining = wait - (now - previous);
                    context = this;
                    args = arguments;
                    if (remaining <= 0 || remaining > wait) {
                        clearTimeout(timeout);
                        timeout = null;
                        previous = now;
                        result = func.apply(context, args);
                        if (!timeout) context = args = null
                    } else if (!timeout && options.trailing !== false) {
                        timeout = setTimeout(later, remaining)
                    }
                    return result
                }
            };
            _.debounce = function(func, wait, immediate) {
                var timeout, args, context, timestamp, result;
                var later = function() {
                    var last = _.now() - timestamp;
                    if (last < wait && last > 0) {
                        timeout = setTimeout(later, wait - last)
                    } else {
                        timeout = null;
                        if (!immediate) {
                            result = func.apply(context, args);
                            if (!timeout) context = args = null
                        }
                    }
                };
                return function() {
                    context = this;
                    args = arguments;
                    timestamp = _.now();
                    var callNow = immediate && !timeout;
                    if (!timeout) timeout = setTimeout(later, wait);
                    if (callNow) {
                        result = func.apply(context, args);
                        context = args = null
                    }
                    return result
                }
            };
            _.wrap = function(func, wrapper) {
                return _.partial(wrapper, func)
            };
            _.negate = function(predicate) {
                return function() {
                    return !predicate.apply(this, arguments)
                }
            };
            _.compose = function() {
                var args = arguments;
                var start = args.length - 1;
                return function() {
                    var i = start;
                    var result = args[start].apply(this, arguments);
                    while (i--) result = args[i].call(this, result);
                    return result
                }
            };
            _.after = function(times, func) {
                return function() {
                    if (--times < 1) {
                        return func.apply(this, arguments)
                    }
                }
            };
            _.before = function(times, func) {
                var memo;
                return function() {
                    if (--times > 0) {
                        memo = func.apply(this, arguments)
                    } else {
                        func = null
                    }
                    return memo
                }
            };
            _.once = _.partial(_.before, 2);
            _.keys = function(obj) {
                if (!_.isObject(obj)) return [];
                if (nativeKeys) return nativeKeys(obj);
                var keys = [];
                for (var key in obj)
                    if (_.has(obj, key)) keys.push(key);
                return keys
            };
            _.values = function(obj) {
                var keys = _.keys(obj);
                var length = keys.length;
                var values = Array(length);
                for (var i = 0; i < length; i++) {
                    values[i] = obj[keys[i]]
                }
                return values
            };
            _.pairs = function(obj) {
                var keys = _.keys(obj);
                var length = keys.length;
                var pairs = Array(length);
                for (var i = 0; i < length; i++) {
                    pairs[i] = [keys[i], obj[keys[i]]]
                }
                return pairs
            };
            _.invert = function(obj) {
                var result = {};
                var keys = _.keys(obj);
                for (var i = 0, length = keys.length; i < length; i++) {
                    result[obj[keys[i]]] = keys[i]
                }
                return result
            };
            _.functions = _.methods = function(obj) {
                var names = [];
                for (var key in obj) {
                    if (_.isFunction(obj[key])) names.push(key)
                }
                return names.sort()
            };
            _.extend = function(obj) {
                if (!_.isObject(obj)) return obj;
                var source, prop;
                for (var i = 1, length = arguments.length; i < length; i++) {
                    source = arguments[i];
                    for (prop in source) {
                        if (hasOwnProperty.call(source, prop)) {
                            obj[prop] = source[prop]
                        }
                    }
                }
                return obj
            };
            _.pick = function(obj, iteratee, context) {
                var result = {},
                    key;
                if (obj == null) return result;
                if (_.isFunction(iteratee)) {
                    iteratee = createCallback(iteratee, context);
                    for (key in obj) {
                        var value = obj[key];
                        if (iteratee(value, key, obj)) result[key] = value
                    }
                } else {
                    var keys = concat.apply([], slice.call(arguments, 1));
                    obj = new Object(obj);
                    for (var i = 0, length = keys.length; i < length; i++) {
                        key = keys[i];
                        if (key in obj) result[key] = obj[key]
                    }
                }
                return result
            };
            _.omit = function(obj, iteratee, context) {
                if (_.isFunction(iteratee)) {
                    iteratee = _.negate(iteratee)
                } else {
                    var keys = _.map(concat.apply([], slice.call(arguments, 1)), String);
                    iteratee = function(value, key) {
                        return !_.contains(keys, key)
                    }
                }
                return _.pick(obj, iteratee, context)
            };
            _.defaults = function(obj) {
                if (!_.isObject(obj)) return obj;
                for (var i = 1, length = arguments.length; i < length; i++) {
                    var source = arguments[i];
                    for (var prop in source) {
                        if (obj[prop] === void 0) obj[prop] = source[prop]
                    }
                }
                return obj
            };
            _.clone = function(obj) {
                if (!_.isObject(obj)) return obj;
                return _.isArray(obj) ? obj.slice() : _.extend({}, obj)
            };
            _.tap = function(obj, interceptor) {
                interceptor(obj);
                return obj
            };
            var eq = function(a, b, aStack, bStack) {
                if (a === b) return a !== 0 || 1 / a === 1 / b;
                if (a == null || b == null) return a === b;
                if (a instanceof _) a = a._wrapped;
                if (b instanceof _) b = b._wrapped;
                var className = toString.call(a);
                if (className !== toString.call(b)) return false;
                switch (className) {
                    case "[object RegExp]":
                    case "[object String]":
                        return "" + a === "" + b;
                    case "[object Number]":
                        if (+a !== +a) return +b !== +b;
                        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
                    case "[object Date]":
                    case "[object Boolean]":
                        return +a === +b
                }
                if (typeof a != "object" || typeof b != "object") return false;
                var length = aStack.length;
                while (length--) {
                    if (aStack[length] === a) return bStack[length] === b
                }
                var aCtor = a.constructor,
                    bCtor = b.constructor;
                if (aCtor !== bCtor && "constructor" in a && "constructor" in b && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor)) {
                    return false
                }
                aStack.push(a);
                bStack.push(b);
                var size, result;
                if (className === "[object Array]") {
                    size = a.length;
                    result = size === b.length;
                    if (result) {
                        while (size--) {
                            if (!(result = eq(a[size], b[size], aStack, bStack))) break
                        }
                    }
                } else {
                    var keys = _.keys(a),
                        key;
                    size = keys.length;
                    result = _.keys(b).length === size;
                    if (result) {
                        while (size--) {
                            key = keys[size];
                            if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break
                        }
                    }
                }
                aStack.pop();
                bStack.pop();
                return result
            };
            _.isEqual = function(a, b) {
                return eq(a, b, [], [])
            };
            _.isEmpty = function(obj) {
                if (obj == null) return true;
                if (_.isArray(obj) || _.isString(obj) || _.isArguments(obj)) return obj.length === 0;
                for (var key in obj)
                    if (_.has(obj, key)) return false;
                return true
            };
            _.isElement = function(obj) {
                return !!(obj && obj.nodeType === 1)
            };
            _.isArray = nativeIsArray || function(obj) {
                return toString.call(obj) === "[object Array]"
            };
            _.isObject = function(obj) {
                var type = typeof obj;
                return type === "function" || type === "object" && !!obj
            };
            _.each(["Arguments", "Function", "String", "Number", "Date", "RegExp"], function(name) {
                _["is" + name] = function(obj) {
                    return toString.call(obj) === "[object " + name + "]"
                }
            });
            if (!_.isArguments(arguments)) {
                _.isArguments = function(obj) {
                    return _.has(obj, "callee")
                }
            }
            if (typeof /./ !== "function") {
                _.isFunction = function(obj) {
                    return typeof obj == "function" || false
                }
            }
            _.isFinite = function(obj) {
                return isFinite(obj) && !isNaN(parseFloat(obj))
            };
            _.isNaN = function(obj) {
                return _.isNumber(obj) && obj !== +obj
            };
            _.isBoolean = function(obj) {
                return obj === true || obj === false || toString.call(obj) === "[object Boolean]"
            };
            _.isNull = function(obj) {
                return obj === null
            };
            _.isUndefined = function(obj) {
                return obj === void 0
            };
            _.has = function(obj, key) {
                return obj != null && hasOwnProperty.call(obj, key)
            };
            _.noConflict = function() {
                root._ = previousUnderscore;
                return this
            };
            _.identity = function(value) {
                return value
            };
            _.constant = function(value) {
                return function() {
                    return value
                }
            };
            _.noop = function() {};
            _.property = function(key) {
                return function(obj) {
                    return obj[key]
                }
            };
            _.matches = function(attrs) {
                var pairs = _.pairs(attrs),
                    length = pairs.length;
                return function(obj) {
                    if (obj == null) return !length;
                    obj = new Object(obj);
                    for (var i = 0; i < length; i++) {
                        var pair = pairs[i],
                            key = pair[0];
                        if (pair[1] !== obj[key] || !(key in obj)) return false
                    }
                    return true
                }
            };
            _.times = function(n, iteratee, context) {
                var accum = Array(Math.max(0, n));
                iteratee = createCallback(iteratee, context, 1);
                for (var i = 0; i < n; i++) accum[i] = iteratee(i);
                return accum
            };
            _.random = function(min, max) {
                if (max == null) {
                    max = min;
                    min = 0
                }
                return min + Math.floor(Math.random() * (max - min + 1))
            };
            _.now = Date.now || function() {
                return (new Date).getTime()
            };
            var escapeMap = {
                "&": "&amp;",
                "<": "&lt;",
                ">": "&gt;",
                '"': "&quot;",
                "'": "&#x27;",
                "`": "&#x60;"
            };
            var unescapeMap = _.invert(escapeMap);
            var createEscaper = function(map) {
                var escaper = function(match) {
                    return map[match]
                };
                var source = "(?:" + _.keys(map).join("|") + ")";
                var testRegexp = RegExp(source);
                var replaceRegexp = RegExp(source, "g");
                return function(string) {
                    string = string == null ? "" : "" + string;
                    return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string
                }
            };
            _.escape = createEscaper(escapeMap);
            _.unescape = createEscaper(unescapeMap);
            _.result = function(object, property) {
                if (object == null) return void 0;
                var value = object[property];
                return _.isFunction(value) ? object[property]() : value
            };
            var idCounter = 0;
            _.uniqueId = function(prefix) {
                var id = ++idCounter + "";
                return prefix ? prefix + id : id
            };
            _.templateSettings = {
                evaluate: /<%([\s\S]+?)%>/g,
                interpolate: /<%=([\s\S]+?)%>/g,
                escape: /<%-([\s\S]+?)%>/g
            };
            var noMatch = /(.)^/;
            var escapes = {
                "'": "'",
                "\\": "\\",
                "\r": "r",
                "\n": "n",
                "\u2028": "u2028",
                "\u2029": "u2029"
            };
            var escaper = /\\|'|\r|\n|\u2028|\u2029/g;
            var escapeChar = function(match) {
                return "\\" + escapes[match]
            };
            _.template = function(text, settings, oldSettings) {
                if (!settings && oldSettings) settings = oldSettings;
                settings = _.defaults({}, settings, _.templateSettings);
                var matcher = RegExp([(settings.escape || noMatch).source, (settings.interpolate || noMatch).source, (settings.evaluate || noMatch).source].join("|") + "|$", "g");
                var index = 0;
                var source = "__p+='";
                text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
                    source += text.slice(index, offset).replace(escaper, escapeChar);
                    index = offset + match.length;
                    if (escape) {
                        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'"
                    } else if (interpolate) {
                        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'"
                    } else if (evaluate) {
                        source += "';\n" + evaluate + "\n__p+='"
                    }
                    return match
                });
                source += "';\n";
                if (!settings.variable) source = "with(obj||{}){\n" + source + "}\n";
                source = "var __t,__p='',__j=Array.prototype.join," + "print=function(){__p+=__j.call(arguments,'');};\n" + source + "return __p;\n";
                try {
                    var render = new Function(settings.variable || "obj", "_", source)
                } catch (e) {
                    e.source = source;
                    throw e
                }
                var template = function(data) {
                    return render.call(this, data, _)
                };
                var argument = settings.variable || "obj";
                template.source = "function(" + argument + "){\n" + source + "}";
                return template
            };
            _.chain = function(obj) {
                var instance = _(obj);
                instance._chain = true;
                return instance
            };
            var result = function(obj) {
                return this._chain ? _(obj).chain() : obj
            };
            _.mixin = function(obj) {
                _.each(_.functions(obj), function(name) {
                    var func = _[name] = obj[name];
                    _.prototype[name] = function() {
                        var args = [this._wrapped];
                        push.apply(args, arguments);
                        return result.call(this, func.apply(_, args))
                    }
                })
            };
            _.mixin(_);
            _.each(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], function(name) {
                var method = ArrayProto[name];
                _.prototype[name] = function() {
                    var obj = this._wrapped;
                    method.apply(obj, arguments);
                    if ((name === "shift" || name === "splice") && obj.length === 0) delete obj[0];
                    return result.call(this, obj)
                }
            });
            _.each(["concat", "join", "slice"], function(name) {
                var method = ArrayProto[name];
                _.prototype[name] = function() {
                    return result.call(this, method.apply(this._wrapped, arguments))
                }
            });
            _.prototype.value = function() {
                return this._wrapped
            };
            if (typeof define === "function" && define.amd) {
                define("underscore", [], function() {
                    return _
                })
            }
        }).call(this)
    }, {}],
    7: [function(require, module, exports) {
        "use strict";
        var _interopRequireWildcard = function(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        };
        exports.__esModule = true;
        var _import = require("./handlebars/base");
        var base = _interopRequireWildcard(_import);
        var _SafeString = require("./handlebars/safe-string");
        var _SafeString2 = _interopRequireWildcard(_SafeString);
        var _Exception = require("./handlebars/exception");
        var _Exception2 = _interopRequireWildcard(_Exception);
        var _import2 = require("./handlebars/utils");
        var Utils = _interopRequireWildcard(_import2);
        var _import3 = require("./handlebars/runtime");
        var runtime = _interopRequireWildcard(_import3);
        var _noConflict = require("./handlebars/no-conflict");
        var _noConflict2 = _interopRequireWildcard(_noConflict);

        function create() {
            var hb = new base.HandlebarsEnvironment;
            Utils.extend(hb, base);
            hb.SafeString = _SafeString2["default"];
            hb.Exception = _Exception2["default"];
            hb.Utils = Utils;
            hb.escapeExpression = Utils.escapeExpression;
            hb.VM = runtime;
            hb.template = function(spec) {
                return runtime.template(spec, hb)
            };
            return hb
        }
        var inst = create();
        inst.create = create;
        _noConflict2["default"](inst);
        inst["default"] = inst;
        exports["default"] = inst;
        module.exports = exports["default"]
    }, {
        "./handlebars/base": 8,
        "./handlebars/exception": 9,
        "./handlebars/no-conflict": 10,
        "./handlebars/runtime": 11,
        "./handlebars/safe-string": 12,
        "./handlebars/utils": 13
    }],
    8: [function(require, module, exports) {
        "use strict";
        var _interopRequireWildcard = function(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        };
        exports.__esModule = true;
        exports.HandlebarsEnvironment = HandlebarsEnvironment;
        exports.createFrame = createFrame;
        var _import = require("./utils");
        var Utils = _interopRequireWildcard(_import);
        var _Exception = require("./exception");
        var _Exception2 = _interopRequireWildcard(_Exception);
        var VERSION = "3.0.1";
        exports.VERSION = VERSION;
        var COMPILER_REVISION = 6;
        exports.COMPILER_REVISION = COMPILER_REVISION;
        var REVISION_CHANGES = {
            1: "<= 1.0.rc.2",
            2: "== 1.0.0-rc.3",
            3: "== 1.0.0-rc.4",
            4: "== 1.x.x",
            5: "== 2.0.0-alpha.x",
            6: ">= 2.0.0-beta.1"
        };
        exports.REVISION_CHANGES = REVISION_CHANGES;
        var isArray = Utils.isArray,
            isFunction = Utils.isFunction,
            toString = Utils.toString,
            objectType = "[object Object]";

        function HandlebarsEnvironment(helpers, partials) {
            this.helpers = helpers || {};
            this.partials = partials || {};
            registerDefaultHelpers(this)
        }
        HandlebarsEnvironment.prototype = {
            constructor: HandlebarsEnvironment,
            logger: logger,
            log: log,
            registerHelper: function registerHelper(name, fn) {
                if (toString.call(name) === objectType) {
                    if (fn) {
                        throw new _Exception2["default"]("Arg not supported with multiple helpers")
                    }
                    Utils.extend(this.helpers, name)
                } else {
                    this.helpers[name] = fn
                }
            },
            unregisterHelper: function unregisterHelper(name) {
                delete this.helpers[name]
            },
            registerPartial: function registerPartial(name, partial) {
                if (toString.call(name) === objectType) {
                    Utils.extend(this.partials, name)
                } else {
                    if (typeof partial === "undefined") {
                        throw new _Exception2["default"]("Attempting to register a partial as undefined")
                    }
                    this.partials[name] = partial
                }
            },
            unregisterPartial: function unregisterPartial(name) {
                delete this.partials[name]
            }
        };

        function registerDefaultHelpers(instance) {
            instance.registerHelper("helperMissing", function() {
                if (arguments.length === 1) {
                    return undefined
                } else {
                    throw new _Exception2["default"]('Missing helper: "' + arguments[arguments.length - 1].name + '"')
                }
            });
            instance.registerHelper("blockHelperMissing", function(context, options) {
                var inverse = options.inverse,
                    fn = options.fn;
                if (context === true) {
                    return fn(this)
                } else if (context === false || context == null) {
                    return inverse(this)
                } else if (isArray(context)) {
                    if (context.length > 0) {
                        if (options.ids) {
                            options.ids = [options.name]
                        }
                        return instance.helpers.each(context, options)
                    } else {
                        return inverse(this)
                    }
                } else {
                    if (options.data && options.ids) {
                        var data = createFrame(options.data);
                        data.contextPath = Utils.appendContextPath(options.data.contextPath, options.name);
                        options = {
                            data: data
                        }
                    }
                    return fn(context, options)
                }
            });
            instance.registerHelper("each", function(context, options) {
                if (!options) {
                    throw new _Exception2["default"]("Must pass iterator to #each")
                }
                var fn = options.fn,
                    inverse = options.inverse,
                    i = 0,
                    ret = "",
                    data = undefined,
                    contextPath = undefined;
                if (options.data && options.ids) {
                    contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]) + "."
                }
                if (isFunction(context)) {
                    context = context.call(this)
                }
                if (options.data) {
                    data = createFrame(options.data)
                }

                function execIteration(field, index, last) {
                    if (data) {
                        data.key = field;
                        data.index = index;
                        data.first = index === 0;
                        data.last = !!last;
                        if (contextPath) {
                            data.contextPath = contextPath + field
                        }
                    }
                    ret = ret + fn(context[field], {
                        data: data,
                        blockParams: Utils.blockParams([context[field], field], [contextPath + field, null])
                    })
                }
                if (context && typeof context === "object") {
                    if (isArray(context)) {
                        for (var j = context.length; i < j; i++) {
                            execIteration(i, i, i === context.length - 1)
                        }
                    } else {
                        var priorKey = undefined;
                        for (var key in context) {
                            if (context.hasOwnProperty(key)) {
                                if (priorKey) {
                                    execIteration(priorKey, i - 1)
                                }
                                priorKey = key;
                                i++
                            }
                        }
                        if (priorKey) {
                            execIteration(priorKey, i - 1, true)
                        }
                    }
                }
                if (i === 0) {
                    ret = inverse(this)
                }
                return ret
            });
            instance.registerHelper("if", function(conditional, options) {
                if (isFunction(conditional)) {
                    conditional = conditional.call(this)
                }
                if (!options.hash.includeZero && !conditional || Utils.isEmpty(conditional)) {
                    return options.inverse(this)
                } else {
                    return options.fn(this)
                }
            });
            instance.registerHelper("unless", function(conditional, options) {
                return instance.helpers["if"].call(this, conditional, {
                    fn: options.inverse,
                    inverse: options.fn,
                    hash: options.hash
                })
            });
            instance.registerHelper("with", function(context, options) {
                if (isFunction(context)) {
                    context = context.call(this)
                }
                var fn = options.fn;
                if (!Utils.isEmpty(context)) {
                    if (options.data && options.ids) {
                        var data = createFrame(options.data);
                        data.contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]);
                        options = {
                            data: data
                        }
                    }
                    return fn(context, options)
                } else {
                    return options.inverse(this)
                }
            });
            instance.registerHelper("log", function(message, options) {
                var level = options.data && options.data.level != null ? parseInt(options.data.level, 10) : 1;
                instance.log(level, message)
            });
            instance.registerHelper("lookup", function(obj, field) {
                return obj && obj[field]
            })
        }
        var logger = {
            methodMap: {
                0: "debug",
                1: "info",
                2: "warn",
                3: "error"
            },
            DEBUG: 0,
            INFO: 1,
            WARN: 2,
            ERROR: 3,
            level: 1,
            log: function log(level, message) {
                if (typeof console !== "undefined" && logger.level <= level) {
                    var method = logger.methodMap[level];
                    (console[method] || console.log).call(console, message)
                }
            }
        };
        exports.logger = logger;
        var log = logger.log;
        exports.log = log;

        function createFrame(object) {
            var frame = Utils.extend({}, object);
            frame._parent = object;
            return frame
        }
    }, {
        "./exception": 9,
        "./utils": 13
    }],
    9: [function(require, module, exports) {
        "use strict";
        exports.__esModule = true;
        var errorProps = ["description", "fileName", "lineNumber", "message", "name", "number", "stack"];

        function Exception(message, node) {
            var loc = node && node.loc,
                line = undefined,
                column = undefined;
            if (loc) {
                line = loc.start.line;
                column = loc.start.column;
                message += " - " + line + ":" + column
            }
            var tmp = Error.prototype.constructor.call(this, message);
            for (var idx = 0; idx < errorProps.length; idx++) {
                this[errorProps[idx]] = tmp[errorProps[idx]]
            }
            if (Error.captureStackTrace) {
                Error.captureStackTrace(this, Exception)
            }
            if (loc) {
                this.lineNumber = line;
                this.column = column
            }
        }
        Exception.prototype = new Error;
        exports["default"] = Exception;
        module.exports = exports["default"]
    }, {}],
    10: [function(require, module, exports) {
        (function(global) {
            "use strict";
            exports.__esModule = true;
            exports["default"] = function(Handlebars) {
                var root = typeof global !== "undefined" ? global : window,
                    $Handlebars = root.Handlebars;
                Handlebars.noConflict = function() {
                    if (root.Handlebars === Handlebars) {
                        root.Handlebars = $Handlebars
                    }
                }
            };
            module.exports = exports["default"]
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {}],
    11: [function(require, module, exports) {
        "use strict";
        var _interopRequireWildcard = function(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        };
        exports.__esModule = true;
        exports.checkRevision = checkRevision;
        exports.template = template;
        exports.wrapProgram = wrapProgram;
        exports.resolvePartial = resolvePartial;
        exports.invokePartial = invokePartial;
        exports.noop = noop;
        var _import = require("./utils");
        var Utils = _interopRequireWildcard(_import);
        var _Exception = require("./exception");
        var _Exception2 = _interopRequireWildcard(_Exception);
        var _COMPILER_REVISION$REVISION_CHANGES$createFrame = require("./base");

        function checkRevision(compilerInfo) {
            var compilerRevision = compilerInfo && compilerInfo[0] || 1,
                currentRevision = _COMPILER_REVISION$REVISION_CHANGES$createFrame.COMPILER_REVISION;
            if (compilerRevision !== currentRevision) {
                if (compilerRevision < currentRevision) {
                    var runtimeVersions = _COMPILER_REVISION$REVISION_CHANGES$createFrame.REVISION_CHANGES[currentRevision],
                        compilerVersions = _COMPILER_REVISION$REVISION_CHANGES$createFrame.REVISION_CHANGES[compilerRevision];
                    throw new _Exception2["default"]("Template was precompiled with an older version of Handlebars than the current runtime. " + "Please update your precompiler to a newer version (" + runtimeVersions + ") or downgrade your runtime to an older version (" + compilerVersions + ").")
                } else {
                    throw new _Exception2["default"]("Template was precompiled with a newer version of Handlebars than the current runtime. " + "Please update your runtime to a newer version (" + compilerInfo[1] + ").")
                }
            }
        }

        function template(templateSpec, env) {
            if (!env) {
                throw new _Exception2["default"]("No environment passed to template")
            }
            if (!templateSpec || !templateSpec.main) {
                throw new _Exception2["default"]("Unknown template object: " + typeof templateSpec)
            }
            env.VM.checkRevision(templateSpec.compiler);

            function invokePartialWrapper(partial, context, options) {
                if (options.hash) {
                    context = Utils.extend({}, context, options.hash)
                }
                partial = env.VM.resolvePartial.call(this, partial, context, options);
                var result = env.VM.invokePartial.call(this, partial, context, options);
                if (result == null && env.compile) {
                    options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
                    result = options.partials[options.name](context, options)
                }
                if (result != null) {
                    if (options.indent) {
                        var lines = result.split("\n");
                        for (var i = 0, l = lines.length; i < l; i++) {
                            if (!lines[i] && i + 1 === l) {
                                break
                            }
                            lines[i] = options.indent + lines[i]
                        }
                        result = lines.join("\n")
                    }
                    return result
                } else {
                    throw new _Exception2["default"]("The partial " + options.name + " could not be compiled when running in runtime-only mode")
                }
            }
            var container = {
                strict: function strict(obj, name) {
                    if (!(name in obj)) {
                        throw new _Exception2["default"]('"' + name + '" not defined in ' + obj)
                    }
                    return obj[name]
                },
                lookup: function lookup(depths, name) {
                    var len = depths.length;
                    for (var i = 0; i < len; i++) {
                        if (depths[i] && depths[i][name] != null) {
                            return depths[i][name]
                        }
                    }
                },
                lambda: function lambda(current, context) {
                    return typeof current === "function" ? current.call(context) : current
                },
                escapeExpression: Utils.escapeExpression,
                invokePartial: invokePartialWrapper,
                fn: function fn(i) {
                    return templateSpec[i]
                },
                programs: [],
                program: function program(i, data, declaredBlockParams, blockParams, depths) {
                    var programWrapper = this.programs[i],
                        fn = this.fn(i);
                    if (data || depths || blockParams || declaredBlockParams) {
                        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths)
                    } else if (!programWrapper) {
                        programWrapper = this.programs[i] = wrapProgram(this, i, fn)
                    }
                    return programWrapper
                },
                data: function data(value, depth) {
                    while (value && depth--) {
                        value = value._parent
                    }
                    return value
                },
                merge: function merge(param, common) {
                    var obj = param || common;
                    if (param && common && param !== common) {
                        obj = Utils.extend({}, common, param)
                    }
                    return obj
                },
                noop: env.VM.noop,
                compilerInfo: templateSpec.compiler
            };

            function ret(context) {
                var options = arguments[1] === undefined ? {} : arguments[1];
                var data = options.data;
                ret._setup(options);
                if (!options.partial && templateSpec.useData) {
                    data = initData(context, data)
                }
                var depths = undefined,
                    blockParams = templateSpec.useBlockParams ? [] : undefined;
                if (templateSpec.useDepths) {
                    depths = options.depths ? [context].concat(options.depths) : [context]
                }
                return templateSpec.main.call(container, context, container.helpers, container.partials, data, blockParams, depths)
            }
            ret.isTop = true;
            ret._setup = function(options) {
                if (!options.partial) {
                    container.helpers = container.merge(options.helpers, env.helpers);
                    if (templateSpec.usePartial) {
                        container.partials = container.merge(options.partials, env.partials)
                    }
                } else {
                    container.helpers = options.helpers;
                    container.partials = options.partials
                }
            };
            ret._child = function(i, data, blockParams, depths) {
                if (templateSpec.useBlockParams && !blockParams) {
                    throw new _Exception2["default"]("must pass block params")
                }
                if (templateSpec.useDepths && !depths) {
                    throw new _Exception2["default"]("must pass parent depths")
                }
                return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths)
            };
            return ret
        }

        function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
            function prog(context) {
                var options = arguments[1] === undefined ? {} : arguments[1];
                return fn.call(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), depths && [context].concat(depths))
            }
            prog.program = i;
            prog.depth = depths ? depths.length : 0;
            prog.blockParams = declaredBlockParams || 0;
            return prog
        }

        function resolvePartial(partial, context, options) {
            if (!partial) {
                partial = options.partials[options.name]
            } else if (!partial.call && !options.name) {
                options.name = partial;
                partial = options.partials[partial]
            }
            return partial
        }

        function invokePartial(partial, context, options) {
            options.partial = true;
            if (partial === undefined) {
                throw new _Exception2["default"]("The partial " + options.name + " could not be found")
            } else if (partial instanceof Function) {
                return partial(context, options)
            }
        }

        function noop() {
            return ""
        }

        function initData(context, data) {
            if (!data || !("root" in data)) {
                data = data ? _COMPILER_REVISION$REVISION_CHANGES$createFrame.createFrame(data) : {};
                data.root = context
            }
            return data
        }
    }, {
        "./base": 8,
        "./exception": 9,
        "./utils": 13
    }],
    12: [function(require, module, exports) {
        "use strict";
        exports.__esModule = true;

        function SafeString(string) {
            this.string = string
        }
        SafeString.prototype.toString = SafeString.prototype.toHTML = function() {
            return "" + this.string
        };
        exports["default"] = SafeString;
        module.exports = exports["default"]
    }, {}],
    13: [function(require, module, exports) {
        "use strict";
        exports.__esModule = true;
        exports.extend = extend;
        exports.indexOf = indexOf;
        exports.escapeExpression = escapeExpression;
        exports.isEmpty = isEmpty;
        exports.blockParams = blockParams;
        exports.appendContextPath = appendContextPath;
        var escape = {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#x27;",
            "`": "&#x60;"
        };
        var badChars = /[&<>"'`]/g,
            possible = /[&<>"'`]/;

        function escapeChar(chr) {
            return escape[chr]
        }

        function extend(obj) {
            for (var i = 1; i < arguments.length; i++) {
                for (var key in arguments[i]) {
                    if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
                        obj[key] = arguments[i][key]
                    }
                }
            }
            return obj
        }
        var toString = Object.prototype.toString;
        exports.toString = toString;
        var isFunction = function isFunction(value) {
            return typeof value === "function"
        };
        if (isFunction(/x/)) {
            exports.isFunction = isFunction = function(value) {
                return typeof value === "function" && toString.call(value) === "[object Function]"
            }
        }
        var isFunction;
        exports.isFunction = isFunction;
        var isArray = Array.isArray || function(value) {
            return value && typeof value === "object" ? toString.call(value) === "[object Array]" : false
        };
        exports.isArray = isArray;

        function indexOf(array, value) {
            for (var i = 0, len = array.length; i < len; i++) {
                if (array[i] === value) {
                    return i
                }
            }
            return -1
        }

        function escapeExpression(string) {
            if (typeof string !== "string") {
                if (string && string.toHTML) {
                    return string.toHTML()
                } else if (string == null) {
                    return ""
                } else if (!string) {
                    return string + ""
                }
                string = "" + string
            }
            if (!possible.test(string)) {
                return string
            }
            return string.replace(badChars, escapeChar)
        }

        function isEmpty(value) {
            if (!value && value !== 0) {
                return true
            } else if (isArray(value) && value.length === 0) {
                return true
            } else {
                return false
            }
        }

        function blockParams(params, ids) {
            params.path = ids;
            return params
        }

        function appendContextPath(contextPath, id) {
            return (contextPath ? contextPath + "." : "") + id
        }
    }, {}],
    14: [function(require, module, exports) {
        module.exports = require("./dist/cjs/handlebars.runtime")["default"]
    }, {
        "./dist/cjs/handlebars.runtime": 7
    }],
    15: [function(require, module, exports) {
        module.exports = require("handlebars/runtime")["default"]
    }, {
        "handlebars/runtime": 14
    }],
    16: [function(require, module, exports) {
        (function(global, factory) {
            if (typeof module === "object" && typeof module.exports === "object") {
                module.exports = global.document ? factory(global, true) : function(w) {
                    if (!w.document) {
                        throw new Error("jQuery requires a window with a document")
                    }
                    return factory(w)
                }
            } else {
                factory(global)
            }
        })(typeof window !== "undefined" ? window : this, function(window, noGlobal) {
            var arr = [];
            var slice = arr.slice;
            var concat = arr.concat;
            var push = arr.push;
            var indexOf = arr.indexOf;
            var class2type = {};
            var toString = class2type.toString;
            var hasOwn = class2type.hasOwnProperty;
            var support = {};
            var document = window.document,
                version = "2.1.4",
                jQuery = function(selector, context) {
                    return new jQuery.fn.init(selector, context)
                },
                rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
                rmsPrefix = /^-ms-/,
                rdashAlpha = /-([\da-z])/gi,
                fcamelCase = function(all, letter) {
                    return letter.toUpperCase()
                };
            jQuery.fn = jQuery.prototype = {
                jquery: version,
                constructor: jQuery,
                selector: "",
                length: 0,
                toArray: function() {
                    return slice.call(this)
                },
                get: function(num) {
                    return num != null ? num < 0 ? this[num + this.length] : this[num] : slice.call(this)
                },
                pushStack: function(elems) {
                    var ret = jQuery.merge(this.constructor(), elems);
                    ret.prevObject = this;
                    ret.context = this.context;
                    return ret
                },
                each: function(callback, args) {
                    return jQuery.each(this, callback, args)
                },
                map: function(callback) {
                    return this.pushStack(jQuery.map(this, function(elem, i) {
                        return callback.call(elem, i, elem)
                    }))
                },
                slice: function() {
                    return this.pushStack(slice.apply(this, arguments))
                },
                first: function() {
                    return this.eq(0)
                },
                last: function() {
                    return this.eq(-1)
                },
                eq: function(i) {
                    var len = this.length,
                        j = +i + (i < 0 ? len : 0);
                    return this.pushStack(j >= 0 && j < len ? [this[j]] : [])
                },
                end: function() {
                    return this.prevObject || this.constructor(null)
                },
                push: push,
                sort: arr.sort,
                splice: arr.splice
            };
            jQuery.extend = jQuery.fn.extend = function() {
                var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {},
                    i = 1,
                    length = arguments.length,
                    deep = false;
                if (typeof target === "boolean") {
                    deep = target;
                    target = arguments[i] || {};
                    i++
                }
                if (typeof target !== "object" && !jQuery.isFunction(target)) {
                    target = {}
                }
                if (i === length) {
                    target = this;
                    i--
                }
                for (; i < length; i++) {
                    if ((options = arguments[i]) != null) {
                        for (name in options) {
                            src = target[name];
                            copy = options[name];
                            if (target === copy) {
                                continue
                            }
                            if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                                if (copyIsArray) {
                                    copyIsArray = false;
                                    clone = src && jQuery.isArray(src) ? src : []
                                } else {
                                    clone = src && jQuery.isPlainObject(src) ? src : {}
                                }
                                target[name] = jQuery.extend(deep, clone, copy)
                            } else if (copy !== undefined) {
                                target[name] = copy
                            }
                        }
                    }
                }
                return target
            };
            jQuery.extend({
                expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
                isReady: true,
                error: function(msg) {
                    throw new Error(msg)
                },
                noop: function() {},
                isFunction: function(obj) {
                    return jQuery.type(obj) === "function"
                },
                isArray: Array.isArray,
                isWindow: function(obj) {
                    return obj != null && obj === obj.window
                },
                isNumeric: function(obj) {
                    return !jQuery.isArray(obj) && obj - parseFloat(obj) + 1 >= 0
                },
                isPlainObject: function(obj) {
                    if (jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
                        return false
                    }
                    if (obj.constructor && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
                        return false
                    }
                    return true
                },
                isEmptyObject: function(obj) {
                    var name;
                    for (name in obj) {
                        return false
                    }
                    return true
                },
                type: function(obj) {
                    if (obj == null) {
                        return obj + ""
                    }
                    return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj
                },
                globalEval: function(code) {
                    var script, indirect = eval;
                    code = jQuery.trim(code);
                    if (code) {
                        if (code.indexOf("use strict") === 1) {
                            script = document.createElement("script");
                            script.text = code;
                            document.head.appendChild(script).parentNode.removeChild(script)
                        } else {
                            indirect(code)
                        }
                    }
                },
                camelCase: function(string) {
                    return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase)
                },
                nodeName: function(elem, name) {
                    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase()
                },
                each: function(obj, callback, args) {
                    var value, i = 0,
                        length = obj.length,
                        isArray = isArraylike(obj);
                    if (args) {
                        if (isArray) {
                            for (; i < length; i++) {
                                value = callback.apply(obj[i], args);
                                if (value === false) {
                                    break
                                }
                            }
                        } else {
                            for (i in obj) {
                                value = callback.apply(obj[i], args);
                                if (value === false) {
                                    break
                                }
                            }
                        }
                    } else {
                        if (isArray) {
                            for (; i < length; i++) {
                                value = callback.call(obj[i], i, obj[i]);
                                if (value === false) {
                                    break
                                }
                            }
                        } else {
                            for (i in obj) {
                                value = callback.call(obj[i], i, obj[i]);
                                if (value === false) {
                                    break
                                }
                            }
                        }
                    }
                    return obj
                },
                trim: function(text) {
                    return text == null ? "" : (text + "").replace(rtrim, "")
                },
                makeArray: function(arr, results) {
                    var ret = results || [];
                    if (arr != null) {
                        if (isArraylike(Object(arr))) {
                            jQuery.merge(ret, typeof arr === "string" ? [arr] : arr)
                        } else {
                            push.call(ret, arr)
                        }
                    }
                    return ret
                },
                inArray: function(elem, arr, i) {
                    return arr == null ? -1 : indexOf.call(arr, elem, i)
                },
                merge: function(first, second) {
                    var len = +second.length,
                        j = 0,
                        i = first.length;
                    for (; j < len; j++) {
                        first[i++] = second[j]
                    }
                    first.length = i;
                    return first
                },
                grep: function(elems, callback, invert) {
                    var callbackInverse, matches = [],
                        i = 0,
                        length = elems.length,
                        callbackExpect = !invert;
                    for (; i < length; i++) {
                        callbackInverse = !callback(elems[i], i);
                        if (callbackInverse !== callbackExpect) {
                            matches.push(elems[i])
                        }
                    }
                    return matches
                },
                map: function(elems, callback, arg) {
                    var value, i = 0,
                        length = elems.length,
                        isArray = isArraylike(elems),
                        ret = [];
                    if (isArray) {
                        for (; i < length; i++) {
                            value = callback(elems[i], i, arg);
                            if (value != null) {
                                ret.push(value)
                            }
                        }
                    } else {
                        for (i in elems) {
                            value = callback(elems[i], i, arg);
                            if (value != null) {
                                ret.push(value)
                            }
                        }
                    }
                    return concat.apply([], ret)
                },
                guid: 1,
                proxy: function(fn, context) {
                    var tmp, args, proxy;
                    if (typeof context === "string") {
                        tmp = fn[context];
                        context = fn;
                        fn = tmp
                    }
                    if (!jQuery.isFunction(fn)) {
                        return undefined
                    }
                    args = slice.call(arguments, 2);
                    proxy = function() {
                        return fn.apply(context || this, args.concat(slice.call(arguments)))
                    };
                    proxy.guid = fn.guid = fn.guid || jQuery.guid++;
                    return proxy
                },
                now: Date.now,
                support: support
            });
            jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
                class2type["[object " + name + "]"] = name.toLowerCase()
            });

            function isArraylike(obj) {
                var length = "length" in obj && obj.length,
                    type = jQuery.type(obj);
                if (type === "function" || jQuery.isWindow(obj)) {
                    return false
                }
                if (obj.nodeType === 1 && length) {
                    return true
                }
                return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj
            }
            var Sizzle = function(window) {
                var i, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = "sizzle" + 1 * new Date,
                    preferredDoc = window.document,
                    dirruns = 0,
                    done = 0,
                    classCache = createCache(),
                    tokenCache = createCache(),
                    compilerCache = createCache(),
                    sortOrder = function(a, b) {
                        if (a === b) {
                            hasDuplicate = true
                        }
                        return 0
                    },
                    MAX_NEGATIVE = 1 << 31,
                    hasOwn = {}.hasOwnProperty,
                    arr = [],
                    pop = arr.pop,
                    push_native = arr.push,
                    push = arr.push,
                    slice = arr.slice,
                    indexOf = function(list, elem) {
                        var i = 0,
                            len = list.length;
                        for (; i < len; i++) {
                            if (list[i] === elem) {
                                return i
                            }
                        }
                        return -1
                    },
                    booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
                    whitespace = "[\\x20\\t\\r\\n\\f]",
                    characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
                    identifier = characterEncoding.replace("w", "w#"),
                    attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace + "*([*^$|!~]?=)" + whitespace + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
                    pseudos = ":(" + characterEncoding + ")(?:\\((" + "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + ".*" + ")\\)|)",
                    rwhitespace = new RegExp(whitespace + "+", "g"),
                    rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
                    rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
                    rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
                    rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
                    rpseudo = new RegExp(pseudos),
                    ridentifier = new RegExp("^" + identifier + "$"),
                    matchExpr = {
                        ID: new RegExp("^#(" + characterEncoding + ")"),
                        CLASS: new RegExp("^\\.(" + characterEncoding + ")"),
                        TAG: new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
                        ATTR: new RegExp("^" + attributes),
                        PSEUDO: new RegExp("^" + pseudos),
                        CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
                        bool: new RegExp("^(?:" + booleans + ")$", "i"),
                        needsContext: new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
                    },
                    rinputs = /^(?:input|select|textarea|button)$/i,
                    rheader = /^h\d$/i,
                    rnative = /^[^{]+\{\s*\[native \w/,
                    rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
                    rsibling = /[+~]/,
                    rescape = /'|\\/g,
                    runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
                    funescape = function(_, escaped, escapedWhitespace) {
                        var high = "0x" + escaped - 65536;
                        return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320)
                    },
                    unloadHandler = function() {
                        setDocument()
                    };
                try {
                    push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
                    arr[preferredDoc.childNodes.length].nodeType
                } catch (e) {
                    push = {
                        apply: arr.length ? function(target, els) {
                            push_native.apply(target, slice.call(els))
                        } : function(target, els) {
                            var j = target.length,
                                i = 0;
                            while (target[j++] = els[i++]) {}
                            target.length = j - 1
                        }
                    }
                }

                function Sizzle(selector, context, results, seed) {
                    var match, elem, m, nodeType, i, groups, old, nid, newContext, newSelector;
                    if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
                        setDocument(context)
                    }
                    context = context || document;
                    results = results || [];
                    nodeType = context.nodeType;
                    if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
                        return results
                    }
                    if (!seed && documentIsHTML) {
                        if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
                            if (m = match[1]) {
                                if (nodeType === 9) {
                                    elem = context.getElementById(m);
                                    if (elem && elem.parentNode) {
                                        if (elem.id === m) {
                                            results.push(elem);
                                            return results
                                        }
                                    } else {
                                        return results
                                    }
                                } else {
                                    if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
                                        results.push(elem);
                                        return results
                                    }
                                }
                            } else if (match[2]) {
                                push.apply(results, context.getElementsByTagName(selector));
                                return results
                            } else if ((m = match[3]) && support.getElementsByClassName) {
                                push.apply(results, context.getElementsByClassName(m));
                                return results
                            }
                        }
                        if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                            nid = old = expando;
                            newContext = context;
                            newSelector = nodeType !== 1 && selector;
                            if (nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
                                groups = tokenize(selector);
                                if (old = context.getAttribute("id")) {
                                    nid = old.replace(rescape, "\\$&")
                                } else {
                                    context.setAttribute("id", nid)
                                }
                                nid = "[id='" + nid + "'] ";
                                i = groups.length;
                                while (i--) {
                                    groups[i] = nid + toSelector(groups[i])
                                }
                                newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                                newSelector = groups.join(",")
                            }
                            if (newSelector) {
                                try {
                                    push.apply(results, newContext.querySelectorAll(newSelector));
                                    return results
                                } catch (qsaError) {} finally {
                                    if (!old) {
                                        context.removeAttribute("id")
                                    }
                                }
                            }
                        }
                    }
                    return select(selector.replace(rtrim, "$1"), context, results, seed)
                }

                function createCache() {
                    var keys = [];

                    function cache(key, value) {
                        if (keys.push(key + " ") > Expr.cacheLength) {
                            delete cache[keys.shift()]
                        }
                        return cache[key + " "] = value
                    }
                    return cache
                }

                function markFunction(fn) {
                    fn[expando] = true;
                    return fn
                }

                function assert(fn) {
                    var div = document.createElement("div");
                    try {
                        return !!fn(div)
                    } catch (e) {
                        return false
                    } finally {
                        if (div.parentNode) {
                            div.parentNode.removeChild(div)
                        }
                        div = null
                    }
                }

                function addHandle(attrs, handler) {
                    var arr = attrs.split("|"),
                        i = attrs.length;
                    while (i--) {
                        Expr.attrHandle[arr[i]] = handler
                    }
                }

                function siblingCheck(a, b) {
                    var cur = b && a,
                        diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);
                    if (diff) {
                        return diff
                    }
                    if (cur) {
                        while (cur = cur.nextSibling) {
                            if (cur === b) {
                                return -1
                            }
                        }
                    }
                    return a ? 1 : -1
                }

                function createInputPseudo(type) {
                    return function(elem) {
                        var name = elem.nodeName.toLowerCase();
                        return name === "input" && elem.type === type
                    }
                }

                function createButtonPseudo(type) {
                    return function(elem) {
                        var name = elem.nodeName.toLowerCase();
                        return (name === "input" || name === "button") && elem.type === type
                    }
                }

                function createPositionalPseudo(fn) {
                    return markFunction(function(argument) {
                        argument = +argument;
                        return markFunction(function(seed, matches) {
                            var j, matchIndexes = fn([], seed.length, argument),
                                i = matchIndexes.length;
                            while (i--) {
                                if (seed[j = matchIndexes[i]]) {
                                    seed[j] = !(matches[j] = seed[j])
                                }
                            }
                        })
                    })
                }

                function testContext(context) {
                    return context && typeof context.getElementsByTagName !== "undefined" && context
                }
                support = Sizzle.support = {};
                isXML = Sizzle.isXML = function(elem) {
                    var documentElement = elem && (elem.ownerDocument || elem).documentElement;
                    return documentElement ? documentElement.nodeName !== "HTML" : false
                };
                setDocument = Sizzle.setDocument = function(node) {
                    var hasCompare, parent, doc = node ? node.ownerDocument || node : preferredDoc;
                    if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
                        return document
                    }
                    document = doc;
                    docElem = doc.documentElement;
                    parent = doc.defaultView;
                    if (parent && parent !== parent.top) {
                        if (parent.addEventListener) {
                            parent.addEventListener("unload", unloadHandler, false)
                        } else if (parent.attachEvent) {
                            parent.attachEvent("onunload", unloadHandler)
                        }
                    }
                    documentIsHTML = !isXML(doc);
                    support.attributes = assert(function(div) {
                        div.className = "i";
                        return !div.getAttribute("className")
                    });
                    support.getElementsByTagName = assert(function(div) {
                        div.appendChild(doc.createComment(""));
                        return !div.getElementsByTagName("*").length
                    });
                    support.getElementsByClassName = rnative.test(doc.getElementsByClassName);
                    support.getById = assert(function(div) {
                        docElem.appendChild(div).id = expando;
                        return !doc.getElementsByName || !doc.getElementsByName(expando).length
                    });
                    if (support.getById) {
                        Expr.find["ID"] = function(id, context) {
                            if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                                var m = context.getElementById(id);
                                return m && m.parentNode ? [m] : []
                            }
                        };
                        Expr.filter["ID"] = function(id) {
                            var attrId = id.replace(runescape, funescape);
                            return function(elem) {
                                return elem.getAttribute("id") === attrId
                            }
                        }
                    } else {
                        delete Expr.find["ID"];
                        Expr.filter["ID"] = function(id) {
                            var attrId = id.replace(runescape, funescape);
                            return function(elem) {
                                var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                                return node && node.value === attrId
                            }
                        }
                    }
                    Expr.find["TAG"] = support.getElementsByTagName ? function(tag, context) {
                        if (typeof context.getElementsByTagName !== "undefined") {
                            return context.getElementsByTagName(tag)
                        } else if (support.qsa) {
                            return context.querySelectorAll(tag)
                        }
                    } : function(tag, context) {
                        var elem, tmp = [],
                            i = 0,
                            results = context.getElementsByTagName(tag);
                        if (tag === "*") {
                            while (elem = results[i++]) {
                                if (elem.nodeType === 1) {
                                    tmp.push(elem)
                                }
                            }
                            return tmp
                        }
                        return results
                    };
                    Expr.find["CLASS"] = support.getElementsByClassName && function(className, context) {
                        if (documentIsHTML) {
                            return context.getElementsByClassName(className)
                        }
                    };
                    rbuggyMatches = [];
                    rbuggyQSA = [];
                    if (support.qsa = rnative.test(doc.querySelectorAll)) {
                        assert(function(div) {
                            docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\f]' msallowcapture=''>" + "<option selected=''></option></select>";
                            if (div.querySelectorAll("[msallowcapture^='']").length) {
                                rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")")
                            }
                            if (!div.querySelectorAll("[selected]").length) {
                                rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")")
                            }
                            if (!div.querySelectorAll("[id~=" + expando + "-]").length) {
                                rbuggyQSA.push("~=")
                            }
                            if (!div.querySelectorAll(":checked").length) {
                                rbuggyQSA.push(":checked")
                            }
                            if (!div.querySelectorAll("a#" + expando + "+*").length) {
                                rbuggyQSA.push(".#.+[+~]")
                            }
                        });
                        assert(function(div) {
                            var input = doc.createElement("input");
                            input.setAttribute("type", "hidden");
                            div.appendChild(input).setAttribute("name", "D");
                            if (div.querySelectorAll("[name=d]").length) {
                                rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=")
                            }
                            if (!div.querySelectorAll(":enabled").length) {
                                rbuggyQSA.push(":enabled", ":disabled")
                            }
                            div.querySelectorAll("*,:x");
                            rbuggyQSA.push(",.*:")
                        })
                    }
                    if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
                        assert(function(div) {
                            support.disconnectedMatch = matches.call(div, "div");
                            matches.call(div, "[s!='']:x");
                            rbuggyMatches.push("!=", pseudos)
                        })
                    }
                    rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
                    rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
                    hasCompare = rnative.test(docElem.compareDocumentPosition);
                    contains = hasCompare || rnative.test(docElem.contains) ? function(a, b) {
                        var adown = a.nodeType === 9 ? a.documentElement : a,
                            bup = b && b.parentNode;
                        return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16))
                    } : function(a, b) {
                        if (b) {
                            while (b = b.parentNode) {
                                if (b === a) {
                                    return true
                                }
                            }
                        }
                        return false
                    };
                    sortOrder = hasCompare ? function(a, b) {
                        if (a === b) {
                            hasDuplicate = true;
                            return 0
                        }
                        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                        if (compare) {
                            return compare
                        }
                        compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
                        if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
                            if (a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
                                return -1
                            }
                            if (b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
                                return 1
                            }
                            return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0
                        }
                        return compare & 4 ? -1 : 1
                    } : function(a, b) {
                        if (a === b) {
                            hasDuplicate = true;
                            return 0
                        }
                        var cur, i = 0,
                            aup = a.parentNode,
                            bup = b.parentNode,
                            ap = [a],
                            bp = [b];
                        if (!aup || !bup) {
                            return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0
                        } else if (aup === bup) {
                            return siblingCheck(a, b)
                        }
                        cur = a;
                        while (cur = cur.parentNode) {
                            ap.unshift(cur)
                        }
                        cur = b;
                        while (cur = cur.parentNode) {
                            bp.unshift(cur)
                        }
                        while (ap[i] === bp[i]) {
                            i++
                        }
                        return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0
                    };
                    return doc
                };
                Sizzle.matches = function(expr, elements) {
                    return Sizzle(expr, null, null, elements)
                };
                Sizzle.matchesSelector = function(elem, expr) {
                    if ((elem.ownerDocument || elem) !== document) {
                        setDocument(elem)
                    }
                    expr = expr.replace(rattributeQuotes, "='$1']");
                    if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
                        try {
                            var ret = matches.call(elem, expr);
                            if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
                                return ret
                            }
                        } catch (e) {}
                    }
                    return Sizzle(expr, document, null, [elem]).length > 0
                };
                Sizzle.contains = function(context, elem) {
                    if ((context.ownerDocument || context) !== document) {
                        setDocument(context)
                    }
                    return contains(context, elem)
                };
                Sizzle.attr = function(elem, name) {
                    if ((elem.ownerDocument || elem) !== document) {
                        setDocument(elem)
                    }
                    var fn = Expr.attrHandle[name.toLowerCase()],
                        val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
                    return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null
                };
                Sizzle.error = function(msg) {
                    throw new Error("Syntax error, unrecognized expression: " + msg)
                };
                Sizzle.uniqueSort = function(results) {
                    var elem, duplicates = [],
                        j = 0,
                        i = 0;
                    hasDuplicate = !support.detectDuplicates;
                    sortInput = !support.sortStable && results.slice(0);
                    results.sort(sortOrder);
                    if (hasDuplicate) {
                        while (elem = results[i++]) {
                            if (elem === results[i]) {
                                j = duplicates.push(i)
                            }
                        }
                        while (j--) {
                            results.splice(duplicates[j], 1)
                        }
                    }
                    sortInput = null;
                    return results
                };
                getText = Sizzle.getText = function(elem) {
                    var node, ret = "",
                        i = 0,
                        nodeType = elem.nodeType;
                    if (!nodeType) {
                        while (node = elem[i++]) {
                            ret += getText(node)
                        }
                    } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                        if (typeof elem.textContent === "string") {
                            return elem.textContent
                        } else {
                            for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                                ret += getText(elem)
                            }
                        }
                    } else if (nodeType === 3 || nodeType === 4) {
                        return elem.nodeValue
                    }
                    return ret
                };
                Expr = Sizzle.selectors = {
                    cacheLength: 50,
                    createPseudo: markFunction,
                    match: matchExpr,
                    attrHandle: {},
                    find: {},
                    relative: {
                        ">": {
                            dir: "parentNode",
                            first: true
                        },
                        " ": {
                            dir: "parentNode"
                        },
                        "+": {
                            dir: "previousSibling",
                            first: true
                        },
                        "~": {
                            dir: "previousSibling"
                        }
                    },
                    preFilter: {
                        ATTR: function(match) {
                            match[1] = match[1].replace(runescape, funescape);
                            match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
                            if (match[2] === "~=") {
                                match[3] = " " + match[3] + " "
                            }
                            return match.slice(0, 4)
                        },
                        CHILD: function(match) {
                            match[1] = match[1].toLowerCase();
                            if (match[1].slice(0, 3) === "nth") {
                                if (!match[3]) {
                                    Sizzle.error(match[0])
                                }
                                match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                                match[5] = +(match[7] + match[8] || match[3] === "odd")
                            } else if (match[3]) {
                                Sizzle.error(match[0])
                            }
                            return match
                        },
                        PSEUDO: function(match) {
                            var excess, unquoted = !match[6] && match[2];
                            if (matchExpr["CHILD"].test(match[0])) {
                                return null
                            }
                            if (match[3]) {
                                match[2] = match[4] || match[5] || ""
                            } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                                match[0] = match[0].slice(0, excess);
                                match[2] = unquoted.slice(0, excess)
                            }
                            return match.slice(0, 3)
                        }
                    },
                    filter: {
                        TAG: function(nodeNameSelector) {
                            var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                            return nodeNameSelector === "*" ? function() {
                                return true
                            } : function(elem) {
                                return elem.nodeName && elem.nodeName.toLowerCase() === nodeName
                            }
                        },
                        CLASS: function(className) {
                            var pattern = classCache[className + " "];
                            return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
                                return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "")
                            })
                        },
                        ATTR: function(name, operator, check) {
                            return function(elem) {
                                var result = Sizzle.attr(elem, name);
                                if (result == null) {
                                    return operator === "!="
                                }
                                if (!operator) {
                                    return true
                                }
                                result += "";
                                return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false
                            }
                        },
                        CHILD: function(type, what, argument, first, last) {
                            var simple = type.slice(0, 3) !== "nth",
                                forward = type.slice(-4) !== "last",
                                ofType = what === "of-type";
                            return first === 1 && last === 0 ? function(elem) {
                                return !!elem.parentNode
                            } : function(elem, context, xml) {
                                var cache, outerCache, node, diff, nodeIndex, start, dir = simple !== forward ? "nextSibling" : "previousSibling",
                                    parent = elem.parentNode,
                                    name = ofType && elem.nodeName.toLowerCase(),
                                    useCache = !xml && !ofType;
                                if (parent) {
                                    if (simple) {
                                        while (dir) {
                                            node = elem;
                                            while (node = node[dir]) {
                                                if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                                                    return false
                                                }
                                            }
                                            start = dir = type === "only" && !start && "nextSibling"
                                        }
                                        return true
                                    }
                                    start = [forward ? parent.firstChild : parent.lastChild];
                                    if (forward && useCache) {
                                        outerCache = parent[expando] || (parent[expando] = {});
                                        cache = outerCache[type] || [];
                                        nodeIndex = cache[0] === dirruns && cache[1];
                                        diff = cache[0] === dirruns && cache[2];
                                        node = nodeIndex && parent.childNodes[nodeIndex];
                                        while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                            if (node.nodeType === 1 && ++diff && node === elem) {
                                                outerCache[type] = [dirruns, nodeIndex, diff];
                                                break
                                            }
                                        }
                                    } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
                                        diff = cache[1]
                                    } else {
                                        while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                            if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                                                if (useCache) {
                                                    (node[expando] || (node[expando] = {}))[type] = [dirruns, diff]
                                                }
                                                if (node === elem) {
                                                    break
                                                }
                                            }
                                        }
                                    }
                                    diff -= last;
                                    return diff === first || diff % first === 0 && diff / first >= 0
                                }
                            }
                        },
                        PSEUDO: function(pseudo, argument) {
                            var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);
                            if (fn[expando]) {
                                return fn(argument)
                            }
                            if (fn.length > 1) {
                                args = [pseudo, pseudo, "", argument];
                                return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches) {
                                    var idx, matched = fn(seed, argument),
                                        i = matched.length;
                                    while (i--) {
                                        idx = indexOf(seed, matched[i]);
                                        seed[idx] = !(matches[idx] = matched[i])
                                    }
                                }) : function(elem) {
                                    return fn(elem, 0, args)
                                }
                            }
                            return fn
                        }
                    },
                    pseudos: {
                        not: markFunction(function(selector) {
                            var input = [],
                                results = [],
                                matcher = compile(selector.replace(rtrim, "$1"));
                            return matcher[expando] ? markFunction(function(seed, matches, context, xml) {
                                var elem, unmatched = matcher(seed, null, xml, []),
                                    i = seed.length;
                                while (i--) {
                                    if (elem = unmatched[i]) {
                                        seed[i] = !(matches[i] = elem)
                                    }
                                }
                            }) : function(elem, context, xml) {
                                input[0] = elem;
                                matcher(input, null, xml, results);
                                input[0] = null;
                                return !results.pop()
                            }
                        }),
                        has: markFunction(function(selector) {
                            return function(elem) {
                                return Sizzle(selector, elem).length > 0
                            }
                        }),
                        contains: markFunction(function(text) {
                            text = text.replace(runescape, funescape);
                            return function(elem) {
                                return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1
                            }
                        }),
                        lang: markFunction(function(lang) {
                            if (!ridentifier.test(lang || "")) {
                                Sizzle.error("unsupported lang: " + lang)
                            }
                            lang = lang.replace(runescape, funescape).toLowerCase();
                            return function(elem) {
                                var elemLang;
                                do {
                                    if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                                        elemLang = elemLang.toLowerCase();
                                        return elemLang === lang || elemLang.indexOf(lang + "-") === 0
                                    }
                                } while ((elem = elem.parentNode) && elem.nodeType === 1);
                                return false
                            }
                        }),
                        target: function(elem) {
                            var hash = window.location && window.location.hash;
                            return hash && hash.slice(1) === elem.id
                        },
                        root: function(elem) {
                            return elem === docElem
                        },
                        focus: function(elem) {
                            return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex)
                        },
                        enabled: function(elem) {
                            return elem.disabled === false
                        },
                        disabled: function(elem) {
                            return elem.disabled === true
                        },
                        checked: function(elem) {
                            var nodeName = elem.nodeName.toLowerCase();
                            return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected
                        },
                        selected: function(elem) {
                            if (elem.parentNode) {
                                elem.parentNode.selectedIndex
                            }
                            return elem.selected === true
                        },
                        empty: function(elem) {
                            for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                                if (elem.nodeType < 6) {
                                    return false
                                }
                            }
                            return true
                        },
                        parent: function(elem) {
                            return !Expr.pseudos["empty"](elem)
                        },
                        header: function(elem) {
                            return rheader.test(elem.nodeName)
                        },
                        input: function(elem) {
                            return rinputs.test(elem.nodeName)
                        },
                        button: function(elem) {
                            var name = elem.nodeName.toLowerCase();
                            return name === "input" && elem.type === "button" || name === "button"
                        },
                        text: function(elem) {
                            var attr;
                            return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text")
                        },
                        first: createPositionalPseudo(function() {
                            return [0]
                        }),
                        last: createPositionalPseudo(function(matchIndexes, length) {
                            return [length - 1]
                        }),
                        eq: createPositionalPseudo(function(matchIndexes, length, argument) {
                            return [argument < 0 ? argument + length : argument]
                        }),
                        even: createPositionalPseudo(function(matchIndexes, length) {
                            var i = 0;
                            for (; i < length; i += 2) {
                                matchIndexes.push(i)
                            }
                            return matchIndexes
                        }),
                        odd: createPositionalPseudo(function(matchIndexes, length) {
                            var i = 1;
                            for (; i < length; i += 2) {
                                matchIndexes.push(i)
                            }
                            return matchIndexes
                        }),
                        lt: createPositionalPseudo(function(matchIndexes, length, argument) {
                            var i = argument < 0 ? argument + length : argument;
                            for (; --i >= 0;) {
                                matchIndexes.push(i)
                            }
                            return matchIndexes
                        }),
                        gt: createPositionalPseudo(function(matchIndexes, length, argument) {
                            var i = argument < 0 ? argument + length : argument;
                            for (; ++i < length;) {
                                matchIndexes.push(i)
                            }
                            return matchIndexes
                        })
                    }
                };
                Expr.pseudos["nth"] = Expr.pseudos["eq"];
                for (i in {
                        radio: true,
                        checkbox: true,
                        file: true,
                        password: true,
                        image: true
                    }) {
                    Expr.pseudos[i] = createInputPseudo(i)
                }
                for (i in {
                        submit: true,
                        reset: true
                    }) {
                    Expr.pseudos[i] = createButtonPseudo(i)
                }

                function setFilters() {}
                setFilters.prototype = Expr.filters = Expr.pseudos;
                Expr.setFilters = new setFilters;
                tokenize = Sizzle.tokenize = function(selector, parseOnly) {
                    var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
                    if (cached) {
                        return parseOnly ? 0 : cached.slice(0)
                    }
                    soFar = selector;
                    groups = [];
                    preFilters = Expr.preFilter;
                    while (soFar) {
                        if (!matched || (match = rcomma.exec(soFar))) {
                            if (match) {
                                soFar = soFar.slice(match[0].length) || soFar
                            }
                            groups.push(tokens = [])
                        }
                        matched = false;
                        if (match = rcombinators.exec(soFar)) {
                            matched = match.shift();
                            tokens.push({
                                value: matched,
                                type: match[0].replace(rtrim, " ")
                            });
                            soFar = soFar.slice(matched.length)
                        }
                        for (type in Expr.filter) {
                            if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                                matched = match.shift();
                                tokens.push({
                                    value: matched,
                                    type: type,
                                    matches: match
                                });
                                soFar = soFar.slice(matched.length)
                            }
                        }
                        if (!matched) {
                            break
                        }
                    }
                    return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0)
                };

                function toSelector(tokens) {
                    var i = 0,
                        len = tokens.length,
                        selector = "";
                    for (; i < len; i++) {
                        selector += tokens[i].value
                    }
                    return selector
                }

                function addCombinator(matcher, combinator, base) {
                    var dir = combinator.dir,
                        checkNonElements = base && dir === "parentNode",
                        doneName = done++;
                    return combinator.first ? function(elem, context, xml) {
                        while (elem = elem[dir]) {
                            if (elem.nodeType === 1 || checkNonElements) {
                                return matcher(elem, context, xml)
                            }
                        }
                    } : function(elem, context, xml) {
                        var oldCache, outerCache, newCache = [dirruns, doneName];
                        if (xml) {
                            while (elem = elem[dir]) {
                                if (elem.nodeType === 1 || checkNonElements) {
                                    if (matcher(elem, context, xml)) {
                                        return true
                                    }
                                }
                            }
                        } else {
                            while (elem = elem[dir]) {
                                if (elem.nodeType === 1 || checkNonElements) {
                                    outerCache = elem[expando] || (elem[expando] = {});
                                    if ((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                                        return newCache[2] = oldCache[2]
                                    } else {
                                        outerCache[dir] = newCache;
                                        if (newCache[2] = matcher(elem, context, xml)) {
                                            return true
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                function elementMatcher(matchers) {
                    return matchers.length > 1 ? function(elem, context, xml) {
                        var i = matchers.length;
                        while (i--) {
                            if (!matchers[i](elem, context, xml)) {
                                return false
                            }
                        }
                        return true
                    } : matchers[0]
                }

                function multipleContexts(selector, contexts, results) {
                    var i = 0,
                        len = contexts.length;
                    for (; i < len; i++) {
                        Sizzle(selector, contexts[i], results)
                    }
                    return results
                }

                function condense(unmatched, map, filter, context, xml) {
                    var elem, newUnmatched = [],
                        i = 0,
                        len = unmatched.length,
                        mapped = map != null;
                    for (; i < len; i++) {
                        if (elem = unmatched[i]) {
                            if (!filter || filter(elem, context, xml)) {
                                newUnmatched.push(elem);
                                if (mapped) {
                                    map.push(i)
                                }
                            }
                        }
                    }
                    return newUnmatched
                }

                function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
                    if (postFilter && !postFilter[expando]) {
                        postFilter = setMatcher(postFilter)
                    }
                    if (postFinder && !postFinder[expando]) {
                        postFinder = setMatcher(postFinder, postSelector)
                    }
                    return markFunction(function(seed, results, context, xml) {
                        var temp, i, elem, preMap = [],
                            postMap = [],
                            preexisting = results.length,
                            elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
                            matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
                            matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
                        if (matcher) {
                            matcher(matcherIn, matcherOut, context, xml)
                        }
                        if (postFilter) {
                            temp = condense(matcherOut, postMap);
                            postFilter(temp, [], context, xml);
                            i = temp.length;
                            while (i--) {
                                if (elem = temp[i]) {
                                    matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem)
                                }
                            }
                        }
                        if (seed) {
                            if (postFinder || preFilter) {
                                if (postFinder) {
                                    temp = [];
                                    i = matcherOut.length;
                                    while (i--) {
                                        if (elem = matcherOut[i]) {
                                            temp.push(matcherIn[i] = elem)
                                        }
                                    }
                                    postFinder(null, matcherOut = [], temp, xml)
                                }
                                i = matcherOut.length;
                                while (i--) {
                                    if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
                                        seed[temp] = !(results[temp] = elem)
                                    }
                                }
                            }
                        } else {
                            matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                            if (postFinder) {
                                postFinder(null, results, matcherOut, xml)
                            } else {
                                push.apply(results, matcherOut)
                            }
                        }
                    })
                }

                function matcherFromTokens(tokens) {
                    var checkContext, matcher, j, len = tokens.length,
                        leadingRelative = Expr.relative[tokens[0].type],
                        implicitRelative = leadingRelative || Expr.relative[" "],
                        i = leadingRelative ? 1 : 0,
                        matchContext = addCombinator(function(elem) {
                            return elem === checkContext
                        }, implicitRelative, true),
                        matchAnyContext = addCombinator(function(elem) {
                            return indexOf(checkContext, elem) > -1
                        }, implicitRelative, true),
                        matchers = [function(elem, context, xml) {
                            var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                            checkContext = null;
                            return ret
                        }];
                    for (; i < len; i++) {
                        if (matcher = Expr.relative[tokens[i].type]) {
                            matchers = [addCombinator(elementMatcher(matchers), matcher)]
                        } else {
                            matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
                            if (matcher[expando]) {
                                j = ++i;
                                for (; j < len; j++) {
                                    if (Expr.relative[tokens[j].type]) {
                                        break
                                    }
                                }
                                return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({
                                    value: tokens[i - 2].type === " " ? "*" : ""
                                })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens))
                            }
                            matchers.push(matcher)
                        }
                    }
                    return elementMatcher(matchers)
                }

                function matcherFromGroupMatchers(elementMatchers, setMatchers) {
                    var bySet = setMatchers.length > 0,
                        byElement = elementMatchers.length > 0,
                        superMatcher = function(seed, context, xml, results, outermost) {
                            var elem, j, matcher, matchedCount = 0,
                                i = "0",
                                unmatched = seed && [],
                                setMatched = [],
                                contextBackup = outermostContext,
                                elems = seed || byElement && Expr.find["TAG"]("*", outermost),
                                dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || .1,
                                len = elems.length;
                            if (outermost) {
                                outermostContext = context !== document && context
                            }
                            for (; i !== len && (elem = elems[i]) != null; i++) {
                                if (byElement && elem) {
                                    j = 0;
                                    while (matcher = elementMatchers[j++]) {
                                        if (matcher(elem, context, xml)) {
                                            results.push(elem);
                                            break
                                        }
                                    }
                                    if (outermost) {
                                        dirruns = dirrunsUnique
                                    }
                                }
                                if (bySet) {
                                    if (elem = !matcher && elem) {
                                        matchedCount--
                                    }
                                    if (seed) {
                                        unmatched.push(elem)
                                    }
                                }
                            }
                            matchedCount += i;
                            if (bySet && i !== matchedCount) {
                                j = 0;
                                while (matcher = setMatchers[j++]) {
                                    matcher(unmatched, setMatched, context, xml)
                                }
                                if (seed) {
                                    if (matchedCount > 0) {
                                        while (i--) {
                                            if (!(unmatched[i] || setMatched[i])) {
                                                setMatched[i] = pop.call(results)
                                            }
                                        }
                                    }
                                    setMatched = condense(setMatched)
                                }
                                push.apply(results, setMatched);
                                if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                                    Sizzle.uniqueSort(results)
                                }
                            }
                            if (outermost) {
                                dirruns = dirrunsUnique;
                                outermostContext = contextBackup
                            }
                            return unmatched
                        };
                    return bySet ? markFunction(superMatcher) : superMatcher
                }
                compile = Sizzle.compile = function(selector, match) {
                    var i, setMatchers = [],
                        elementMatchers = [],
                        cached = compilerCache[selector + " "];
                    if (!cached) {
                        if (!match) {
                            match = tokenize(selector)
                        }
                        i = match.length;
                        while (i--) {
                            cached = matcherFromTokens(match[i]);
                            if (cached[expando]) {
                                setMatchers.push(cached)
                            } else {
                                elementMatchers.push(cached)
                            }
                        }
                        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
                        cached.selector = selector
                    }
                    return cached
                };
                select = Sizzle.select = function(selector, context, results, seed) {
                    var i, tokens, token, type, find, compiled = typeof selector === "function" && selector,
                        match = !seed && tokenize(selector = compiled.selector || selector);
                    results = results || [];
                    if (match.length === 1) {
                        tokens = match[0] = match[0].slice(0);
                        if (tokens.length > 2 && (token = tokens[0]).type === "ID" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                            context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
                            if (!context) {
                                return results
                            } else if (compiled) {
                                context = context.parentNode
                            }
                            selector = selector.slice(tokens.shift().value.length)
                        }
                        i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
                        while (i--) {
                            token = tokens[i];
                            if (Expr.relative[type = token.type]) {
                                break
                            }
                            if (find = Expr.find[type]) {
                                if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                                    tokens.splice(i, 1);
                                    selector = seed.length && toSelector(tokens);
                                    if (!selector) {
                                        push.apply(results, seed);
                                        return results
                                    }
                                    break
                                }
                            }
                        }
                    }(compiled || compile(selector, match))(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);
                    return results
                };
                support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
                support.detectDuplicates = !!hasDuplicate;
                setDocument();
                support.sortDetached = assert(function(div1) {
                    return div1.compareDocumentPosition(document.createElement("div")) & 1
                });
                if (!assert(function(div) {
                        div.innerHTML = "<a href='#'></a>";
                        return div.firstChild.getAttribute("href") === "#"
                    })) {
                    addHandle("type|href|height|width", function(elem, name, isXML) {
                        if (!isXML) {
                            return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2)
                        }
                    })
                }
                if (!support.attributes || !assert(function(div) {
                        div.innerHTML = "<input/>";
                        div.firstChild.setAttribute("value", "");
                        return div.firstChild.getAttribute("value") === ""
                    })) {
                    addHandle("value", function(elem, name, isXML) {
                        if (!isXML && elem.nodeName.toLowerCase() === "input") {
                            return elem.defaultValue
                        }
                    })
                }
                if (!assert(function(div) {
                        return div.getAttribute("disabled") == null
                    })) {
                    addHandle(booleans, function(elem, name, isXML) {
                        var val;
                        if (!isXML) {
                            return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null
                        }
                    })
                }
                return Sizzle
            }(window);
            jQuery.find = Sizzle;
            jQuery.expr = Sizzle.selectors;
            jQuery.expr[":"] = jQuery.expr.pseudos;
            jQuery.unique = Sizzle.uniqueSort;
            jQuery.text = Sizzle.getText;
            jQuery.isXMLDoc = Sizzle.isXML;
            jQuery.contains = Sizzle.contains;
            var rneedsContext = jQuery.expr.match.needsContext;
            var rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
            var risSimple = /^.[^:#\[\.,]*$/;

            function winnow(elements, qualifier, not) {
                if (jQuery.isFunction(qualifier)) {
                    return jQuery.grep(elements, function(elem, i) {
                        return !!qualifier.call(elem, i, elem) !== not
                    })
                }
                if (qualifier.nodeType) {
                    return jQuery.grep(elements, function(elem) {
                        return elem === qualifier !== not
                    })
                }
                if (typeof qualifier === "string") {
                    if (risSimple.test(qualifier)) {
                        return jQuery.filter(qualifier, elements, not)
                    }
                    qualifier = jQuery.filter(qualifier, elements)
                }
                return jQuery.grep(elements, function(elem) {
                    return indexOf.call(qualifier, elem) >= 0 !== not
                })
            }
            jQuery.filter = function(expr, elems, not) {
                var elem = elems[0];
                if (not) {
                    expr = ":not(" + expr + ")"
                }
                return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function(elem) {
                    return elem.nodeType === 1
                }))
            };
            jQuery.fn.extend({
                find: function(selector) {
                    var i, len = this.length,
                        ret = [],
                        self = this;
                    if (typeof selector !== "string") {
                        return this.pushStack(jQuery(selector).filter(function() {
                            for (i = 0; i < len; i++) {
                                if (jQuery.contains(self[i], this)) {
                                    return true
                                }
                            }
                        }))
                    }
                    for (i = 0; i < len; i++) {
                        jQuery.find(selector, self[i], ret)
                    }
                    ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
                    ret.selector = this.selector ? this.selector + " " + selector : selector;
                    return ret
                },
                filter: function(selector) {
                    return this.pushStack(winnow(this, selector || [], false))
                },
                not: function(selector) {
                    return this.pushStack(winnow(this, selector || [], true))
                },
                is: function(selector) {
                    return !!winnow(this, typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length
                }
            });
            var rootjQuery, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
                init = jQuery.fn.init = function(selector, context) {
                    var match, elem;
                    if (!selector) {
                        return this
                    }
                    if (typeof selector === "string") {
                        if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
                            match = [null, selector, null]
                        } else {
                            match = rquickExpr.exec(selector)
                        }
                        if (match && (match[1] || !context)) {
                            if (match[1]) {
                                context = context instanceof jQuery ? context[0] : context;
                                jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
                                if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                                    for (match in context) {
                                        if (jQuery.isFunction(this[match])) {
                                            this[match](context[match])
                                        } else {
                                            this.attr(match, context[match])
                                        }
                                    }
                                }
                                return this
                            } else {
                                elem = document.getElementById(match[2]);
                                if (elem && elem.parentNode) {
                                    this.length = 1;
                                    this[0] = elem
                                }
                                this.context = document;
                                this.selector = selector;
                                return this
                            }
                        } else if (!context || context.jquery) {
                            return (context || rootjQuery).find(selector)
                        } else {
                            return this.constructor(context).find(selector)
                        }
                    } else if (selector.nodeType) {
                        this.context = this[0] = selector;
                        this.length = 1;
                        return this
                    } else if (jQuery.isFunction(selector)) {
                        return typeof rootjQuery.ready !== "undefined" ? rootjQuery.ready(selector) : selector(jQuery)
                    }
                    if (selector.selector !== undefined) {
                        this.selector = selector.selector;
                        this.context = selector.context
                    }
                    return jQuery.makeArray(selector, this)
                };
            init.prototype = jQuery.fn;
            rootjQuery = jQuery(document);
            var rparentsprev = /^(?:parents|prev(?:Until|All))/,
                guaranteedUnique = {
                    children: true,
                    contents: true,
                    next: true,
                    prev: true
                };
            jQuery.extend({
                dir: function(elem, dir, until) {
                    var matched = [],
                        truncate = until !== undefined;
                    while ((elem = elem[dir]) && elem.nodeType !== 9) {
                        if (elem.nodeType === 1) {
                            if (truncate && jQuery(elem).is(until)) {
                                break
                            }
                            matched.push(elem)
                        }
                    }
                    return matched
                },
                sibling: function(n, elem) {
                    var matched = [];
                    for (; n; n = n.nextSibling) {
                        if (n.nodeType === 1 && n !== elem) {
                            matched.push(n)
                        }
                    }
                    return matched
                }
            });
            jQuery.fn.extend({
                has: function(target) {
                    var targets = jQuery(target, this),
                        l = targets.length;
                    return this.filter(function() {
                        var i = 0;
                        for (; i < l; i++) {
                            if (jQuery.contains(this, targets[i])) {
                                return true
                            }
                        }
                    })
                },
                closest: function(selectors, context) {
                    var cur, i = 0,
                        l = this.length,
                        matched = [],
                        pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;
                    for (; i < l; i++) {
                        for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                            if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                                matched.push(cur);
                                break
                            }
                        }
                    }
                    return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched)
                },
                index: function(elem) {
                    if (!elem) {
                        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1
                    }
                    if (typeof elem === "string") {
                        return indexOf.call(jQuery(elem), this[0])
                    }
                    return indexOf.call(this, elem.jquery ? elem[0] : elem)
                },
                add: function(selector, context) {
                    return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))))
                },
                addBack: function(selector) {
                    return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector))
                }
            });

            function sibling(cur, dir) {
                while ((cur = cur[dir]) && cur.nodeType !== 1) {}
                return cur
            }
            jQuery.each({
                parent: function(elem) {
                    var parent = elem.parentNode;
                    return parent && parent.nodeType !== 11 ? parent : null
                },
                parents: function(elem) {
                    return jQuery.dir(elem, "parentNode")
                },
                parentsUntil: function(elem, i, until) {
                    return jQuery.dir(elem, "parentNode", until)
                },
                next: function(elem) {
                    return sibling(elem, "nextSibling")
                },
                prev: function(elem) {
                    return sibling(elem, "previousSibling")
                },
                nextAll: function(elem) {
                    return jQuery.dir(elem, "nextSibling")
                },
                prevAll: function(elem) {
                    return jQuery.dir(elem, "previousSibling")
                },
                nextUntil: function(elem, i, until) {
                    return jQuery.dir(elem, "nextSibling", until)
                },
                prevUntil: function(elem, i, until) {
                    return jQuery.dir(elem, "previousSibling", until)
                },
                siblings: function(elem) {
                    return jQuery.sibling((elem.parentNode || {}).firstChild, elem)
                },
                children: function(elem) {
                    return jQuery.sibling(elem.firstChild)
                },
                contents: function(elem) {
                    return elem.contentDocument || jQuery.merge([], elem.childNodes)
                }
            }, function(name, fn) {
                jQuery.fn[name] = function(until, selector) {
                    var matched = jQuery.map(this, fn, until);
                    if (name.slice(-5) !== "Until") {
                        selector = until
                    }
                    if (selector && typeof selector === "string") {
                        matched = jQuery.filter(selector, matched)
                    }
                    if (this.length > 1) {
                        if (!guaranteedUnique[name]) {
                            jQuery.unique(matched)
                        }
                        if (rparentsprev.test(name)) {
                            matched.reverse()
                        }
                    }
                    return this.pushStack(matched)
                }
            });
            var rnotwhite = /\S+/g;
            var optionsCache = {};

            function createOptions(options) {
                var object = optionsCache[options] = {};
                jQuery.each(options.match(rnotwhite) || [], function(_, flag) {
                    object[flag] = true
                });
                return object
            }
            jQuery.Callbacks = function(options) {
                options = typeof options === "string" ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);
                var memory, fired, firing, firingStart, firingLength, firingIndex, list = [],
                    stack = !options.once && [],
                    fire = function(data) {
                        memory = options.memory && data;
                        fired = true;
                        firingIndex = firingStart || 0;
                        firingStart = 0;
                        firingLength = list.length;
                        firing = true;
                        for (; list && firingIndex < firingLength; firingIndex++) {
                            if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
                                memory = false;
                                break
                            }
                        }
                        firing = false;
                        if (list) {
                            if (stack) {
                                if (stack.length) {
                                    fire(stack.shift())
                                }
                            } else if (memory) {
                                list = []
                            } else {
                                self.disable()
                            }
                        }
                    },
                    self = {
                        add: function() {
                            if (list) {
                                var start = list.length;
                                (function add(args) {
                                    jQuery.each(args, function(_, arg) {
                                        var type = jQuery.type(arg);
                                        if (type === "function") {
                                            if (!options.unique || !self.has(arg)) {
                                                list.push(arg)
                                            }
                                        } else if (arg && arg.length && type !== "string") {
                                            add(arg)
                                        }
                                    })
                                })(arguments);
                                if (firing) {
                                    firingLength = list.length
                                } else if (memory) {
                                    firingStart = start;
                                    fire(memory)
                                }
                            }
                            return this
                        },
                        remove: function() {
                            if (list) {
                                jQuery.each(arguments, function(_, arg) {
                                    var index;
                                    while ((index = jQuery.inArray(arg, list, index)) > -1) {
                                        list.splice(index, 1);
                                        if (firing) {
                                            if (index <= firingLength) {
                                                firingLength--
                                            }
                                            if (index <= firingIndex) {
                                                firingIndex--
                                            }
                                        }
                                    }
                                })
                            }
                            return this
                        },
                        has: function(fn) {
                            return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length)
                        },
                        empty: function() {
                            list = [];
                            firingLength = 0;
                            return this
                        },
                        disable: function() {
                            list = stack = memory = undefined;
                            return this
                        },
                        disabled: function() {
                            return !list
                        },
                        lock: function() {
                            stack = undefined;
                            if (!memory) {
                                self.disable()
                            }
                            return this
                        },
                        locked: function() {
                            return !stack
                        },
                        fireWith: function(context, args) {
                            if (list && (!fired || stack)) {
                                args = args || [];
                                args = [context, args.slice ? args.slice() : args];
                                if (firing) {
                                    stack.push(args)
                                } else {
                                    fire(args)
                                }
                            }
                            return this
                        },
                        fire: function() {
                            self.fireWith(this, arguments);
                            return this
                        },
                        fired: function() {
                            return !!fired
                        }
                    };
                return self
            };
            jQuery.extend({
                Deferred: function(func) {
                    var tuples = [
                            ["resolve", "done", jQuery.Callbacks("once memory"), "resolved"],
                            ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"],
                            ["notify", "progress", jQuery.Callbacks("memory")]
                        ],
                        state = "pending",
                        promise = {
                            state: function() {
                                return state
                            },
                            always: function() {
                                deferred.done(arguments).fail(arguments);
                                return this
                            },
                            then: function() {
                                var fns = arguments;
                                return jQuery.Deferred(function(newDefer) {
                                    jQuery.each(tuples, function(i, tuple) {
                                        var fn = jQuery.isFunction(fns[i]) && fns[i];
                                        deferred[tuple[1]](function() {
                                            var returned = fn && fn.apply(this, arguments);
                                            if (returned && jQuery.isFunction(returned.promise)) {
                                                returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify)
                                            } else {
                                                newDefer[tuple[0] + "With"](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments)
                                            }
                                        })
                                    });
                                    fns = null
                                }).promise()
                            },
                            promise: function(obj) {
                                return obj != null ? jQuery.extend(obj, promise) : promise
                            }
                        },
                        deferred = {};
                    promise.pipe = promise.then;
                    jQuery.each(tuples, function(i, tuple) {
                        var list = tuple[2],
                            stateString = tuple[3];
                        promise[tuple[1]] = list.add;
                        if (stateString) {
                            list.add(function() {
                                state = stateString
                            }, tuples[i ^ 1][2].disable, tuples[2][2].lock)
                        }
                        deferred[tuple[0]] = function() {
                            deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments);
                            return this
                        };
                        deferred[tuple[0] + "With"] = list.fireWith
                    });
                    promise.promise(deferred);
                    if (func) {
                        func.call(deferred, deferred)
                    }
                    return deferred
                },
                when: function(subordinate) {
                    var i = 0,
                        resolveValues = slice.call(arguments),
                        length = resolveValues.length,
                        remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,
                        deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
                        updateFunc = function(i, contexts, values) {
                            return function(value) {
                                contexts[i] = this;
                                values[i] = arguments.length > 1 ? slice.call(arguments) : value;
                                if (values === progressValues) {
                                    deferred.notifyWith(contexts, values)
                                } else if (!--remaining) {
                                    deferred.resolveWith(contexts, values)
                                }
                            }
                        },
                        progressValues, progressContexts, resolveContexts;
                    if (length > 1) {
                        progressValues = new Array(length);
                        progressContexts = new Array(length);
                        resolveContexts = new Array(length);
                        for (; i < length; i++) {
                            if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
                                resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues))
                            } else {
                                --remaining
                            }
                        }
                    }
                    if (!remaining) {
                        deferred.resolveWith(resolveContexts, resolveValues)
                    }
                    return deferred.promise()
                }
            });
            var readyList;
            jQuery.fn.ready = function(fn) {
                jQuery.ready.promise().done(fn);
                return this
            };
            jQuery.extend({
                isReady: false,
                readyWait: 1,
                holdReady: function(hold) {
                    if (hold) {
                        jQuery.readyWait++
                    } else {
                        jQuery.ready(true)
                    }
                },
                ready: function(wait) {
                    if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                        return
                    }
                    jQuery.isReady = true;
                    if (wait !== true && --jQuery.readyWait > 0) {
                        return
                    }
                    readyList.resolveWith(document, [jQuery]);
                    if (jQuery.fn.triggerHandler) {
                        jQuery(document).triggerHandler("ready");
                        jQuery(document).off("ready")
                    }
                }
            });

            function completed() {
                document.removeEventListener("DOMContentLoaded", completed, false);
                window.removeEventListener("load", completed, false);
                jQuery.ready()
            }
            jQuery.ready.promise = function(obj) {
                if (!readyList) {
                    readyList = jQuery.Deferred();
                    if (document.readyState === "complete") {
                        setTimeout(jQuery.ready)
                    } else {
                        document.addEventListener("DOMContentLoaded", completed, false);
                        window.addEventListener("load", completed, false)
                    }
                }
                return readyList.promise(obj)
            };
            jQuery.ready.promise();
            var access = jQuery.access = function(elems, fn, key, value, chainable, emptyGet, raw) {
                var i = 0,
                    len = elems.length,
                    bulk = key == null;
                if (jQuery.type(key) === "object") {
                    chainable = true;
                    for (i in key) {
                        jQuery.access(elems, fn, i, key[i], true, emptyGet, raw)
                    }
                } else if (value !== undefined) {
                    chainable = true;
                    if (!jQuery.isFunction(value)) {
                        raw = true
                    }
                    if (bulk) {
                        if (raw) {
                            fn.call(elems, value);
                            fn = null
                        } else {
                            bulk = fn;
                            fn = function(elem, key, value) {
                                return bulk.call(jQuery(elem), value)
                            }
                        }
                    }
                    if (fn) {
                        for (; i < len; i++) {
                            fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)))
                        }
                    }
                }
                return chainable ? elems : bulk ? fn.call(elems) : len ? fn(elems[0], key) : emptyGet
            };
            jQuery.acceptData = function(owner) {
                return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType
            };

            function Data() {
                Object.defineProperty(this.cache = {}, 0, {
                    get: function() {
                        return {}
                    }
                });
                this.expando = jQuery.expando + Data.uid++
            }
            Data.uid = 1;
            Data.accepts = jQuery.acceptData;
            Data.prototype = {
                key: function(owner) {
                    if (!Data.accepts(owner)) {
                        return 0
                    }
                    var descriptor = {},
                        unlock = owner[this.expando];
                    if (!unlock) {
                        unlock = Data.uid++;
                        try {
                            descriptor[this.expando] = {
                                value: unlock
                            };
                            Object.defineProperties(owner, descriptor)
                        } catch (e) {
                            descriptor[this.expando] = unlock;
                            jQuery.extend(owner, descriptor)
                        }
                    }
                    if (!this.cache[unlock]) {
                        this.cache[unlock] = {}
                    }
                    return unlock
                },
                set: function(owner, data, value) {
                    var prop, unlock = this.key(owner),
                        cache = this.cache[unlock];
                    if (typeof data === "string") {
                        cache[data] = value
                    } else {
                        if (jQuery.isEmptyObject(cache)) {
                            jQuery.extend(this.cache[unlock], data)
                        } else {
                            for (prop in data) {
                                cache[prop] = data[prop]
                            }
                        }
                    }
                    return cache
                },
                get: function(owner, key) {
                    var cache = this.cache[this.key(owner)];
                    return key === undefined ? cache : cache[key]
                },
                access: function(owner, key, value) {
                    var stored;
                    if (key === undefined || key && typeof key === "string" && value === undefined) {
                        stored = this.get(owner, key);
                        return stored !== undefined ? stored : this.get(owner, jQuery.camelCase(key))
                    }
                    this.set(owner, key, value);
                    return value !== undefined ? value : key
                },
                remove: function(owner, key) {
                    var i, name, camel, unlock = this.key(owner),
                        cache = this.cache[unlock];
                    if (key === undefined) {
                        this.cache[unlock] = {}
                    } else {
                        if (jQuery.isArray(key)) {
                            name = key.concat(key.map(jQuery.camelCase))
                        } else {
                            camel = jQuery.camelCase(key);
                            if (key in cache) {
                                name = [key, camel]
                            } else {
                                name = camel;
                                name = name in cache ? [name] : name.match(rnotwhite) || []
                            }
                        }
                        i = name.length;
                        while (i--) {
                            delete cache[name[i]]
                        }
                    }
                },
                hasData: function(owner) {
                    return !jQuery.isEmptyObject(this.cache[owner[this.expando]] || {})
                },
                discard: function(owner) {
                    if (owner[this.expando]) {
                        delete this.cache[owner[this.expando]]
                    }
                }
            };
            var data_priv = new Data;
            var data_user = new Data;
            var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
                rmultiDash = /([A-Z])/g;

            function dataAttr(elem, key, data) {
                var name;
                if (data === undefined && elem.nodeType === 1) {
                    name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
                    data = elem.getAttribute(name);
                    if (typeof data === "string") {
                        try {
                            data = data === "true" ? true : data === "false" ? false : data === "null" ? null : +data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data
                        } catch (e) {}
                        data_user.set(elem, key, data)
                    } else {
                        data = undefined
                    }
                }
                return data
            }
            jQuery.extend({
                hasData: function(elem) {
                    return data_user.hasData(elem) || data_priv.hasData(elem)
                },
                data: function(elem, name, data) {
                    return data_user.access(elem, name, data)
                },
                removeData: function(elem, name) {
                    data_user.remove(elem, name)
                },
                _data: function(elem, name, data) {
                    return data_priv.access(elem, name, data)
                },
                _removeData: function(elem, name) {
                    data_priv.remove(elem, name)
                }
            });
            jQuery.fn.extend({
                data: function(key, value) {
                    var i, name, data, elem = this[0],
                        attrs = elem && elem.attributes;
                    if (key === undefined) {
                        if (this.length) {
                            data = data_user.get(elem);
                            if (elem.nodeType === 1 && !data_priv.get(elem, "hasDataAttrs")) {
                                i = attrs.length;
                                while (i--) {
                                    if (attrs[i]) {
                                        name = attrs[i].name;
                                        if (name.indexOf("data-") === 0) {
                                            name = jQuery.camelCase(name.slice(5));
                                            dataAttr(elem, name, data[name])
                                        }
                                    }
                                }
                                data_priv.set(elem, "hasDataAttrs", true)
                            }
                        }
                        return data
                    }
                    if (typeof key === "object") {
                        return this.each(function() {
                            data_user.set(this, key)
                        })
                    }
                    return access(this, function(value) {
                        var data, camelKey = jQuery.camelCase(key);
                        if (elem && value === undefined) {
                            data = data_user.get(elem, key);
                            if (data !== undefined) {
                                return data
                            }
                            data = data_user.get(elem, camelKey);
                            if (data !== undefined) {
                                return data
                            }
                            data = dataAttr(elem, camelKey, undefined);
                            if (data !== undefined) {
                                return data
                            }
                            return
                        }
                        this.each(function() {
                            var data = data_user.get(this, camelKey);
                            data_user.set(this, camelKey, value);
                            if (key.indexOf("-") !== -1 && data !== undefined) {
                                data_user.set(this, key, value)
                            }
                        })
                    }, null, value, arguments.length > 1, null, true)
                },
                removeData: function(key) {
                    return this.each(function() {
                        data_user.remove(this, key)
                    })
                }
            });
            jQuery.extend({
                queue: function(elem, type, data) {
                    var queue;
                    if (elem) {
                        type = (type || "fx") + "queue";
                        queue = data_priv.get(elem, type);
                        if (data) {
                            if (!queue || jQuery.isArray(data)) {
                                queue = data_priv.access(elem, type, jQuery.makeArray(data))
                            } else {
                                queue.push(data)
                            }
                        }
                        return queue || []
                    }
                },
                dequeue: function(elem, type) {
                    type = type || "fx";
                    var queue = jQuery.queue(elem, type),
                        startLength = queue.length,
                        fn = queue.shift(),
                        hooks = jQuery._queueHooks(elem, type),
                        next = function() {
                            jQuery.dequeue(elem, type)
                        };
                    if (fn === "inprogress") {
                        fn = queue.shift();
                        startLength--
                    }
                    if (fn) {
                        if (type === "fx") {
                            queue.unshift("inprogress")
                        }
                        delete hooks.stop;
                        fn.call(elem, next, hooks)
                    }
                    if (!startLength && hooks) {
                        hooks.empty.fire()
                    }
                },
                _queueHooks: function(elem, type) {
                    var key = type + "queueHooks";
                    return data_priv.get(elem, key) || data_priv.access(elem, key, {
                        empty: jQuery.Callbacks("once memory").add(function() {
                            data_priv.remove(elem, [type + "queue", key])
                        })
                    })
                }
            });
            jQuery.fn.extend({
                queue: function(type, data) {
                    var setter = 2;
                    if (typeof type !== "string") {
                        data = type;
                        type = "fx";
                        setter--
                    }
                    if (arguments.length < setter) {
                        return jQuery.queue(this[0], type)
                    }
                    return data === undefined ? this : this.each(function() {
                        var queue = jQuery.queue(this, type, data);
                        jQuery._queueHooks(this, type);
                        if (type === "fx" && queue[0] !== "inprogress") {
                            jQuery.dequeue(this, type)
                        }
                    })
                },
                dequeue: function(type) {
                    return this.each(function() {
                        jQuery.dequeue(this, type)
                    })
                },
                clearQueue: function(type) {
                    return this.queue(type || "fx", [])
                },
                promise: function(type, obj) {
                    var tmp, count = 1,
                        defer = jQuery.Deferred(),
                        elements = this,
                        i = this.length,
                        resolve = function() {
                            if (!--count) {
                                defer.resolveWith(elements, [elements])
                            }
                        };
                    if (typeof type !== "string") {
                        obj = type;
                        type = undefined
                    }
                    type = type || "fx";
                    while (i--) {
                        tmp = data_priv.get(elements[i], type + "queueHooks");
                        if (tmp && tmp.empty) {
                            count++;
                            tmp.empty.add(resolve)
                        }
                    }
                    resolve();
                    return defer.promise(obj)
                }
            });
            var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
            var cssExpand = ["Top", "Right", "Bottom", "Left"];
            var isHidden = function(elem, el) {
                elem = el || elem;
                return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem)
            };
            var rcheckableType = /^(?:checkbox|radio)$/i;
            (function() {
                var fragment = document.createDocumentFragment(),
                    div = fragment.appendChild(document.createElement("div")),
                    input = document.createElement("input");
                input.setAttribute("type", "radio");
                input.setAttribute("checked", "checked");
                input.setAttribute("name", "t");
                div.appendChild(input);
                support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
                div.innerHTML = "<textarea>x</textarea>";
                support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue
            })();
            var strundefined = typeof undefined;
            support.focusinBubbles = "onfocusin" in window;
            var rkeyEvent = /^key/,
                rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
                rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
                rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

            function returnTrue() {
                return true
            }

            function returnFalse() {
                return false
            }

            function safeActiveElement() {
                try {
                    return document.activeElement
                } catch (err) {}
            }
            jQuery.event = {
                global: {},
                add: function(elem, types, handler, data, selector) {
                    var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = data_priv.get(elem);
                    if (!elemData) {
                        return
                    }
                    if (handler.handler) {
                        handleObjIn = handler;
                        handler = handleObjIn.handler;
                        selector = handleObjIn.selector
                    }
                    if (!handler.guid) {
                        handler.guid = jQuery.guid++
                    }
                    if (!(events = elemData.events)) {
                        events = elemData.events = {}
                    }
                    if (!(eventHandle = elemData.handle)) {
                        eventHandle = elemData.handle = function(e) {
                            return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined
                        }
                    }
                    types = (types || "").match(rnotwhite) || [""];
                    t = types.length;
                    while (t--) {
                        tmp = rtypenamespace.exec(types[t]) || [];
                        type = origType = tmp[1];
                        namespaces = (tmp[2] || "").split(".").sort();
                        if (!type) {
                            continue
                        }
                        special = jQuery.event.special[type] || {};
                        type = (selector ? special.delegateType : special.bindType) || type;
                        special = jQuery.event.special[type] || {};
                        handleObj = jQuery.extend({
                            type: type,
                            origType: origType,
                            data: data,
                            handler: handler,
                            guid: handler.guid,
                            selector: selector,
                            needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                            namespace: namespaces.join(".")
                        }, handleObjIn);
                        if (!(handlers = events[type])) {
                            handlers = events[type] = [];
                            handlers.delegateCount = 0;
                            if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                                if (elem.addEventListener) {
                                    elem.addEventListener(type, eventHandle, false)
                                }
                            }
                        }
                        if (special.add) {
                            special.add.call(elem, handleObj);
                            if (!handleObj.handler.guid) {
                                handleObj.handler.guid = handler.guid
                            }
                        }
                        if (selector) {
                            handlers.splice(handlers.delegateCount++, 0, handleObj)
                        } else {
                            handlers.push(handleObj)
                        }
                        jQuery.event.global[type] = true
                    }
                },
                remove: function(elem, types, handler, selector, mappedTypes) {
                    var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = data_priv.hasData(elem) && data_priv.get(elem);
                    if (!elemData || !(events = elemData.events)) {
                        return
                    }
                    types = (types || "").match(rnotwhite) || [""];
                    t = types.length;
                    while (t--) {
                        tmp = rtypenamespace.exec(types[t]) || [];
                        type = origType = tmp[1];
                        namespaces = (tmp[2] || "").split(".").sort();
                        if (!type) {
                            for (type in events) {
                                jQuery.event.remove(elem, type + types[t], handler, selector, true)
                            }
                            continue
                        }
                        special = jQuery.event.special[type] || {};
                        type = (selector ? special.delegateType : special.bindType) || type;
                        handlers = events[type] || [];
                        tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
                        origCount = j = handlers.length;
                        while (j--) {
                            handleObj = handlers[j];
                            if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                                handlers.splice(j, 1);
                                if (handleObj.selector) {
                                    handlers.delegateCount--
                                }
                                if (special.remove) {
                                    special.remove.call(elem, handleObj)
                                }
                            }
                        }
                        if (origCount && !handlers.length) {
                            if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                                jQuery.removeEvent(elem, type, elemData.handle)
                            }
                            delete events[type]
                        }
                    }
                    if (jQuery.isEmptyObject(events)) {
                        delete elemData.handle;
                        data_priv.remove(elem, "events")
                    }
                },
                trigger: function(event, data, elem, onlyHandlers) {
                    var i, cur, tmp, bubbleType, ontype, handle, special, eventPath = [elem || document],
                        type = hasOwn.call(event, "type") ? event.type : event,
                        namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
                    cur = tmp = elem = elem || document;
                    if (elem.nodeType === 3 || elem.nodeType === 8) {
                        return
                    }
                    if (rfocusMorph.test(type + jQuery.event.triggered)) {
                        return
                    }
                    if (type.indexOf(".") >= 0) {
                        namespaces = type.split(".");
                        type = namespaces.shift();
                        namespaces.sort()
                    }
                    ontype = type.indexOf(":") < 0 && "on" + type;
                    event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);
                    event.isTrigger = onlyHandlers ? 2 : 3;
                    event.namespace = namespaces.join(".");
                    event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
                    event.result = undefined;
                    if (!event.target) {
                        event.target = elem
                    }
                    data = data == null ? [event] : jQuery.makeArray(data, [event]);
                    special = jQuery.event.special[type] || {};
                    if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
                        return
                    }
                    if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
                        bubbleType = special.delegateType || type;
                        if (!rfocusMorph.test(bubbleType + type)) {
                            cur = cur.parentNode
                        }
                        for (; cur; cur = cur.parentNode) {
                            eventPath.push(cur);
                            tmp = cur
                        }
                        if (tmp === (elem.ownerDocument || document)) {
                            eventPath.push(tmp.defaultView || tmp.parentWindow || window)
                        }
                    }
                    i = 0;
                    while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                        event.type = i > 1 ? bubbleType : special.bindType || type;
                        handle = (data_priv.get(cur, "events") || {})[event.type] && data_priv.get(cur, "handle");
                        if (handle) {
                            handle.apply(cur, data)
                        }
                        handle = ontype && cur[ontype];
                        if (handle && handle.apply && jQuery.acceptData(cur)) {
                            event.result = handle.apply(cur, data);
                            if (event.result === false) {
                                event.preventDefault()
                            }
                        }
                    }
                    event.type = type;
                    if (!onlyHandlers && !event.isDefaultPrevented()) {
                        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {
                            if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {
                                tmp = elem[ontype];
                                if (tmp) {
                                    elem[ontype] = null
                                }
                                jQuery.event.triggered = type;
                                elem[type]();
                                jQuery.event.triggered = undefined;
                                if (tmp) {
                                    elem[ontype] = tmp
                                }
                            }
                        }
                    }
                    return event.result
                },
                dispatch: function(event) {
                    event = jQuery.event.fix(event);
                    var i, j, ret, matched, handleObj, handlerQueue = [],
                        args = slice.call(arguments),
                        handlers = (data_priv.get(this, "events") || {})[event.type] || [],
                        special = jQuery.event.special[event.type] || {};
                    args[0] = event;
                    event.delegateTarget = this;
                    if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                        return
                    }
                    handlerQueue = jQuery.event.handlers.call(this, event, handlers);
                    i = 0;
                    while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                        event.currentTarget = matched.elem;
                        j = 0;
                        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
                            if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
                                event.handleObj = handleObj;
                                event.data = handleObj.data;
                                ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                                if (ret !== undefined) {
                                    if ((event.result = ret) === false) {
                                        event.preventDefault();
                                        event.stopPropagation()
                                    }
                                }
                            }
                        }
                    }
                    if (special.postDispatch) {
                        special.postDispatch.call(this, event)
                    }
                    return event.result
                },
                handlers: function(event, handlers) {
                    var i, matches, sel, handleObj, handlerQueue = [],
                        delegateCount = handlers.delegateCount,
                        cur = event.target;
                    if (delegateCount && cur.nodeType && (!event.button || event.type !== "click")) {
                        for (; cur !== this; cur = cur.parentNode || this) {
                            if (cur.disabled !== true || event.type !== "click") {
                                matches = [];
                                for (i = 0; i < delegateCount; i++) {
                                    handleObj = handlers[i];
                                    sel = handleObj.selector + " ";
                                    if (matches[sel] === undefined) {
                                        matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length
                                    }
                                    if (matches[sel]) {
                                        matches.push(handleObj)
                                    }
                                }
                                if (matches.length) {
                                    handlerQueue.push({
                                        elem: cur,
                                        handlers: matches
                                    })
                                }
                            }
                        }
                    }
                    if (delegateCount < handlers.length) {
                        handlerQueue.push({
                            elem: this,
                            handlers: handlers.slice(delegateCount)
                        })
                    }
                    return handlerQueue
                },
                props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
                fixHooks: {},
                keyHooks: {
                    props: "char charCode key keyCode".split(" "),
                    filter: function(event, original) {
                        if (event.which == null) {
                            event.which = original.charCode != null ? original.charCode : original.keyCode
                        }
                        return event
                    }
                },
                mouseHooks: {
                    props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
                    filter: function(event, original) {
                        var eventDoc, doc, body, button = original.button;
                        if (event.pageX == null && original.clientX != null) {
                            eventDoc = event.target.ownerDocument || document;
                            doc = eventDoc.documentElement;
                            body = eventDoc.body;
                            event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                            event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0)
                        }
                        if (!event.which && button !== undefined) {
                            event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0
                        }
                        return event
                    }
                },
                fix: function(event) {
                    if (event[jQuery.expando]) {
                        return event
                    }
                    var i, prop, copy, type = event.type,
                        originalEvent = event,
                        fixHook = this.fixHooks[type];
                    if (!fixHook) {
                        this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {}
                    }
                    copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
                    event = new jQuery.Event(originalEvent);
                    i = copy.length;
                    while (i--) {
                        prop = copy[i];
                        event[prop] = originalEvent[prop]
                    }
                    if (!event.target) {
                        event.target = document
                    }
                    if (event.target.nodeType === 3) {
                        event.target = event.target.parentNode
                    }
                    return fixHook.filter ? fixHook.filter(event, originalEvent) : event
                },
                special: {
                    load: {
                        noBubble: true
                    },
                    focus: {
                        trigger: function() {
                            if (this !== safeActiveElement() && this.focus) {
                                this.focus();
                                return false
                            }
                        },
                        delegateType: "focusin"
                    },
                    blur: {
                        trigger: function() {
                            if (this === safeActiveElement() && this.blur) {
                                this.blur();
                                return false
                            }
                        },
                        delegateType: "focusout"
                    },
                    click: {
                        trigger: function() {
                            if (this.type === "checkbox" && this.click && jQuery.nodeName(this, "input")) {
                                this.click();
                                return false
                            }
                        },
                        _default: function(event) {
                            return jQuery.nodeName(event.target, "a")
                        }
                    },
                    beforeunload: {
                        postDispatch: function(event) {
                            if (event.result !== undefined && event.originalEvent) {
                                event.originalEvent.returnValue = event.result
                            }
                        }
                    }
                },
                simulate: function(type, elem, event, bubble) {
                    var e = jQuery.extend(new jQuery.Event, event, {
                        type: type,
                        isSimulated: true,
                        originalEvent: {}
                    });
                    if (bubble) {
                        jQuery.event.trigger(e, null, elem)
                    } else {
                        jQuery.event.dispatch.call(elem, e)
                    }
                    if (e.isDefaultPrevented()) {
                        event.preventDefault()
                    }
                }
            };
            jQuery.removeEvent = function(elem, type, handle) {
                if (elem.removeEventListener) {
                    elem.removeEventListener(type, handle, false)
                }
            };
            jQuery.Event = function(src, props) {
                if (!(this instanceof jQuery.Event)) {
                    return new jQuery.Event(src, props)
                }
                if (src && src.type) {
                    this.originalEvent = src;
                    this.type = src.type;
                    this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && src.returnValue === false ? returnTrue : returnFalse
                } else {
                    this.type = src
                }
                if (props) {
                    jQuery.extend(this, props)
                }
                this.timeStamp = src && src.timeStamp || jQuery.now();
                this[jQuery.expando] = true
            };
            jQuery.Event.prototype = {
                isDefaultPrevented: returnFalse,
                isPropagationStopped: returnFalse,
                isImmediatePropagationStopped: returnFalse,
                preventDefault: function() {
                    var e = this.originalEvent;
                    this.isDefaultPrevented = returnTrue;
                    if (e && e.preventDefault) {
                        e.preventDefault()
                    }
                },
                stopPropagation: function() {
                    var e = this.originalEvent;
                    this.isPropagationStopped = returnTrue;
                    if (e && e.stopPropagation) {
                        e.stopPropagation()
                    }
                },
                stopImmediatePropagation: function() {
                    var e = this.originalEvent;
                    this.isImmediatePropagationStopped = returnTrue;
                    if (e && e.stopImmediatePropagation) {
                        e.stopImmediatePropagation()
                    }
                    this.stopPropagation()
                }
            };
            jQuery.each({
                mouseenter: "mouseover",
                mouseleave: "mouseout",
                pointerenter: "pointerover",
                pointerleave: "pointerout"
            }, function(orig, fix) {
                jQuery.event.special[orig] = {
                    delegateType: fix,
                    bindType: fix,
                    handle: function(event) {
                        var ret, target = this,
                            related = event.relatedTarget,
                            handleObj = event.handleObj;
                        if (!related || related !== target && !jQuery.contains(target, related)) {
                            event.type = handleObj.origType;
                            ret = handleObj.handler.apply(this, arguments);
                            event.type = fix
                        }
                        return ret
                    }
                }
            });
            if (!support.focusinBubbles) {
                jQuery.each({
                    focus: "focusin",
                    blur: "focusout"
                }, function(orig, fix) {
                    var handler = function(event) {
                        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true)
                    };
                    jQuery.event.special[fix] = {
                        setup: function() {
                            var doc = this.ownerDocument || this,
                                attaches = data_priv.access(doc, fix);
                            if (!attaches) {
                                doc.addEventListener(orig, handler, true)
                            }
                            data_priv.access(doc, fix, (attaches || 0) + 1)
                        },
                        teardown: function() {
                            var doc = this.ownerDocument || this,
                                attaches = data_priv.access(doc, fix) - 1;
                            if (!attaches) {
                                doc.removeEventListener(orig, handler, true);
                                data_priv.remove(doc, fix)
                            } else {
                                data_priv.access(doc, fix, attaches)
                            }
                        }
                    }
                })
            }
            jQuery.fn.extend({
                on: function(types, selector, data, fn, one) {
                    var origFn, type;
                    if (typeof types === "object") {
                        if (typeof selector !== "string") {
                            data = data || selector;
                            selector = undefined
                        }
                        for (type in types) {
                            this.on(type, selector, data, types[type], one)
                        }
                        return this
                    }
                    if (data == null && fn == null) {
                        fn = selector;
                        data = selector = undefined
                    } else if (fn == null) {
                        if (typeof selector === "string") {
                            fn = data;
                            data = undefined
                        } else {
                            fn = data;
                            data = selector;
                            selector = undefined
                        }
                    }
                    if (fn === false) {
                        fn = returnFalse
                    } else if (!fn) {
                        return this
                    }
                    if (one === 1) {
                        origFn = fn;
                        fn = function(event) {
                            jQuery().off(event);
                            return origFn.apply(this, arguments)
                        };
                        fn.guid = origFn.guid || (origFn.guid = jQuery.guid++)
                    }
                    return this.each(function() {
                        jQuery.event.add(this, types, fn, data, selector)
                    })
                },
                one: function(types, selector, data, fn) {
                    return this.on(types, selector, data, fn, 1)
                },
                off: function(types, selector, fn) {
                    var handleObj, type;
                    if (types && types.preventDefault && types.handleObj) {
                        handleObj = types.handleObj;
                        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
                        return this
                    }
                    if (typeof types === "object") {
                        for (type in types) {
                            this.off(type, selector, types[type])
                        }
                        return this
                    }
                    if (selector === false || typeof selector === "function") {
                        fn = selector;
                        selector = undefined
                    }
                    if (fn === false) {
                        fn = returnFalse
                    }
                    return this.each(function() {
                        jQuery.event.remove(this, types, fn, selector)
                    })
                },
                trigger: function(type, data) {
                    return this.each(function() {
                        jQuery.event.trigger(type, data, this)
                    })
                },
                triggerHandler: function(type, data) {
                    var elem = this[0];
                    if (elem) {
                        return jQuery.event.trigger(type, data, elem, true)
                    }
                }
            });
            var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
                rtagName = /<([\w:]+)/,
                rhtml = /<|&#?\w+;/,
                rnoInnerhtml = /<(?:script|style|link)/i,
                rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
                rscriptType = /^$|\/(?:java|ecma)script/i,
                rscriptTypeMasked = /^true\/(.*)/,
                rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
                wrapMap = {
                    option: [1, "<select multiple='multiple'>", "</select>"],
                    thead: [1, "<table>", "</table>"],
                    col: [2, "<table><colgroup>", "</colgroup></table>"],
                    tr: [2, "<table><tbody>", "</tbody></table>"],
                    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
                    _default: [0, "", ""]
                };
            wrapMap.optgroup = wrapMap.option;
            wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
            wrapMap.th = wrapMap.td;

            function manipulationTarget(elem, content) {
                return jQuery.nodeName(elem, "table") && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem
            }

            function disableScript(elem) {
                elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
                return elem
            }

            function restoreScript(elem) {
                var match = rscriptTypeMasked.exec(elem.type);
                if (match) {
                    elem.type = match[1]
                } else {
                    elem.removeAttribute("type")
                }
                return elem
            }

            function setGlobalEval(elems, refElements) {
                var i = 0,
                    l = elems.length;
                for (; i < l; i++) {
                    data_priv.set(elems[i], "globalEval", !refElements || data_priv.get(refElements[i], "globalEval"))
                }
            }

            function cloneCopyEvent(src, dest) {
                var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
                if (dest.nodeType !== 1) {
                    return
                }
                if (data_priv.hasData(src)) {
                    pdataOld = data_priv.access(src);
                    pdataCur = data_priv.set(dest, pdataOld);
                    events = pdataOld.events;
                    if (events) {
                        delete pdataCur.handle;
                        pdataCur.events = {};
                        for (type in events) {
                            for (i = 0, l = events[type].length; i < l; i++) {
                                jQuery.event.add(dest, type, events[type][i])
                            }
                        }
                    }
                }
                if (data_user.hasData(src)) {
                    udataOld = data_user.access(src);
                    udataCur = jQuery.extend({}, udataOld);
                    data_user.set(dest, udataCur)
                }
            }

            function getAll(context, tag) {
                var ret = context.getElementsByTagName ? context.getElementsByTagName(tag || "*") : context.querySelectorAll ? context.querySelectorAll(tag || "*") : [];
                return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret
            }

            function fixInput(src, dest) {
                var nodeName = dest.nodeName.toLowerCase();
                if (nodeName === "input" && rcheckableType.test(src.type)) {
                    dest.checked = src.checked
                } else if (nodeName === "input" || nodeName === "textarea") {
                    dest.defaultValue = src.defaultValue
                }
            }
            jQuery.extend({
                clone: function(elem, dataAndEvents, deepDataAndEvents) {
                    var i, l, srcElements, destElements, clone = elem.cloneNode(true),
                        inPage = jQuery.contains(elem.ownerDocument, elem);
                    if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
                        destElements = getAll(clone);
                        srcElements = getAll(elem);
                        for (i = 0, l = srcElements.length; i < l; i++) {
                            fixInput(srcElements[i], destElements[i])
                        }
                    }
                    if (dataAndEvents) {
                        if (deepDataAndEvents) {
                            srcElements = srcElements || getAll(elem);
                            destElements = destElements || getAll(clone);
                            for (i = 0, l = srcElements.length; i < l; i++) {
                                cloneCopyEvent(srcElements[i], destElements[i])
                            }
                        } else {
                            cloneCopyEvent(elem, clone)
                        }
                    }
                    destElements = getAll(clone, "script");
                    if (destElements.length > 0) {
                        setGlobalEval(destElements, !inPage && getAll(elem, "script"))
                    }
                    return clone
                },
                buildFragment: function(elems, context, scripts, selection) {
                    var elem, tmp, tag, wrap, contains, j, fragment = context.createDocumentFragment(),
                        nodes = [],
                        i = 0,
                        l = elems.length;
                    for (; i < l; i++) {
                        elem = elems[i];
                        if (elem || elem === 0) {
                            if (jQuery.type(elem) === "object") {
                                jQuery.merge(nodes, elem.nodeType ? [elem] : elem)
                            } else if (!rhtml.test(elem)) {
                                nodes.push(context.createTextNode(elem))
                            } else {
                                tmp = tmp || fragment.appendChild(context.createElement("div"));
                                tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
                                wrap = wrapMap[tag] || wrapMap._default;
                                tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];
                                j = wrap[0];
                                while (j--) {
                                    tmp = tmp.lastChild
                                }
                                jQuery.merge(nodes, tmp.childNodes);
                                tmp = fragment.firstChild;
                                tmp.textContent = ""
                            }
                        }
                    }
                    fragment.textContent = "";
                    i = 0;
                    while (elem = nodes[i++]) {
                        if (selection && jQuery.inArray(elem, selection) !== -1) {
                            continue
                        }
                        contains = jQuery.contains(elem.ownerDocument, elem);
                        tmp = getAll(fragment.appendChild(elem), "script");
                        if (contains) {
                            setGlobalEval(tmp)
                        }
                        if (scripts) {
                            j = 0;
                            while (elem = tmp[j++]) {
                                if (rscriptType.test(elem.type || "")) {
                                    scripts.push(elem)
                                }
                            }
                        }
                    }
                    return fragment
                },
                cleanData: function(elems) {
                    var data, elem, type, key, special = jQuery.event.special,
                        i = 0;
                    for (;
                        (elem = elems[i]) !== undefined; i++) {
                        if (jQuery.acceptData(elem)) {
                            key = elem[data_priv.expando];
                            if (key && (data = data_priv.cache[key])) {
                                if (data.events) {
                                    for (type in data.events) {
                                        if (special[type]) {
                                            jQuery.event.remove(elem, type)
                                        } else {
                                            jQuery.removeEvent(elem, type, data.handle)
                                        }
                                    }
                                }
                                if (data_priv.cache[key]) {
                                    delete data_priv.cache[key]
                                }
                            }
                        }
                        delete data_user.cache[elem[data_user.expando]]
                    }
                }
            });
            jQuery.fn.extend({
                text: function(value) {
                    return access(this, function(value) {
                        return value === undefined ? jQuery.text(this) : this.empty().each(function() {
                            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                                this.textContent = value
                            }
                        })
                    }, null, value, arguments.length)
                },
                append: function() {
                    return this.domManip(arguments, function(elem) {
                        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                            var target = manipulationTarget(this, elem);
                            target.appendChild(elem)
                        }
                    })
                },
                prepend: function() {
                    return this.domManip(arguments, function(elem) {
                        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                            var target = manipulationTarget(this, elem);
                            target.insertBefore(elem, target.firstChild)
                        }
                    })
                },
                before: function() {
                    return this.domManip(arguments, function(elem) {
                        if (this.parentNode) {
                            this.parentNode.insertBefore(elem, this)
                        }
                    })
                },
                after: function() {
                    return this.domManip(arguments, function(elem) {
                        if (this.parentNode) {
                            this.parentNode.insertBefore(elem, this.nextSibling)
                        }
                    })
                },
                remove: function(selector, keepData) {
                    var elem, elems = selector ? jQuery.filter(selector, this) : this,
                        i = 0;
                    for (;
                        (elem = elems[i]) != null; i++) {
                        if (!keepData && elem.nodeType === 1) {
                            jQuery.cleanData(getAll(elem))
                        }
                        if (elem.parentNode) {
                            if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
                                setGlobalEval(getAll(elem, "script"))
                            }
                            elem.parentNode.removeChild(elem)
                        }
                    }
                    return this
                },
                empty: function() {
                    var elem, i = 0;
                    for (;
                        (elem = this[i]) != null; i++) {
                        if (elem.nodeType === 1) {
                            jQuery.cleanData(getAll(elem, false));
                            elem.textContent = ""
                        }
                    }
                    return this
                },
                clone: function(dataAndEvents, deepDataAndEvents) {
                    dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
                    deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
                    return this.map(function() {
                        return jQuery.clone(this, dataAndEvents, deepDataAndEvents)
                    })
                },
                html: function(value) {
                    return access(this, function(value) {
                        var elem = this[0] || {},
                            i = 0,
                            l = this.length;
                        if (value === undefined && elem.nodeType === 1) {
                            return elem.innerHTML
                        }
                        if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
                            value = value.replace(rxhtmlTag, "<$1></$2>");
                            try {
                                for (; i < l; i++) {
                                    elem = this[i] || {};
                                    if (elem.nodeType === 1) {
                                        jQuery.cleanData(getAll(elem, false));
                                        elem.innerHTML = value
                                    }
                                }
                                elem = 0
                            } catch (e) {}
                        }
                        if (elem) {
                            this.empty().append(value)
                        }
                    }, null, value, arguments.length)
                },
                replaceWith: function() {
                    var arg = arguments[0];
                    this.domManip(arguments, function(elem) {
                        arg = this.parentNode;
                        jQuery.cleanData(getAll(this));
                        if (arg) {
                            arg.replaceChild(elem, this)
                        }
                    });
                    return arg && (arg.length || arg.nodeType) ? this : this.remove()
                },
                detach: function(selector) {
                    return this.remove(selector, true)
                },
                domManip: function(args, callback) {
                    args = concat.apply([], args);
                    var fragment, first, scripts, hasScripts, node, doc, i = 0,
                        l = this.length,
                        set = this,
                        iNoClone = l - 1,
                        value = args[0],
                        isFunction = jQuery.isFunction(value);
                    if (isFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
                        return this.each(function(index) {
                            var self = set.eq(index);
                            if (isFunction) {
                                args[0] = value.call(this, index, self.html())
                            }
                            self.domManip(args, callback)
                        })
                    }
                    if (l) {
                        fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);
                        first = fragment.firstChild;
                        if (fragment.childNodes.length === 1) {
                            fragment = first
                        }
                        if (first) {
                            scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                            hasScripts = scripts.length;
                            for (; i < l; i++) {
                                node = fragment;
                                if (i !== iNoClone) {
                                    node = jQuery.clone(node, true, true);
                                    if (hasScripts) {
                                        jQuery.merge(scripts, getAll(node, "script"))
                                    }
                                }
                                callback.call(this[i], node, i)
                            }
                            if (hasScripts) {
                                doc = scripts[scripts.length - 1].ownerDocument;
                                jQuery.map(scripts, restoreScript);
                                for (i = 0; i < hasScripts; i++) {
                                    node = scripts[i];
                                    if (rscriptType.test(node.type || "") && !data_priv.access(node, "globalEval") && jQuery.contains(doc, node)) {
                                        if (node.src) {
                                            if (jQuery._evalUrl) {
                                                jQuery._evalUrl(node.src)
                                            }
                                        } else {
                                            jQuery.globalEval(node.textContent.replace(rcleanScript, ""))
                                        }
                                    }
                                }
                            }
                        }
                    }
                    return this
                }
            });
            jQuery.each({
                appendTo: "append",
                prependTo: "prepend",
                insertBefore: "before",
                insertAfter: "after",
                replaceAll: "replaceWith"
            }, function(name, original) {
                jQuery.fn[name] = function(selector) {
                    var elems, ret = [],
                        insert = jQuery(selector),
                        last = insert.length - 1,
                        i = 0;
                    for (; i <= last; i++) {
                        elems = i === last ? this : this.clone(true);
                        jQuery(insert[i])[original](elems);
                        push.apply(ret, elems.get())
                    }
                    return this.pushStack(ret)
                }
            });
            var iframe, elemdisplay = {};

            function actualDisplay(name, doc) {
                var style, elem = jQuery(doc.createElement(name)).appendTo(doc.body),
                    display = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ? style.display : jQuery.css(elem[0], "display");
                elem.detach();
                return display
            }

            function defaultDisplay(nodeName) {
                var doc = document,
                    display = elemdisplay[nodeName];
                if (!display) {
                    display = actualDisplay(nodeName, doc);
                    if (display === "none" || !display) {
                        iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement);
                        doc = iframe[0].contentDocument;
                        doc.write();
                        doc.close();
                        display = actualDisplay(nodeName, doc);
                        iframe.detach()
                    }
                    elemdisplay[nodeName] = display
                }
                return display
            }
            var rmargin = /^margin/;
            var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
            var getStyles = function(elem) {
                if (elem.ownerDocument.defaultView.opener) {
                    return elem.ownerDocument.defaultView.getComputedStyle(elem, null)
                }
                return window.getComputedStyle(elem, null)
            };

            function curCSS(elem, name, computed) {
                var width, minWidth, maxWidth, ret, style = elem.style;
                computed = computed || getStyles(elem);
                if (computed) {
                    ret = computed.getPropertyValue(name) || computed[name]
                }
                if (computed) {
                    if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
                        ret = jQuery.style(elem, name)
                    }
                    if (rnumnonpx.test(ret) && rmargin.test(name)) {
                        width = style.width;
                        minWidth = style.minWidth;
                        maxWidth = style.maxWidth;
                        style.minWidth = style.maxWidth = style.width = ret;
                        ret = computed.width;
                        style.width = width;
                        style.minWidth = minWidth;
                        style.maxWidth = maxWidth
                    }
                }
                return ret !== undefined ? ret + "" : ret
            }

            function addGetHookIf(conditionFn, hookFn) {
                return {
                    get: function() {
                        if (conditionFn()) {
                            delete this.get;
                            return
                        }
                        return (this.get = hookFn).apply(this, arguments)
                    }
                }
            }(function() {
                var pixelPositionVal, boxSizingReliableVal, docElem = document.documentElement,
                    container = document.createElement("div"),
                    div = document.createElement("div");
                if (!div.style) {
                    return
                }
                div.style.backgroundClip = "content-box";
                div.cloneNode(true).style.backgroundClip = "";
                support.clearCloneStyle = div.style.backgroundClip === "content-box";
                container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" + "position:absolute";
                container.appendChild(div);

                function computePixelPositionAndBoxSizingReliable() {
                    div.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" + "box-sizing:border-box;display:block;margin-top:1%;top:1%;" + "border:1px;padding:1px;width:4px;position:absolute";
                    div.innerHTML = "";
                    docElem.appendChild(container);
                    var divStyle = window.getComputedStyle(div, null);
                    pixelPositionVal = divStyle.top !== "1%";
                    boxSizingReliableVal = divStyle.width === "4px";
                    docElem.removeChild(container)
                }
                if (window.getComputedStyle) {
                    jQuery.extend(support, {
                        pixelPosition: function() {
                            computePixelPositionAndBoxSizingReliable();
                            return pixelPositionVal
                        },
                        boxSizingReliable: function() {
                            if (boxSizingReliableVal == null) {
                                computePixelPositionAndBoxSizingReliable()
                            }
                            return boxSizingReliableVal
                        },
                        reliableMarginRight: function() {
                            var ret, marginDiv = div.appendChild(document.createElement("div"));
                            marginDiv.style.cssText = div.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + "box-sizing:content-box;display:block;margin:0;border:0;padding:0";
                            marginDiv.style.marginRight = marginDiv.style.width = "0";
                            div.style.width = "1px";
                            docElem.appendChild(container);
                            ret = !parseFloat(window.getComputedStyle(marginDiv, null).marginRight);
                            docElem.removeChild(container);
                            div.removeChild(marginDiv);
                            return ret
                        }
                    })
                }
            })();
            jQuery.swap = function(elem, options, callback, args) {
                var ret, name, old = {};
                for (name in options) {
                    old[name] = elem.style[name];
                    elem.style[name] = options[name]
                }
                ret = callback.apply(elem, args || []);
                for (name in options) {
                    elem.style[name] = old[name]
                }
                return ret
            };
            var rdisplayswap = /^(none|table(?!-c[ea]).+)/,
                rnumsplit = new RegExp("^(" + pnum + ")(.*)$", "i"),
                rrelNum = new RegExp("^([+-])=(" + pnum + ")", "i"),
                cssShow = {
                    position: "absolute",
                    visibility: "hidden",
                    display: "block"
                },
                cssNormalTransform = {
                    letterSpacing: "0",
                    fontWeight: "400"
                },
                cssPrefixes = ["Webkit", "O", "Moz", "ms"];

            function vendorPropName(style, name) {
                if (name in style) {
                    return name
                }
                var capName = name[0].toUpperCase() + name.slice(1),
                    origName = name,
                    i = cssPrefixes.length;
                while (i--) {
                    name = cssPrefixes[i] + capName;
                    if (name in style) {
                        return name
                    }
                }
                return origName
            }

            function setPositiveNumber(elem, value, subtract) {
                var matches = rnumsplit.exec(value);
                return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value
            }

            function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
                var i = extra === (isBorderBox ? "border" : "content") ? 4 : name === "width" ? 1 : 0,
                    val = 0;
                for (; i < 4; i += 2) {
                    if (extra === "margin") {
                        val += jQuery.css(elem, extra + cssExpand[i], true, styles)
                    }
                    if (isBorderBox) {
                        if (extra === "content") {
                            val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles)
                        }
                        if (extra !== "margin") {
                            val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles)
                        }
                    } else {
                        val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                        if (extra !== "padding") {
                            val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles)
                        }
                    }
                }
                return val
            }

            function getWidthOrHeight(elem, name, extra) {
                var valueIsBorderBox = true,
                    val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
                    styles = getStyles(elem),
                    isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";
                if (val <= 0 || val == null) {
                    val = curCSS(elem, name, styles);
                    if (val < 0 || val == null) {
                        val = elem.style[name]
                    }
                    if (rnumnonpx.test(val)) {
                        return val
                    }
                    valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);
                    val = parseFloat(val) || 0
                }
                return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px"
            }

            function showHide(elements, show) {
                var display, elem, hidden, values = [],
                    index = 0,
                    length = elements.length;
                for (; index < length; index++) {
                    elem = elements[index];
                    if (!elem.style) {
                        continue
                    }
                    values[index] = data_priv.get(elem, "olddisplay");
                    display = elem.style.display;
                    if (show) {
                        if (!values[index] && display === "none") {
                            elem.style.display = ""
                        }
                        if (elem.style.display === "" && isHidden(elem)) {
                            values[index] = data_priv.access(elem, "olddisplay", defaultDisplay(elem.nodeName))
                        }
                    } else {
                        hidden = isHidden(elem);
                        if (display !== "none" || !hidden) {
                            data_priv.set(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"))
                        }
                    }
                }
                for (index = 0; index < length; index++) {
                    elem = elements[index];
                    if (!elem.style) {
                        continue
                    }
                    if (!show || elem.style.display === "none" || elem.style.display === "") {
                        elem.style.display = show ? values[index] || "" : "none"
                    }
                }
                return elements
            }
            jQuery.extend({
                cssHooks: {
                    opacity: {
                        get: function(elem, computed) {
                            if (computed) {
                                var ret = curCSS(elem, "opacity");
                                return ret === "" ? "1" : ret
                            }
                        }
                    }
                },
                cssNumber: {
                    columnCount: true,
                    fillOpacity: true,
                    flexGrow: true,
                    flexShrink: true,
                    fontWeight: true,
                    lineHeight: true,
                    opacity: true,
                    order: true,
                    orphans: true,
                    widows: true,
                    zIndex: true,
                    zoom: true
                },
                cssProps: {
                    float: "cssFloat"
                },
                style: function(elem, name, value, extra) {
                    if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                        return
                    }
                    var ret, type, hooks, origName = jQuery.camelCase(name),
                        style = elem.style;
                    name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
                    hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
                    if (value !== undefined) {
                        type = typeof value;
                        if (type === "string" && (ret = rrelNum.exec(value))) {
                            value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
                            type = "number"
                        }
                        if (value == null || value !== value) {
                            return
                        }
                        if (type === "number" && !jQuery.cssNumber[origName]) {
                            value += "px"
                        }
                        if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
                            style[name] = "inherit"
                        }
                        if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
                            style[name] = value
                        }
                    } else {
                        if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                            return ret
                        }
                        return style[name]
                    }
                },
                css: function(elem, name, extra, styles) {
                    var val, num, hooks, origName = jQuery.camelCase(name);
                    name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
                    hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
                    if (hooks && "get" in hooks) {
                        val = hooks.get(elem, true, extra)
                    }
                    if (val === undefined) {
                        val = curCSS(elem, name, styles)
                    }
                    if (val === "normal" && name in cssNormalTransform) {
                        val = cssNormalTransform[name]
                    }
                    if (extra === "" || extra) {
                        num = parseFloat(val);
                        return extra === true || jQuery.isNumeric(num) ? num || 0 : val
                    }
                    return val
                }
            });
            jQuery.each(["height", "width"], function(i, name) {
                jQuery.cssHooks[name] = {
                    get: function(elem, computed, extra) {
                        if (computed) {
                            return rdisplayswap.test(jQuery.css(elem, "display")) && elem.offsetWidth === 0 ? jQuery.swap(elem, cssShow, function() {
                                return getWidthOrHeight(elem, name, extra)
                            }) : getWidthOrHeight(elem, name, extra)
                        }
                    },
                    set: function(elem, value, extra) {
                        var styles = extra && getStyles(elem);
                        return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles) : 0)
                    }
                }
            });
            jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function(elem, computed) {
                if (computed) {
                    return jQuery.swap(elem, {
                        display: "inline-block"
                    }, curCSS, [elem, "marginRight"])
                }
            });
            jQuery.each({
                margin: "",
                padding: "",
                border: "Width"
            }, function(prefix, suffix) {
                jQuery.cssHooks[prefix + suffix] = {
                    expand: function(value) {
                        var i = 0,
                            expanded = {},
                            parts = typeof value === "string" ? value.split(" ") : [value];
                        for (; i < 4; i++) {
                            expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0]
                        }
                        return expanded
                    }
                };
                if (!rmargin.test(prefix)) {
                    jQuery.cssHooks[prefix + suffix].set = setPositiveNumber
                }
            });
            jQuery.fn.extend({
                css: function(name, value) {
                    return access(this, function(elem, name, value) {
                        var styles, len, map = {},
                            i = 0;
                        if (jQuery.isArray(name)) {
                            styles = getStyles(elem);
                            len = name.length;
                            for (; i < len; i++) {
                                map[name[i]] = jQuery.css(elem, name[i], false, styles)
                            }
                            return map
                        }
                        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name)
                    }, name, value, arguments.length > 1)
                },
                show: function() {
                    return showHide(this, true)
                },
                hide: function() {
                    return showHide(this)
                },
                toggle: function(state) {
                    if (typeof state === "boolean") {
                        return state ? this.show() : this.hide()
                    }
                    return this.each(function() {
                        if (isHidden(this)) {
                            jQuery(this).show()
                        } else {
                            jQuery(this).hide()
                        }
                    })
                }
            });

            function Tween(elem, options, prop, end, easing) {
                return new Tween.prototype.init(elem, options, prop, end, easing)
            }
            jQuery.Tween = Tween;
            Tween.prototype = {
                constructor: Tween,
                init: function(elem, options, prop, end, easing, unit) {
                    this.elem = elem;
                    this.prop = prop;
                    this.easing = easing || "swing";
                    this.options = options;
                    this.start = this.now = this.cur();
                    this.end = end;
                    this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px")
                },
                cur: function() {
                    var hooks = Tween.propHooks[this.prop];
                    return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this)
                },
                run: function(percent) {
                    var eased, hooks = Tween.propHooks[this.prop];
                    if (this.options.duration) {
                        this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration)
                    } else {
                        this.pos = eased = percent
                    }
                    this.now = (this.end - this.start) * eased + this.start;
                    if (this.options.step) {
                        this.options.step.call(this.elem, this.now, this)
                    }
                    if (hooks && hooks.set) {
                        hooks.set(this)
                    } else {
                        Tween.propHooks._default.set(this)
                    }
                    return this
                }
            };
            Tween.prototype.init.prototype = Tween.prototype;
            Tween.propHooks = {
                _default: {
                    get: function(tween) {
                        var result;
                        if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
                            return tween.elem[tween.prop]
                        }
                        result = jQuery.css(tween.elem, tween.prop, "");
                        return !result || result === "auto" ? 0 : result
                    },
                    set: function(tween) {
                        if (jQuery.fx.step[tween.prop]) {
                            jQuery.fx.step[tween.prop](tween)
                        } else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
                            jQuery.style(tween.elem, tween.prop, tween.now + tween.unit)
                        } else {
                            tween.elem[tween.prop] = tween.now
                        }
                    }
                }
            };
            Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
                set: function(tween) {
                    if (tween.elem.nodeType && tween.elem.parentNode) {
                        tween.elem[tween.prop] = tween.now
                    }
                }
            };
            jQuery.easing = {
                linear: function(p) {
                    return p
                },
                swing: function(p) {
                    return .5 - Math.cos(p * Math.PI) / 2
                }
            };
            jQuery.fx = Tween.prototype.init;
            jQuery.fx.step = {};
            var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/,
                rfxnum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i"),
                rrun = /queueHooks$/,
                animationPrefilters = [defaultPrefilter],
                tweeners = {
                    "*": [function(prop, value) {
                        var tween = this.createTween(prop, value),
                            target = tween.cur(),
                            parts = rfxnum.exec(value),
                            unit = parts && parts[3] || (jQuery.cssNumber[prop] ? "" : "px"),
                            start = (jQuery.cssNumber[prop] || unit !== "px" && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)),
                            scale = 1,
                            maxIterations = 20;
                        if (start && start[3] !== unit) {
                            unit = unit || start[3];
                            parts = parts || [];
                            start = +target || 1;
                            do {
                                scale = scale || ".5";
                                start = start / scale;
                                jQuery.style(tween.elem, prop, start + unit)
                            } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations)
                        }
                        if (parts) {
                            start = tween.start = +start || +target || 0;
                            tween.unit = unit;
                            tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2]
                        }
                        return tween
                    }]
                };

            function createFxNow() {
                setTimeout(function() {
                    fxNow = undefined
                });
                return fxNow = jQuery.now()
            }

            function genFx(type, includeWidth) {
                var which, i = 0,
                    attrs = {
                        height: type
                    };
                includeWidth = includeWidth ? 1 : 0;
                for (; i < 4; i += 2 - includeWidth) {
                    which = cssExpand[i];
                    attrs["margin" + which] = attrs["padding" + which] = type
                }
                if (includeWidth) {
                    attrs.opacity = attrs.width = type
                }
                return attrs
            }

            function createTween(value, prop, animation) {
                var tween, collection = (tweeners[prop] || []).concat(tweeners["*"]),
                    index = 0,
                    length = collection.length;
                for (; index < length; index++) {
                    if (tween = collection[index].call(animation, prop, value)) {
                        return tween
                    }
                }
            }

            function defaultPrefilter(elem, props, opts) {
                var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay, anim = this,
                    orig = {},
                    style = elem.style,
                    hidden = elem.nodeType && isHidden(elem),
                    dataShow = data_priv.get(elem, "fxshow");
                if (!opts.queue) {
                    hooks = jQuery._queueHooks(elem, "fx");
                    if (hooks.unqueued == null) {
                        hooks.unqueued = 0;
                        oldfire = hooks.empty.fire;
                        hooks.empty.fire = function() {
                            if (!hooks.unqueued) {
                                oldfire()
                            }
                        }
                    }
                    hooks.unqueued++;
                    anim.always(function() {
                        anim.always(function() {
                            hooks.unqueued--;
                            if (!jQuery.queue(elem, "fx").length) {
                                hooks.empty.fire()
                            }
                        })
                    })
                }
                if (elem.nodeType === 1 && ("height" in props || "width" in props)) {
                    opts.overflow = [style.overflow, style.overflowX, style.overflowY];
                    display = jQuery.css(elem, "display");
                    checkDisplay = display === "none" ? data_priv.get(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;
                    if (checkDisplay === "inline" && jQuery.css(elem, "float") === "none") {
                        style.display = "inline-block"
                    }
                }
                if (opts.overflow) {
                    style.overflow = "hidden";
                    anim.always(function() {
                        style.overflow = opts.overflow[0];
                        style.overflowX = opts.overflow[1];
                        style.overflowY = opts.overflow[2]
                    })
                }
                for (prop in props) {
                    value = props[prop];
                    if (rfxtypes.exec(value)) {
                        delete props[prop];
                        toggle = toggle || value === "toggle";
                        if (value === (hidden ? "hide" : "show")) {
                            if (value === "show" && dataShow && dataShow[prop] !== undefined) {
                                hidden = true
                            } else {
                                continue
                            }
                        }
                        orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop)
                    } else {
                        display = undefined
                    }
                }
                if (!jQuery.isEmptyObject(orig)) {
                    if (dataShow) {
                        if ("hidden" in dataShow) {
                            hidden = dataShow.hidden
                        }
                    } else {
                        dataShow = data_priv.access(elem, "fxshow", {})
                    }
                    if (toggle) {
                        dataShow.hidden = !hidden
                    }
                    if (hidden) {
                        jQuery(elem).show()
                    } else {
                        anim.done(function() {
                            jQuery(elem).hide()
                        })
                    }
                    anim.done(function() {
                        var prop;
                        data_priv.remove(elem, "fxshow");
                        for (prop in orig) {
                            jQuery.style(elem, prop, orig[prop])
                        }
                    });
                    for (prop in orig) {
                        tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
                        if (!(prop in dataShow)) {
                            dataShow[prop] = tween.start;
                            if (hidden) {
                                tween.end = tween.start;
                                tween.start = prop === "width" || prop === "height" ? 1 : 0
                            }
                        }
                    }
                } else if ((display === "none" ? defaultDisplay(elem.nodeName) : display) === "inline") {
                    style.display = display
                }
            }

            function propFilter(props, specialEasing) {
                var index, name, easing, value, hooks;
                for (index in props) {
                    name = jQuery.camelCase(index);
                    easing = specialEasing[name];
                    value = props[index];
                    if (jQuery.isArray(value)) {
                        easing = value[1];
                        value = props[index] = value[0]
                    }
                    if (index !== name) {
                        props[name] = value;
                        delete props[index]
                    }
                    hooks = jQuery.cssHooks[name];
                    if (hooks && "expand" in hooks) {
                        value = hooks.expand(value);
                        delete props[name];
                        for (index in value) {
                            if (!(index in props)) {
                                props[index] = value[index];
                                specialEasing[index] = easing
                            }
                        }
                    } else {
                        specialEasing[name] = easing
                    }
                }
            }

            function Animation(elem, properties, options) {
                var result, stopped, index = 0,
                    length = animationPrefilters.length,
                    deferred = jQuery.Deferred().always(function() {
                        delete tick.elem
                    }),
                    tick = function() {
                        if (stopped) {
                            return false
                        }
                        var currentTime = fxNow || createFxNow(),
                            remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
                            temp = remaining / animation.duration || 0,
                            percent = 1 - temp,
                            index = 0,
                            length = animation.tweens.length;
                        for (; index < length; index++) {
                            animation.tweens[index].run(percent)
                        }
                        deferred.notifyWith(elem, [animation, percent, remaining]);
                        if (percent < 1 && length) {
                            return remaining
                        } else {
                            deferred.resolveWith(elem, [animation]);
                            return false
                        }
                    },
                    animation = deferred.promise({
                        elem: elem,
                        props: jQuery.extend({}, properties),
                        opts: jQuery.extend(true, {
                            specialEasing: {}
                        }, options),
                        originalProperties: properties,
                        originalOptions: options,
                        startTime: fxNow || createFxNow(),
                        duration: options.duration,
                        tweens: [],
                        createTween: function(prop, end) {
                            var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                            animation.tweens.push(tween);
                            return tween
                        },
                        stop: function(gotoEnd) {
                            var index = 0,
                                length = gotoEnd ? animation.tweens.length : 0;
                            if (stopped) {
                                return this
                            }
                            stopped = true;
                            for (; index < length; index++) {
                                animation.tweens[index].run(1)
                            }
                            if (gotoEnd) {
                                deferred.resolveWith(elem, [animation, gotoEnd])
                            } else {
                                deferred.rejectWith(elem, [animation, gotoEnd])
                            }
                            return this
                        }
                    }),
                    props = animation.props;
                propFilter(props, animation.opts.specialEasing);
                for (; index < length; index++) {
                    result = animationPrefilters[index].call(animation, elem, props, animation.opts);
                    if (result) {
                        return result
                    }
                }
                jQuery.map(props, createTween, animation);
                if (jQuery.isFunction(animation.opts.start)) {
                    animation.opts.start.call(elem, animation)
                }
                jQuery.fx.timer(jQuery.extend(tick, {
                    elem: elem,
                    anim: animation,
                    queue: animation.opts.queue
                }));
                return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always)
            }
            jQuery.Animation = jQuery.extend(Animation, {
                tweener: function(props, callback) {
                    if (jQuery.isFunction(props)) {
                        callback = props;
                        props = ["*"]
                    } else {
                        props = props.split(" ")
                    }
                    var prop, index = 0,
                        length = props.length;
                    for (; index < length; index++) {
                        prop = props[index];
                        tweeners[prop] = tweeners[prop] || [];
                        tweeners[prop].unshift(callback)
                    }
                },
                prefilter: function(callback, prepend) {
                    if (prepend) {
                        animationPrefilters.unshift(callback)
                    } else {
                        animationPrefilters.push(callback)
                    }
                }
            });
            jQuery.speed = function(speed, easing, fn) {
                var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
                    complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
                    duration: speed,
                    easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
                };
                opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
                if (opt.queue == null || opt.queue === true) {
                    opt.queue = "fx"
                }
                opt.old = opt.complete;
                opt.complete = function() {
                    if (jQuery.isFunction(opt.old)) {
                        opt.old.call(this)
                    }
                    if (opt.queue) {
                        jQuery.dequeue(this, opt.queue)
                    }
                };
                return opt
            };
            jQuery.fn.extend({
                fadeTo: function(speed, to, easing, callback) {
                    return this.filter(isHidden).css("opacity", 0).show().end().animate({
                        opacity: to
                    }, speed, easing, callback)
                },
                animate: function(prop, speed, easing, callback) {
                    var empty = jQuery.isEmptyObject(prop),
                        optall = jQuery.speed(speed, easing, callback),
                        doAnimation = function() {
                            var anim = Animation(this, jQuery.extend({}, prop), optall);
                            if (empty || data_priv.get(this, "finish")) {
                                anim.stop(true)
                            }
                        };
                    doAnimation.finish = doAnimation;
                    return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation)
                },
                stop: function(type, clearQueue, gotoEnd) {
                    var stopQueue = function(hooks) {
                        var stop = hooks.stop;
                        delete hooks.stop;
                        stop(gotoEnd)
                    };
                    if (typeof type !== "string") {
                        gotoEnd = clearQueue;
                        clearQueue = type;
                        type = undefined
                    }
                    if (clearQueue && type !== false) {
                        this.queue(type || "fx", [])
                    }
                    return this.each(function() {
                        var dequeue = true,
                            index = type != null && type + "queueHooks",
                            timers = jQuery.timers,
                            data = data_priv.get(this);
                        if (index) {
                            if (data[index] && data[index].stop) {
                                stopQueue(data[index])
                            }
                        } else {
                            for (index in data) {
                                if (data[index] && data[index].stop && rrun.test(index)) {
                                    stopQueue(data[index])
                                }
                            }
                        }
                        for (index = timers.length; index--;) {
                            if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                                timers[index].anim.stop(gotoEnd);
                                dequeue = false;
                                timers.splice(index, 1)
                            }
                        }
                        if (dequeue || !gotoEnd) {
                            jQuery.dequeue(this, type)
                        }
                    })
                },
                finish: function(type) {
                    if (type !== false) {
                        type = type || "fx"
                    }
                    return this.each(function() {
                        var index, data = data_priv.get(this),
                            queue = data[type + "queue"],
                            hooks = data[type + "queueHooks"],
                            timers = jQuery.timers,
                            length = queue ? queue.length : 0;
                        data.finish = true;
                        jQuery.queue(this, type, []);
                        if (hooks && hooks.stop) {
                            hooks.stop.call(this, true)
                        }
                        for (index = timers.length; index--;) {
                            if (timers[index].elem === this && timers[index].queue === type) {
                                timers[index].anim.stop(true);
                                timers.splice(index, 1)
                            }
                        }
                        for (index = 0; index < length; index++) {
                            if (queue[index] && queue[index].finish) {
                                queue[index].finish.call(this)
                            }
                        }
                        delete data.finish
                    })
                }
            });
            jQuery.each(["toggle", "show", "hide"], function(i, name) {
                var cssFn = jQuery.fn[name];
                jQuery.fn[name] = function(speed, easing, callback) {
                    return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback)
                }
            });
            jQuery.each({
                slideDown: genFx("show"),
                slideUp: genFx("hide"),
                slideToggle: genFx("toggle"),
                fadeIn: {
                    opacity: "show"
                },
                fadeOut: {
                    opacity: "hide"
                },
                fadeToggle: {
                    opacity: "toggle"
                }
            }, function(name, props) {
                jQuery.fn[name] = function(speed, easing, callback) {
                    return this.animate(props, speed, easing, callback)
                }
            });
            jQuery.timers = [];
            jQuery.fx.tick = function() {
                var timer, i = 0,
                    timers = jQuery.timers;
                fxNow = jQuery.now();
                for (; i < timers.length; i++) {
                    timer = timers[i];
                    if (!timer() && timers[i] === timer) {
                        timers.splice(i--, 1)
                    }
                }
                if (!timers.length) {
                    jQuery.fx.stop()
                }
                fxNow = undefined
            };
            jQuery.fx.timer = function(timer) {
                jQuery.timers.push(timer);
                if (timer()) {
                    jQuery.fx.start()
                } else {
                    jQuery.timers.pop()
                }
            };
            jQuery.fx.interval = 13;
            jQuery.fx.start = function() {
                if (!timerId) {
                    timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval)
                }
            };
            jQuery.fx.stop = function() {
                clearInterval(timerId);
                timerId = null
            };
            jQuery.fx.speeds = {
                slow: 600,
                fast: 200,
                _default: 400
            };
            jQuery.fn.delay = function(time, type) {
                time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
                type = type || "fx";
                return this.queue(type, function(next, hooks) {
                    var timeout = setTimeout(next, time);
                    hooks.stop = function() {
                        clearTimeout(timeout)
                    }
                })
            };
            (function() {
                var input = document.createElement("input"),
                    select = document.createElement("select"),
                    opt = select.appendChild(document.createElement("option"));
                input.type = "checkbox";
                support.checkOn = input.value !== "";
                support.optSelected = opt.selected;
                select.disabled = true;
                support.optDisabled = !opt.disabled;
                input = document.createElement("input");
                input.value = "t";
                input.type = "radio";
                support.radioValue = input.value === "t"
            })();
            var nodeHook, boolHook, attrHandle = jQuery.expr.attrHandle;
            jQuery.fn.extend({
                attr: function(name, value) {
                    return access(this, jQuery.attr, name, value, arguments.length > 1)
                },
                removeAttr: function(name) {
                    return this.each(function() {
                        jQuery.removeAttr(this, name)
                    })
                }
            });
            jQuery.extend({
                attr: function(elem, name, value) {
                    var hooks, ret, nType = elem.nodeType;
                    if (!elem || nType === 3 || nType === 8 || nType === 2) {
                        return
                    }
                    if (typeof elem.getAttribute === strundefined) {
                        return jQuery.prop(elem, name, value)
                    }
                    if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                        name = name.toLowerCase();
                        hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook)
                    }
                    if (value !== undefined) {
                        if (value === null) {
                            jQuery.removeAttr(elem, name)
                        } else if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                            return ret
                        } else {
                            elem.setAttribute(name, value + "");
                            return value
                        }
                    } else if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                        return ret
                    } else {
                        ret = jQuery.find.attr(elem, name);
                        return ret == null ? undefined : ret
                    }
                },
                removeAttr: function(elem, value) {
                    var name, propName, i = 0,
                        attrNames = value && value.match(rnotwhite);
                    if (attrNames && elem.nodeType === 1) {
                        while (name = attrNames[i++]) {
                            propName = jQuery.propFix[name] || name;
                            if (jQuery.expr.match.bool.test(name)) {
                                elem[propName] = false
                            }
                            elem.removeAttribute(name)
                        }
                    }
                },
                attrHooks: {
                    type: {
                        set: function(elem, value) {
                            if (!support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
                                var val = elem.value;
                                elem.setAttribute("type", value);
                                if (val) {
                                    elem.value = val
                                }
                                return value
                            }
                        }
                    }
                }
            });
            boolHook = {
                set: function(elem, value, name) {
                    if (value === false) {
                        jQuery.removeAttr(elem, name)
                    } else {
                        elem.setAttribute(name, name)
                    }
                    return name
                }
            };
            jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(i, name) {
                var getter = attrHandle[name] || jQuery.find.attr;
                attrHandle[name] = function(elem, name, isXML) {
                    var ret, handle;
                    if (!isXML) {
                        handle = attrHandle[name];
                        attrHandle[name] = ret;
                        ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
                        attrHandle[name] = handle
                    }
                    return ret
                }
            });
            var rfocusable = /^(?:input|select|textarea|button)$/i;
            jQuery.fn.extend({
                prop: function(name, value) {
                    return access(this, jQuery.prop, name, value, arguments.length > 1)
                },
                removeProp: function(name) {
                    return this.each(function() {
                        delete this[jQuery.propFix[name] || name]
                    })
                }
            });
            jQuery.extend({
                propFix: {
                    for: "htmlFor",
                    class: "className"
                },
                prop: function(elem, name, value) {
                    var ret, hooks, notxml, nType = elem.nodeType;
                    if (!elem || nType === 3 || nType === 8 || nType === 2) {
                        return
                    }
                    notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
                    if (notxml) {
                        name = jQuery.propFix[name] || name;
                        hooks = jQuery.propHooks[name]
                    }
                    if (value !== undefined) {
                        return hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : elem[name] = value
                    } else {
                        return hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name]
                    }
                },
                propHooks: {
                    tabIndex: {
                        get: function(elem) {
                            return elem.hasAttribute("tabindex") || rfocusable.test(elem.nodeName) || elem.href ? elem.tabIndex : -1
                        }
                    }
                }
            });
            if (!support.optSelected) {
                jQuery.propHooks.selected = {
                    get: function(elem) {
                        var parent = elem.parentNode;
                        if (parent && parent.parentNode) {
                            parent.parentNode.selectedIndex
                        }
                        return null
                    }
                }
            }
            jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function() {
                jQuery.propFix[this.toLowerCase()] = this
            });
            var rclass = /[\t\r\n\f]/g;
            jQuery.fn.extend({
                addClass: function(value) {
                    var classes, elem, cur, clazz, j, finalValue, proceed = typeof value === "string" && value,
                        i = 0,
                        len = this.length;
                    if (jQuery.isFunction(value)) {
                        return this.each(function(j) {
                            jQuery(this).addClass(value.call(this, j, this.className))
                        })
                    }
                    if (proceed) {
                        classes = (value || "").match(rnotwhite) || [];
                        for (; i < len; i++) {
                            elem = this[i];
                            cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : " ");
                            if (cur) {
                                j = 0;
                                while (clazz = classes[j++]) {
                                    if (cur.indexOf(" " + clazz + " ") < 0) {
                                        cur += clazz + " "
                                    }
                                }
                                finalValue = jQuery.trim(cur);
                                if (elem.className !== finalValue) {
                                    elem.className = finalValue
                                }
                            }
                        }
                    }
                    return this
                },
                removeClass: function(value) {
                    var classes, elem, cur, clazz, j, finalValue, proceed = arguments.length === 0 || typeof value === "string" && value,
                        i = 0,
                        len = this.length;
                    if (jQuery.isFunction(value)) {
                        return this.each(function(j) {
                            jQuery(this).removeClass(value.call(this, j, this.className))
                        })
                    }
                    if (proceed) {
                        classes = (value || "").match(rnotwhite) || [];
                        for (; i < len; i++) {
                            elem = this[i];
                            cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "");
                            if (cur) {
                                j = 0;
                                while (clazz = classes[j++]) {
                                    while (cur.indexOf(" " + clazz + " ") >= 0) {
                                        cur = cur.replace(" " + clazz + " ", " ")
                                    }
                                }
                                finalValue = value ? jQuery.trim(cur) : "";
                                if (elem.className !== finalValue) {
                                    elem.className = finalValue
                                }
                            }
                        }
                    }
                    return this
                },
                toggleClass: function(value, stateVal) {
                    var type = typeof value;
                    if (typeof stateVal === "boolean" && type === "string") {
                        return stateVal ? this.addClass(value) : this.removeClass(value)
                    }
                    if (jQuery.isFunction(value)) {
                        return this.each(function(i) {
                            jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal)
                        })
                    }
                    return this.each(function() {
                        if (type === "string") {
                            var className, i = 0,
                                self = jQuery(this),
                                classNames = value.match(rnotwhite) || [];
                            while (className = classNames[i++]) {
                                if (self.hasClass(className)) {
                                    self.removeClass(className)
                                } else {
                                    self.addClass(className)
                                }
                            }
                        } else if (type === strundefined || type === "boolean") {
                            if (this.className) {
                                data_priv.set(this, "__className__", this.className)
                            }
                            this.className = this.className || value === false ? "" : data_priv.get(this, "__className__") || ""
                        }
                    })
                },
                hasClass: function(selector) {
                    var className = " " + selector + " ",
                        i = 0,
                        l = this.length;
                    for (; i < l; i++) {
                        if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) {
                            return true
                        }
                    }
                    return false
                }
            });
            var rreturn = /\r/g;
            jQuery.fn.extend({
                val: function(value) {
                    var hooks, ret, isFunction, elem = this[0];
                    if (!arguments.length) {
                        if (elem) {
                            hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                            if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
                                return ret
                            }
                            ret = elem.value;
                            return typeof ret === "string" ? ret.replace(rreturn, "") : ret == null ? "" : ret
                        }
                        return
                    }
                    isFunction = jQuery.isFunction(value);
                    return this.each(function(i) {
                        var val;
                        if (this.nodeType !== 1) {
                            return
                        }
                        if (isFunction) {
                            val = value.call(this, i, jQuery(this).val())
                        } else {
                            val = value
                        }
                        if (val == null) {
                            val = ""
                        } else if (typeof val === "number") {
                            val += ""
                        } else if (jQuery.isArray(val)) {
                            val = jQuery.map(val, function(value) {
                                return value == null ? "" : value + ""
                            })
                        }
                        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
                        if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
                            this.value = val
                        }
                    })
                }
            });
            jQuery.extend({
                valHooks: {
                    option: {
                        get: function(elem) {
                            var val = jQuery.find.attr(elem, "value");
                            return val != null ? val : jQuery.trim(jQuery.text(elem))
                        }
                    },
                    select: {
                        get: function(elem) {
                            var value, option, options = elem.options,
                                index = elem.selectedIndex,
                                one = elem.type === "select-one" || index < 0,
                                values = one ? null : [],
                                max = one ? index + 1 : options.length,
                                i = index < 0 ? max : one ? index : 0;
                            for (; i < max; i++) {
                                option = options[i];
                                if ((option.selected || i === index) && (support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
                                    value = jQuery(option).val();
                                    if (one) {
                                        return value
                                    }
                                    values.push(value)
                                }
                            }
                            return values
                        },
                        set: function(elem, value) {
                            var optionSet, option, options = elem.options,
                                values = jQuery.makeArray(value),
                                i = options.length;
                            while (i--) {
                                option = options[i];
                                if (option.selected = jQuery.inArray(option.value, values) >= 0) {
                                    optionSet = true
                                }
                            }
                            if (!optionSet) {
                                elem.selectedIndex = -1
                            }
                            return values
                        }
                    }
                }
            });
            jQuery.each(["radio", "checkbox"], function() {
                jQuery.valHooks[this] = {
                    set: function(elem, value) {
                        if (jQuery.isArray(value)) {
                            return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0
                        }
                    }
                };
                if (!support.checkOn) {
                    jQuery.valHooks[this].get = function(elem) {
                        return elem.getAttribute("value") === null ? "on" : elem.value
                    }
                }
            });
            jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function(i, name) {
                jQuery.fn[name] = function(data, fn) {
                    return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name)
                }
            });
            jQuery.fn.extend({
                hover: function(fnOver, fnOut) {
                    return this.mouseenter(fnOver).mouseleave(fnOut || fnOver)
                },
                bind: function(types, data, fn) {
                    return this.on(types, null, data, fn)
                },
                unbind: function(types, fn) {
                    return this.off(types, null, fn)
                },
                delegate: function(selector, types, data, fn) {
                    return this.on(types, selector, data, fn)
                },
                undelegate: function(selector, types, fn) {
                    return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn)
                }
            });
            var nonce = jQuery.now();
            var rquery = /\?/;
            jQuery.parseJSON = function(data) {
                return JSON.parse(data + "")
            };
            jQuery.parseXML = function(data) {
                var xml, tmp;
                if (!data || typeof data !== "string") {
                    return null
                }
                try {
                    tmp = new DOMParser;
                    xml = tmp.parseFromString(data, "text/xml")
                } catch (e) {
                    xml = undefined
                }
                if (!xml || xml.getElementsByTagName("parsererror").length) {
                    jQuery.error("Invalid XML: " + data)
                }
                return xml
            };
            var rhash = /#.*$/,
                rts = /([?&])_=[^&]*/,
                rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm,
                rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
                rnoContent = /^(?:GET|HEAD)$/,
                rprotocol = /^\/\//,
                rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,
                prefilters = {},
                transports = {},
                allTypes = "*/".concat("*"),
                ajaxLocation = window.location.href,
                ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];

            function addToPrefiltersOrTransports(structure) {
                return function(dataTypeExpression, func) {
                    if (typeof dataTypeExpression !== "string") {
                        func = dataTypeExpression;
                        dataTypeExpression = "*"
                    }
                    var dataType, i = 0,
                        dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];
                    if (jQuery.isFunction(func)) {
                        while (dataType = dataTypes[i++]) {
                            if (dataType[0] === "+") {
                                dataType = dataType.slice(1) || "*";
                                (structure[dataType] = structure[dataType] || []).unshift(func)
                            } else {
                                (structure[dataType] = structure[dataType] || []).push(func)
                            }
                        }
                    }
                }
            }

            function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
                var inspected = {},
                    seekingTransport = structure === transports;

                function inspect(dataType) {
                    var selected;
                    inspected[dataType] = true;
                    jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
                        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                        if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
                            options.dataTypes.unshift(dataTypeOrTransport);
                            inspect(dataTypeOrTransport);
                            return false
                        } else if (seekingTransport) {
                            return !(selected = dataTypeOrTransport)
                        }
                    });
                    return selected
                }
                return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*")
            }

            function ajaxExtend(target, src) {
                var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
                for (key in src) {
                    if (src[key] !== undefined) {
                        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key]
                    }
                }
                if (deep) {
                    jQuery.extend(true, target, deep)
                }
                return target
            }

            function ajaxHandleResponses(s, jqXHR, responses) {
                var ct, type, finalDataType, firstDataType, contents = s.contents,
                    dataTypes = s.dataTypes;
                while (dataTypes[0] === "*") {
                    dataTypes.shift();
                    if (ct === undefined) {
                        ct = s.mimeType || jqXHR.getResponseHeader("Content-Type")
                    }
                }
                if (ct) {
                    for (type in contents) {
                        if (contents[type] && contents[type].test(ct)) {
                            dataTypes.unshift(type);
                            break
                        }
                    }
                }
                if (dataTypes[0] in responses) {
                    finalDataType = dataTypes[0]
                } else {
                    for (type in responses) {
                        if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                            finalDataType = type;
                            break
                        }
                        if (!firstDataType) {
                            firstDataType = type
                        }
                    }
                    finalDataType = finalDataType || firstDataType
                }
                if (finalDataType) {
                    if (finalDataType !== dataTypes[0]) {
                        dataTypes.unshift(finalDataType)
                    }
                    return responses[finalDataType]
                }
            }

            function ajaxConvert(s, response, jqXHR, isSuccess) {
                var conv2, current, conv, tmp, prev, converters = {},
                    dataTypes = s.dataTypes.slice();
                if (dataTypes[1]) {
                    for (conv in s.converters) {
                        converters[conv.toLowerCase()] = s.converters[conv]
                    }
                }
                current = dataTypes.shift();
                while (current) {
                    if (s.responseFields[current]) {
                        jqXHR[s.responseFields[current]] = response
                    }
                    if (!prev && isSuccess && s.dataFilter) {
                        response = s.dataFilter(response, s.dataType)
                    }
                    prev = current;
                    current = dataTypes.shift();
                    if (current) {
                        if (current === "*") {
                            current = prev
                        } else if (prev !== "*" && prev !== current) {
                            conv = converters[prev + " " + current] || converters["* " + current];
                            if (!conv) {
                                for (conv2 in converters) {
                                    tmp = conv2.split(" ");
                                    if (tmp[1] === current) {
                                        conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                                        if (conv) {
                                            if (conv === true) {
                                                conv = converters[conv2]
                                            } else if (converters[conv2] !== true) {
                                                current = tmp[0];
                                                dataTypes.unshift(tmp[1])
                                            }
                                            break
                                        }
                                    }
                                }
                            }
                            if (conv !== true) {
                                if (conv && s["throws"]) {
                                    response = conv(response)
                                } else {
                                    try {
                                        response = conv(response)
                                    } catch (e) {
                                        return {
                                            state: "parsererror",
                                            error: conv ? e : "No conversion from " + prev + " to " + current
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return {
                    state: "success",
                    data: response
                }
            }
            jQuery.extend({
                active: 0,
                lastModified: {},
                etag: {},
                ajaxSettings: {
                    url: ajaxLocation,
                    type: "GET",
                    isLocal: rlocalProtocol.test(ajaxLocParts[1]),
                    global: true,
                    processData: true,
                    async: true,
                    contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                    accepts: {
                        "*": allTypes,
                        text: "text/plain",
                        html: "text/html",
                        xml: "application/xml, text/xml",
                        json: "application/json, text/javascript"
                    },
                    contents: {
                        xml: /xml/,
                        html: /html/,
                        json: /json/
                    },
                    responseFields: {
                        xml: "responseXML",
                        text: "responseText",
                        json: "responseJSON"
                    },
                    converters: {
                        "* text": String,
                        "text html": true,
                        "text json": jQuery.parseJSON,
                        "text xml": jQuery.parseXML
                    },
                    flatOptions: {
                        url: true,
                        context: true
                    }
                },
                ajaxSetup: function(target, settings) {
                    return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target)
                },
                ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
                ajaxTransport: addToPrefiltersOrTransports(transports),
                ajax: function(url, options) {
                    if (typeof url === "object") {
                        options = url;
                        url = undefined
                    }
                    options = options || {};
                    var transport, cacheURL, responseHeadersString, responseHeaders, timeoutTimer, parts, fireGlobals, i, s = jQuery.ajaxSetup({}, options),
                        callbackContext = s.context || s,
                        globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
                        deferred = jQuery.Deferred(),
                        completeDeferred = jQuery.Callbacks("once memory"),
                        statusCode = s.statusCode || {},
                        requestHeaders = {},
                        requestHeadersNames = {},
                        state = 0,
                        strAbort = "canceled",
                        jqXHR = {
                            readyState: 0,
                            getResponseHeader: function(key) {
                                var match;
                                if (state === 2) {
                                    if (!responseHeaders) {
                                        responseHeaders = {};
                                        while (match = rheaders.exec(responseHeadersString)) {
                                            responseHeaders[match[1].toLowerCase()] = match[2]
                                        }
                                    }
                                    match = responseHeaders[key.toLowerCase()]
                                }
                                return match == null ? null : match
                            },
                            getAllResponseHeaders: function() {
                                return state === 2 ? responseHeadersString : null
                            },
                            setRequestHeader: function(name, value) {
                                var lname = name.toLowerCase();
                                if (!state) {
                                    name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                                    requestHeaders[name] = value
                                }
                                return this
                            },
                            overrideMimeType: function(type) {
                                if (!state) {
                                    s.mimeType = type
                                }
                                return this
                            },
                            statusCode: function(map) {
                                var code;
                                if (map) {
                                    if (state < 2) {
                                        for (code in map) {
                                            statusCode[code] = [statusCode[code], map[code]]
                                        }
                                    } else {
                                        jqXHR.always(map[jqXHR.status])
                                    }
                                }
                                return this
                            },
                            abort: function(statusText) {
                                var finalText = statusText || strAbort;
                                if (transport) {
                                    transport.abort(finalText)
                                }
                                done(0, finalText);
                                return this
                            }
                        };
                    deferred.promise(jqXHR).complete = completeDeferred.add;
                    jqXHR.success = jqXHR.done;
                    jqXHR.error = jqXHR.fail;
                    s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");
                    s.type = options.method || options.type || s.method || s.type;
                    s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""];
                    if (s.crossDomain == null) {
                        parts = rurl.exec(s.url.toLowerCase());
                        s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? "80" : "443")) !== (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? "80" : "443"))))
                    }
                    if (s.data && s.processData && typeof s.data !== "string") {
                        s.data = jQuery.param(s.data, s.traditional)
                    }
                    inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
                    if (state === 2) {
                        return jqXHR
                    }
                    fireGlobals = jQuery.event && s.global;
                    if (fireGlobals && jQuery.active++ === 0) {
                        jQuery.event.trigger("ajaxStart")
                    }
                    s.type = s.type.toUpperCase();
                    s.hasContent = !rnoContent.test(s.type);
                    cacheURL = s.url;
                    if (!s.hasContent) {
                        if (s.data) {
                            cacheURL = s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data;
                            delete s.data
                        }
                        if (s.cache === false) {
                            s.url = rts.test(cacheURL) ? cacheURL.replace(rts, "$1_=" + nonce++) : cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++
                        }
                    }
                    if (s.ifModified) {
                        if (jQuery.lastModified[cacheURL]) {
                            jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL])
                        }
                        if (jQuery.etag[cacheURL]) {
                            jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL])
                        }
                    }
                    if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                        jqXHR.setRequestHeader("Content-Type", s.contentType)
                    }
                    jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
                    for (i in s.headers) {
                        jqXHR.setRequestHeader(i, s.headers[i])
                    }
                    if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
                        return jqXHR.abort()
                    }
                    strAbort = "abort";
                    for (i in {
                            success: 1,
                            error: 1,
                            complete: 1
                        }) {
                        jqXHR[i](s[i])
                    }
                    transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
                    if (!transport) {
                        done(-1, "No Transport")
                    } else {
                        jqXHR.readyState = 1;
                        if (fireGlobals) {
                            globalEventContext.trigger("ajaxSend", [jqXHR, s])
                        }
                        if (s.async && s.timeout > 0) {
                            timeoutTimer = setTimeout(function() {
                                jqXHR.abort("timeout")
                            }, s.timeout)
                        }
                        try {
                            state = 1;
                            transport.send(requestHeaders, done)
                        } catch (e) {
                            if (state < 2) {
                                done(-1, e)
                            } else {
                                throw e
                            }
                        }
                    }

                    function done(status, nativeStatusText, responses, headers) {
                        var isSuccess, success, error, response, modified, statusText = nativeStatusText;
                        if (state === 2) {
                            return
                        }
                        state = 2;
                        if (timeoutTimer) {
                            clearTimeout(timeoutTimer)
                        }
                        transport = undefined;
                        responseHeadersString = headers || "";
                        jqXHR.readyState = status > 0 ? 4 : 0;
                        isSuccess = status >= 200 && status < 300 || status === 304;
                        if (responses) {
                            response = ajaxHandleResponses(s, jqXHR, responses)
                        }
                        response = ajaxConvert(s, response, jqXHR, isSuccess);
                        if (isSuccess) {
                            if (s.ifModified) {
                                modified = jqXHR.getResponseHeader("Last-Modified");
                                if (modified) {
                                    jQuery.lastModified[cacheURL] = modified
                                }
                                modified = jqXHR.getResponseHeader("etag");
                                if (modified) {
                                    jQuery.etag[cacheURL] = modified
                                }
                            }
                            if (status === 204 || s.type === "HEAD") {
                                statusText = "nocontent"
                            } else if (status === 304) {
                                statusText = "notmodified"
                            } else {
                                statusText = response.state;
                                success = response.data;
                                error = response.error;
                                isSuccess = !error
                            }
                        } else {
                            error = statusText;
                            if (status || !statusText) {
                                statusText = "error";
                                if (status < 0) {
                                    status = 0
                                }
                            }
                        }
                        jqXHR.status = status;
                        jqXHR.statusText = (nativeStatusText || statusText) + "";
                        if (isSuccess) {
                            deferred.resolveWith(callbackContext, [success, statusText, jqXHR])
                        } else {
                            deferred.rejectWith(callbackContext, [jqXHR, statusText, error])
                        }
                        jqXHR.statusCode(statusCode);
                        statusCode = undefined;
                        if (fireGlobals) {
                            globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error])
                        }
                        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
                        if (fireGlobals) {
                            globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
                            if (!--jQuery.active) {
                                jQuery.event.trigger("ajaxStop")
                            }
                        }
                    }
                    return jqXHR
                },
                getJSON: function(url, data, callback) {
                    return jQuery.get(url, data, callback, "json")
                },
                getScript: function(url, callback) {
                    return jQuery.get(url, undefined, callback, "script")
                }
            });
            jQuery.each(["get", "post"], function(i, method) {
                jQuery[method] = function(url, data, callback, type) {
                    if (jQuery.isFunction(data)) {
                        type = type || callback;
                        callback = data;
                        data = undefined
                    }
                    return jQuery.ajax({
                        url: url,
                        type: method,
                        dataType: type,
                        data: data,
                        success: callback
                    })
                }
            });
            jQuery._evalUrl = function(url) {
                return jQuery.ajax({
                    url: url,
                    type: "GET",
                    dataType: "script",
                    async: false,
                    global: false,
                    throws: true
                })
            };
            jQuery.fn.extend({
                wrapAll: function(html) {
                    var wrap;
                    if (jQuery.isFunction(html)) {
                        return this.each(function(i) {
                            jQuery(this).wrapAll(html.call(this, i))
                        })
                    }
                    if (this[0]) {
                        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                        if (this[0].parentNode) {
                            wrap.insertBefore(this[0])
                        }
                        wrap.map(function() {
                            var elem = this;
                            while (elem.firstElementChild) {
                                elem = elem.firstElementChild
                            }
                            return elem
                        }).append(this)
                    }
                    return this
                },
                wrapInner: function(html) {
                    if (jQuery.isFunction(html)) {
                        return this.each(function(i) {
                            jQuery(this).wrapInner(html.call(this, i))
                        })
                    }
                    return this.each(function() {
                        var self = jQuery(this),
                            contents = self.contents();
                        if (contents.length) {
                            contents.wrapAll(html)
                        } else {
                            self.append(html)
                        }
                    })
                },
                wrap: function(html) {
                    var isFunction = jQuery.isFunction(html);
                    return this.each(function(i) {
                        jQuery(this).wrapAll(isFunction ? html.call(this, i) : html)
                    })
                },
                unwrap: function() {
                    return this.parent().each(function() {
                        if (!jQuery.nodeName(this, "body")) {
                            jQuery(this).replaceWith(this.childNodes)
                        }
                    }).end()
                }
            });
            jQuery.expr.filters.hidden = function(elem) {
                return elem.offsetWidth <= 0 && elem.offsetHeight <= 0
            };
            jQuery.expr.filters.visible = function(elem) {
                return !jQuery.expr.filters.hidden(elem)
            };
            var r20 = /%20/g,
                rbracket = /\[\]$/,
                rCRLF = /\r?\n/g,
                rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
                rsubmittable = /^(?:input|select|textarea|keygen)/i;

            function buildParams(prefix, obj, traditional, add) {
                var name;
                if (jQuery.isArray(obj)) {
                    jQuery.each(obj, function(i, v) {
                        if (traditional || rbracket.test(prefix)) {
                            add(prefix, v)
                        } else {
                            buildParams(prefix + "[" + (typeof v === "object" ? i : "") + "]", v, traditional, add)
                        }
                    })
                } else if (!traditional && jQuery.type(obj) === "object") {
                    for (name in obj) {
                        buildParams(prefix + "[" + name + "]", obj[name], traditional, add)
                    }
                } else {
                    add(prefix, obj)
                }
            }
            jQuery.param = function(a, traditional) {
                var prefix, s = [],
                    add = function(key, value) {
                        value = jQuery.isFunction(value) ? value() : value == null ? "" : value;
                        s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value)
                    };
                if (traditional === undefined) {
                    traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional
                }
                if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
                    jQuery.each(a, function() {
                        add(this.name, this.value)
                    })
                } else {
                    for (prefix in a) {
                        buildParams(prefix, a[prefix], traditional, add)
                    }
                }
                return s.join("&").replace(r20, "+")
            };
            jQuery.fn.extend({
                serialize: function() {
                    return jQuery.param(this.serializeArray())
                },
                serializeArray: function() {
                    return this.map(function() {
                        var elements = jQuery.prop(this, "elements");
                        return elements ? jQuery.makeArray(elements) : this
                    }).filter(function() {
                        var type = this.type;
                        return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type))
                    }).map(function(i, elem) {
                        var val = jQuery(this).val();
                        return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function(val) {
                            return {
                                name: elem.name,
                                value: val.replace(rCRLF, "\r\n")
                            }
                        }) : {
                            name: elem.name,
                            value: val.replace(rCRLF, "\r\n")
                        }
                    }).get()
                }
            });
            jQuery.ajaxSettings.xhr = function() {
                try {
                    return new XMLHttpRequest
                } catch (e) {}
            };
            var xhrId = 0,
                xhrCallbacks = {},
                xhrSuccessStatus = {
                    0: 200,
                    1223: 204
                },
                xhrSupported = jQuery.ajaxSettings.xhr();
            if (window.attachEvent) {
                window.attachEvent("onunload", function() {
                    for (var key in xhrCallbacks) {
                        xhrCallbacks[key]()
                    }
                })
            }
            support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
            support.ajax = xhrSupported = !!xhrSupported;
            jQuery.ajaxTransport(function(options) {
                var callback;
                if (support.cors || xhrSupported && !options.crossDomain) {
                    return {
                        send: function(headers, complete) {
                            var i, xhr = options.xhr(),
                                id = ++xhrId;
                            xhr.open(options.type, options.url, options.async, options.username, options.password);
                            if (options.xhrFields) {
                                for (i in options.xhrFields) {
                                    xhr[i] = options.xhrFields[i]
                                }
                            }
                            if (options.mimeType && xhr.overrideMimeType) {
                                xhr.overrideMimeType(options.mimeType)
                            }
                            if (!options.crossDomain && !headers["X-Requested-With"]) {
                                headers["X-Requested-With"] = "XMLHttpRequest"
                            }
                            for (i in headers) {
                                xhr.setRequestHeader(i, headers[i])
                            }
                            callback = function(type) {
                                return function() {
                                    if (callback) {
                                        delete xhrCallbacks[id];
                                        callback = xhr.onload = xhr.onerror = null;
                                        if (type === "abort") {
                                            xhr.abort()
                                        } else if (type === "error") {
                                            complete(xhr.status, xhr.statusText)
                                        } else {
                                            complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, typeof xhr.responseText === "string" ? {
                                                text: xhr.responseText
                                            } : undefined, xhr.getAllResponseHeaders())
                                        }
                                    }
                                }
                            };
                            xhr.onload = callback();
                            xhr.onerror = callback("error");
                            callback = xhrCallbacks[id] = callback("abort");
                            try {
                                xhr.send(options.hasContent && options.data || null)
                            } catch (e) {
                                if (callback) {
                                    throw e
                                }
                            }
                        },
                        abort: function() {
                            if (callback) {
                                callback()
                            }
                        }
                    }
                }
            });
            jQuery.ajaxSetup({
                accepts: {
                    script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
                },
                contents: {
                    script: /(?:java|ecma)script/
                },
                converters: {
                    "text script": function(text) {
                        jQuery.globalEval(text);
                        return text
                    }
                }
            });
            jQuery.ajaxPrefilter("script", function(s) {
                if (s.cache === undefined) {
                    s.cache = false
                }
                if (s.crossDomain) {
                    s.type = "GET"
                }
            });
            jQuery.ajaxTransport("script", function(s) {
                if (s.crossDomain) {
                    var script, callback;
                    return {
                        send: function(_, complete) {
                            script = jQuery("<script>").prop({
                                async: true,
                                charset: s.scriptCharset,
                                src: s.url
                            }).on("load error", callback = function(evt) {
                                script.remove();
                                callback = null;
                                if (evt) {
                                    complete(evt.type === "error" ? 404 : 200, evt.type)
                                }
                            });
                            document.head.appendChild(script[0])
                        },
                        abort: function() {
                            if (callback) {
                                callback()
                            }
                        }
                    }
                }
            });
            var oldCallbacks = [],
                rjsonp = /(=)\?(?=&|$)|\?\?/;
            jQuery.ajaxSetup({
                jsonp: "callback",
                jsonpCallback: function() {
                    var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
                    this[callback] = true;
                    return callback
                }
            });
            jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
                var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data");
                if (jsonProp || s.dataTypes[0] === "jsonp") {
                    callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
                    if (jsonProp) {
                        s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName)
                    } else if (s.jsonp !== false) {
                        s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName
                    }
                    s.converters["script json"] = function() {
                        if (!responseContainer) {
                            jQuery.error(callbackName + " was not called")
                        }
                        return responseContainer[0]
                    };
                    s.dataTypes[0] = "json";
                    overwritten = window[callbackName];
                    window[callbackName] = function() {
                        responseContainer = arguments
                    };
                    jqXHR.always(function() {
                        window[callbackName] = overwritten;
                        if (s[callbackName]) {
                            s.jsonpCallback = originalSettings.jsonpCallback;
                            oldCallbacks.push(callbackName)
                        }
                        if (responseContainer && jQuery.isFunction(overwritten)) {
                            overwritten(responseContainer[0])
                        }
                        responseContainer = overwritten = undefined
                    });
                    return "script"
                }
            });
            jQuery.parseHTML = function(data, context, keepScripts) {
                if (!data || typeof data !== "string") {
                    return null
                }
                if (typeof context === "boolean") {
                    keepScripts = context;
                    context = false
                }
                context = context || document;
                var parsed = rsingleTag.exec(data),
                    scripts = !keepScripts && [];
                if (parsed) {
                    return [context.createElement(parsed[1])]
                }
                parsed = jQuery.buildFragment([data], context, scripts);
                if (scripts && scripts.length) {
                    jQuery(scripts).remove()
                }
                return jQuery.merge([], parsed.childNodes)
            };
            var _load = jQuery.fn.load;
            jQuery.fn.load = function(url, params, callback) {
                if (typeof url !== "string" && _load) {
                    return _load.apply(this, arguments)
                }
                var selector, type, response, self = this,
                    off = url.indexOf(" ");
                if (off >= 0) {
                    selector = jQuery.trim(url.slice(off));
                    url = url.slice(0, off)
                }
                if (jQuery.isFunction(params)) {
                    callback = params;
                    params = undefined
                } else if (params && typeof params === "object") {
                    type = "POST"
                }
                if (self.length > 0) {
                    jQuery.ajax({
                        url: url,
                        type: type,
                        dataType: "html",
                        data: params
                    }).done(function(responseText) {
                        response = arguments;
                        self.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : responseText)
                    }).complete(callback && function(jqXHR, status) {
                        self.each(callback, response || [jqXHR.responseText, status, jqXHR])
                    })
                }
                return this
            };
            jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function(i, type) {
                jQuery.fn[type] = function(fn) {
                    return this.on(type, fn)
                }
            });
            jQuery.expr.filters.animated = function(elem) {
                return jQuery.grep(jQuery.timers, function(fn) {
                    return elem === fn.elem
                }).length
            };
            var docElem = window.document.documentElement;

            function getWindow(elem) {
                return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView
            }
            jQuery.offset = {
                setOffset: function(elem, options, i) {
                    var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, "position"),
                        curElem = jQuery(elem),
                        props = {};
                    if (position === "static") {
                        elem.style.position = "relative"
                    }
                    curOffset = curElem.offset();
                    curCSSTop = jQuery.css(elem, "top");
                    curCSSLeft = jQuery.css(elem, "left");
                    calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;
                    if (calculatePosition) {
                        curPosition = curElem.position();
                        curTop = curPosition.top;
                        curLeft = curPosition.left
                    } else {
                        curTop = parseFloat(curCSSTop) || 0;
                        curLeft = parseFloat(curCSSLeft) || 0
                    }
                    if (jQuery.isFunction(options)) {
                        options = options.call(elem, i, curOffset)
                    }
                    if (options.top != null) {
                        props.top = options.top - curOffset.top + curTop
                    }
                    if (options.left != null) {
                        props.left = options.left - curOffset.left + curLeft
                    }
                    if ("using" in options) {
                        options.using.call(elem, props)
                    } else {
                        curElem.css(props)
                    }
                }
            };
            jQuery.fn.extend({
                offset: function(options) {
                    if (arguments.length) {
                        return options === undefined ? this : this.each(function(i) {
                            jQuery.offset.setOffset(this, options, i)
                        })
                    }
                    var docElem, win, elem = this[0],
                        box = {
                            top: 0,
                            left: 0
                        },
                        doc = elem && elem.ownerDocument;
                    if (!doc) {
                        return
                    }
                    docElem = doc.documentElement;
                    if (!jQuery.contains(docElem, elem)) {
                        return box
                    }
                    if (typeof elem.getBoundingClientRect !== strundefined) {
                        box = elem.getBoundingClientRect()
                    }
                    win = getWindow(doc);
                    return {
                        top: box.top + win.pageYOffset - docElem.clientTop,
                        left: box.left + win.pageXOffset - docElem.clientLeft
                    }
                },
                position: function() {
                    if (!this[0]) {
                        return
                    }
                    var offsetParent, offset, elem = this[0],
                        parentOffset = {
                            top: 0,
                            left: 0
                        };
                    if (jQuery.css(elem, "position") === "fixed") {
                        offset = elem.getBoundingClientRect()
                    } else {
                        offsetParent = this.offsetParent();
                        offset = this.offset();
                        if (!jQuery.nodeName(offsetParent[0], "html")) {
                            parentOffset = offsetParent.offset()
                        }
                        parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
                        parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true)
                    }
                    return {
                        top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
                        left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
                    }
                },
                offsetParent: function() {
                    return this.map(function() {
                        var offsetParent = this.offsetParent || docElem;
                        while (offsetParent && (!jQuery.nodeName(offsetParent, "html") && jQuery.css(offsetParent, "position") === "static")) {
                            offsetParent = offsetParent.offsetParent
                        }
                        return offsetParent || docElem
                    })
                }
            });
            jQuery.each({
                scrollLeft: "pageXOffset",
                scrollTop: "pageYOffset"
            }, function(method, prop) {
                var top = "pageYOffset" === prop;
                jQuery.fn[method] = function(val) {
                    return access(this, function(elem, method, val) {
                        var win = getWindow(elem);
                        if (val === undefined) {
                            return win ? win[prop] : elem[method]
                        }
                        if (win) {
                            win.scrollTo(!top ? val : window.pageXOffset, top ? val : window.pageYOffset)
                        } else {
                            elem[method] = val
                        }
                    }, method, val, arguments.length, null)
                }
            });
            jQuery.each(["top", "left"], function(i, prop) {
                jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function(elem, computed) {
                    if (computed) {
                        computed = curCSS(elem, prop);
                        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed
                    }
                })
            });
            jQuery.each({
                Height: "height",
                Width: "width"
            }, function(name, type) {
                jQuery.each({
                    padding: "inner" + name,
                    content: type,
                    "": "outer" + name
                }, function(defaultExtra, funcName) {
                    jQuery.fn[funcName] = function(margin, value) {
                        var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
                            extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
                        return access(this, function(elem, type, value) {
                            var doc;
                            if (jQuery.isWindow(elem)) {
                                return elem.document.documentElement["client" + name]
                            }
                            if (elem.nodeType === 9) {
                                doc = elem.documentElement;
                                return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name])
                            }
                            return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra)
                        }, type, chainable ? margin : undefined, chainable, null)
                    }
                })
            });
            jQuery.fn.size = function() {
                return this.length
            };
            jQuery.fn.andSelf = jQuery.fn.addBack;
            if (typeof define === "function" && define.amd) {
                define("jquery", [], function() {
                    return jQuery
                })
            }
            var _jQuery = window.jQuery,
                _$ = window.$;
            jQuery.noConflict = function(deep) {
                if (window.$ === jQuery) {
                    window.$ = _$
                }
                if (deep && window.jQuery === jQuery) {
                    window.jQuery = _jQuery
                }
                return jQuery
            };
            if (typeof noGlobal === strundefined) {
                window.jQuery = window.$ = jQuery
            }
            return jQuery
        })
    }, {}],
    17: [function(require, module, exports) {
        (function(global, factory) {
            typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global.moment = factory()
        })(this, function() {
            "use strict";
            var hookCallback;

            function utils_hooks__hooks() {
                return hookCallback.apply(null, arguments)
            }

            function setHookCallback(callback) {
                hookCallback = callback
            }

            function isArray(input) {
                return Object.prototype.toString.call(input) === "[object Array]"
            }

            function isDate(input) {
                return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]"
            }

            function map(arr, fn) {
                var res = [],
                    i;
                for (i = 0; i < arr.length; ++i) {
                    res.push(fn(arr[i], i))
                }
                return res
            }

            function hasOwnProp(a, b) {
                return Object.prototype.hasOwnProperty.call(a, b)
            }

            function extend(a, b) {
                for (var i in b) {
                    if (hasOwnProp(b, i)) {
                        a[i] = b[i]
                    }
                }
                if (hasOwnProp(b, "toString")) {
                    a.toString = b.toString
                }
                if (hasOwnProp(b, "valueOf")) {
                    a.valueOf = b.valueOf
                }
                return a
            }

            function create_utc__createUTC(input, format, locale, strict) {
                return createLocalOrUTC(input, format, locale, strict, true).utc()
            }

            function defaultParsingFlags() {
                return {
                    empty: false,
                    unusedTokens: [],
                    unusedInput: [],
                    overflow: -2,
                    charsLeftOver: 0,
                    nullInput: false,
                    invalidMonth: null,
                    invalidFormat: false,
                    userInvalidated: false,
                    iso: false
                }
            }

            function getParsingFlags(m) {
                if (m._pf == null) {
                    m._pf = defaultParsingFlags()
                }
                return m._pf
            }

            function valid__isValid(m) {
                if (m._isValid == null) {
                    var flags = getParsingFlags(m);
                    m._isValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated;
                    if (m._strict) {
                        m._isValid = m._isValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined
                    }
                }
                return m._isValid
            }

            function valid__createInvalid(flags) {
                var m = create_utc__createUTC(NaN);
                if (flags != null) {
                    extend(getParsingFlags(m), flags)
                } else {
                    getParsingFlags(m).userInvalidated = true
                }
                return m
            }
            var momentProperties = utils_hooks__hooks.momentProperties = [];

            function copyConfig(to, from) {
                var i, prop, val;
                if (typeof from._isAMomentObject !== "undefined") {
                    to._isAMomentObject = from._isAMomentObject
                }
                if (typeof from._i !== "undefined") {
                    to._i = from._i
                }
                if (typeof from._f !== "undefined") {
                    to._f = from._f
                }
                if (typeof from._l !== "undefined") {
                    to._l = from._l
                }
                if (typeof from._strict !== "undefined") {
                    to._strict = from._strict
                }
                if (typeof from._tzm !== "undefined") {
                    to._tzm = from._tzm
                }
                if (typeof from._isUTC !== "undefined") {
                    to._isUTC = from._isUTC
                }
                if (typeof from._offset !== "undefined") {
                    to._offset = from._offset
                }
                if (typeof from._pf !== "undefined") {
                    to._pf = getParsingFlags(from)
                }
                if (typeof from._locale !== "undefined") {
                    to._locale = from._locale
                }
                if (momentProperties.length > 0) {
                    for (i in momentProperties) {
                        prop = momentProperties[i];
                        val = from[prop];
                        if (typeof val !== "undefined") {
                            to[prop] = val
                        }
                    }
                }
                return to
            }
            var updateInProgress = false;

            function Moment(config) {
                copyConfig(this, config);
                this._d = new Date(config._d != null ? config._d.getTime() : NaN);
                if (updateInProgress === false) {
                    updateInProgress = true;
                    utils_hooks__hooks.updateOffset(this);
                    updateInProgress = false
                }
            }

            function isMoment(obj) {
                return obj instanceof Moment || obj != null && obj._isAMomentObject != null
            }

            function absFloor(number) {
                if (number < 0) {
                    return Math.ceil(number)
                } else {
                    return Math.floor(number)
                }
            }

            function toInt(argumentForCoercion) {
                var coercedNumber = +argumentForCoercion,
                    value = 0;
                if (coercedNumber !== 0 && isFinite(coercedNumber)) {
                    value = absFloor(coercedNumber)
                }
                return value
            }

            function compareArrays(array1, array2, dontConvert) {
                var len = Math.min(array1.length, array2.length),
                    lengthDiff = Math.abs(array1.length - array2.length),
                    diffs = 0,
                    i;
                for (i = 0; i < len; i++) {
                    if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
                        diffs++
                    }
                }
                return diffs + lengthDiff
            }

            function Locale() {}
            var locales = {};
            var globalLocale;

            function normalizeLocale(key) {
                return key ? key.toLowerCase().replace("_", "-") : key
            }

            function chooseLocale(names) {
                var i = 0,
                    j, next, locale, split;
                while (i < names.length) {
                    split = normalizeLocale(names[i]).split("-");
                    j = split.length;
                    next = normalizeLocale(names[i + 1]);
                    next = next ? next.split("-") : null;
                    while (j > 0) {
                        locale = loadLocale(split.slice(0, j).join("-"));
                        if (locale) {
                            return locale
                        }
                        if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                            break
                        }
                        j--
                    }
                    i++
                }
                return null
            }

            function loadLocale(name) {
                var oldLocale = null;
                if (!locales[name] && typeof module !== "undefined" && module && module.exports) {
                    try {
                        oldLocale = globalLocale._abbr;
                        require("./locale/" + name);
                        locale_locales__getSetGlobalLocale(oldLocale)
                    } catch (e) {}
                }
                return locales[name]
            }

            function locale_locales__getSetGlobalLocale(key, values) {
                var data;
                if (key) {
                    if (typeof values === "undefined") {
                        data = locale_locales__getLocale(key)
                    } else {
                        data = defineLocale(key, values)
                    }
                    if (data) {
                        globalLocale = data
                    }
                }
                return globalLocale._abbr
            }

            function defineLocale(name, values) {
                if (values !== null) {
                    values.abbr = name;
                    locales[name] = locales[name] || new Locale;
                    locales[name].set(values);
                    locale_locales__getSetGlobalLocale(name);
                    return locales[name]
                } else {
                    delete locales[name];
                    return null
                }
            }

            function locale_locales__getLocale(key) {
                var locale;
                if (key && key._locale && key._locale._abbr) {
                    key = key._locale._abbr
                }
                if (!key) {
                    return globalLocale
                }
                if (!isArray(key)) {
                    locale = loadLocale(key);
                    if (locale) {
                        return locale
                    }
                    key = [key]
                }
                return chooseLocale(key)
            }
            var aliases = {};

            function addUnitAlias(unit, shorthand) {
                var lowerCase = unit.toLowerCase();
                aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit
            }

            function normalizeUnits(units) {
                return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : undefined
            }

            function normalizeObjectUnits(inputObject) {
                var normalizedInput = {},
                    normalizedProp, prop;
                for (prop in inputObject) {
                    if (hasOwnProp(inputObject, prop)) {
                        normalizedProp = normalizeUnits(prop);
                        if (normalizedProp) {
                            normalizedInput[normalizedProp] = inputObject[prop]
                        }
                    }
                }
                return normalizedInput
            }

            function makeGetSet(unit, keepTime) {
                return function(value) {
                    if (value != null) {
                        get_set__set(this, unit, value);
                        utils_hooks__hooks.updateOffset(this, keepTime);
                        return this
                    } else {
                        return get_set__get(this, unit)
                    }
                }
            }

            function get_set__get(mom, unit) {
                return mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]()
            }

            function get_set__set(mom, unit, value) {
                return mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value)
            }

            function getSet(units, value) {
                var unit;
                if (typeof units === "object") {
                    for (unit in units) {
                        this.set(unit, units[unit])
                    }
                } else {
                    units = normalizeUnits(units);
                    if (typeof this[units] === "function") {
                        return this[units](value)
                    }
                }
                return this
            }

            function zeroFill(number, targetLength, forceSign) {
                var absNumber = "" + Math.abs(number),
                    zerosToFill = targetLength - absNumber.length,
                    sign = number >= 0;
                return (sign ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber
            }
            var formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
            var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
            var formatFunctions = {};
            var formatTokenFunctions = {};

            function addFormatToken(token, padded, ordinal, callback) {
                var func = callback;
                if (typeof callback === "string") {
                    func = function() {
                        return this[callback]()
                    }
                }
                if (token) {
                    formatTokenFunctions[token] = func
                }
                if (padded) {
                    formatTokenFunctions[padded[0]] = function() {
                        return zeroFill(func.apply(this, arguments), padded[1], padded[2])
                    }
                }
                if (ordinal) {
                    formatTokenFunctions[ordinal] = function() {
                        return this.localeData().ordinal(func.apply(this, arguments), token)
                    }
                }
            }

            function removeFormattingTokens(input) {
                if (input.match(/\[[\s\S]/)) {
                    return input.replace(/^\[|\]$/g, "")
                }
                return input.replace(/\\/g, "")
            }

            function makeFormatFunction(format) {
                var array = format.match(formattingTokens),
                    i, length;
                for (i = 0, length = array.length; i < length; i++) {
                    if (formatTokenFunctions[array[i]]) {
                        array[i] = formatTokenFunctions[array[i]]
                    } else {
                        array[i] = removeFormattingTokens(array[i])
                    }
                }
                return function(mom) {
                    var output = "";
                    for (i = 0; i < length; i++) {
                        output += array[i] instanceof Function ? array[i].call(mom, format) : array[i]
                    }
                    return output
                }
            }

            function formatMoment(m, format) {
                if (!m.isValid()) {
                    return m.localeData().invalidDate()
                }
                format = expandFormat(format, m.localeData());
                formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
                return formatFunctions[format](m)
            }

            function expandFormat(format, locale) {
                var i = 5;

                function replaceLongDateFormatTokens(input) {
                    return locale.longDateFormat(input) || input
                }
                localFormattingTokens.lastIndex = 0;
                while (i >= 0 && localFormattingTokens.test(format)) {
                    format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
                    localFormattingTokens.lastIndex = 0;
                    i -= 1
                }
                return format
            }
            var match1 = /\d/;
            var match2 = /\d\d/;
            var match3 = /\d{3}/;
            var match4 = /\d{4}/;
            var match6 = /[+-]?\d{6}/;
            var match1to2 = /\d\d?/;
            var match1to3 = /\d{1,3}/;
            var match1to4 = /\d{1,4}/;
            var match1to6 = /[+-]?\d{1,6}/;
            var matchUnsigned = /\d+/;
            var matchSigned = /[+-]?\d+/;
            var matchOffset = /Z|[+-]\d\d:?\d\d/gi;
            var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/;
            var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
            var regexes = {};

            function isFunction(sth) {
                return typeof sth === "function" && Object.prototype.toString.call(sth) === "[object Function]"
            }

            function addRegexToken(token, regex, strictRegex) {
                regexes[token] = isFunction(regex) ? regex : function(isStrict) {
                    return isStrict && strictRegex ? strictRegex : regex
                }
            }

            function getParseRegexForToken(token, config) {
                if (!hasOwnProp(regexes, token)) {
                    return new RegExp(unescapeFormat(token))
                }
                return regexes[token](config._strict, config._locale)
            }

            function unescapeFormat(s) {
                return s.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p2, p3, p4) {
                    return p1 || p2 || p3 || p4
                }).replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&")
            }
            var tokens = {};

            function addParseToken(token, callback) {
                var i, func = callback;
                if (typeof token === "string") {
                    token = [token]
                }
                if (typeof callback === "number") {
                    func = function(input, array) {
                        array[callback] = toInt(input)
                    }
                }
                for (i = 0; i < token.length; i++) {
                    tokens[token[i]] = func
                }
            }

            function addWeekParseToken(token, callback) {
                addParseToken(token, function(input, array, config, token) {
                    config._w = config._w || {};
                    callback(input, config._w, config, token)
                })
            }

            function addTimeToArrayFromToken(token, input, config) {
                if (input != null && hasOwnProp(tokens, token)) {
                    tokens[token](input, config._a, config, token)
                }
            }
            var YEAR = 0;
            var MONTH = 1;
            var DATE = 2;
            var HOUR = 3;
            var MINUTE = 4;
            var SECOND = 5;
            var MILLISECOND = 6;

            function daysInMonth(year, month) {
                return new Date(Date.UTC(year, month + 1, 0)).getUTCDate()
            }
            addFormatToken("M", ["MM", 2], "Mo", function() {
                return this.month() + 1
            });
            addFormatToken("MMM", 0, 0, function(format) {
                return this.localeData().monthsShort(this, format)
            });
            addFormatToken("MMMM", 0, 0, function(format) {
                return this.localeData().months(this, format)
            });
            addUnitAlias("month", "M");
            addRegexToken("M", match1to2);
            addRegexToken("MM", match1to2, match2);
            addRegexToken("MMM", matchWord);
            addRegexToken("MMMM", matchWord);
            addParseToken(["M", "MM"], function(input, array) {
                array[MONTH] = toInt(input) - 1
            });
            addParseToken(["MMM", "MMMM"], function(input, array, config, token) {
                var month = config._locale.monthsParse(input, token, config._strict);
                if (month != null) {
                    array[MONTH] = month
                } else {
                    getParsingFlags(config).invalidMonth = input
                }
            });
            var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split("_");

            function localeMonths(m) {
                return this._months[m.month()]
            }
            var defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");

            function localeMonthsShort(m) {
                return this._monthsShort[m.month()]
            }

            function localeMonthsParse(monthName, format, strict) {
                var i, mom, regex;
                if (!this._monthsParse) {
                    this._monthsParse = [];
                    this._longMonthsParse = [];
                    this._shortMonthsParse = []
                }
                for (i = 0; i < 12; i++) {
                    mom = create_utc__createUTC([2e3, i]);
                    if (strict && !this._longMonthsParse[i]) {
                        this._longMonthsParse[i] = new RegExp("^" + this.months(mom, "").replace(".", "") + "$", "i");
                        this._shortMonthsParse[i] = new RegExp("^" + this.monthsShort(mom, "").replace(".", "") + "$", "i")
                    }
                    if (!strict && !this._monthsParse[i]) {
                        regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
                        this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i")
                    }
                    if (strict && format === "MMMM" && this._longMonthsParse[i].test(monthName)) {
                        return i
                    } else if (strict && format === "MMM" && this._shortMonthsParse[i].test(monthName)) {
                        return i
                    } else if (!strict && this._monthsParse[i].test(monthName)) {
                        return i
                    }
                }
            }

            function setMonth(mom, value) {
                var dayOfMonth;
                if (typeof value === "string") {
                    value = mom.localeData().monthsParse(value);
                    if (typeof value !== "number") {
                        return mom
                    }
                }
                dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
                mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth);
                return mom
            }

            function getSetMonth(value) {
                if (value != null) {
                    setMonth(this, value);
                    utils_hooks__hooks.updateOffset(this, true);
                    return this
                } else {
                    return get_set__get(this, "Month")
                }
            }

            function getDaysInMonth() {
                return daysInMonth(this.year(), this.month())
            }

            function checkOverflow(m) {
                var overflow;
                var a = m._a;
                if (a && getParsingFlags(m).overflow === -2) {
                    overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
                    if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                        overflow = DATE
                    }
                    getParsingFlags(m).overflow = overflow
                }
                return m
            }

            function warn(msg) {
                if (utils_hooks__hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
                    console.warn("Deprecation warning: " + msg)
                }
            }

            function deprecate(msg, fn) {
                var firstTime = true;
                return extend(function() {
                    if (firstTime) {
                        warn(msg + "\n" + (new Error).stack);
                        firstTime = false
                    }
                    return fn.apply(this, arguments)
                }, fn)
            }
            var deprecations = {};

            function deprecateSimple(name, msg) {
                if (!deprecations[name]) {
                    warn(msg);
                    deprecations[name] = true
                }
            }
            utils_hooks__hooks.suppressDeprecationWarnings = false;
            var from_string__isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
            var isoDates = [
                ["YYYYYY-MM-DD", /[+-]\d{6}-\d{2}-\d{2}/],
                ["YYYY-MM-DD", /\d{4}-\d{2}-\d{2}/],
                ["GGGG-[W]WW-E", /\d{4}-W\d{2}-\d/],
                ["GGGG-[W]WW", /\d{4}-W\d{2}/],
                ["YYYY-DDD", /\d{4}-\d{3}/]
            ];
            var isoTimes = [
                ["HH:mm:ss.SSSS", /(T| )\d\d:\d\d:\d\d\.\d+/],
                ["HH:mm:ss", /(T| )\d\d:\d\d:\d\d/],
                ["HH:mm", /(T| )\d\d:\d\d/],
                ["HH", /(T| )\d\d/]
            ];
            var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

            function configFromISO(config) {
                var i, l, string = config._i,
                    match = from_string__isoRegex.exec(string);
                if (match) {
                    getParsingFlags(config).iso = true;
                    for (i = 0, l = isoDates.length; i < l; i++) {
                        if (isoDates[i][1].exec(string)) {
                            config._f = isoDates[i][0];
                            break
                        }
                    }
                    for (i = 0, l = isoTimes.length; i < l; i++) {
                        if (isoTimes[i][1].exec(string)) {
                            config._f += (match[6] || " ") + isoTimes[i][0];
                            break
                        }
                    }
                    if (string.match(matchOffset)) {
                        config._f += "Z"
                    }
                    configFromStringAndFormat(config)
                } else {
                    config._isValid = false
                }
            }

            function configFromString(config) {
                var matched = aspNetJsonRegex.exec(config._i);
                if (matched !== null) {
                    config._d = new Date(+matched[1]);
                    return
                }
                configFromISO(config);
                if (config._isValid === false) {
                    delete config._isValid;
                    utils_hooks__hooks.createFromInputFallback(config)
                }
            }
            utils_hooks__hooks.createFromInputFallback = deprecate("moment construction falls back to js Date. This is " + "discouraged and will be removed in upcoming major " + "release. Please refer to " + "https://github.com/moment/moment/issues/1407 for more info.", function(config) {
                config._d = new Date(config._i + (config._useUTC ? " UTC" : ""))
            });

            function createDate(y, m, d, h, M, s, ms) {
                var date = new Date(y, m, d, h, M, s, ms);
                if (y < 1970) {
                    date.setFullYear(y)
                }
                return date
            }

            function createUTCDate(y) {
                var date = new Date(Date.UTC.apply(null, arguments));
                if (y < 1970) {
                    date.setUTCFullYear(y)
                }
                return date
            }
            addFormatToken(0, ["YY", 2], 0, function() {
                return this.year() % 100
            });
            addFormatToken(0, ["YYYY", 4], 0, "year");
            addFormatToken(0, ["YYYYY", 5], 0, "year");
            addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
            addUnitAlias("year", "y");
            addRegexToken("Y", matchSigned);
            addRegexToken("YY", match1to2, match2);
            addRegexToken("YYYY", match1to4, match4);
            addRegexToken("YYYYY", match1to6, match6);
            addRegexToken("YYYYYY", match1to6, match6);
            addParseToken(["YYYYY", "YYYYYY"], YEAR);
            addParseToken("YYYY", function(input, array) {
                array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input)
            });
            addParseToken("YY", function(input, array) {
                array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input)
            });

            function daysInYear(year) {
                return isLeapYear(year) ? 366 : 365
            }

            function isLeapYear(year) {
                return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0
            }
            utils_hooks__hooks.parseTwoDigitYear = function(input) {
                return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3)
            };
            var getSetYear = makeGetSet("FullYear", false);

            function getIsLeapYear() {
                return isLeapYear(this.year())
            }
            addFormatToken("w", ["ww", 2], "wo", "week");
            addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
            addUnitAlias("week", "w");
            addUnitAlias("isoWeek", "W");
            addRegexToken("w", match1to2);
            addRegexToken("ww", match1to2, match2);
            addRegexToken("W", match1to2);
            addRegexToken("WW", match1to2, match2);
            addWeekParseToken(["w", "ww", "W", "WW"], function(input, week, config, token) {
                week[token.substr(0, 1)] = toInt(input)
            });

            function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
                var end = firstDayOfWeekOfYear - firstDayOfWeek,
                    daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
                    adjustedMoment;
                if (daysToDayOfWeek > end) {
                    daysToDayOfWeek -= 7
                }
                if (daysToDayOfWeek < end - 7) {
                    daysToDayOfWeek += 7
                }
                adjustedMoment = local__createLocal(mom).add(daysToDayOfWeek, "d");
                return {
                    week: Math.ceil(adjustedMoment.dayOfYear() / 7),
                    year: adjustedMoment.year()
                }
            }

            function localeWeek(mom) {
                return weekOfYear(mom, this._week.dow, this._week.doy).week
            }
            var defaultLocaleWeek = {
                dow: 0,
                doy: 6
            };

            function localeFirstDayOfWeek() {
                return this._week.dow
            }

            function localeFirstDayOfYear() {
                return this._week.doy
            }

            function getSetWeek(input) {
                var week = this.localeData().week(this);
                return input == null ? week : this.add((input - week) * 7, "d")
            }

            function getSetISOWeek(input) {
                var week = weekOfYear(this, 1, 4).week;
                return input == null ? week : this.add((input - week) * 7, "d")
            }
            addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
            addUnitAlias("dayOfYear", "DDD");
            addRegexToken("DDD", match1to3);
            addRegexToken("DDDD", match3);
            addParseToken(["DDD", "DDDD"], function(input, array, config) {
                config._dayOfYear = toInt(input)
            });

            function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
                var week1Jan = 6 + firstDayOfWeek - firstDayOfWeekOfYear,
                    janX = createUTCDate(year, 0, 1 + week1Jan),
                    d = janX.getUTCDay(),
                    dayOfYear;
                if (d < firstDayOfWeek) {
                    d += 7
                }
                weekday = weekday != null ? 1 * weekday : firstDayOfWeek;
                dayOfYear = 1 + week1Jan + 7 * (week - 1) - d + weekday;
                return {
                    year: dayOfYear > 0 ? year : year - 1,
                    dayOfYear: dayOfYear > 0 ? dayOfYear : daysInYear(year - 1) + dayOfYear
                }
            }

            function getSetDayOfYear(input) {
                var dayOfYear = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1;
                return input == null ? dayOfYear : this.add(input - dayOfYear, "d")
            }

            function defaults(a, b, c) {
                if (a != null) {
                    return a
                }
                if (b != null) {
                    return b
                }
                return c
            }

            function currentDateArray(config) {
                var now = new Date;
                if (config._useUTC) {
                    return [now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()]
                }
                return [now.getFullYear(), now.getMonth(), now.getDate()]
            }

            function configFromArray(config) {
                var i, date, input = [],
                    currentDate, yearToUse;
                if (config._d) {
                    return
                }
                currentDate = currentDateArray(config);
                if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
                    dayOfYearFromWeekInfo(config)
                }
                if (config._dayOfYear) {
                    yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
                    if (config._dayOfYear > daysInYear(yearToUse)) {
                        getParsingFlags(config)._overflowDayOfYear = true
                    }
                    date = createUTCDate(yearToUse, 0, config._dayOfYear);
                    config._a[MONTH] = date.getUTCMonth();
                    config._a[DATE] = date.getUTCDate()
                }
                for (i = 0; i < 3 && config._a[i] == null; ++i) {
                    config._a[i] = input[i] = currentDate[i]
                }
                for (; i < 7; i++) {
                    config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i]
                }
                if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
                    config._nextDay = true;
                    config._a[HOUR] = 0
                }
                config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
                if (config._tzm != null) {
                    config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm)
                }
                if (config._nextDay) {
                    config._a[HOUR] = 24
                }
            }

            function dayOfYearFromWeekInfo(config) {
                var w, weekYear, week, weekday, dow, doy, temp;
                w = config._w;
                if (w.GG != null || w.W != null || w.E != null) {
                    dow = 1;
                    doy = 4;
                    weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
                    week = defaults(w.W, 1);
                    weekday = defaults(w.E, 1)
                } else {
                    dow = config._locale._week.dow;
                    doy = config._locale._week.doy;
                    weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
                    week = defaults(w.w, 1);
                    if (w.d != null) {
                        weekday = w.d;
                        if (weekday < dow) {
                            ++week
                        }
                    } else if (w.e != null) {
                        weekday = w.e + dow
                    } else {
                        weekday = dow
                    }
                }
                temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);
                config._a[YEAR] = temp.year;
                config._dayOfYear = temp.dayOfYear
            }
            utils_hooks__hooks.ISO_8601 = function() {};

            function configFromStringAndFormat(config) {
                if (config._f === utils_hooks__hooks.ISO_8601) {
                    configFromISO(config);
                    return
                }
                config._a = [];
                getParsingFlags(config).empty = true;
                var string = "" + config._i,
                    i, parsedInput, tokens, token, skipped, stringLength = string.length,
                    totalParsedInputLength = 0;
                tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
                for (i = 0; i < tokens.length; i++) {
                    token = tokens[i];
                    parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
                    if (parsedInput) {
                        skipped = string.substr(0, string.indexOf(parsedInput));
                        if (skipped.length > 0) {
                            getParsingFlags(config).unusedInput.push(skipped)
                        }
                        string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                        totalParsedInputLength += parsedInput.length
                    }
                    if (formatTokenFunctions[token]) {
                        if (parsedInput) {
                            getParsingFlags(config).empty = false
                        } else {
                            getParsingFlags(config).unusedTokens.push(token)
                        }
                        addTimeToArrayFromToken(token, parsedInput, config)
                    } else if (config._strict && !parsedInput) {
                        getParsingFlags(config).unusedTokens.push(token)
                    }
                }
                getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
                if (string.length > 0) {
                    getParsingFlags(config).unusedInput.push(string)
                }
                if (getParsingFlags(config).bigHour === true && config._a[HOUR] <= 12 && config._a[HOUR] > 0) {
                    getParsingFlags(config).bigHour = undefined
                }
                config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
                configFromArray(config);
                checkOverflow(config)
            }

            function meridiemFixWrap(locale, hour, meridiem) {
                var isPm;
                if (meridiem == null) {
                    return hour
                }
                if (locale.meridiemHour != null) {
                    return locale.meridiemHour(hour, meridiem)
                } else if (locale.isPM != null) {
                    isPm = locale.isPM(meridiem);
                    if (isPm && hour < 12) {
                        hour += 12
                    }
                    if (!isPm && hour === 12) {
                        hour = 0
                    }
                    return hour
                } else {
                    return hour
                }
            }

            function configFromStringAndArray(config) {
                var tempConfig, bestMoment, scoreToBeat, i, currentScore;
                if (config._f.length === 0) {
                    getParsingFlags(config).invalidFormat = true;
                    config._d = new Date(NaN);
                    return
                }
                for (i = 0; i < config._f.length; i++) {
                    currentScore = 0;
                    tempConfig = copyConfig({}, config);
                    if (config._useUTC != null) {
                        tempConfig._useUTC = config._useUTC
                    }
                    tempConfig._f = config._f[i];
                    configFromStringAndFormat(tempConfig);
                    if (!valid__isValid(tempConfig)) {
                        continue
                    }
                    currentScore += getParsingFlags(tempConfig).charsLeftOver;
                    currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
                    getParsingFlags(tempConfig).score = currentScore;
                    if (scoreToBeat == null || currentScore < scoreToBeat) {
                        scoreToBeat = currentScore;
                        bestMoment = tempConfig
                    }
                }
                extend(config, bestMoment || tempConfig)
            }

            function configFromObject(config) {
                if (config._d) {
                    return
                }
                var i = normalizeObjectUnits(config._i);
                config._a = [i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond];
                configFromArray(config)
            }

            function createFromConfig(config) {
                var res = new Moment(checkOverflow(prepareConfig(config)));
                if (res._nextDay) {
                    res.add(1, "d");
                    res._nextDay = undefined
                }
                return res
            }

            function prepareConfig(config) {
                var input = config._i,
                    format = config._f;
                config._locale = config._locale || locale_locales__getLocale(config._l);
                if (input === null || format === undefined && input === "") {
                    return valid__createInvalid({
                        nullInput: true
                    })
                }
                if (typeof input === "string") {
                    config._i = input = config._locale.preparse(input)
                }
                if (isMoment(input)) {
                    return new Moment(checkOverflow(input))
                } else if (isArray(format)) {
                    configFromStringAndArray(config)
                } else if (format) {
                    configFromStringAndFormat(config)
                } else if (isDate(input)) {
                    config._d = input
                } else {
                    configFromInput(config)
                }
                return config
            }

            function configFromInput(config) {
                var input = config._i;
                if (input === undefined) {
                    config._d = new Date
                } else if (isDate(input)) {
                    config._d = new Date(+input)
                } else if (typeof input === "string") {
                    configFromString(config)
                } else if (isArray(input)) {
                    config._a = map(input.slice(0), function(obj) {
                        return parseInt(obj, 10)
                    });
                    configFromArray(config)
                } else if (typeof input === "object") {
                    configFromObject(config)
                } else if (typeof input === "number") {
                    config._d = new Date(input)
                } else {
                    utils_hooks__hooks.createFromInputFallback(config)
                }
            }

            function createLocalOrUTC(input, format, locale, strict, isUTC) {
                var c = {};
                if (typeof locale === "boolean") {
                    strict = locale;
                    locale = undefined
                }
                c._isAMomentObject = true;
                c._useUTC = c._isUTC = isUTC;
                c._l = locale;
                c._i = input;
                c._f = format;
                c._strict = strict;
                return createFromConfig(c)
            }

            function local__createLocal(input, format, locale, strict) {
                return createLocalOrUTC(input, format, locale, strict, false)
            }
            var prototypeMin = deprecate("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548", function() {
                var other = local__createLocal.apply(null, arguments);
                return other < this ? this : other
            });
            var prototypeMax = deprecate("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548", function() {
                var other = local__createLocal.apply(null, arguments);
                return other > this ? this : other
            });

            function pickBy(fn, moments) {
                var res, i;
                if (moments.length === 1 && isArray(moments[0])) {
                    moments = moments[0]
                }
                if (!moments.length) {
                    return local__createLocal()
                }
                res = moments[0];
                for (i = 1; i < moments.length; ++i) {
                    if (!moments[i].isValid() || moments[i][fn](res)) {
                        res = moments[i]
                    }
                }
                return res
            }

            function min() {
                var args = [].slice.call(arguments, 0);
                return pickBy("isBefore", args)
            }

            function max() {
                var args = [].slice.call(arguments, 0);
                return pickBy("isAfter", args)
            }

            function Duration(duration) {
                var normalizedInput = normalizeObjectUnits(duration),
                    years = normalizedInput.year || 0,
                    quarters = normalizedInput.quarter || 0,
                    months = normalizedInput.month || 0,
                    weeks = normalizedInput.week || 0,
                    days = normalizedInput.day || 0,
                    hours = normalizedInput.hour || 0,
                    minutes = normalizedInput.minute || 0,
                    seconds = normalizedInput.second || 0,
                    milliseconds = normalizedInput.millisecond || 0;
                this._milliseconds = +milliseconds + seconds * 1e3 + minutes * 6e4 + hours * 36e5;
                this._days = +days + weeks * 7;
                this._months = +months + quarters * 3 + years * 12;
                this._data = {};
                this._locale = locale_locales__getLocale();
                this._bubble()
            }

            function isDuration(obj) {
                return obj instanceof Duration
            }

            function offset(token, separator) {
                addFormatToken(token, 0, 0, function() {
                    var offset = this.utcOffset();
                    var sign = "+";
                    if (offset < 0) {
                        offset = -offset;
                        sign = "-"
                    }
                    return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2)
                })
            }
            offset("Z", ":");
            offset("ZZ", "");
            addRegexToken("Z", matchOffset);
            addRegexToken("ZZ", matchOffset);
            addParseToken(["Z", "ZZ"], function(input, array, config) {
                config._useUTC = true;
                config._tzm = offsetFromString(input)
            });
            var chunkOffset = /([\+\-]|\d\d)/gi;

            function offsetFromString(string) {
                var matches = (string || "").match(matchOffset) || [];
                var chunk = matches[matches.length - 1] || [];
                var parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
                var minutes = +(parts[1] * 60) + toInt(parts[2]);
                return parts[0] === "+" ? minutes : -minutes
            }

            function cloneWithOffset(input, model) {
                var res, diff;
                if (model._isUTC) {
                    res = model.clone();
                    diff = (isMoment(input) || isDate(input) ? +input : +local__createLocal(input)) - +res;
                    res._d.setTime(+res._d + diff);
                    utils_hooks__hooks.updateOffset(res, false);
                    return res
                } else {
                    return local__createLocal(input).local()
                }
            }

            function getDateOffset(m) {
                return -Math.round(m._d.getTimezoneOffset() / 15) * 15
            }
            utils_hooks__hooks.updateOffset = function() {};

            function getSetOffset(input, keepLocalTime) {
                var offset = this._offset || 0,
                    localAdjust;
                if (input != null) {
                    if (typeof input === "string") {
                        input = offsetFromString(input)
                    }
                    if (Math.abs(input) < 16) {
                        input = input * 60
                    }
                    if (!this._isUTC && keepLocalTime) {
                        localAdjust = getDateOffset(this)
                    }
                    this._offset = input;
                    this._isUTC = true;
                    if (localAdjust != null) {
                        this.add(localAdjust, "m")
                    }
                    if (offset !== input) {
                        if (!keepLocalTime || this._changeInProgress) {
                            add_subtract__addSubtract(this, create__createDuration(input - offset, "m"), 1, false)
                        } else if (!this._changeInProgress) {
                            this._changeInProgress = true;
                            utils_hooks__hooks.updateOffset(this, true);
                            this._changeInProgress = null
                        }
                    }
                    return this
                } else {
                    return this._isUTC ? offset : getDateOffset(this)
                }
            }

            function getSetZone(input, keepLocalTime) {
                if (input != null) {
                    if (typeof input !== "string") {
                        input = -input
                    }
                    this.utcOffset(input, keepLocalTime);
                    return this
                } else {
                    return -this.utcOffset()
                }
            }

            function setOffsetToUTC(keepLocalTime) {
                return this.utcOffset(0, keepLocalTime)
            }

            function setOffsetToLocal(keepLocalTime) {
                if (this._isUTC) {
                    this.utcOffset(0, keepLocalTime);
                    this._isUTC = false;
                    if (keepLocalTime) {
                        this.subtract(getDateOffset(this), "m")
                    }
                }
                return this
            }

            function setOffsetToParsedOffset() {
                if (this._tzm) {
                    this.utcOffset(this._tzm)
                } else if (typeof this._i === "string") {
                    this.utcOffset(offsetFromString(this._i))
                }
                return this
            }

            function hasAlignedHourOffset(input) {
                input = input ? local__createLocal(input).utcOffset() : 0;
                return (this.utcOffset() - input) % 60 === 0
            }

            function isDaylightSavingTime() {
                return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset()
            }

            function isDaylightSavingTimeShifted() {
                if (typeof this._isDSTShifted !== "undefined") {
                    return this._isDSTShifted
                }
                var c = {};
                copyConfig(c, this);
                c = prepareConfig(c);
                if (c._a) {
                    var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
                    this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0
                } else {
                    this._isDSTShifted = false
                }
                return this._isDSTShifted
            }

            function isLocal() {
                return !this._isUTC
            }

            function isUtcOffset() {
                return this._isUTC
            }

            function isUtc() {
                return this._isUTC && this._offset === 0
            }
            var aspNetRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/;
            var create__isoRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;

            function create__createDuration(input, key) {
                var duration = input,
                    match = null,
                    sign, ret, diffRes;
                if (isDuration(input)) {
                    duration = {
                        ms: input._milliseconds,
                        d: input._days,
                        M: input._months
                    }
                } else if (typeof input === "number") {
                    duration = {};
                    if (key) {
                        duration[key] = input
                    } else {
                        duration.milliseconds = input
                    }
                } else if (!!(match = aspNetRegex.exec(input))) {
                    sign = match[1] === "-" ? -1 : 1;
                    duration = {
                        y: 0,
                        d: toInt(match[DATE]) * sign,
                        h: toInt(match[HOUR]) * sign,
                        m: toInt(match[MINUTE]) * sign,
                        s: toInt(match[SECOND]) * sign,
                        ms: toInt(match[MILLISECOND]) * sign
                    }
                } else if (!!(match = create__isoRegex.exec(input))) {
                    sign = match[1] === "-" ? -1 : 1;
                    duration = {
                        y: parseIso(match[2], sign),
                        M: parseIso(match[3], sign),
                        d: parseIso(match[4], sign),
                        h: parseIso(match[5], sign),
                        m: parseIso(match[6], sign),
                        s: parseIso(match[7], sign),
                        w: parseIso(match[8], sign)
                    }
                } else if (duration == null) {
                    duration = {}
                } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
                    diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));
                    duration = {};
                    duration.ms = diffRes.milliseconds;
                    duration.M = diffRes.months
                }
                ret = new Duration(duration);
                if (isDuration(input) && hasOwnProp(input, "_locale")) {
                    ret._locale = input._locale
                }
                return ret
            }
            create__createDuration.fn = Duration.prototype;

            function parseIso(inp, sign) {
                var res = inp && parseFloat(inp.replace(",", "."));
                return (isNaN(res) ? 0 : res) * sign
            }

            function positiveMomentsDifference(base, other) {
                var res = {
                    milliseconds: 0,
                    months: 0
                };
                res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
                if (base.clone().add(res.months, "M").isAfter(other)) {
                    --res.months
                }
                res.milliseconds = +other - +base.clone().add(res.months, "M");
                return res
            }

            function momentsDifference(base, other) {
                var res;
                other = cloneWithOffset(other, base);
                if (base.isBefore(other)) {
                    res = positiveMomentsDifference(base, other)
                } else {
                    res = positiveMomentsDifference(other, base);
                    res.milliseconds = -res.milliseconds;
                    res.months = -res.months
                }
                return res
            }

            function createAdder(direction, name) {
                return function(val, period) {
                    var dur, tmp;
                    if (period !== null && !isNaN(+period)) {
                        deprecateSimple(name, "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period).");
                        tmp = val;
                        val = period;
                        period = tmp
                    }
                    val = typeof val === "string" ? +val : val;
                    dur = create__createDuration(val, period);
                    add_subtract__addSubtract(this, dur, direction);
                    return this
                }
            }

            function add_subtract__addSubtract(mom, duration, isAdding, updateOffset) {
                var milliseconds = duration._milliseconds,
                    days = duration._days,
                    months = duration._months;
                updateOffset = updateOffset == null ? true : updateOffset;
                if (milliseconds) {
                    mom._d.setTime(+mom._d + milliseconds * isAdding)
                }
                if (days) {
                    get_set__set(mom, "Date", get_set__get(mom, "Date") + days * isAdding)
                }
                if (months) {
                    setMonth(mom, get_set__get(mom, "Month") + months * isAdding)
                }
                if (updateOffset) {
                    utils_hooks__hooks.updateOffset(mom, days || months)
                }
            }
            var add_subtract__add = createAdder(1, "add");
            var add_subtract__subtract = createAdder(-1, "subtract");

            function moment_calendar__calendar(time, formats) {
                var now = time || local__createLocal(),
                    sod = cloneWithOffset(now, this).startOf("day"),
                    diff = this.diff(sod, "days", true),
                    format = diff < -6 ? "sameElse" : diff < -1 ? "lastWeek" : diff < 0 ? "lastDay" : diff < 1 ? "sameDay" : diff < 2 ? "nextDay" : diff < 7 ? "nextWeek" : "sameElse";
                return this.format(formats && formats[format] || this.localeData().calendar(format, this, local__createLocal(now)))
            }

            function clone() {
                return new Moment(this)
            }

            function isAfter(input, units) {
                var inputMs;
                units = normalizeUnits(typeof units !== "undefined" ? units : "millisecond");
                if (units === "millisecond") {
                    input = isMoment(input) ? input : local__createLocal(input);
                    return +this > +input
                } else {
                    inputMs = isMoment(input) ? +input : +local__createLocal(input);
                    return inputMs < +this.clone().startOf(units)
                }
            }

            function isBefore(input, units) {
                var inputMs;
                units = normalizeUnits(typeof units !== "undefined" ? units : "millisecond");
                if (units === "millisecond") {
                    input = isMoment(input) ? input : local__createLocal(input);
                    return +this < +input
                } else {
                    inputMs = isMoment(input) ? +input : +local__createLocal(input);
                    return +this.clone().endOf(units) < inputMs
                }
            }

            function isBetween(from, to, units) {
                return this.isAfter(from, units) && this.isBefore(to, units)
            }

            function isSame(input, units) {
                var inputMs;
                units = normalizeUnits(units || "millisecond");
                if (units === "millisecond") {
                    input = isMoment(input) ? input : local__createLocal(input);
                    return +this === +input
                } else {
                    inputMs = +local__createLocal(input);
                    return +this.clone().startOf(units) <= inputMs && inputMs <= +this.clone().endOf(units)
                }
            }

            function diff(input, units, asFloat) {
                var that = cloneWithOffset(input, this),
                    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4,
                    delta, output;
                units = normalizeUnits(units);
                if (units === "year" || units === "month" || units === "quarter") {
                    output = monthDiff(this, that);
                    if (units === "quarter") {
                        output = output / 3
                    } else if (units === "year") {
                        output = output / 12
                    }
                } else {
                    delta = this - that;
                    output = units === "second" ? delta / 1e3 : units === "minute" ? delta / 6e4 : units === "hour" ? delta / 36e5 : units === "day" ? (delta - zoneDelta) / 864e5 : units === "week" ? (delta - zoneDelta) / 6048e5 : delta
                }
                return asFloat ? output : absFloor(output)
            }

            function monthDiff(a, b) {
                var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
                    anchor = a.clone().add(wholeMonthDiff, "months"),
                    anchor2, adjust;
                if (b - anchor < 0) {
                    anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
                    adjust = (b - anchor) / (anchor - anchor2)
                } else {
                    anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
                    adjust = (b - anchor) / (anchor2 - anchor)
                }
                return -(wholeMonthDiff + adjust)
            }
            utils_hooks__hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";

            function toString() {
                return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")
            }

            function moment_format__toISOString() {
                var m = this.clone().utc();
                if (0 < m.year() && m.year() <= 9999) {
                    if ("function" === typeof Date.prototype.toISOString) {
                        return this.toDate().toISOString()
                    } else {
                        return formatMoment(m, "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]")
                    }
                } else {
                    return formatMoment(m, "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")
                }
            }

            function format(inputString) {
                var output = formatMoment(this, inputString || utils_hooks__hooks.defaultFormat);
                return this.localeData().postformat(output)
            }

            function from(time, withoutSuffix) {
                if (!this.isValid()) {
                    return this.localeData().invalidDate()
                }
                return create__createDuration({
                    to: this,
                    from: time
                }).locale(this.locale()).humanize(!withoutSuffix)
            }

            function fromNow(withoutSuffix) {
                return this.from(local__createLocal(), withoutSuffix)
            }

            function to(time, withoutSuffix) {
                if (!this.isValid()) {
                    return this.localeData().invalidDate()
                }
                return create__createDuration({
                    from: this,
                    to: time
                }).locale(this.locale()).humanize(!withoutSuffix)
            }

            function toNow(withoutSuffix) {
                return this.to(local__createLocal(), withoutSuffix)
            }

            function locale(key) {
                var newLocaleData;
                if (key === undefined) {
                    return this._locale._abbr
                } else {
                    newLocaleData = locale_locales__getLocale(key);
                    if (newLocaleData != null) {
                        this._locale = newLocaleData
                    }
                    return this
                }
            }
            var lang = deprecate("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function(key) {
                if (key === undefined) {
                    return this.localeData()
                } else {
                    return this.locale(key)
                }
            });

            function localeData() {
                return this._locale
            }

            function startOf(units) {
                units = normalizeUnits(units);
                switch (units) {
                    case "year":
                        this.month(0);
                    case "quarter":
                    case "month":
                        this.date(1);
                    case "week":
                    case "isoWeek":
                    case "day":
                        this.hours(0);
                    case "hour":
                        this.minutes(0);
                    case "minute":
                        this.seconds(0);
                    case "second":
                        this.milliseconds(0)
                }
                if (units === "week") {
                    this.weekday(0)
                }
                if (units === "isoWeek") {
                    this.isoWeekday(1)
                }
                if (units === "quarter") {
                    this.month(Math.floor(this.month() / 3) * 3)
                }
                return this
            }

            function endOf(units) {
                units = normalizeUnits(units);
                if (units === undefined || units === "millisecond") {
                    return this
                }
                return this.startOf(units).add(1, units === "isoWeek" ? "week" : units).subtract(1, "ms")
            }

            function to_type__valueOf() {
                return +this._d - (this._offset || 0) * 6e4
            }

            function unix() {
                return Math.floor(+this / 1e3)
            }

            function toDate() {
                return this._offset ? new Date(+this) : this._d
            }

            function toArray() {
                var m = this;
                return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()]
            }

            function toObject() {
                var m = this;
                return {
                    years: m.year(),
                    months: m.month(),
                    date: m.date(),
                    hours: m.hours(),
                    minutes: m.minutes(),
                    seconds: m.seconds(),
                    milliseconds: m.milliseconds()
                }
            }

            function moment_valid__isValid() {
                return valid__isValid(this)
            }

            function parsingFlags() {
                return extend({}, getParsingFlags(this))
            }

            function invalidAt() {
                return getParsingFlags(this).overflow
            }
            addFormatToken(0, ["gg", 2], 0, function() {
                return this.weekYear() % 100
            });
            addFormatToken(0, ["GG", 2], 0, function() {
                return this.isoWeekYear() % 100
            });

            function addWeekYearFormatToken(token, getter) {
                addFormatToken(0, [token, token.length], 0, getter)
            }
            addWeekYearFormatToken("gggg", "weekYear");
            addWeekYearFormatToken("ggggg", "weekYear");
            addWeekYearFormatToken("GGGG", "isoWeekYear");
            addWeekYearFormatToken("GGGGG", "isoWeekYear");
            addUnitAlias("weekYear", "gg");
            addUnitAlias("isoWeekYear", "GG");
            addRegexToken("G", matchSigned);
            addRegexToken("g", matchSigned);
            addRegexToken("GG", match1to2, match2);
            addRegexToken("gg", match1to2, match2);
            addRegexToken("GGGG", match1to4, match4);
            addRegexToken("gggg", match1to4, match4);
            addRegexToken("GGGGG", match1to6, match6);
            addRegexToken("ggggg", match1to6, match6);
            addWeekParseToken(["gggg", "ggggg", "GGGG", "GGGGG"], function(input, week, config, token) {
                week[token.substr(0, 2)] = toInt(input)
            });
            addWeekParseToken(["gg", "GG"], function(input, week, config, token) {
                week[token] = utils_hooks__hooks.parseTwoDigitYear(input)
            });

            function weeksInYear(year, dow, doy) {
                return weekOfYear(local__createLocal([year, 11, 31 + dow - doy]), dow, doy).week
            }

            function getSetWeekYear(input) {
                var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
                return input == null ? year : this.add(input - year, "y")
            }

            function getSetISOWeekYear(input) {
                var year = weekOfYear(this, 1, 4).year;
                return input == null ? year : this.add(input - year, "y")
            }

            function getISOWeeksInYear() {
                return weeksInYear(this.year(), 1, 4)
            }

            function getWeeksInYear() {
                var weekInfo = this.localeData()._week;
                return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy)
            }
            addFormatToken("Q", 0, 0, "quarter");
            addUnitAlias("quarter", "Q");
            addRegexToken("Q", match1);
            addParseToken("Q", function(input, array) {
                array[MONTH] = (toInt(input) - 1) * 3
            });

            function getSetQuarter(input) {
                return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3)
            }
            addFormatToken("D", ["DD", 2], "Do", "date");
            addUnitAlias("date", "D");
            addRegexToken("D", match1to2);
            addRegexToken("DD", match1to2, match2);
            addRegexToken("Do", function(isStrict, locale) {
                return isStrict ? locale._ordinalParse : locale._ordinalParseLenient
            });
            addParseToken(["D", "DD"], DATE);
            addParseToken("Do", function(input, array) {
                array[DATE] = toInt(input.match(match1to2)[0], 10)
            });
            var getSetDayOfMonth = makeGetSet("Date", true);
            addFormatToken("d", 0, "do", "day");
            addFormatToken("dd", 0, 0, function(format) {
                return this.localeData().weekdaysMin(this, format)
            });
            addFormatToken("ddd", 0, 0, function(format) {
                return this.localeData().weekdaysShort(this, format)
            });
            addFormatToken("dddd", 0, 0, function(format) {
                return this.localeData().weekdays(this, format)
            });
            addFormatToken("e", 0, 0, "weekday");
            addFormatToken("E", 0, 0, "isoWeekday");
            addUnitAlias("day", "d");
            addUnitAlias("weekday", "e");
            addUnitAlias("isoWeekday", "E");
            addRegexToken("d", match1to2);
            addRegexToken("e", match1to2);
            addRegexToken("E", match1to2);
            addRegexToken("dd", matchWord);
            addRegexToken("ddd", matchWord);
            addRegexToken("dddd", matchWord);
            addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config) {
                var weekday = config._locale.weekdaysParse(input);
                if (weekday != null) {
                    week.d = weekday
                } else {
                    getParsingFlags(config).invalidWeekday = input
                }
            });
            addWeekParseToken(["d", "e", "E"], function(input, week, config, token) {
                week[token] = toInt(input)
            });

            function parseWeekday(input, locale) {
                if (typeof input !== "string") {
                    return input
                }
                if (!isNaN(input)) {
                    return parseInt(input, 10)
                }
                input = locale.weekdaysParse(input);
                if (typeof input === "number") {
                    return input
                }
                return null
            }
            var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_");

            function localeWeekdays(m) {
                return this._weekdays[m.day()]
            }
            var defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_");

            function localeWeekdaysShort(m) {
                return this._weekdaysShort[m.day()]
            }
            var defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_");

            function localeWeekdaysMin(m) {
                return this._weekdaysMin[m.day()]
            }

            function localeWeekdaysParse(weekdayName) {
                var i, mom, regex;
                this._weekdaysParse = this._weekdaysParse || [];
                for (i = 0; i < 7; i++) {
                    if (!this._weekdaysParse[i]) {
                        mom = local__createLocal([2e3, 1]).day(i);
                        regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
                        this._weekdaysParse[i] = new RegExp(regex.replace(".", ""), "i")
                    }
                    if (this._weekdaysParse[i].test(weekdayName)) {
                        return i
                    }
                }
            }

            function getSetDayOfWeek(input) {
                var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
                if (input != null) {
                    input = parseWeekday(input, this.localeData());
                    return this.add(input - day, "d")
                } else {
                    return day
                }
            }

            function getSetLocaleDayOfWeek(input) {
                var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
                return input == null ? weekday : this.add(input - weekday, "d")
            }

            function getSetISODayOfWeek(input) {
                return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7)
            }
            addFormatToken("H", ["HH", 2], 0, "hour");
            addFormatToken("h", ["hh", 2], 0, function() {
                return this.hours() % 12 || 12
            });

            function meridiem(token, lowercase) {
                addFormatToken(token, 0, 0, function() {
                    return this.localeData().meridiem(this.hours(), this.minutes(), lowercase)
                })
            }
            meridiem("a", true);
            meridiem("A", false);
            addUnitAlias("hour", "h");

            function matchMeridiem(isStrict, locale) {
                return locale._meridiemParse
            }
            addRegexToken("a", matchMeridiem);
            addRegexToken("A", matchMeridiem);
            addRegexToken("H", match1to2);
            addRegexToken("h", match1to2);
            addRegexToken("HH", match1to2, match2);
            addRegexToken("hh", match1to2, match2);
            addParseToken(["H", "HH"], HOUR);
            addParseToken(["a", "A"], function(input, array, config) {
                config._isPm = config._locale.isPM(input);
                config._meridiem = input
            });
            addParseToken(["h", "hh"], function(input, array, config) {
                array[HOUR] = toInt(input);
                getParsingFlags(config).bigHour = true
            });

            function localeIsPM(input) {
                return (input + "").toLowerCase().charAt(0) === "p"
            }
            var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;

            function localeMeridiem(hours, minutes, isLower) {
                if (hours > 11) {
                    return isLower ? "pm" : "PM"
                } else {
                    return isLower ? "am" : "AM"
                }
            }
            var getSetHour = makeGetSet("Hours", true);
            addFormatToken("m", ["mm", 2], 0, "minute");
            addUnitAlias("minute", "m");
            addRegexToken("m", match1to2);
            addRegexToken("mm", match1to2, match2);
            addParseToken(["m", "mm"], MINUTE);
            var getSetMinute = makeGetSet("Minutes", false);
            addFormatToken("s", ["ss", 2], 0, "second");
            addUnitAlias("second", "s");
            addRegexToken("s", match1to2);
            addRegexToken("ss", match1to2, match2);
            addParseToken(["s", "ss"], SECOND);
            var getSetSecond = makeGetSet("Seconds", false);
            addFormatToken("S", 0, 0, function() {
                return ~~(this.millisecond() / 100)
            });
            addFormatToken(0, ["SS", 2], 0, function() {
                return ~~(this.millisecond() / 10)
            });
            addFormatToken(0, ["SSS", 3], 0, "millisecond");
            addFormatToken(0, ["SSSS", 4], 0, function() {
                return this.millisecond() * 10
            });
            addFormatToken(0, ["SSSSS", 5], 0, function() {
                return this.millisecond() * 100
            });
            addFormatToken(0, ["SSSSSS", 6], 0, function() {
                return this.millisecond() * 1e3
            });
            addFormatToken(0, ["SSSSSSS", 7], 0, function() {
                return this.millisecond() * 1e4
            });
            addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
                return this.millisecond() * 1e5
            });
            addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
                return this.millisecond() * 1e6
            });
            addUnitAlias("millisecond", "ms");
            addRegexToken("S", match1to3, match1);
            addRegexToken("SS", match1to3, match2);
            addRegexToken("SSS", match1to3, match3);
            var token;
            for (token = "SSSS"; token.length <= 9; token += "S") {
                addRegexToken(token, matchUnsigned)
            }

            function parseMs(input, array) {
                array[MILLISECOND] = toInt(("0." + input) * 1e3)
            }
            for (token = "S"; token.length <= 9; token += "S") {
                addParseToken(token, parseMs)
            }
            var getSetMillisecond = makeGetSet("Milliseconds", false);
            addFormatToken("z", 0, 0, "zoneAbbr");
            addFormatToken("zz", 0, 0, "zoneName");

            function getZoneAbbr() {
                return this._isUTC ? "UTC" : ""
            }

            function getZoneName() {
                return this._isUTC ? "Coordinated Universal Time" : ""
            }
            var momentPrototype__proto = Moment.prototype;
            momentPrototype__proto.add = add_subtract__add;
            momentPrototype__proto.calendar = moment_calendar__calendar;
            momentPrototype__proto.clone = clone;
            momentPrototype__proto.diff = diff;
            momentPrototype__proto.endOf = endOf;
            momentPrototype__proto.format = format;
            momentPrototype__proto.from = from;
            momentPrototype__proto.fromNow = fromNow;
            momentPrototype__proto.to = to;
            momentPrototype__proto.toNow = toNow;
            momentPrototype__proto.get = getSet;
            momentPrototype__proto.invalidAt = invalidAt;
            momentPrototype__proto.isAfter = isAfter;
            momentPrototype__proto.isBefore = isBefore;
            momentPrototype__proto.isBetween = isBetween;
            momentPrototype__proto.isSame = isSame;
            momentPrototype__proto.isValid = moment_valid__isValid;
            momentPrototype__proto.lang = lang;
            momentPrototype__proto.locale = locale;
            momentPrototype__proto.localeData = localeData;
            momentPrototype__proto.max = prototypeMax;
            momentPrototype__proto.min = prototypeMin;
            momentPrototype__proto.parsingFlags = parsingFlags;
            momentPrototype__proto.set = getSet;
            momentPrototype__proto.startOf = startOf;
            momentPrototype__proto.subtract = add_subtract__subtract;
            momentPrototype__proto.toArray = toArray;
            momentPrototype__proto.toObject = toObject;
            momentPrototype__proto.toDate = toDate;
            momentPrototype__proto.toISOString = moment_format__toISOString;
            momentPrototype__proto.toJSON = moment_format__toISOString;
            momentPrototype__proto.toString = toString;
            momentPrototype__proto.unix = unix;
            momentPrototype__proto.valueOf = to_type__valueOf;
            momentPrototype__proto.year = getSetYear;
            momentPrototype__proto.isLeapYear = getIsLeapYear;
            momentPrototype__proto.weekYear = getSetWeekYear;
            momentPrototype__proto.isoWeekYear = getSetISOWeekYear;
            momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;
            momentPrototype__proto.month = getSetMonth;
            momentPrototype__proto.daysInMonth = getDaysInMonth;
            momentPrototype__proto.week = momentPrototype__proto.weeks = getSetWeek;
            momentPrototype__proto.isoWeek = momentPrototype__proto.isoWeeks = getSetISOWeek;
            momentPrototype__proto.weeksInYear = getWeeksInYear;
            momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;
            momentPrototype__proto.date = getSetDayOfMonth;
            momentPrototype__proto.day = momentPrototype__proto.days = getSetDayOfWeek;
            momentPrototype__proto.weekday = getSetLocaleDayOfWeek;
            momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
            momentPrototype__proto.dayOfYear = getSetDayOfYear;
            momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;
            momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;
            momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;
            momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;
            momentPrototype__proto.utcOffset = getSetOffset;
            momentPrototype__proto.utc = setOffsetToUTC;
            momentPrototype__proto.local = setOffsetToLocal;
            momentPrototype__proto.parseZone = setOffsetToParsedOffset;
            momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
            momentPrototype__proto.isDST = isDaylightSavingTime;
            momentPrototype__proto.isDSTShifted = isDaylightSavingTimeShifted;
            momentPrototype__proto.isLocal = isLocal;
            momentPrototype__proto.isUtcOffset = isUtcOffset;
            momentPrototype__proto.isUtc = isUtc;
            momentPrototype__proto.isUTC = isUtc;
            momentPrototype__proto.zoneAbbr = getZoneAbbr;
            momentPrototype__proto.zoneName = getZoneName;
            momentPrototype__proto.dates = deprecate("dates accessor is deprecated. Use date instead.", getSetDayOfMonth);
            momentPrototype__proto.months = deprecate("months accessor is deprecated. Use month instead", getSetMonth);
            momentPrototype__proto.years = deprecate("years accessor is deprecated. Use year instead", getSetYear);
            momentPrototype__proto.zone = deprecate("moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779", getSetZone);
            var momentPrototype = momentPrototype__proto;

            function moment__createUnix(input) {
                return local__createLocal(input * 1e3)
            }

            function moment__createInZone() {
                return local__createLocal.apply(null, arguments).parseZone()
            }
            var defaultCalendar = {
                sameDay: "[Today at] LT",
                nextDay: "[Tomorrow at] LT",
                nextWeek: "dddd [at] LT",
                lastDay: "[Yesterday at] LT",
                lastWeek: "[Last] dddd [at] LT",
                sameElse: "L"
            };

            function locale_calendar__calendar(key, mom, now) {
                var output = this._calendar[key];
                return typeof output === "function" ? output.call(mom, now) : output
            }
            var defaultLongDateFormat = {
                LTS: "h:mm:ss A",
                LT: "h:mm A",
                L: "MM/DD/YYYY",
                LL: "MMMM D, YYYY",
                LLL: "MMMM D, YYYY h:mm A",
                LLLL: "dddd, MMMM D, YYYY h:mm A"
            };

            function longDateFormat(key) {
                var format = this._longDateFormat[key],
                    formatUpper = this._longDateFormat[key.toUpperCase()];
                if (format || !formatUpper) {
                    return format
                }
                this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function(val) {
                    return val.slice(1)
                });
                return this._longDateFormat[key]
            }
            var defaultInvalidDate = "Invalid date";

            function invalidDate() {
                return this._invalidDate
            }
            var defaultOrdinal = "%d";
            var defaultOrdinalParse = /\d{1,2}/;

            function ordinal(number) {
                return this._ordinal.replace("%d", number)
            }

            function preParsePostFormat(string) {
                return string
            }
            var defaultRelativeTime = {
                future: "in %s",
                past: "%s ago",
                s: "a few seconds",
                m: "a minute",
                mm: "%d minutes",
                h: "an hour",
                hh: "%d hours",
                d: "a day",
                dd: "%d days",
                M: "a month",
                MM: "%d months",
                y: "a year",
                yy: "%d years"
            };

            function relative__relativeTime(number, withoutSuffix, string, isFuture) {
                var output = this._relativeTime[string];
                return typeof output === "function" ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number)
            }

            function pastFuture(diff, output) {
                var format = this._relativeTime[diff > 0 ? "future" : "past"];
                return typeof format === "function" ? format(output) : format.replace(/%s/i, output)
            }

            function locale_set__set(config) {
                var prop, i;
                for (i in config) {
                    prop = config[i];
                    if (typeof prop === "function") {
                        this[i] = prop
                    } else {
                        this["_" + i] = prop
                    }
                }
                this._ordinalParseLenient = new RegExp(this._ordinalParse.source + "|" + /\d{1,2}/.source)
            }
            var prototype__proto = Locale.prototype;
            prototype__proto._calendar = defaultCalendar;
            prototype__proto.calendar = locale_calendar__calendar;
            prototype__proto._longDateFormat = defaultLongDateFormat;
            prototype__proto.longDateFormat = longDateFormat;
            prototype__proto._invalidDate = defaultInvalidDate;
            prototype__proto.invalidDate = invalidDate;
            prototype__proto._ordinal = defaultOrdinal;
            prototype__proto.ordinal = ordinal;
            prototype__proto._ordinalParse = defaultOrdinalParse;
            prototype__proto.preparse = preParsePostFormat;
            prototype__proto.postformat = preParsePostFormat;
            prototype__proto._relativeTime = defaultRelativeTime;
            prototype__proto.relativeTime = relative__relativeTime;
            prototype__proto.pastFuture = pastFuture;
            prototype__proto.set = locale_set__set;
            prototype__proto.months = localeMonths;
            prototype__proto._months = defaultLocaleMonths;
            prototype__proto.monthsShort = localeMonthsShort;
            prototype__proto._monthsShort = defaultLocaleMonthsShort;
            prototype__proto.monthsParse = localeMonthsParse;
            prototype__proto.week = localeWeek;
            prototype__proto._week = defaultLocaleWeek;
            prototype__proto.firstDayOfYear = localeFirstDayOfYear;
            prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;
            prototype__proto.weekdays = localeWeekdays;
            prototype__proto._weekdays = defaultLocaleWeekdays;
            prototype__proto.weekdaysMin = localeWeekdaysMin;
            prototype__proto._weekdaysMin = defaultLocaleWeekdaysMin;
            prototype__proto.weekdaysShort = localeWeekdaysShort;
            prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;
            prototype__proto.weekdaysParse = localeWeekdaysParse;
            prototype__proto.isPM = localeIsPM;
            prototype__proto._meridiemParse = defaultLocaleMeridiemParse;
            prototype__proto.meridiem = localeMeridiem;

            function lists__get(format, index, field, setter) {
                var locale = locale_locales__getLocale();
                var utc = create_utc__createUTC().set(setter, index);
                return locale[field](utc, format)
            }

            function list(format, index, field, count, setter) {
                if (typeof format === "number") {
                    index = format;
                    format = undefined
                }
                format = format || "";
                if (index != null) {
                    return lists__get(format, index, field, setter)
                }
                var i;
                var out = [];
                for (i = 0; i < count; i++) {
                    out[i] = lists__get(format, i, field, setter)
                }
                return out
            }

            function lists__listMonths(format, index) {
                return list(format, index, "months", 12, "month")
            }

            function lists__listMonthsShort(format, index) {
                return list(format, index, "monthsShort", 12, "month")
            }

            function lists__listWeekdays(format, index) {
                return list(format, index, "weekdays", 7, "day")
            }

            function lists__listWeekdaysShort(format, index) {
                return list(format, index, "weekdaysShort", 7, "day")
            }

            function lists__listWeekdaysMin(format, index) {
                return list(format, index, "weekdaysMin", 7, "day")
            }
            locale_locales__getSetGlobalLocale("en", {
                ordinalParse: /\d{1,2}(th|st|nd|rd)/,
                ordinal: function(number) {
                    var b = number % 10,
                        output = toInt(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
                    return number + output
                }
            });
            utils_hooks__hooks.lang = deprecate("moment.lang is deprecated. Use moment.locale instead.", locale_locales__getSetGlobalLocale);
            utils_hooks__hooks.langData = deprecate("moment.langData is deprecated. Use moment.localeData instead.", locale_locales__getLocale);
            var mathAbs = Math.abs;

            function duration_abs__abs() {
                var data = this._data;
                this._milliseconds = mathAbs(this._milliseconds);
                this._days = mathAbs(this._days);
                this._months = mathAbs(this._months);
                data.milliseconds = mathAbs(data.milliseconds);
                data.seconds = mathAbs(data.seconds);
                data.minutes = mathAbs(data.minutes);
                data.hours = mathAbs(data.hours);
                data.months = mathAbs(data.months);
                data.years = mathAbs(data.years);
                return this
            }

            function duration_add_subtract__addSubtract(duration, input, value, direction) {
                var other = create__createDuration(input, value);
                duration._milliseconds += direction * other._milliseconds;
                duration._days += direction * other._days;
                duration._months += direction * other._months;
                return duration._bubble()
            }

            function duration_add_subtract__add(input, value) {
                return duration_add_subtract__addSubtract(this, input, value, 1)
            }

            function duration_add_subtract__subtract(input, value) {
                return duration_add_subtract__addSubtract(this, input, value, -1)
            }

            function absCeil(number) {
                if (number < 0) {
                    return Math.floor(number)
                } else {
                    return Math.ceil(number)
                }
            }

            function bubble() {
                var milliseconds = this._milliseconds;
                var days = this._days;
                var months = this._months;
                var data = this._data;
                var seconds, minutes, hours, years, monthsFromDays;
                if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
                    milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
                    days = 0;
                    months = 0
                }
                data.milliseconds = milliseconds % 1e3;
                seconds = absFloor(milliseconds / 1e3);
                data.seconds = seconds % 60;
                minutes = absFloor(seconds / 60);
                data.minutes = minutes % 60;
                hours = absFloor(minutes / 60);
                data.hours = hours % 24;
                days += absFloor(hours / 24);
                monthsFromDays = absFloor(daysToMonths(days));
                months += monthsFromDays;
                days -= absCeil(monthsToDays(monthsFromDays));
                years = absFloor(months / 12);
                months %= 12;
                data.days = days;
                data.months = months;
                data.years = years;
                return this
            }

            function daysToMonths(days) {
                return days * 4800 / 146097
            }

            function monthsToDays(months) {
                return months * 146097 / 4800
            }

            function as(units) {
                var days;
                var months;
                var milliseconds = this._milliseconds;
                units = normalizeUnits(units);
                if (units === "month" || units === "year") {
                    days = this._days + milliseconds / 864e5;
                    months = this._months + daysToMonths(days);
                    return units === "month" ? months : months / 12
                } else {
                    days = this._days + Math.round(monthsToDays(this._months));
                    switch (units) {
                        case "week":
                            return days / 7 + milliseconds / 6048e5;
                        case "day":
                            return days + milliseconds / 864e5;
                        case "hour":
                            return days * 24 + milliseconds / 36e5;
                        case "minute":
                            return days * 1440 + milliseconds / 6e4;
                        case "second":
                            return days * 86400 + milliseconds / 1e3;
                        case "millisecond":
                            return Math.floor(days * 864e5) + milliseconds;
                        default:
                            throw new Error("Unknown unit " + units)
                    }
                }
            }

            function duration_as__valueOf() {
                return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6
            }

            function makeAs(alias) {
                return function() {
                    return this.as(alias)
                }
            }
            var asMilliseconds = makeAs("ms");
            var asSeconds = makeAs("s");
            var asMinutes = makeAs("m");
            var asHours = makeAs("h");
            var asDays = makeAs("d");
            var asWeeks = makeAs("w");
            var asMonths = makeAs("M");
            var asYears = makeAs("y");

            function duration_get__get(units) {
                units = normalizeUnits(units);
                return this[units + "s"]()
            }

            function makeGetter(name) {
                return function() {
                    return this._data[name]
                }
            }
            var milliseconds = makeGetter("milliseconds");
            var seconds = makeGetter("seconds");
            var minutes = makeGetter("minutes");
            var hours = makeGetter("hours");
            var days = makeGetter("days");
            var months = makeGetter("months");
            var years = makeGetter("years");

            function weeks() {
                return absFloor(this.days() / 7)
            }
            var round = Math.round;
            var thresholds = {
                s: 45,
                m: 45,
                h: 22,
                d: 26,
                M: 11
            };

            function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
                return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture)
            }

            function duration_humanize__relativeTime(posNegDuration, withoutSuffix, locale) {
                var duration = create__createDuration(posNegDuration).abs();
                var seconds = round(duration.as("s"));
                var minutes = round(duration.as("m"));
                var hours = round(duration.as("h"));
                var days = round(duration.as("d"));
                var months = round(duration.as("M"));
                var years = round(duration.as("y"));
                var a = seconds < thresholds.s && ["s", seconds] || minutes === 1 && ["m"] || minutes < thresholds.m && ["mm", minutes] || hours === 1 && ["h"] || hours < thresholds.h && ["hh", hours] || days === 1 && ["d"] || days < thresholds.d && ["dd", days] || months === 1 && ["M"] || months < thresholds.M && ["MM", months] || years === 1 && ["y"] || ["yy", years];
                a[2] = withoutSuffix;
                a[3] = +posNegDuration > 0;
                a[4] = locale;
                return substituteTimeAgo.apply(null, a)
            }

            function duration_humanize__getSetRelativeTimeThreshold(threshold, limit) {
                if (thresholds[threshold] === undefined) {
                    return false
                }
                if (limit === undefined) {
                    return thresholds[threshold]
                }
                thresholds[threshold] = limit;
                return true
            }

            function humanize(withSuffix) {
                var locale = this.localeData();
                var output = duration_humanize__relativeTime(this, !withSuffix, locale);
                if (withSuffix) {
                    output = locale.pastFuture(+this, output)
                }
                return locale.postformat(output)
            }
            var iso_string__abs = Math.abs;

            function iso_string__toISOString() {
                var seconds = iso_string__abs(this._milliseconds) / 1e3;
                var days = iso_string__abs(this._days);
                var months = iso_string__abs(this._months);
                var minutes, hours, years;
                minutes = absFloor(seconds / 60);
                hours = absFloor(minutes / 60);
                seconds %= 60;
                minutes %= 60;
                years = absFloor(months / 12);
                months %= 12;
                var Y = years;
                var M = months;
                var D = days;
                var h = hours;
                var m = minutes;
                var s = seconds;
                var total = this.asSeconds();
                if (!total) {
                    return "P0D"
                }
                return (total < 0 ? "-" : "") + "P" + (Y ? Y + "Y" : "") + (M ? M + "M" : "") + (D ? D + "D" : "") + (h || m || s ? "T" : "") + (h ? h + "H" : "") + (m ? m + "M" : "") + (s ? s + "S" : "")
            }
            var duration_prototype__proto = Duration.prototype;
            duration_prototype__proto.abs = duration_abs__abs;
            duration_prototype__proto.add = duration_add_subtract__add;
            duration_prototype__proto.subtract = duration_add_subtract__subtract;
            duration_prototype__proto.as = as;
            duration_prototype__proto.asMilliseconds = asMilliseconds;
            duration_prototype__proto.asSeconds = asSeconds;
            duration_prototype__proto.asMinutes = asMinutes;
            duration_prototype__proto.asHours = asHours;
            duration_prototype__proto.asDays = asDays;
            duration_prototype__proto.asWeeks = asWeeks;
            duration_prototype__proto.asMonths = asMonths;
            duration_prototype__proto.asYears = asYears;
            duration_prototype__proto.valueOf = duration_as__valueOf;
            duration_prototype__proto._bubble = bubble;
            duration_prototype__proto.get = duration_get__get;
            duration_prototype__proto.milliseconds = milliseconds;
            duration_prototype__proto.seconds = seconds;
            duration_prototype__proto.minutes = minutes;
            duration_prototype__proto.hours = hours;
            duration_prototype__proto.days = days;
            duration_prototype__proto.weeks = weeks;
            duration_prototype__proto.months = months;
            duration_prototype__proto.years = years;
            duration_prototype__proto.humanize = humanize;
            duration_prototype__proto.toISOString = iso_string__toISOString;
            duration_prototype__proto.toString = iso_string__toISOString;
            duration_prototype__proto.toJSON = iso_string__toISOString;
            duration_prototype__proto.locale = locale;
            duration_prototype__proto.localeData = localeData;
            duration_prototype__proto.toIsoString = deprecate("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", iso_string__toISOString);
            duration_prototype__proto.lang = lang;
            addFormatToken("X", 0, 0, "unix");
            addFormatToken("x", 0, 0, "valueOf");
            addRegexToken("x", matchSigned);
            addRegexToken("X", matchTimestamp);
            addParseToken("X", function(input, array, config) {
                config._d = new Date(parseFloat(input, 10) * 1e3)
            });
            addParseToken("x", function(input, array, config) {
                config._d = new Date(toInt(input))
            });
            utils_hooks__hooks.version = "2.10.6";
            setHookCallback(local__createLocal);
            utils_hooks__hooks.fn = momentPrototype;
            utils_hooks__hooks.min = min;
            utils_hooks__hooks.max = max;
            utils_hooks__hooks.utc = create_utc__createUTC;
            utils_hooks__hooks.unix = moment__createUnix;
            utils_hooks__hooks.months = lists__listMonths;
            utils_hooks__hooks.isDate = isDate;
            utils_hooks__hooks.locale = locale_locales__getSetGlobalLocale;
            utils_hooks__hooks.invalid = valid__createInvalid;
            utils_hooks__hooks.duration = create__createDuration;
            utils_hooks__hooks.isMoment = isMoment;
            utils_hooks__hooks.weekdays = lists__listWeekdays;
            utils_hooks__hooks.parseZone = moment__createInZone;
            utils_hooks__hooks.localeData = locale_locales__getLocale;
            utils_hooks__hooks.isDuration = isDuration;
            utils_hooks__hooks.monthsShort = lists__listMonthsShort;
            utils_hooks__hooks.weekdaysMin = lists__listWeekdaysMin;
            utils_hooks__hooks.defineLocale = defineLocale;
            utils_hooks__hooks.weekdaysShort = lists__listWeekdaysShort;
            utils_hooks__hooks.normalizeUnits = normalizeUnits;
            utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;
            var _moment = utils_hooks__hooks;
            return _moment
        })
    }, {}],
    18: [function(require, module, exports) {
        (function() {
            var root = this;
            var previousUnderscore = root._;
            var breaker = {};
            var ArrayProto = Array.prototype,
                ObjProto = Object.prototype,
                FuncProto = Function.prototype;
            var push = ArrayProto.push,
                slice = ArrayProto.slice,
                concat = ArrayProto.concat,
                toString = ObjProto.toString,
                hasOwnProperty = ObjProto.hasOwnProperty;
            var nativeForEach = ArrayProto.forEach,
                nativeMap = ArrayProto.map,
                nativeReduce = ArrayProto.reduce,
                nativeReduceRight = ArrayProto.reduceRight,
                nativeFilter = ArrayProto.filter,
                nativeEvery = ArrayProto.every,
                nativeSome = ArrayProto.some,
                nativeIndexOf = ArrayProto.indexOf,
                nativeLastIndexOf = ArrayProto.lastIndexOf,
                nativeIsArray = Array.isArray,
                nativeKeys = Object.keys,
                nativeBind = FuncProto.bind;
            var _ = function(obj) {
                if (obj instanceof _) return obj;
                if (!(this instanceof _)) return new _(obj);
                this._wrapped = obj
            };
            if (typeof exports !== "undefined") {
                if (typeof module !== "undefined" && module.exports) {
                    exports = module.exports = _
                }
                exports._ = _
            } else {
                root._ = _
            }
            _.VERSION = "1.6.0";
            var each = _.each = _.forEach = function(obj, iterator, context) {
                if (obj == null) return obj;
                if (nativeForEach && obj.forEach === nativeForEach) {
                    obj.forEach(iterator, context)
                } else if (obj.length === +obj.length) {
                    for (var i = 0, length = obj.length; i < length; i++) {
                        if (iterator.call(context, obj[i], i, obj) === breaker) return
                    }
                } else {
                    var keys = _.keys(obj);
                    for (var i = 0, length = keys.length; i < length; i++) {
                        if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return
                    }
                }
                return obj
            };
            _.map = _.collect = function(obj, iterator, context) {
                var results = [];
                if (obj == null) return results;
                if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
                each(obj, function(value, index, list) {
                    results.push(iterator.call(context, value, index, list))
                });
                return results
            };
            var reduceError = "Reduce of empty array with no initial value";
            _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
                var initial = arguments.length > 2;
                if (obj == null) obj = [];
                if (nativeReduce && obj.reduce === nativeReduce) {
                    if (context) iterator = _.bind(iterator, context);
                    return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator)
                }
                each(obj, function(value, index, list) {
                    if (!initial) {
                        memo = value;
                        initial = true
                    } else {
                        memo = iterator.call(context, memo, value, index, list)
                    }
                });
                if (!initial) throw new TypeError(reduceError);
                return memo
            };
            _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
                var initial = arguments.length > 2;
                if (obj == null) obj = [];
                if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
                    if (context) iterator = _.bind(iterator, context);
                    return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator)
                }
                var length = obj.length;
                if (length !== +length) {
                    var keys = _.keys(obj);
                    length = keys.length
                }
                each(obj, function(value, index, list) {
                    index = keys ? keys[--length] : --length;
                    if (!initial) {
                        memo = obj[index];
                        initial = true
                    } else {
                        memo = iterator.call(context, memo, obj[index], index, list)
                    }
                });
                if (!initial) throw new TypeError(reduceError);
                return memo
            };
            _.find = _.detect = function(obj, predicate, context) {
                var result;
                any(obj, function(value, index, list) {
                    if (predicate.call(context, value, index, list)) {
                        result = value;
                        return true
                    }
                });
                return result
            };
            _.filter = _.select = function(obj, predicate, context) {
                var results = [];
                if (obj == null) return results;
                if (nativeFilter && obj.filter === nativeFilter) return obj.filter(predicate, context);
                each(obj, function(value, index, list) {
                    if (predicate.call(context, value, index, list)) results.push(value)
                });
                return results
            };
            _.reject = function(obj, predicate, context) {
                return _.filter(obj, function(value, index, list) {
                    return !predicate.call(context, value, index, list)
                }, context)
            };
            _.every = _.all = function(obj, predicate, context) {
                predicate || (predicate = _.identity);
                var result = true;
                if (obj == null) return result;
                if (nativeEvery && obj.every === nativeEvery) return obj.every(predicate, context);
                each(obj, function(value, index, list) {
                    if (!(result = result && predicate.call(context, value, index, list))) return breaker
                });
                return !!result
            };
            var any = _.some = _.any = function(obj, predicate, context) {
                predicate || (predicate = _.identity);
                var result = false;
                if (obj == null) return result;
                if (nativeSome && obj.some === nativeSome) return obj.some(predicate, context);
                each(obj, function(value, index, list) {
                    if (result || (result = predicate.call(context, value, index, list))) return breaker
                });
                return !!result
            };
            _.contains = _.include = function(obj, target) {
                if (obj == null) return false;
                if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
                return any(obj, function(value) {
                    return value === target
                })
            };
            _.invoke = function(obj, method) {
                var args = slice.call(arguments, 2);
                var isFunc = _.isFunction(method);
                return _.map(obj, function(value) {
                    return (isFunc ? method : value[method]).apply(value, args)
                })
            };
            _.pluck = function(obj, key) {
                return _.map(obj, _.property(key))
            };
            _.where = function(obj, attrs) {
                return _.filter(obj, _.matches(attrs))
            };
            _.findWhere = function(obj, attrs) {
                return _.find(obj, _.matches(attrs))
            };
            _.max = function(obj, iterator, context) {
                if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
                    return Math.max.apply(Math, obj)
                }
                var result = -Infinity,
                    lastComputed = -Infinity;
                each(obj, function(value, index, list) {
                    var computed = iterator ? iterator.call(context, value, index, list) : value;
                    if (computed > lastComputed) {
                        result = value;
                        lastComputed = computed
                    }
                });
                return result
            };
            _.min = function(obj, iterator, context) {
                if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
                    return Math.min.apply(Math, obj)
                }
                var result = Infinity,
                    lastComputed = Infinity;
                each(obj, function(value, index, list) {
                    var computed = iterator ? iterator.call(context, value, index, list) : value;
                    if (computed < lastComputed) {
                        result = value;
                        lastComputed = computed
                    }
                });
                return result
            };
            _.shuffle = function(obj) {
                var rand;
                var index = 0;
                var shuffled = [];
                each(obj, function(value) {
                    rand = _.random(index++);
                    shuffled[index - 1] = shuffled[rand];
                    shuffled[rand] = value
                });
                return shuffled
            };
            _.sample = function(obj, n, guard) {
                if (n == null || guard) {
                    if (obj.length !== +obj.length) obj = _.values(obj);
                    return obj[_.random(obj.length - 1)]
                }
                return _.shuffle(obj).slice(0, Math.max(0, n))
            };
            var lookupIterator = function(value) {
                if (value == null) return _.identity;
                if (_.isFunction(value)) return value;
                return _.property(value)
            };
            _.sortBy = function(obj, iterator, context) {
                iterator = lookupIterator(iterator);
                return _.pluck(_.map(obj, function(value, index, list) {
                    return {
                        value: value,
                        index: index,
                        criteria: iterator.call(context, value, index, list)
                    }
                }).sort(function(left, right) {
                    var a = left.criteria;
                    var b = right.criteria;
                    if (a !== b) {
                        if (a > b || a === void 0) return 1;
                        if (a < b || b === void 0) return -1
                    }
                    return left.index - right.index
                }), "value")
            };
            var group = function(behavior) {
                return function(obj, iterator, context) {
                    var result = {};
                    iterator = lookupIterator(iterator);
                    each(obj, function(value, index) {
                        var key = iterator.call(context, value, index, obj);
                        behavior(result, key, value)
                    });
                    return result
                }
            };
            _.groupBy = group(function(result, key, value) {
                _.has(result, key) ? result[key].push(value) : result[key] = [value]
            });
            _.indexBy = group(function(result, key, value) {
                result[key] = value
            });
            _.countBy = group(function(result, key) {
                _.has(result, key) ? result[key]++ : result[key] = 1
            });
            _.sortedIndex = function(array, obj, iterator, context) {
                iterator = lookupIterator(iterator);
                var value = iterator.call(context, obj);
                var low = 0,
                    high = array.length;
                while (low < high) {
                    var mid = low + high >>> 1;
                    iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid
                }
                return low
            };
            _.toArray = function(obj) {
                if (!obj) return [];
                if (_.isArray(obj)) return slice.call(obj);
                if (obj.length === +obj.length) return _.map(obj, _.identity);
                return _.values(obj)
            };
            _.size = function(obj) {
                if (obj == null) return 0;
                return obj.length === +obj.length ? obj.length : _.keys(obj).length
            };
            _.first = _.head = _.take = function(array, n, guard) {
                if (array == null) return void 0;
                if (n == null || guard) return array[0];
                if (n < 0) return [];
                return slice.call(array, 0, n)
            };
            _.initial = function(array, n, guard) {
                return slice.call(array, 0, array.length - (n == null || guard ? 1 : n))
            };
            _.last = function(array, n, guard) {
                if (array == null) return void 0;
                if (n == null || guard) return array[array.length - 1];
                return slice.call(array, Math.max(array.length - n, 0))
            };
            _.rest = _.tail = _.drop = function(array, n, guard) {
                return slice.call(array, n == null || guard ? 1 : n)
            };
            _.compact = function(array) {
                return _.filter(array, _.identity)
            };
            var flatten = function(input, shallow, output) {
                if (shallow && _.every(input, _.isArray)) {
                    return concat.apply(output, input)
                }
                each(input, function(value) {
                    if (_.isArray(value) || _.isArguments(value)) {
                        shallow ? push.apply(output, value) : flatten(value, shallow, output)
                    } else {
                        output.push(value)
                    }
                });
                return output
            };
            _.flatten = function(array, shallow) {
                return flatten(array, shallow, [])
            };
            _.without = function(array) {
                return _.difference(array, slice.call(arguments, 1))
            };
            _.partition = function(array, predicate) {
                var pass = [],
                    fail = [];
                each(array, function(elem) {
                    (predicate(elem) ? pass : fail).push(elem)
                });
                return [pass, fail]
            };
            _.uniq = _.unique = function(array, isSorted, iterator, context) {
                if (_.isFunction(isSorted)) {
                    context = iterator;
                    iterator = isSorted;
                    isSorted = false
                }
                var initial = iterator ? _.map(array, iterator, context) : array;
                var results = [];
                var seen = [];
                each(initial, function(value, index) {
                    if (isSorted ? !index || seen[seen.length - 1] !== value : !_.contains(seen, value)) {
                        seen.push(value);
                        results.push(array[index])
                    }
                });
                return results
            };
            _.union = function() {
                return _.uniq(_.flatten(arguments, true))
            };
            _.intersection = function(array) {
                var rest = slice.call(arguments, 1);
                return _.filter(_.uniq(array), function(item) {
                    return _.every(rest, function(other) {
                        return _.contains(other, item)
                    })
                })
            };
            _.difference = function(array) {
                var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
                return _.filter(array, function(value) {
                    return !_.contains(rest, value)
                })
            };
            _.zip = function() {
                var length = _.max(_.pluck(arguments, "length").concat(0));
                var results = new Array(length);
                for (var i = 0; i < length; i++) {
                    results[i] = _.pluck(arguments, "" + i)
                }
                return results
            };
            _.object = function(list, values) {
                if (list == null) return {};
                var result = {};
                for (var i = 0, length = list.length; i < length; i++) {
                    if (values) {
                        result[list[i]] = values[i]
                    } else {
                        result[list[i][0]] = list[i][1]
                    }
                }
                return result
            };
            _.indexOf = function(array, item, isSorted) {
                if (array == null) return -1;
                var i = 0,
                    length = array.length;
                if (isSorted) {
                    if (typeof isSorted == "number") {
                        i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted
                    } else {
                        i = _.sortedIndex(array, item);
                        return array[i] === item ? i : -1
                    }
                }
                if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
                for (; i < length; i++)
                    if (array[i] === item) return i;
                return -1
            };
            _.lastIndexOf = function(array, item, from) {
                if (array == null) return -1;
                var hasIndex = from != null;
                if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
                    return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item)
                }
                var i = hasIndex ? from : array.length;
                while (i--)
                    if (array[i] === item) return i;
                return -1
            };
            _.range = function(start, stop, step) {
                if (arguments.length <= 1) {
                    stop = start || 0;
                    start = 0
                }
                step = arguments[2] || 1;
                var length = Math.max(Math.ceil((stop - start) / step), 0);
                var idx = 0;
                var range = new Array(length);
                while (idx < length) {
                    range[idx++] = start;
                    start += step
                }
                return range
            };
            var ctor = function() {};
            _.bind = function(func, context) {
                var args, bound;
                if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
                if (!_.isFunction(func)) throw new TypeError;
                args = slice.call(arguments, 2);
                return bound = function() {
                    if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
                    ctor.prototype = func.prototype;
                    var self = new ctor;
                    ctor.prototype = null;
                    var result = func.apply(self, args.concat(slice.call(arguments)));
                    if (Object(result) === result) return result;
                    return self
                }
            };
            _.partial = function(func) {
                var boundArgs = slice.call(arguments, 1);
                return function() {
                    var position = 0;
                    var args = boundArgs.slice();
                    for (var i = 0, length = args.length; i < length; i++) {
                        if (args[i] === _) args[i] = arguments[position++]
                    }
                    while (position < arguments.length) args.push(arguments[position++]);
                    return func.apply(this, args)
                }
            };
            _.bindAll = function(obj) {
                var funcs = slice.call(arguments, 1);
                if (funcs.length === 0) throw new Error("bindAll must be passed function names");
                each(funcs, function(f) {
                    obj[f] = _.bind(obj[f], obj)
                });
                return obj
            };
            _.memoize = function(func, hasher) {
                var memo = {};
                hasher || (hasher = _.identity);
                return function() {
                    var key = hasher.apply(this, arguments);
                    return _.has(memo, key) ? memo[key] : memo[key] = func.apply(this, arguments)
                }
            };
            _.delay = function(func, wait) {
                var args = slice.call(arguments, 2);
                return setTimeout(function() {
                    return func.apply(null, args)
                }, wait)
            };
            _.defer = function(func) {
                return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)))
            };
            _.throttle = function(func, wait, options) {
                var context, args, result;
                var timeout = null;
                var previous = 0;
                options || (options = {});
                var later = function() {
                    previous = options.leading === false ? 0 : _.now();
                    timeout = null;
                    result = func.apply(context, args);
                    context = args = null
                };
                return function() {
                    var now = _.now();
                    if (!previous && options.leading === false) previous = now;
                    var remaining = wait - (now - previous);
                    context = this;
                    args = arguments;
                    if (remaining <= 0) {
                        clearTimeout(timeout);
                        timeout = null;
                        previous = now;
                        result = func.apply(context, args);
                        context = args = null
                    } else if (!timeout && options.trailing !== false) {
                        timeout = setTimeout(later, remaining)
                    }
                    return result
                }
            };
            _.debounce = function(func, wait, immediate) {
                var timeout, args, context, timestamp, result;
                var later = function() {
                    var last = _.now() - timestamp;
                    if (last < wait) {
                        timeout = setTimeout(later, wait - last)
                    } else {
                        timeout = null;
                        if (!immediate) {
                            result = func.apply(context, args);
                            context = args = null
                        }
                    }
                };
                return function() {
                    context = this;
                    args = arguments;
                    timestamp = _.now();
                    var callNow = immediate && !timeout;
                    if (!timeout) {
                        timeout = setTimeout(later, wait)
                    }
                    if (callNow) {
                        result = func.apply(context, args);
                        context = args = null
                    }
                    return result
                }
            };
            _.once = function(func) {
                var ran = false,
                    memo;
                return function() {
                    if (ran) return memo;
                    ran = true;
                    memo = func.apply(this, arguments);
                    func = null;
                    return memo
                }
            };
            _.wrap = function(func, wrapper) {
                return _.partial(wrapper, func)
            };
            _.compose = function() {
                var funcs = arguments;
                return function() {
                    var args = arguments;
                    for (var i = funcs.length - 1; i >= 0; i--) {
                        args = [funcs[i].apply(this, args)]
                    }
                    return args[0]
                }
            };
            _.after = function(times, func) {
                return function() {
                    if (--times < 1) {
                        return func.apply(this, arguments)
                    }
                }
            };
            _.keys = function(obj) {
                if (!_.isObject(obj)) return [];
                if (nativeKeys) return nativeKeys(obj);
                var keys = [];
                for (var key in obj)
                    if (_.has(obj, key)) keys.push(key);
                return keys
            };
            _.values = function(obj) {
                var keys = _.keys(obj);
                var length = keys.length;
                var values = new Array(length);
                for (var i = 0; i < length; i++) {
                    values[i] = obj[keys[i]]
                }
                return values
            };
            _.pairs = function(obj) {
                var keys = _.keys(obj);
                var length = keys.length;
                var pairs = new Array(length);
                for (var i = 0; i < length; i++) {
                    pairs[i] = [keys[i], obj[keys[i]]]
                }
                return pairs
            };
            _.invert = function(obj) {
                var result = {};
                var keys = _.keys(obj);
                for (var i = 0, length = keys.length; i < length; i++) {
                    result[obj[keys[i]]] = keys[i]
                }
                return result
            };
            _.functions = _.methods = function(obj) {
                var names = [];
                for (var key in obj) {
                    if (_.isFunction(obj[key])) names.push(key)
                }
                return names.sort()
            };
            _.extend = function(obj) {
                each(slice.call(arguments, 1), function(source) {
                    if (source) {
                        for (var prop in source) {
                            obj[prop] = source[prop]
                        }
                    }
                });
                return obj
            };
            _.pick = function(obj) {
                var copy = {};
                var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
                each(keys, function(key) {
                    if (key in obj) copy[key] = obj[key]
                });
                return copy
            };
            _.omit = function(obj) {
                var copy = {};
                var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
                for (var key in obj) {
                    if (!_.contains(keys, key)) copy[key] = obj[key]
                }
                return copy
            };
            _.defaults = function(obj) {
                each(slice.call(arguments, 1), function(source) {
                    if (source) {
                        for (var prop in source) {
                            if (obj[prop] === void 0) obj[prop] = source[prop]
                        }
                    }
                });
                return obj
            };
            _.clone = function(obj) {
                if (!_.isObject(obj)) return obj;
                return _.isArray(obj) ? obj.slice() : _.extend({}, obj)
            };
            _.tap = function(obj, interceptor) {
                interceptor(obj);
                return obj
            };
            var eq = function(a, b, aStack, bStack) {
                if (a === b) return a !== 0 || 1 / a == 1 / b;
                if (a == null || b == null) return a === b;
                if (a instanceof _) a = a._wrapped;
                if (b instanceof _) b = b._wrapped;
                var className = toString.call(a);
                if (className != toString.call(b)) return false;
                switch (className) {
                    case "[object String]":
                        return a == String(b);
                    case "[object Number]":
                        return a != +a ? b != +b : a == 0 ? 1 / a == 1 / b : a == +b;
                    case "[object Date]":
                    case "[object Boolean]":
                        return +a == +b;
                    case "[object RegExp]":
                        return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase
                }
                if (typeof a != "object" || typeof b != "object") return false;
                var length = aStack.length;
                while (length--) {
                    if (aStack[length] == a) return bStack[length] == b
                }
                var aCtor = a.constructor,
                    bCtor = b.constructor;
                if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor) && ("constructor" in a && "constructor" in b)) {
                    return false
                }
                aStack.push(a);
                bStack.push(b);
                var size = 0,
                    result = true;
                if (className == "[object Array]") {
                    size = a.length;
                    result = size == b.length;
                    if (result) {
                        while (size--) {
                            if (!(result = eq(a[size], b[size], aStack, bStack))) break
                        }
                    }
                } else {
                    for (var key in a) {
                        if (_.has(a, key)) {
                            size++;
                            if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break
                        }
                    }
                    if (result) {
                        for (key in b) {
                            if (_.has(b, key) && !size--) break
                        }
                        result = !size
                    }
                }
                aStack.pop();
                bStack.pop();
                return result
            };
            _.isEqual = function(a, b) {
                return eq(a, b, [], [])
            };
            _.isEmpty = function(obj) {
                if (obj == null) return true;
                if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
                for (var key in obj)
                    if (_.has(obj, key)) return false;
                return true
            };
            _.isElement = function(obj) {
                return !!(obj && obj.nodeType === 1)
            };
            _.isArray = nativeIsArray || function(obj) {
                return toString.call(obj) == "[object Array]"
            };
            _.isObject = function(obj) {
                return obj === Object(obj)
            };
            each(["Arguments", "Function", "String", "Number", "Date", "RegExp"], function(name) {
                _["is" + name] = function(obj) {
                    return toString.call(obj) == "[object " + name + "]"
                }
            });
            if (!_.isArguments(arguments)) {
                _.isArguments = function(obj) {
                    return !!(obj && _.has(obj, "callee"))
                }
            }
            if (typeof /./ !== "function") {
                _.isFunction = function(obj) {
                    return typeof obj === "function"
                }
            }
            _.isFinite = function(obj) {
                return isFinite(obj) && !isNaN(parseFloat(obj))
            };
            _.isNaN = function(obj) {
                return _.isNumber(obj) && obj != +obj
            };
            _.isBoolean = function(obj) {
                return obj === true || obj === false || toString.call(obj) == "[object Boolean]"
            };
            _.isNull = function(obj) {
                return obj === null
            };
            _.isUndefined = function(obj) {
                return obj === void 0
            };
            _.has = function(obj, key) {
                return hasOwnProperty.call(obj, key)
            };
            _.noConflict = function() {
                root._ = previousUnderscore;
                return this
            };
            _.identity = function(value) {
                return value
            };
            _.constant = function(value) {
                return function() {
                    return value
                }
            };
            _.property = function(key) {
                return function(obj) {
                    return obj[key]
                }
            };
            _.matches = function(attrs) {
                return function(obj) {
                    if (obj === attrs) return true;
                    for (var key in attrs) {
                        if (attrs[key] !== obj[key]) return false
                    }
                    return true
                }
            };
            _.times = function(n, iterator, context) {
                var accum = Array(Math.max(0, n));
                for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
                return accum
            };
            _.random = function(min, max) {
                if (max == null) {
                    max = min;
                    min = 0
                }
                return min + Math.floor(Math.random() * (max - min + 1))
            };
            _.now = Date.now || function() {
                return (new Date).getTime()
            };
            var entityMap = {
                escape: {
                    "&": "&amp;",
                    "<": "&lt;",
                    ">": "&gt;",
                    '"': "&quot;",
                    "'": "&#x27;"
                }
            };
            entityMap.unescape = _.invert(entityMap.escape);
            var entityRegexes = {
                escape: new RegExp("[" + _.keys(entityMap.escape).join("") + "]", "g"),
                unescape: new RegExp("(" + _.keys(entityMap.unescape).join("|") + ")", "g")
            };
            _.each(["escape", "unescape"], function(method) {
                _[method] = function(string) {
                    if (string == null) return "";
                    return ("" + string).replace(entityRegexes[method], function(match) {
                        return entityMap[method][match]
                    })
                }
            });
            _.result = function(object, property) {
                if (object == null) return void 0;
                var value = object[property];
                return _.isFunction(value) ? value.call(object) : value
            };
            _.mixin = function(obj) {
                each(_.functions(obj), function(name) {
                    var func = _[name] = obj[name];
                    _.prototype[name] = function() {
                        var args = [this._wrapped];
                        push.apply(args, arguments);
                        return result.call(this, func.apply(_, args))
                    }
                })
            };
            var idCounter = 0;
            _.uniqueId = function(prefix) {
                var id = ++idCounter + "";
                return prefix ? prefix + id : id
            };
            _.templateSettings = {
                evaluate: /<%([\s\S]+?)%>/g,
                interpolate: /<%=([\s\S]+?)%>/g,
                escape: /<%-([\s\S]+?)%>/g
            };
            var noMatch = /(.)^/;
            var escapes = {
                "'": "'",
                "\\": "\\",
                "\r": "r",
                "\n": "n",
                "\t": "t",
                "\u2028": "u2028",
                "\u2029": "u2029"
            };
            var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;
            _.template = function(text, data, settings) {
                var render;
                settings = _.defaults({}, settings, _.templateSettings);
                var matcher = new RegExp([(settings.escape || noMatch).source, (settings.interpolate || noMatch).source, (settings.evaluate || noMatch).source].join("|") + "|$", "g");
                var index = 0;
                var source = "__p+='";
                text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
                    source += text.slice(index, offset).replace(escaper, function(match) {
                        return "\\" + escapes[match]
                    });
                    if (escape) {
                        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'"
                    }
                    if (interpolate) {
                        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'"
                    }
                    if (evaluate) {
                        source += "';\n" + evaluate + "\n__p+='"
                    }
                    index = offset + match.length;
                    return match
                });
                source += "';\n";
                if (!settings.variable) source = "with(obj||{}){\n" + source + "}\n";
                source = "var __t,__p='',__j=Array.prototype.join," + "print=function(){__p+=__j.call(arguments,'');};\n" + source + "return __p;\n";
                try {
                    render = new Function(settings.variable || "obj", "_", source)
                } catch (e) {
                    e.source = source;
                    throw e
                }
                if (data) return render(data, _);
                var template = function(data) {
                    return render.call(this, data, _)
                };
                template.source = "function(" + (settings.variable || "obj") + "){\n" + source + "}";
                return template
            };
            _.chain = function(obj) {
                return _(obj).chain()
            };
            var result = function(obj) {
                return this._chain ? _(obj).chain() : obj
            };
            _.mixin(_);
            each(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], function(name) {
                var method = ArrayProto[name];
                _.prototype[name] = function() {
                    var obj = this._wrapped;
                    method.apply(obj, arguments);
                    if ((name == "shift" || name == "splice") && obj.length === 0) delete obj[0];
                    return result.call(this, obj)
                }
            });
            each(["concat", "join", "slice"], function(name) {
                var method = ArrayProto[name];
                _.prototype[name] = function() {
                    return result.call(this, method.apply(this._wrapped, arguments))
                }
            });
            _.extend(_.prototype, {
                chain: function() {
                    this._chain = true;
                    return this
                },
                value: function() {
                    return this._wrapped
                }
            });
            if (typeof define === "function" && define.amd) {
                define("underscore", [], function() {
                    return _
                })
            }
        }).call(this)
    }, {}],
    19: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var _layoutView = require("./layout-view");
        var _layoutView2 = _interopRequireDefault(_layoutView);
        var _snippetsRouter = require("../snippets/router");
        var _snippetsRouter2 = _interopRequireDefault(_snippetsRouter);
        var _emailRouter = require("../email/router");
        var _emailRouter2 = _interopRequireDefault(_emailRouter);
        var _flashesView = require("../flashes/view");
        var _flashesView2 = _interopRequireDefault(_flashesView);
        var _loadingView = require("../loading/view");
        var _loadingView2 = _interopRequireDefault(_loadingView);
        var _notificationsView = require("../notifications/view");
        var _notificationsView2 = _interopRequireDefault(_notificationsView);
        var _modalView = require("../modal/view");
        var _modalView2 = _interopRequireDefault(_modalView);
        var $ = _orchestra2["default"].$;
        var flashChannel = _orchestra2["default"].Radio.channel("flash");
        var loadingChannel = _orchestra2["default"].Radio.channel("loading");
        var modalChannel = _orchestra2["default"].Radio.channel("modal");
        var notificationsChannel = _orchestra2["default"].Radio.channel("notifications");
        exports["default"] = _orchestra2["default"].Application.extend({
            initialize: function initialize(options) {
                this.layout = new _layoutView2["default"]({
                    model: new _orchestra2["default"].Model({
                        title: options.inboxTitle
                    })
                });
                this.layout.render();
                this.tableHeaders = options.tableHeaders || [];
                this.inboxControls = options.inboxControls || {}
            },
            onStart: function onStart() {
                var _this = this;
                this.snippets = new _snippetsRouter2["default"]({
                    container: this.layout.content,
                    tableHeaders: this.tableHeaders,
                    inboxControls: this.inboxControls
                });
                this.email = new _emailRouter2["default"]({
                    container: this.layout.content
                });
                this.notifications = new _notificationsView2["default"];
                this.layout.getRegion("notifications").show(this.notifications);
                this.listenTo(notificationsChannel, "notifications:load", function() {
                    _this.notifications.render()
                });
                this.listenTo(modalChannel, "show:modal:delete:email", function() {
                    _this.layout.getRegion("modal").show(new _modalView2["default"])
                });
                this.listenTo(modalChannel, "hide:modal:delete:email", function() {
                    _this.layout.getRegion("modal").empty()
                });
                this.listenTo(loadingChannel, "loading:show", function() {
                    _this.layout.getRegion("loading").show(new _loadingView2["default"])
                });
                this.listenTo(loadingChannel, "loading:empty", function() {
                    _this.layout.loading.empty();
                    $(".snippet-loading").removeClass("snippet-loading")
                });
                this.listenTo(flashChannel, "flash:message", function(params) {
                    var flashView = new _flashesView2["default"]({
                        model: new _orchestra2["default"].Model(params)
                    });
                    _this.layout.getRegion("flash").show(flashView);
                    loadingChannel.trigger("loading:empty")
                });
                _orchestra2["default"].history.start()
            }
        });
        module.exports = exports["default"]
    }, {
        "../email/router": 25,
        "../flashes/view": 29,
        "../loading/view": 32,
        "../modal/view": 35,
        "../notifications/view": 36,
        "../snippets/router": 43,
        "./layout-view": 21
    }],
    20: [function(require, module, exports) {
        var HandlebarsCompiler = require("hbsfy/runtime");
        module.exports = HandlebarsCompiler.template({
            compiler: [6, ">= 2.0.0-beta.1"],
            main: function(depth0, helpers, partials, data) {
                var helper;
                return '<h2 class="title">' + this.escapeExpression((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helpers.helperMissing, typeof helper === "function" ? helper.call(depth0, {
                    name: "title",
                    hash: {},
                    data: data
                }) : helper)) + ' <span id="playerInboxNotifications"></span></h2>\r\n<div id="playerInboxFlash"></div>\r\n<div id="playerInboxContent"></div>\r\n<div id="playerInboxLoading"></div>\r\n<div id="playerInboxModal"></div>'
            },
            useData: true
        })
    }, {
        "hbsfy/runtime": 15
    }],
    21: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var _layoutTemplateHbs = require("./layout-template.hbs");
        var _layoutTemplateHbs2 = _interopRequireDefault(_layoutTemplateHbs);
        exports["default"] = _orchestra2["default"].LayoutView.extend({
            el: "#playerInboxWidgetContainer",
            template: _layoutTemplateHbs2["default"],
            regions: {
                notifications: "#playerInboxNotifications",
                content: "#playerInboxContent",
                loading: "#playerInboxLoading",
                flash: "#playerInboxFlash",
                modal: "#playerInboxModal"
            }
        });
        module.exports = exports["default"]
    }, {
        "./layout-template.hbs": 20
    }],
    22: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports["default"] = {
            email: {
                url: "/api/PlayerInboxWidget/GetMessage"
            },
            emails: {
                url: "/api/PlayerInboxWidget/GetMessages"
            }
        };
        module.exports = exports["default"]
    }, {}],
    23: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports["default"] = {
            controls: {
                prevPage: "Previous",
                nextPage: "Next",
                deleteEmail: "Delete message(s)",
                selectAll: "Select all"
            }
        };
        module.exports = exports["default"]
    }, {}],
    24: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var _configConfig = require("../config/config");
        var _configConfig2 = _interopRequireDefault(_configConfig);
        exports["default"] = _orchestra2["default"].Model.extend({
            url: _configConfig2["default"].email.url
        });
        module.exports = exports["default"]
    }, {
        "../config/config": 22
    }],
    25: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var _model = require("./model");
        var _model2 = _interopRequireDefault(_model);
        var _emailView = require("./view.js");
        var _emailView2 = _interopRequireDefault(_emailView);
        var _messages = require("../messages");
        var _messages2 = _interopRequireDefault(_messages);
        var routerChannel = _orchestra2["default"].Radio.channel("router");
        var flashChannel = _orchestra2["default"].Radio.channel("flash");
        var loadingChannel = _orchestra2["default"].Radio.channel("loading");
        var notificationsChannel = _orchestra2["default"].Radio.channel("notifications");
        exports["default"] = _orchestra2["default"].Router.extend({
            initialize: function initialize(options) {
                var _this2 = this;
                this.container = options.container;
                this.listenTo(routerChannel, "navigate:open:email", function(page, id) {
                    _this2.navigate("email/" + page + "/" + id, {
                        trigger: true
                    })
                })
            },
            routes: {
                "email/:page/:id": "openEmail"
            },
            openEmail: function openEmail(page, id) {
                var _this = this;
                var model = new _model2["default"]({
                    page: page
                });
                this.listenTo(model, "request", function() {
                    loadingChannel.trigger("loading:show")
                });
                this.listenTo(model, "sync", function() {
                    loadingChannel.trigger("loading:empty")
                });
                model.fetch({
                    data: {
                        id: id
                    },
                    success: function success() {
                        notificationsChannel.trigger("notifications:load");
                        var view = new _emailView2["default"]({
                            model: model
                        });
                        _this.container.show(view)
                    },
                    error: function error() {
                        flashChannel.trigger("flash:message", {
                            message: _messages2["default"].inbox.openEmailError,
                            route: "page/" + page,
                            type: "danger"
                        })
                    }
                })
            }
        });
        module.exports = exports["default"]
    }, {
        "../messages": 33,
        "./model": 24,
        "./view.js": 27
    }],
    26: [function(require, module, exports) {
        var HandlebarsCompiler = require("hbsfy/runtime");
        module.exports = HandlebarsCompiler.template({
            1: function(depth0, helpers, partials, data) {
                var helper, alias1 = helpers.helperMissing,
                    alias2 = "function",
                    alias3 = this.escapeExpression;
                return '  <div class="email-action">\r\n    <a target="_blank" class="btn btn-primary" href="' + alias3((helper = (helper = helpers.ActionUrl || (depth0 != null ? depth0.ActionUrl : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "ActionUrl",
                    hash: {},
                    data: data
                }) : helper)) + '">' + alias3((helper = (helper = helpers.ActionText || (depth0 != null ? depth0.ActionText : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "ActionText",
                    hash: {},
                    data: data
                }) : helper)) + "</a>\r\n </div>\r\n"
            },
            compiler: [6, ">= 2.0.0-beta.1"],
            main: function(depth0, helpers, partials, data) {
                var stack1, helper, alias1 = helpers.helperMissing,
                    alias2 = "function",
                    alias3 = this.escapeExpression;
                return '<ul class="controls">\r\n  <li>\r\n    <a class="delete-email"><span class="fa fa-trash"></span> Delete</a>\r\n  </li>\r\n  <li class="navigation">\r\n    <a class="back"><span class="fa fa-chevron-left"></span> Back</a>\r\n  </li>\r\n</ul>\r\n<header>\r\n  <span class="email-from">' + alias3((helper = (helper = helpers.From || (depth0 != null ? depth0.From : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "From",
                    hash: {},
                    data: data
                }) : helper)) + '</span>\r\n  <span class="email-subject">' + alias3((helper = (helper = helpers.Subject || (depth0 != null ? depth0.Subject : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "Subject",
                    hash: {},
                    data: data
                }) : helper)) + '</span>\r\n  <span class="email-date">' + alias3((helper = (helper = helpers.SentDate || (depth0 != null ? depth0.SentDate : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "SentDate",
                    hash: {},
                    data: data
                }) : helper)) + '</span>\r\n</header>\r\n<div class="email-content">' + ((stack1 = (helper = (helper = helpers.Body || (depth0 != null ? depth0.Body : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "Body",
                    hash: {},
                    data: data
                }) : helper)) != null ? stack1 : "") + "</div>\r\n" + ((stack1 = helpers["if"].call(depth0, depth0 != null ? depth0.ActionUrl : depth0, {
                    name: "if",
                    hash: {},
                    fn: this.program(1, data, 0),
                    inverse: this.noop,
                    data: data
                })) != null ? stack1 : "")
            },
            useData: true
        })
    }, {
        "hbsfy/runtime": 15
    }],
    27: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var _emailTemplate = require("./template.hbs");
        var _emailTemplate2 = _interopRequireDefault(_emailTemplate);
        var _helpersBatchDeleteRequest = require("../helpers/batch-delete-request");
        var _helpersBatchDeleteRequest2 = _interopRequireDefault(_helpersBatchDeleteRequest);
        var _moment = require("moment");
        var _moment2 = _interopRequireDefault(_moment);
        var routerChannel = _orchestra2["default"].Radio.channel("router");
        var flashChannel = _orchestra2["default"].Radio.channel("flash");
        var modalChannel = _orchestra2["default"].Radio.channel("modal");
        exports["default"] = _orchestra2["default"].ItemView.extend({
            initialize: function initialize() {
                var _this = this;
                this.listenTo(this.model, "sync", this.render);
                this.listenTo(modalChannel, "modal:delete:message:yes", function() {
                    _this.deleteEmail()
                })
            },
            className: "email-container",
            tagName: "article",
            template: _emailTemplate2["default"],
            templateHelpers: function templateHelpers() {
                var model = this.model;
                return {
                    SentDate: (0, _moment2["default"])(model.get("SentDate")).format("MMM Do")
                }
            },
            ui: {
                deleteEmail: ".delete-email",
                back: ".back"
            },
            events: {
                "click @ui.deleteEmail": "openModel",
                "click @ui.back": "goBack"
            },
            goBack: function goBack() {
                routerChannel.trigger("navigate:page", this.model.get("page"))
            },
            onShow: function onShow() {
                this.$(".email-content").addClass("fade-in")
            },
            openModel: function openModel() {
                modalChannel.trigger("show:modal:delete:email")
            },
            deleteEmail: function deleteEmail() {
                var _this2 = this;
                (0, _helpersBatchDeleteRequest2["default"])(this.model.get("Id"), function(err, data) {
                    if (err) {
                        flashChannel.trigger("flash:message", {
                            message: "<strong>Error: </strong>" + data.statusText,
                            type: "danger"
                        })
                    } else {
                        _this2.model.trigger("destroy", _this2.model);
                        _this2.goBack()
                    }
                })
            }
        });
        module.exports = exports["default"]
    }, {
        "../helpers/batch-delete-request": 30,
        "./template.hbs": 26,
        moment: 17
    }],
    28: [function(require, module, exports) {
        var HandlebarsCompiler = require("hbsfy/runtime");
        module.exports = HandlebarsCompiler.template({
            compiler: [6, ">= 2.0.0-beta.1"],
            main: function(depth0, helpers, partials, data) {
                var stack1, helper, alias1 = helpers.helperMissing,
                    alias2 = "function";
                return '<div class="alert alert-dismissible ' + this.escapeExpression((helper = (helper = helpers.type || (depth0 != null ? depth0.type : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "type",
                    hash: {},
                    data: data
                }) : helper)) + '">\r\n  <button type="button" class="close js-close-alert" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>\r\n  ' + ((stack1 = (helper = (helper = helpers.message || (depth0 != null ? depth0.message : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "message",
                    hash: {},
                    data: data
                }) : helper)) != null ? stack1 : "") + "\r\n</div>"
            },
            useData: true
        })
    }, {
        "hbsfy/runtime": 15
    }],
    29: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var _templateHbs = require("./template.hbs");
        var _templateHbs2 = _interopRequireDefault(_templateHbs);
        var _backboneRadio = require("backbone.radio");
        var _backboneRadio2 = _interopRequireDefault(_backboneRadio);
        var flashChannel = _orchestra2["default"].Radio.channel("flash");
        exports["default"] = _orchestra2["default"].ItemView.extend({
            initialize: function initialize() {
                var _this = this;
                flashChannel.on("flash:message:empty", function() {
                    _this.close()
                })
            },
            template: _templateHbs2["default"],
            templateHelpers: function templateHelpers() {
                return {
                    type: "alert-" + this.model.get("type")
                }
            },
            ui: {
                close: ".js-close-alert"
            },
            events: {
                "click @ui.close": "close"
            },
            close: function close() {
                this.destroy()
            }
        });
        module.exports = exports["default"]
    }, {
        "./template.hbs": 28,
        "backbone.radio": 4
    }],
    30: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var $ = _orchestra2["default"].$;
        var csrf = document.querySelector('meta[name="csrf-token"]');
        var csrfToken = csrf ? csrf.getAttribute("content") : "";
        exports["default"] = function(id, cb) {
            console.log("you go here");
            $.ajax({
                method: "POST",
                url: id.length === 1 ? "/api/PlayerInboxWidget/PostDeleteMessage?id=" + id : "/api/PlayerInboxWidget/PostDeleteMessages?ids=" + id.toString(),
                headers: {
                    "X-CSRF-Token": csrfToken
                }
            }).done(function(data) {
                if ($.isEmptyObject(data)) {
                    cb(null, data)
                } else {
                    cb(false, data)
                }
            }).fail(function(data) {
                cb(true, data)
            })
        };
        module.exports = exports["default"]
    }, {}],
    31: [function(require, module, exports) {
        var HandlebarsCompiler = require("hbsfy/runtime");
        module.exports = HandlebarsCompiler.template({
            compiler: [6, ">= 2.0.0-beta.1"],
            main: function(depth0, helpers, partials, data) {
                return '<i class="fa fa-refresh fa-spin fa-fw"></i> Loading...\r\n'
            },
            useData: true
        })
    }, {
        "hbsfy/runtime": 15
    }],
    32: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var _templateHbs = require("./template.hbs");
        var _templateHbs2 = _interopRequireDefault(_templateHbs);
        exports["default"] = _orchestra2["default"].ItemView.extend({
            className: "loading",
            template: _templateHbs2["default"]
        });
        module.exports = exports["default"]
    }, {
        "./template.hbs": 31
    }],
    33: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports["default"] = {
            inbox: {
                empty: "Your inbox is empty",
                serverError: "<strong>Error</strong> please try again later",
                openEmailError: "<strong>Error</strong> Failed to open message",
                emailDeleted: "Message(s) has been successfully deleted"
            }
        };
        module.exports = exports["default"]
    }, {}],
    34: [function(require, module, exports) {
        var HandlebarsCompiler = require("hbsfy/runtime");
        module.exports = HandlebarsCompiler.template({
            compiler: [6, ">= 2.0.0-beta.1"],
            main: function(depth0, helpers, partials, data) {
                return '<div class="modal-dialog modal-sm">\r\n <div class="modal-content">\r\n   <div class="modal-body">\r\n      <p>Are you sure you want to delete selected message(s)?</p>\r\n   </div>\r\n    <div class="modal-footer">\r\n     <button id="deleteMessage" type="button" class="btn btn-default" data-dismiss="modal">Yes</button>\r\n    <button type="button" class="btn btn-default" data-dismiss="modal">No</button>\r\n   </div>\r\n  </div>\r\n</div>'
            },
            useData: true
        })
    }, {
        "hbsfy/runtime": 15
    }],
    35: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var _templateHbs = require("./template.hbs");
        var _templateHbs2 = _interopRequireDefault(_templateHbs);
        var modalChannel = _orchestra2["default"].Radio.channel("modal");
        exports["default"] = _orchestra2["default"].ItemView.extend({
            className: "modal fade",
            attributes: {
                "data-backdrop": "false"
            },
            initialize: function initialize() {
                var _this = this;
                this.$el.on("hidden.bs.modal", function() {
                    _this.close()
                })
            },
            ui: {
                deleteMessage: "#deleteMessage"
            },
            events: {
                "click @ui.deleteMessage": "deleteMessage"
            },
            template: _templateHbs2["default"],
            close: function close() {
                $(this.el).modal("hide")
            },
            deleteMessage: function deleteMessage() {
                modalChannel.trigger("modal:delete:message:yes")
            },
            onShow: function onShow() {
                $(this.el).modal("show")
            }
        });
        module.exports = exports["default"]
    }, {
        "./template.hbs": 34
    }],
    36: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var $ = _orchestra2["default"].$;
        exports["default"] = _orchestra2["default"].View.extend({
            tagName: "span",
            render: function render() {
                var _this = this;
                var posting = $.get("/api/commonServices/jitpipeline", {
                    requests: [{
                        Name: "PlayerInboxUnreadMessages"
                    }]
                }, "json");
                posting.done(function(res) {
                    if (res.PlayerInboxUnreadMessages.DidSucceed) {
                        _this.$el.text("(" + res.PlayerInboxUnreadMessages.Response + " Unread)")
                    }
                });
                return this
            }
        });
        module.exports = exports["default"]
    }, {}],
    37: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _backbonePaginator = require("backbone.paginator");
        var _backbonePaginator2 = _interopRequireDefault(_backbonePaginator);
        var _model = require("./model");
        var _model2 = _interopRequireDefault(_model);
        var _configConfig = require("../config/config");
        var _configConfig2 = _interopRequireDefault(_configConfig);
        exports["default"] = _backbonePaginator2["default"].extend({
            model: _model2["default"],
            url: function url() {
                return _configConfig2["default"].emails.url
            },
            state: {
                firstPage: 1,
                currentPage: 1
            },
            queryParams: {
                currentPage: "page",
                pageSize: null,
                totalEntries: null,
                totalPages: "TotalPages",
                sortKey: null
            },
            parseRecords: function parseRecords(res) {
                return res.Items
            },
            parseState: function parseState(res) {
                return {
                    totalRecords: res.TotalItems,
                    totalPages: res.TotalPages,
                    currentPage: res.CurrentPage,
                    pageSize: res.ItemsPerPage
                }
            }
        });
        module.exports = exports["default"]
    }, {
        "../config/config": 22,
        "./model": 42,
        "backbone.paginator": 2
    }],
    38: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var _snippetsLayoutTemplate = require("./layout-template.hbs");
        var _snippetsLayoutTemplate2 = _interopRequireDefault(_snippetsLayoutTemplate);
        var _snippetsItemView = require("./item-view.js");
        var _snippetsItemView2 = _interopRequireDefault(_snippetsItemView);
        var _playerInboxMessages = require("./../messages.js");
        var _playerInboxMessages2 = _interopRequireDefault(_playerInboxMessages);
        var _helpersBatchDelete = require("./../helpers/batch-delete-request.js");
        var _helpersBatchDelete2 = _interopRequireDefault(_helpersBatchDelete);
        var $ = _orchestra2["default"].$;
        var _ = _orchestra2["default"]._;
        var routerChannel = _orchestra2["default"].Radio.channel("router");
        var flashChannel = _orchestra2["default"].Radio.channel("flash");
        var modalChannel = _orchestra2["default"].Radio.channel("modal");
        var notificationsChannel = _orchestra2["default"].Radio.channel("notifications");
        exports["default"] = _orchestra2["default"].CompositeView.extend({
            initialize: function initialize(options) {
                var _this = this;
                this.listenTo(this.collection, "sync", this.render);
                this.listenTo(modalChannel, "modal:delete:message:yes", function() {
                    _this.deleteMultiple()
                });
                this.controls = options.inboxControls || {}
            },
            tagName: "div",
            className: "email-snippets-container",
            childView: _snippetsItemView2["default"],
            childViewContainer: ".email-snippets-body",
            childEvents: {
                "selected:email": "toggleDelete"
            },
            template: _snippetsLayoutTemplate2["default"],
            templateHelpers: function templateHelpers() {
                var prev = '<a class="prev"><span class="fa fa-chevron-left"></span> ' + this.controls.prevPage + "</a>";
                var next = '<a class="next">' + this.controls.nextPage + ' <span class="fa fa-chevron-right"></span></a>';
                var currentPage = this.collection.state.currentPage;
                var totalPages = this.collection.state.totalPages;
                var navigationControls = undefined;
                var controls = this.controls;
                if (currentPage === totalPages && totalPages > 1) {
                    navigationControls = prev
                } else if (currentPage > 1 && currentPage < totalPages) {
                    navigationControls = prev + "&nbsp;" + next
                } else if (totalPages > 1) {
                    navigationControls = next
                } else {
                    navigationControls = null
                }
                return {
                    navigationControls: navigationControls,
                    deleteEmail: controls.deleteEmail || "Delete",
                    selectAll: controls.selectAll || "Select All"
                }
            },
            ui: {
                selectAll: ".select-all",
                selectAllText: ".select-all-text",
                deleteBtn: ".delete",
                nextPage: ".next",
                prevPage: ".prev"
            },
            events: {
                "change @ui.selectAll": "toggleSelectAll",
                "click @ui.deleteBtn": "openModal",
                "click @ui.nextPage": "nextPage",
                "click @ui.prevPage": "prevPage"
            },
            nextPage: function nextPage() {
                routerChannel.trigger("navigate:page", this.collection.state.currentPage + 1)
            },
            prevPage: function prevPage() {
                routerChannel.trigger("navigate:page", this.collection.state.currentPage - 1)
            },
            toggleSelectAll: function toggleSelectAll(e) {
                var state = $(e.target).is(":checked") ? true : false;
                this.children.forEach(function(child) {
                    child.toggleSelect(state)
                })
            },
            toggleDelete: function toggleDelete() {
                var children = [];
                this.children.forEach(function(child) {
                    children.push(child.model.get("selected"))
                });
                var selected = _.filter(children, function(child) {
                    return child === true
                });
                if (selected.length) {
                    this.ui.deleteBtn.removeClass("disabled")
                } else {
                    this.ui.deleteBtn.addClass("disabled")
                }
            },
            openModal: function openModal(e) {
                var elm = $(e.target);
                if (!elm.hasClass("disabled")) {
                    modalChannel.trigger("show:modal:delete:email")
                }
            },
            deleteMultiple: function deleteMultiple() {
                var _this2 = this;
                var selectedModels = _.filter(this.collection.models, function(model) {
                    return model.get("selected") === true
                });
                if (selectedModels.length) {
                    (function() {
                        var ids = [];
                        _.each(selectedModels, function(model) {
                            ids.push(model.get("Id"));
                            _this2.deleteOne(model)
                        });
                        _this2.ui.deleteBtn.addClass("disabled");
                        (0, _helpersBatchDelete2["default"])(ids, function(err, data) {
                            if (err) {
                                flashChannel.trigger("flash:message", {
                                    message: "<strong>Error: </strong>" + data.statusText,
                                    type: "danger"
                                });
                                _this2.ui.deleteBtn.removeClass("disabled")
                            } else {
                                flashChannel.trigger("flash:message", {
                                    message: _playerInboxMessages2["default"].inbox.emailDeleted,
                                    type: "success"
                                })
                            }
                        })
                    })()
                }
            },
            deleteOne: function deleteOne(model) {
                model.trigger("destroy", model);
                if (!model.get("IsRead")) {
                    notificationsChannel.trigger("notifications:load")
                }
            }
        });
        module.exports = exports["default"]
    }, {
        "./../helpers/batch-delete-request.js": 30,
        "./../messages.js": 33,
        "./item-view.js": 40,
        "./layout-template.hbs": 41
    }],
    39: [function(require, module, exports) {
        var HandlebarsCompiler = require("hbsfy/runtime");
        module.exports = HandlebarsCompiler.template({
            1: function(depth0, helpers, partials, data) {
                return '      <span class="snippet-icon fa fa-envelope-o"></span>\r\n'
            },
            3: function(depth0, helpers, partials, data) {
                return '      <span class="snippet-icon fa fa-envelope"></span>\r\n'
            },
            compiler: [6, ">= 2.0.0-beta.1"],
            main: function(depth0, helpers, partials, data) {
                var stack1, helper, alias1 = helpers.helperMissing,
                    alias2 = "function",
                    alias3 = this.escapeExpression;
                return '<td>\r\n  <label class="snippet-select" for="selectEmailSnippet_' + alias3((helper = (helper = helpers.Id || (depth0 != null ? depth0.Id : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "Id",
                    hash: {},
                    data: data
                }) : helper)) + '">\r\n    <input id="selectEmailSnippet_' + alias3((helper = (helper = helpers.Id || (depth0 != null ? depth0.Id : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "Id",
                    hash: {},
                    data: data
                }) : helper)) + '" type="checkbox"/>\r\n  </label>\r\n</td>\r\n<td>\r\n  <div class="snippet-subject">\r\n' + ((stack1 = helpers["if"].call(depth0, depth0 != null ? depth0.IsRead : depth0, {
                    name: "if",
                    hash: {},
                    fn: this.program(1, data, 0),
                    inverse: this.program(3, data, 0),
                    data: data
                })) != null ? stack1 : "") + "    \r\n    " + alias3((helper = (helper = helpers.Subject || (depth0 != null ? depth0.Subject : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "Subject",
                    hash: {},
                    data: data
                }) : helper)) + '\r\n  </div>\r\n</td>\r\n<td>\r\n  <div class="snippet-from">' + alias3((helper = (helper = helpers.From || (depth0 != null ? depth0.From : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "From",
                    hash: {},
                    data: data
                }) : helper)) + '</div>\r\n</td>\r\n<td><div class="snippet-date">' + alias3((helper = (helper = helpers.SentDate || (depth0 != null ? depth0.SentDate : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "SentDate",
                    hash: {},
                    data: data
                }) : helper)) + "</div></td>\r\n\r\n"
            },
            useData: true
        })
    }, {
        "hbsfy/runtime": 15
    }],
    40: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var _itemTemplateHbs = require("./item-template.hbs");
        var _itemTemplateHbs2 = _interopRequireDefault(_itemTemplateHbs);
        var _moment = require("moment");
        var _moment2 = _interopRequireDefault(_moment);
        var routerChannel = _orchestra2["default"].Radio.channel("router");
        var loadingChannel = _orchestra2["default"].Radio.channel("loading");
        exports["default"] = _orchestra2["default"].ItemView.extend({
            tagName: "tr",
            template: _itemTemplateHbs2["default"],
            templateHelpers: function templateHelpers() {
                var model = this.model;
                return {
                    SentDate: (0, _moment2["default"])(model.get("SentDate")).format("MMM Do")
                }
            },
            className: function className() {
                if (this.model.get("IsRead")) {
                    return "snippet read"
                } else {
                    return "snippet unread"
                }
            },
            ui: {
                checkbox: 'input[type="checkbox"]',
                open: "td:not(td:first-child)"
            },
            events: {
                "click @ui.open": "openEmail",
                "change @ui.checkbox": "toggleChecked"
            },
            toggleChecked: function toggleChecked() {
                var state = this.ui.checkbox.is(":checked") ? true : false;
                this.toggleSelect(state)
            },
            onShow: function onShow() {
                this.$el.addClass("fade-in")
            },
            onBeforeRender: function onBeforeRender() {
                this.model.set({
                    page: this.model.collection.state.currentPage
                })
            },
            toggleSelect: function toggleSelect(state) {
                this.model.set({
                    selected: state
                });
                this.ui.checkbox.prop("checked", state);
                if (state) {
                    this.$el.addClass("selected")
                } else {
                    this.$el.removeClass("selected")
                }
                this.trigger("selected:email")
            },
            openEmail: function openEmail() {
                loadingChannel.trigger("loading:empty");
                this.$el.addClass("snippet-loading");
                routerChannel.trigger("navigate:open:email", this.model.collection.state.currentPage, this.model.id)
            }
        });
        module.exports = exports["default"]
    }, {
        "./item-template.hbs": 39,
        moment: 17
    }],
    41: [function(require, module, exports) {
        var HandlebarsCompiler = require("hbsfy/runtime");
        module.exports = HandlebarsCompiler.template({
            1: function(depth0, helpers, partials, data) {
                var helper, alias1 = helpers.helperMissing,
                    alias2 = "function",
                    alias3 = this.escapeExpression;
                return '        <th class="header-' + alias3((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "name",
                    hash: {},
                    data: data
                }) : helper)) + '">' + alias3((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "name",
                    hash: {},
                    data: data
                }) : helper)) + "</th>\r\n"
            },
            compiler: [6, ">= 2.0.0-beta.1"],
            main: function(depth0, helpers, partials, data) {
                var stack1, helper, alias1 = helpers.helperMissing,
                    alias2 = "function",
                    alias3 = this.escapeExpression;
                return '<ul class="controls">\r\n  <li>\r\n    <label>\r\n      <input class="select-all" type="checkbox"> <span class="select-all-text">' + alias3((helper = (helper = helpers.selectAll || (depth0 != null ? depth0.selectAll : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "selectAll",
                    hash: {},
                    data: data
                }) : helper)) + '</span>\r\n    </label>\r\n  </li>\r\n  <li>\r\n    <a class="delete disabled"><span class="fa fa-trash"></span> ' + alias3((helper = (helper = helpers.deleteEmail || (depth0 != null ? depth0.deleteEmail : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "deleteEmail",
                    hash: {},
                    data: data
                }) : helper)) + '</a>\r\n  </li>\r\n  <li class="navigation">\r\n    ' + ((stack1 = (helper = (helper = helpers.navigationControls || (depth0 != null ? depth0.navigationControls : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "navigationControls",
                    hash: {},
                    data: data
                }) : helper)) != null ? stack1 : "") + '\r\n  </li>\r\n</ul>\r\n<table class="table snippets">\r\n  <thead class="email-snippets-head">\r\n    <tr>\r\n' + ((stack1 = helpers.each.call(depth0, depth0 != null ? depth0.items : depth0, {
                    name: "each",
                    hash: {},
                    fn: this.program(1, data, 0),
                    inverse: this.noop,
                    data: data
                })) != null ? stack1 : "") + '    </tr>\r\n  </thead>\r\n  <tbody class="email-snippets-body"></tbody>\r\n</table>\r\n'
            },
            useData: true
        })
    }, {
        "hbsfy/runtime": 15
    }],
    42: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        exports["default"] = _orchestra2["default"].Model.extend({
            idAttribute: "Id",
            defaults: {
                Id: 0,
                Subject: "",
                From: "",
                SentDate: "",
                IsRead: false,
                IsRetrieved: false
            }
        });
        module.exports = exports["default"]
    }, {}],
    43: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var _snippetsCompositeView = require("./composite-view.js");
        var _snippetsCompositeView2 = _interopRequireDefault(_snippetsCompositeView);
        var _collection = require("./collection");
        var _collection2 = _interopRequireDefault(_collection);
        var _messages = require("../messages");
        var _messages2 = _interopRequireDefault(_messages);
        var flashChannel = _orchestra2["default"].Radio.channel("flash");
        var routerChannel = _orchestra2["default"].Radio.channel("router");
        var loadingChannel = _orchestra2["default"].Radio.channel("loading");
        exports["default"] = _orchestra2["default"].Router.extend({
            initialize: function initialize(options) {
                var _this = this;
                this.container = options.container;
                this.tableHeaders = options.tableHeaders;
                this.inboxControls = options.inboxControls;
                this.listenTo(routerChannel, "navigate:page", function(page) {
                    _this.navigate("page/" + page, {
                        trigger: true
                    })
                })
            },
            routes: {
                "": "loadFirstPage",
                "page/:pageNumber": "openPage"
            },
            loadFirstPage: function loadFirstPage() {
                this.openPage(1)
            },
            openPage: function openPage(pageNumber) {
                var collection = new _collection2["default"];
                this.listenTo(collection, "request", function() {
                    loadingChannel.trigger("loading:show")
                });
                this.listenTo(collection, "sync", function() {
                    loadingChannel.trigger("loading:empty")
                });
                collection.getPage(+pageNumber, {
                    success: function success(collection) {
                        if (!collection.length) {
                            flashChannel.trigger("flash:message", {
                                message: _messages2["default"].inbox.empty,
                                type: "info"
                            })
                        } else {
                            flashChannel.trigger("flash:message:empty")
                        }
                    },
                    error: function error() {
                        flashChannel.trigger("flash:message", {
                            message: _messages2["default"].inbox.serverError,
                            type: "danger"
                        })
                    }
                });
                var view = new _snippetsCompositeView2["default"]({
                    inboxControls: this.inboxControls,
                    model: new _orchestra2["default"].Model({
                        items: this.tableHeaders
                    }),
                    collection: collection
                });
                this.container.show(view)
            }
        });
        module.exports = exports["default"]
    }, {
        "../messages": 33,
        "./collection": 37,
        "./composite-view.js": 38
    }]
}, {}, [1]);
(function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof require == "function" && require;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e)
            }, l, l.exports, e, t, n, r)
        }
        return n[o].exports
    }
    var i = typeof require == "function" && require;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s
})({
    1: [function(require, module, exports) {
        (function(global) {
            "use strict";

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                }
            }
            var _AppAppJs = require("./App/app.js");
            var _AppAppJs2 = _interopRequireDefault(_AppAppJs);
            var zeus = typeof global.zeus !== "undefined" ? global.zeus : global.zeus = {};
            (function(root) {
                root.FinanceLimitWidget = function(options) {
                    this.initialise = function() {
                        var app = new _AppAppJs2["default"](options);
                        app.start()
                    };
                    this.initialise()
                }
            })(zeus)
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {
        "./App/app.js": 13
    }],
    2: [function(require, module, exports) {
        "use strict";
        var _interopRequireWildcard = function(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        };
        exports.__esModule = true;
        var _import = require("./handlebars/base");
        var base = _interopRequireWildcard(_import);
        var _SafeString = require("./handlebars/safe-string");
        var _SafeString2 = _interopRequireWildcard(_SafeString);
        var _Exception = require("./handlebars/exception");
        var _Exception2 = _interopRequireWildcard(_Exception);
        var _import2 = require("./handlebars/utils");
        var Utils = _interopRequireWildcard(_import2);
        var _import3 = require("./handlebars/runtime");
        var runtime = _interopRequireWildcard(_import3);
        var _noConflict = require("./handlebars/no-conflict");
        var _noConflict2 = _interopRequireWildcard(_noConflict);

        function create() {
            var hb = new base.HandlebarsEnvironment;
            Utils.extend(hb, base);
            hb.SafeString = _SafeString2["default"];
            hb.Exception = _Exception2["default"];
            hb.Utils = Utils;
            hb.escapeExpression = Utils.escapeExpression;
            hb.VM = runtime;
            hb.template = function(spec) {
                return runtime.template(spec, hb)
            };
            return hb
        }
        var inst = create();
        inst.create = create;
        _noConflict2["default"](inst);
        inst["default"] = inst;
        exports["default"] = inst;
        module.exports = exports["default"]
    }, {
        "./handlebars/base": 3,
        "./handlebars/exception": 4,
        "./handlebars/no-conflict": 5,
        "./handlebars/runtime": 6,
        "./handlebars/safe-string": 7,
        "./handlebars/utils": 8
    }],
    3: [function(require, module, exports) {
        "use strict";
        var _interopRequireWildcard = function(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        };
        exports.__esModule = true;
        exports.HandlebarsEnvironment = HandlebarsEnvironment;
        exports.createFrame = createFrame;
        var _import = require("./utils");
        var Utils = _interopRequireWildcard(_import);
        var _Exception = require("./exception");
        var _Exception2 = _interopRequireWildcard(_Exception);
        var VERSION = "3.0.1";
        exports.VERSION = VERSION;
        var COMPILER_REVISION = 6;
        exports.COMPILER_REVISION = COMPILER_REVISION;
        var REVISION_CHANGES = {
            1: "<= 1.0.rc.2",
            2: "== 1.0.0-rc.3",
            3: "== 1.0.0-rc.4",
            4: "== 1.x.x",
            5: "== 2.0.0-alpha.x",
            6: ">= 2.0.0-beta.1"
        };
        exports.REVISION_CHANGES = REVISION_CHANGES;
        var isArray = Utils.isArray,
            isFunction = Utils.isFunction,
            toString = Utils.toString,
            objectType = "[object Object]";

        function HandlebarsEnvironment(helpers, partials) {
            this.helpers = helpers || {};
            this.partials = partials || {};
            registerDefaultHelpers(this)
        }
        HandlebarsEnvironment.prototype = {
            constructor: HandlebarsEnvironment,
            logger: logger,
            log: log,
            registerHelper: function registerHelper(name, fn) {
                if (toString.call(name) === objectType) {
                    if (fn) {
                        throw new _Exception2["default"]("Arg not supported with multiple helpers")
                    }
                    Utils.extend(this.helpers, name)
                } else {
                    this.helpers[name] = fn
                }
            },
            unregisterHelper: function unregisterHelper(name) {
                delete this.helpers[name]
            },
            registerPartial: function registerPartial(name, partial) {
                if (toString.call(name) === objectType) {
                    Utils.extend(this.partials, name)
                } else {
                    if (typeof partial === "undefined") {
                        throw new _Exception2["default"]("Attempting to register a partial as undefined")
                    }
                    this.partials[name] = partial
                }
            },
            unregisterPartial: function unregisterPartial(name) {
                delete this.partials[name]
            }
        };

        function registerDefaultHelpers(instance) {
            instance.registerHelper("helperMissing", function() {
                if (arguments.length === 1) {
                    return undefined
                } else {
                    throw new _Exception2["default"]('Missing helper: "' + arguments[arguments.length - 1].name + '"')
                }
            });
            instance.registerHelper("blockHelperMissing", function(context, options) {
                var inverse = options.inverse,
                    fn = options.fn;
                if (context === true) {
                    return fn(this)
                } else if (context === false || context == null) {
                    return inverse(this)
                } else if (isArray(context)) {
                    if (context.length > 0) {
                        if (options.ids) {
                            options.ids = [options.name]
                        }
                        return instance.helpers.each(context, options)
                    } else {
                        return inverse(this)
                    }
                } else {
                    if (options.data && options.ids) {
                        var data = createFrame(options.data);
                        data.contextPath = Utils.appendContextPath(options.data.contextPath, options.name);
                        options = {
                            data: data
                        }
                    }
                    return fn(context, options)
                }
            });
            instance.registerHelper("each", function(context, options) {
                if (!options) {
                    throw new _Exception2["default"]("Must pass iterator to #each")
                }
                var fn = options.fn,
                    inverse = options.inverse,
                    i = 0,
                    ret = "",
                    data = undefined,
                    contextPath = undefined;
                if (options.data && options.ids) {
                    contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]) + "."
                }
                if (isFunction(context)) {
                    context = context.call(this)
                }
                if (options.data) {
                    data = createFrame(options.data)
                }

                function execIteration(field, index, last) {
                    if (data) {
                        data.key = field;
                        data.index = index;
                        data.first = index === 0;
                        data.last = !!last;
                        if (contextPath) {
                            data.contextPath = contextPath + field
                        }
                    }
                    ret = ret + fn(context[field], {
                        data: data,
                        blockParams: Utils.blockParams([context[field], field], [contextPath + field, null])
                    })
                }
                if (context && typeof context === "object") {
                    if (isArray(context)) {
                        for (var j = context.length; i < j; i++) {
                            execIteration(i, i, i === context.length - 1)
                        }
                    } else {
                        var priorKey = undefined;
                        for (var key in context) {
                            if (context.hasOwnProperty(key)) {
                                if (priorKey) {
                                    execIteration(priorKey, i - 1)
                                }
                                priorKey = key;
                                i++
                            }
                        }
                        if (priorKey) {
                            execIteration(priorKey, i - 1, true)
                        }
                    }
                }
                if (i === 0) {
                    ret = inverse(this)
                }
                return ret
            });
            instance.registerHelper("if", function(conditional, options) {
                if (isFunction(conditional)) {
                    conditional = conditional.call(this)
                }
                if (!options.hash.includeZero && !conditional || Utils.isEmpty(conditional)) {
                    return options.inverse(this)
                } else {
                    return options.fn(this)
                }
            });
            instance.registerHelper("unless", function(conditional, options) {
                return instance.helpers["if"].call(this, conditional, {
                    fn: options.inverse,
                    inverse: options.fn,
                    hash: options.hash
                })
            });
            instance.registerHelper("with", function(context, options) {
                if (isFunction(context)) {
                    context = context.call(this)
                }
                var fn = options.fn;
                if (!Utils.isEmpty(context)) {
                    if (options.data && options.ids) {
                        var data = createFrame(options.data);
                        data.contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]);
                        options = {
                            data: data
                        }
                    }
                    return fn(context, options)
                } else {
                    return options.inverse(this)
                }
            });
            instance.registerHelper("log", function(message, options) {
                var level = options.data && options.data.level != null ? parseInt(options.data.level, 10) : 1;
                instance.log(level, message)
            });
            instance.registerHelper("lookup", function(obj, field) {
                return obj && obj[field]
            })
        }
        var logger = {
            methodMap: {
                0: "debug",
                1: "info",
                2: "warn",
                3: "error"
            },
            DEBUG: 0,
            INFO: 1,
            WARN: 2,
            ERROR: 3,
            level: 1,
            log: function log(level, message) {
                if (typeof console !== "undefined" && logger.level <= level) {
                    var method = logger.methodMap[level];
                    (console[method] || console.log).call(console, message)
                }
            }
        };
        exports.logger = logger;
        var log = logger.log;
        exports.log = log;

        function createFrame(object) {
            var frame = Utils.extend({}, object);
            frame._parent = object;
            return frame
        }
    }, {
        "./exception": 4,
        "./utils": 8
    }],
    4: [function(require, module, exports) {
        "use strict";
        exports.__esModule = true;
        var errorProps = ["description", "fileName", "lineNumber", "message", "name", "number", "stack"];

        function Exception(message, node) {
            var loc = node && node.loc,
                line = undefined,
                column = undefined;
            if (loc) {
                line = loc.start.line;
                column = loc.start.column;
                message += " - " + line + ":" + column
            }
            var tmp = Error.prototype.constructor.call(this, message);
            for (var idx = 0; idx < errorProps.length; idx++) {
                this[errorProps[idx]] = tmp[errorProps[idx]]
            }
            if (Error.captureStackTrace) {
                Error.captureStackTrace(this, Exception)
            }
            if (loc) {
                this.lineNumber = line;
                this.column = column
            }
        }
        Exception.prototype = new Error;
        exports["default"] = Exception;
        module.exports = exports["default"]
    }, {}],
    5: [function(require, module, exports) {
        (function(global) {
            "use strict";
            exports.__esModule = true;
            exports["default"] = function(Handlebars) {
                var root = typeof global !== "undefined" ? global : window,
                    $Handlebars = root.Handlebars;
                Handlebars.noConflict = function() {
                    if (root.Handlebars === Handlebars) {
                        root.Handlebars = $Handlebars
                    }
                }
            };
            module.exports = exports["default"]
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {}],
    6: [function(require, module, exports) {
        "use strict";
        var _interopRequireWildcard = function(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        };
        exports.__esModule = true;
        exports.checkRevision = checkRevision;
        exports.template = template;
        exports.wrapProgram = wrapProgram;
        exports.resolvePartial = resolvePartial;
        exports.invokePartial = invokePartial;
        exports.noop = noop;
        var _import = require("./utils");
        var Utils = _interopRequireWildcard(_import);
        var _Exception = require("./exception");
        var _Exception2 = _interopRequireWildcard(_Exception);
        var _COMPILER_REVISION$REVISION_CHANGES$createFrame = require("./base");

        function checkRevision(compilerInfo) {
            var compilerRevision = compilerInfo && compilerInfo[0] || 1,
                currentRevision = _COMPILER_REVISION$REVISION_CHANGES$createFrame.COMPILER_REVISION;
            if (compilerRevision !== currentRevision) {
                if (compilerRevision < currentRevision) {
                    var runtimeVersions = _COMPILER_REVISION$REVISION_CHANGES$createFrame.REVISION_CHANGES[currentRevision],
                        compilerVersions = _COMPILER_REVISION$REVISION_CHANGES$createFrame.REVISION_CHANGES[compilerRevision];
                    throw new _Exception2["default"]("Template was precompiled with an older version of Handlebars than the current runtime. " + "Please update your precompiler to a newer version (" + runtimeVersions + ") or downgrade your runtime to an older version (" + compilerVersions + ").")
                } else {
                    throw new _Exception2["default"]("Template was precompiled with a newer version of Handlebars than the current runtime. " + "Please update your runtime to a newer version (" + compilerInfo[1] + ").")
                }
            }
        }

        function template(templateSpec, env) {
            if (!env) {
                throw new _Exception2["default"]("No environment passed to template")
            }
            if (!templateSpec || !templateSpec.main) {
                throw new _Exception2["default"]("Unknown template object: " + typeof templateSpec)
            }
            env.VM.checkRevision(templateSpec.compiler);

            function invokePartialWrapper(partial, context, options) {
                if (options.hash) {
                    context = Utils.extend({}, context, options.hash)
                }
                partial = env.VM.resolvePartial.call(this, partial, context, options);
                var result = env.VM.invokePartial.call(this, partial, context, options);
                if (result == null && env.compile) {
                    options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
                    result = options.partials[options.name](context, options)
                }
                if (result != null) {
                    if (options.indent) {
                        var lines = result.split("\n");
                        for (var i = 0, l = lines.length; i < l; i++) {
                            if (!lines[i] && i + 1 === l) {
                                break
                            }
                            lines[i] = options.indent + lines[i]
                        }
                        result = lines.join("\n")
                    }
                    return result
                } else {
                    throw new _Exception2["default"]("The partial " + options.name + " could not be compiled when running in runtime-only mode")
                }
            }
            var container = {
                strict: function strict(obj, name) {
                    if (!(name in obj)) {
                        throw new _Exception2["default"]('"' + name + '" not defined in ' + obj)
                    }
                    return obj[name]
                },
                lookup: function lookup(depths, name) {
                    var len = depths.length;
                    for (var i = 0; i < len; i++) {
                        if (depths[i] && depths[i][name] != null) {
                            return depths[i][name]
                        }
                    }
                },
                lambda: function lambda(current, context) {
                    return typeof current === "function" ? current.call(context) : current
                },
                escapeExpression: Utils.escapeExpression,
                invokePartial: invokePartialWrapper,
                fn: function fn(i) {
                    return templateSpec[i]
                },
                programs: [],
                program: function program(i, data, declaredBlockParams, blockParams, depths) {
                    var programWrapper = this.programs[i],
                        fn = this.fn(i);
                    if (data || depths || blockParams || declaredBlockParams) {
                        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths)
                    } else if (!programWrapper) {
                        programWrapper = this.programs[i] = wrapProgram(this, i, fn)
                    }
                    return programWrapper
                },
                data: function data(value, depth) {
                    while (value && depth--) {
                        value = value._parent
                    }
                    return value
                },
                merge: function merge(param, common) {
                    var obj = param || common;
                    if (param && common && param !== common) {
                        obj = Utils.extend({}, common, param)
                    }
                    return obj
                },
                noop: env.VM.noop,
                compilerInfo: templateSpec.compiler
            };

            function ret(context) {
                var options = arguments[1] === undefined ? {} : arguments[1];
                var data = options.data;
                ret._setup(options);
                if (!options.partial && templateSpec.useData) {
                    data = initData(context, data)
                }
                var depths = undefined,
                    blockParams = templateSpec.useBlockParams ? [] : undefined;
                if (templateSpec.useDepths) {
                    depths = options.depths ? [context].concat(options.depths) : [context]
                }
                return templateSpec.main.call(container, context, container.helpers, container.partials, data, blockParams, depths)
            }
            ret.isTop = true;
            ret._setup = function(options) {
                if (!options.partial) {
                    container.helpers = container.merge(options.helpers, env.helpers);
                    if (templateSpec.usePartial) {
                        container.partials = container.merge(options.partials, env.partials)
                    }
                } else {
                    container.helpers = options.helpers;
                    container.partials = options.partials
                }
            };
            ret._child = function(i, data, blockParams, depths) {
                if (templateSpec.useBlockParams && !blockParams) {
                    throw new _Exception2["default"]("must pass block params")
                }
                if (templateSpec.useDepths && !depths) {
                    throw new _Exception2["default"]("must pass parent depths")
                }
                return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths)
            };
            return ret
        }

        function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
            function prog(context) {
                var options = arguments[1] === undefined ? {} : arguments[1];
                return fn.call(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), depths && [context].concat(depths))
            }
            prog.program = i;
            prog.depth = depths ? depths.length : 0;
            prog.blockParams = declaredBlockParams || 0;
            return prog
        }

        function resolvePartial(partial, context, options) {
            if (!partial) {
                partial = options.partials[options.name]
            } else if (!partial.call && !options.name) {
                options.name = partial;
                partial = options.partials[partial]
            }
            return partial
        }

        function invokePartial(partial, context, options) {
            options.partial = true;
            if (partial === undefined) {
                throw new _Exception2["default"]("The partial " + options.name + " could not be found")
            } else if (partial instanceof Function) {
                return partial(context, options)
            }
        }

        function noop() {
            return ""
        }

        function initData(context, data) {
            if (!data || !("root" in data)) {
                data = data ? _COMPILER_REVISION$REVISION_CHANGES$createFrame.createFrame(data) : {};
                data.root = context
            }
            return data
        }
    }, {
        "./base": 3,
        "./exception": 4,
        "./utils": 8
    }],
    7: [function(require, module, exports) {
        "use strict";
        exports.__esModule = true;

        function SafeString(string) {
            this.string = string
        }
        SafeString.prototype.toString = SafeString.prototype.toHTML = function() {
            return "" + this.string
        };
        exports["default"] = SafeString;
        module.exports = exports["default"]
    }, {}],
    8: [function(require, module, exports) {
        "use strict";
        exports.__esModule = true;
        exports.extend = extend;
        exports.indexOf = indexOf;
        exports.escapeExpression = escapeExpression;
        exports.isEmpty = isEmpty;
        exports.blockParams = blockParams;
        exports.appendContextPath = appendContextPath;
        var escape = {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#x27;",
            "`": "&#x60;"
        };
        var badChars = /[&<>"'`]/g,
            possible = /[&<>"'`]/;

        function escapeChar(chr) {
            return escape[chr]
        }

        function extend(obj) {
            for (var i = 1; i < arguments.length; i++) {
                for (var key in arguments[i]) {
                    if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
                        obj[key] = arguments[i][key]
                    }
                }
            }
            return obj
        }
        var toString = Object.prototype.toString;
        exports.toString = toString;
        var isFunction = function isFunction(value) {
            return typeof value === "function"
        };
        if (isFunction(/x/)) {
            exports.isFunction = isFunction = function(value) {
                return typeof value === "function" && toString.call(value) === "[object Function]"
            }
        }
        var isFunction;
        exports.isFunction = isFunction;
        var isArray = Array.isArray || function(value) {
            return value && typeof value === "object" ? toString.call(value) === "[object Array]" : false
        };
        exports.isArray = isArray;

        function indexOf(array, value) {
            for (var i = 0, len = array.length; i < len; i++) {
                if (array[i] === value) {
                    return i
                }
            }
            return -1
        }

        function escapeExpression(string) {
            if (typeof string !== "string") {
                if (string && string.toHTML) {
                    return string.toHTML()
                } else if (string == null) {
                    return ""
                } else if (!string) {
                    return string + ""
                }
                string = "" + string
            }
            if (!possible.test(string)) {
                return string
            }
            return string.replace(badChars, escapeChar)
        }

        function isEmpty(value) {
            if (!value && value !== 0) {
                return true
            } else if (isArray(value) && value.length === 0) {
                return true
            } else {
                return false
            }
        }

        function blockParams(params, ids) {
            params.path = ids;
            return params
        }

        function appendContextPath(contextPath, id) {
            return (contextPath ? contextPath + "." : "") + id
        }
    }, {}],
    9: [function(require, module, exports) {
        module.exports = require("./dist/cjs/handlebars.runtime")["default"]
    }, {
        "./dist/cjs/handlebars.runtime": 2
    }],
    10: [function(require, module, exports) {
        module.exports = require("handlebars/runtime")["default"]
    }, {
        "handlebars/runtime": 9
    }],
    11: [function(require, module, exports) {
        "use strict";
        var strictUriEncode = require("strict-uri-encode");
        exports.extract = function(str) {
            return str.split("?")[1] || ""
        };
        exports.parse = function(str) {
            if (typeof str !== "string") {
                return {}
            }
            str = str.trim().replace(/^(\?|#|&)/, "");
            if (!str) {
                return {}
            }
            return str.split("&").reduce(function(ret, param) {
                var parts = param.replace(/\+/g, " ").split("=");
                var key = parts.shift();
                var val = parts.length > 0 ? parts.join("=") : undefined;
                key = decodeURIComponent(key);
                val = val === undefined ? null : decodeURIComponent(val);
                val = val.replace(/(javascript:|\((?=(.*)\))|\;)/g, "");
                if (!ret.hasOwnProperty(key)) {
                    ret[key] = val
                } else if (Array.isArray(ret[key])) {
                    ret[key].push(val)
                } else {
                    ret[key] = [ret[key], val]
                }
                return ret
            }, {})
        };
        exports.stringify = function(obj) {
            return obj ? Object.keys(obj).sort().map(function(key) {
                var val = obj[key];
                if (Array.isArray(val)) {
                    return val.sort().map(function(val2) {
                        return strictUriEncode(key) + "=" + strictUriEncode(val2)
                    }).join("&")
                }
                return strictUriEncode(key) + "=" + strictUriEncode(val)
            }).filter(function(x) {
                return x.length > 0
            }).join("&") : ""
        }
    }, {
        "strict-uri-encode": 12
    }],
    12: [function(require, module, exports) {
        "use strict";
        module.exports = function(str) {
            return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
                return "%" + c.charCodeAt(0).toString(16).toUpperCase()
            })
        }
    }, {}],
    13: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _layout = require("./layout");
        var _layout2 = _interopRequireDefault(_layout);
        var _SetLimitsView = require("../SetLimits/view");
        var _SetLimitsView2 = _interopRequireDefault(_SetLimitsView);
        var _SetLimitsModel = require("../SetLimits/model");
        var _SetLimitsModel2 = _interopRequireDefault(_SetLimitsModel);
        var _ResetLimitsView = require("../ResetLimits/view");
        var _ResetLimitsView2 = _interopRequireDefault(_ResetLimitsView);
        var _financeLimitPendingLimitsCompositeView = require("./../../../../../CasinoToolkit_High5/Scripts/Widgets/FinanceLimit/PendingLimits/composite-view.js");
        var _financeLimitPendingLimitsCompositeView2 = _interopRequireDefault(_financeLimitPendingLimitsCompositeView);
        var _PendingLimitsCollection = require("../PendingLimits/collection");
        var _PendingLimitsCollection2 = _interopRequireDefault(_PendingLimitsCollection);
        var _CurrentLimitsView = require("../CurrentLimits/view");
        var _CurrentLimitsView2 = _interopRequireDefault(_CurrentLimitsView);
        var _CurrentLimitsModel = require("../CurrentLimits/model");
        var _CurrentLimitsModel2 = _interopRequireDefault(_CurrentLimitsModel);
        var _SuccessView = require("../Success/view");
        var _SuccessView2 = _interopRequireDefault(_SuccessView);
        var _FlashesView = require("../Flashes/view");
        var _FlashesView2 = _interopRequireDefault(_FlashesView);
        var _queryString = require("query-string");
        var _queryString2 = _interopRequireDefault(_queryString);
        var mainChannel = _orchestra.Radio.channel("mainChannel");
        var messages = {
            serverError: "Error please try again later",
            successMessage: "Your limits have been updated successfully"
        };
        var capitalize = function capitalize(string) {
            return string.charAt(0).toUpperCase() + string.slice(1)
        };
        var getLimitState = function getLimitState(limit) {
            if (limit.ActiveLimit === null && limit.RequestedLimit === null && limit.CoolOffEnd !== null) {
                return "Default"
            }
            if (limit.RequestedLimit === null && limit.CoolOffEnd !== null) {
                return new Date(limit.CoolOffEnd) < new Date ? "Awaiting Default Activation" : "Pending Default"
            }
            if (limit.ActiveLimit === null) return "Default";
            if (limit.ActiveLimit && _orchestra._.isNull(limit.CoolOffEnd)) return "Active";
            return new Date(limit.CoolOffEnd) < new Date ? "Awaiting Activation" : "Pending"
        };
        var getLimitType = function getLimitType(limit) {
            if (limit.name === "Daily") {
                return 0
            } else if (limit.name === "Weekly") {
                return 1
            } else {
                return 2
            }
        };

        function parseLimits(response) {
            var wrapped = (0, _orchestra._)(response.Limits);
            return wrapped.pick(_orchestra._.isObject).forEach(function(val, key) {
                val.name = key.replace("Deposit", "");
                val.amount = val.ActiveLimit;
                val.requestedAmount = val.RequestedLimit;
                val.type = getLimitType(val);
                val.state = getLimitState(val);
                val.max = _orchestra._.filter(response.DefaultLimits, function(x) {
                    return x.LimitType === val.type
                })[0].Limit;
                val.min = _orchestra._.filter(response.DefaultLimits, function(x) {
                    return x.LimitType === 3
                })[0].Limit;
                val.isPendingDefault = val.state === "Pending Default";
                if (val.state === "Awaiting Default Activation") {
                    val.isAwaitingDefaultActivation = true;
                    val.isPendingDefault = true
                }
                val.isPending = val.state === "Pending";
                if (val.state === "Awaiting Activation") {
                    val.isAwaitingActivation = true;
                    val.isPending = true
                }
                val.isDefault = val.state === "Default";
                val.hasLimit = val.amount || val.isDefault
            }).values().value()
        }
        exports["default"] = _orchestra.Application.extend({
            initialize: function initialize(options) {
                var _this = this;
                this.options = options;
                this.layoutView = new _layout2["default"];
                this.layoutView.render();
                this.nextActionUrl = _queryString2["default"].parse(location.search).nextAction || null;
                mainChannel.on("set:limits", function(limits) {
                    return _this.setLimits(limits)
                });
                mainChannel.on("activate:pending:limits", function(limits) {
                    return _this.activatePendingLimits(limits)
                });
                mainChannel.on("show:cancel:pending:limits:modal", this.showCancelPendingLimitsModal, this);
                mainChannel.on("reset:limits", this.resetLimitsToDefault, this)
            },
            reload: function reload(messageType, message) {
                var _window$location = window.location;
                var protocol = _window$location.protocol;
                var host = _window$location.host;
                var pathname = _window$location.pathname;
                var params = "?messageType=" + messageType + "&message=" + message;
                window.location.href = protocol + "//" + host + pathname + params
            },
            getCurrentLimits: function getCurrentLimits(response) {
                _orchestra.$.ajax({
                    url: "/api/FinanceLimitWidget/GetLimits",
                    method: "GET",
                    timeout: 2e4
                }).done(function(data) {
                    return response(false, data)
                }).fail(function(data) {
                    return response(true, data)
                })
            },
            onStart: function onStart() {
                var _this2 = this; {
                    var search = window.location.search;
                    var type = _queryString2["default"].parse(search).messageType || null;
                    var message = _queryString2["default"].parse(search).message || null;
                    if (type && message) {
                        this.showFlash({
                            type: type,
                            message: message
                        })
                    }
                }
                this.getCurrentLimits(function(err, response) {
                    if (err) {
                        _this2.showFlash({
                            type: "danger",
                            message: messages.serverError
                        })
                    } else {
                        (function() {
                            var limits = parseLimits(response);
                            var hasLimits = _orchestra._.some(limits, "hasLimit");
                            var hasPendingLimits = _orchestra._.some(limits, "isPending");
                            var hasDefaultLimits = _orchestra._.every(limits, "isDefault");
                            var hasPendingDefaultLimits = _orchestra._.some(limits, "isPendingDefault");
                            var hasAwaitingDefaultActivationLimits = _orchestra._.some(limits, "isAwaitingDefaultActivation");
                            var hasAwaitingActivationLimits = _orchestra._.some(limits, "isAwaitingActivation");
                            var limitsModel = {};
                            var siteDefaultLimits = {};
                            limits.forEach(function(limit) {
                                var name = limit.name.toLowerCase();
                                limitsModel[name] = limit.isDefault ? "Site Default" : limit.amount;
                                siteDefaultLimits[name] = limit.max
                            });
                            if (hasLimits) {
                                _this2.showCurrentLimitsView(limitsModel)
                            } else {
                                _this2.layoutView.getRegion("currentLimits").empty()
                            }
                            if (hasPendingLimits || hasPendingDefaultLimits || hasAwaitingActivationLimits || hasAwaitingDefaultActivationLimits) {
                                (function() {
                                    var collection = [];
                                    limits.forEach(function(limit) {
                                        if (limit.isPending || limit.state.isAwaitingActivation || limit.isPendingDefault || limit.isAwaitingDefaultActivation) {
                                            var type = limit.type;
                                            var _name = limit.name;
                                            var value = limit.requestedAmount;
                                            collection.push({
                                                type: type,
                                                name: _name,
                                                value: value
                                            })
                                        }
                                    });
                                    _this2.showPendingLimitsView(collection);
                                    if (hasAwaitingActivationLimits || hasAwaitingDefaultActivationLimits) {
                                        _this2.layoutView.getRegion("pendingLimits").currentView.enableActivatePendingLimits()
                                    }
                                })()
                            }
                            if (!hasPendingDefaultLimits && !hasAwaitingDefaultActivationLimits) {
                                if (!hasDefaultLimits) {
                                    _this2.showResetLimitsView()
                                }
                            } {
                                var minDeposit = limits[0].min;
                                var _hasPendingLimits = _hasPendingLimits || hasPendingDefaultLimits;
                                _this2.showSetLimitsView({
                                    hasPendingLimits: _hasPendingLimits,
                                    siteDefaultLimits: siteDefaultLimits,
                                    minDeposit: minDeposit
                                })
                            }
                        })()
                    }
                })
            },
            setLimits: function setLimits(newLimits) {
                var _this3 = this;
                var data = {};
                var csrf = document.querySelector('meta[name="csrf-token"]');
                var csrfToken = csrf ? csrf.getAttribute("content") : ""; {
                    var wrapped = (0, _orchestra._)(newLimits);
                    var limits = wrapped.map(function(val, key) {
                        return {
                            LimitType: getLimitType({
                                name: capitalize(key)
                            }),
                            LimitAmount: val
                        }
                    }).filter(function(limit) {
                        return limit.LimitAmount > 0
                    }).value();
                    data.Limits = limits
                }
                _orchestra.$.ajax({
                    type: "POST",
                    url: "/api/FinanceLimitWidget/UpdateLimits",
                    contentType: "application/json",
                    data: JSON.stringify(data),
                    headers: {
                        "X-CSRF-Token": csrfToken
                    },
                    timeout: 2e4
                }).done(function() {
                    if (_this3.nextActionUrl) {
                        _this3.showSuccessView(_this3.nextActionUrl)
                    }
                    _this3.reload("success", messages.successMessage)
                }).fail(function() {
                    return _this3.showFlash({
                        type: "danger",
                        message: messages.serverError
                    })
                })
            },
            activatePendingLimits: function activatePendingLimits(newLimits) {
                var _this4 = this;
                var csrf = document.querySelector('meta[name="csrf-token"]');
                var csrfToken = csrf ? csrf.getAttribute("content") : "";
                var data = {
                    LimitTypes: _orchestra._.map(newLimits, function(n) {
                        return n.type
                    })
                };
                _orchestra.$.ajax({
                    type: "POST",
                    url: "/api/FinanceLimitWidget/ConfirmLimits",
                    contentType: "application/json",
                    data: JSON.stringify(data),
                    headers: {
                        "X-CSRF-Token": csrfToken
                    },
                    timeout: 2e4
                }).done(function() {
                    _this4.reload("success", messages.successMessage)
                }).fail(function() {
                    return _this4.showFlash({
                        type: "danger",
                        message: messages.serverError
                    })
                })
            },
            resetLimitsToDefault: function resetLimitsToDefault() {
                var _this5 = this;
                var csrf = document.querySelector('meta[name="csrf-token"]');
                var csrfToken = csrf ? csrf.getAttribute("content") : "";
                var data = {
                    Limits: [{
                        LimitType: 0,
                        LimitAmount: null
                    }, {
                        LimitType: 1,
                        LimitAmount: null
                    }, {
                        LimitType: 2,
                        LimitAmount: null
                    }]
                };
                _orchestra.$.ajax({
                    type: "POST",
                    url: "/api/FinanceLimitWidget/UpdateLimits",
                    contentType: "application/json",
                    data: JSON.stringify(data),
                    headers: {
                        "X-CSRF-Token": csrfToken
                    },
                    timeout: 2e4
                }).done(function() {
                    _this5.reload("success", messages.successMessage)
                }).fail(function() {
                    return _this5.showFlash({
                        type: "danger",
                        message: messages.serverError
                    })
                })
            },
            showPendingLimitsView: function showPendingLimitsView(limits) {
                this.layoutView.getRegion("pendingLimits").show(new _financeLimitPendingLimitsCompositeView2["default"]({
                    collection: new _PendingLimitsCollection2["default"](limits)
                }))
            },
            showSetLimitsView: function showSetLimitsView(limits) {
                var model = new _SetLimitsModel2["default"](limits);
                var view = new _SetLimitsView2["default"]({
                    model: model
                });
                view.hasPendingLimits = model.get("hasPendingLimits");
                this.layoutView.getRegion("setLimits").show(view)
            },
            showResetLimitsView: function showResetLimitsView() {
                this.layoutView.getRegion("resetLimits").show(new _ResetLimitsView2["default"])
            },
            showCurrentLimitsView: function showCurrentLimitsView(currentLimits) {
                this.layoutView.getRegion("currentLimits").show(new _CurrentLimitsView2["default"]({
                    model: new _CurrentLimitsModel2["default"](currentLimits)
                }))
            },
            showSuccessView: function showSuccessView(url) {
                this.layoutView.getRegion("pendingLimits").empty();
                this.layoutView.getRegion("setLimits").empty();
                this.layoutView.getRegion("resetLimits").empty();
                this.layoutView.getRegion("currentLimits").empty();
                this.layoutView.getRegion("success").show(new _SuccessView2["default"]({
                    model: new _orchestra.Model({
                        nextAction: url
                    })
                }))
            },
            showFlash: function showFlash(model) {
                this.layoutView.getRegion("flashes").empty();
                this.layoutView.getRegion("flashes").show(new _FlashesView2["default"]({
                    model: new _orchestra.Model(model)
                }))
            }
        });
        module.exports = exports["default"]
    }, {
        "../CurrentLimits/model": 15,
        "../CurrentLimits/view": 16,
        "../Flashes/view": 18,
        "../PendingLimits/collection": 19,
        "../ResetLimits/view": 21,
        "../SetLimits/model": 22,
        "../SetLimits/view": 23,
        "../Success/view": 25,
        "./../../../../../CasinoToolkit_High5/Scripts/Widgets/FinanceLimit/PendingLimits/composite-view.js": 29,
        "./layout": 14,
        "query-string": 11
    }],
    14: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var _financeLimitLayoutTemplate = require("./../../../../../CasinoToolkit_BingoGodz_Mobile/Scripts/Widgets/FinanceLimit/App/template.hbs");
        var _financeLimitLayoutTemplate2 = _interopRequireDefault(_financeLimitLayoutTemplate);
        var nextActionChannel = _orchestra2["default"].Radio.channel("nextActionChannel");
        exports["default"] = _orchestra2["default"].LayoutView.extend({
            template: _financeLimitLayoutTemplate2["default"],
            el: ".finance-limit-container",
            regions: {
                setLimits: ".finance-limit-set-limits",
                resetLimits: ".finance-limit-reset-limits",
                pendingLimits: ".finance-limit-pending-limits",
                currentLimits: ".finance-limit-current-limits",
                success: ".finance-limit-success",
                flashes: ".finance-limit-flashes"
            }
        });
        module.exports = exports["default"]
    }, {
        "./../../../../../CasinoToolkit_BingoGodz_Mobile/Scripts/Widgets/FinanceLimit/App/template.hbs": 26
    }],
    15: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        exports["default"] = _orchestra2["default"].Model.extend({
            defaults: {
                daily: null,
                weekly: null,
                monthly: null
            }
        });
        module.exports = exports["default"]
    }, {}],
    16: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var _financeLimitCurrentLimitsTemplate = require("./../../../../../CasinoToolkit_High5/Scripts/Widgets/FinanceLimit/CurrentLimits/template.hbs");
        var _financeLimitCurrentLimitsTemplate2 = _interopRequireDefault(_financeLimitCurrentLimitsTemplate);
        exports["default"] = _orchestra2["default"].ItemView.extend({
            template: _financeLimitCurrentLimitsTemplate2["default"]
        });
        module.exports = exports["default"]
    }, {
        "./../../../../../CasinoToolkit_High5/Scripts/Widgets/FinanceLimit/CurrentLimits/template.hbs": 28
    }],
    17: [function(require, module, exports) {
        var HandlebarsCompiler = require("hbsfy/runtime");
        module.exports = HandlebarsCompiler.template({
            compiler: [6, ">= 2.0.0-beta.1"],
            main: function(depth0, helpers, partials, data) {
                var helper, alias1 = helpers.helperMissing,
                    alias2 = "function",
                    alias3 = this.escapeExpression;
                return '<div class="alert alert-' + alias3((helper = (helper = helpers.type || (depth0 != null ? depth0.type : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "type",
                    hash: {},
                    data: data
                }) : helper)) + '">' + alias3((helper = (helper = helpers.message || (depth0 != null ? depth0.message : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "message",
                    hash: {},
                    data: data
                }) : helper)) + "</div>"
            },
            useData: true
        })
    }, {
        "hbsfy/runtime": 10
    }],
    18: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var _templateHbs = require("./template.hbs");
        var _templateHbs2 = _interopRequireDefault(_templateHbs);
        exports["default"] = _orchestra2["default"].ItemView.extend({
            template: _templateHbs2["default"]
        });
        module.exports = exports["default"]
    }, {
        "./template.hbs": 17
    }],
    19: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var _model = require("./model");
        var _model2 = _interopRequireDefault(_model);
        exports["default"] = _orchestra2["default"].Collection.extend({
            model: _model2["default"]
        });
        module.exports = exports["default"]
    }, {
        "./model": 20
    }],
    20: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        exports["default"] = _orchestra2["default"].Model.extend({
            defaults: {
                type: 0,
                name: "",
                value: 0,
                isDefault: false
            }
        });
        module.exports = exports["default"]
    }, {}],
    21: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var _financeLimitResetLimitsTemplate = require("./../../../../../CasinoToolkit_BingoGodz_Mobile/Scripts/Widgets/FinanceLimit/ResetLimits/template.hbs");
        var _financeLimitResetLimitsTemplate2 = _interopRequireDefault(_financeLimitResetLimitsTemplate);
        var mainChannel = _orchestra2["default"].Radio.channel("mainChannel");
        var $ = _orchestra2["default"].$;
        var _ = _orchestra2["default"]._;
        exports["default"] = _orchestra2["default"].ItemView.extend({
            template: _financeLimitResetLimitsTemplate2["default"],
            ui: {
                resetLimits: "button"
            },
            events: {
                "click @ui.resetLimits": "resetLimits"
            },
            resetLimits: function resetLimits(e) {
                e.preventDefault();
                mainChannel.trigger("reset:limits")
            }
        });
        module.exports = exports["default"]
    }, {
        "./../../../../../CasinoToolkit_BingoGodz_Mobile/Scripts/Widgets/FinanceLimit/ResetLimits/template.hbs": 27
    }],
    22: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        exports["default"] = _orchestra2["default"].Model.extend({
            defaults: {
                siteDefaultLimits: {
                    daily: 0,
                    weekly: 0,
                    monthly: 0
                },
                newLimits: {
                    daily: null,
                    weekly: null,
                    monthly: null
                },
                hasPendingLimits: false,
                minDeposit: 10
            }
        });
        module.exports = exports["default"]
    }, {}],
    23: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var _financeLimitSetLimitsTemplate = require("./../../../../../CasinoToolkit_High5/Scripts/Widgets/FinanceLimit/SetLimits/template.hbs");
        var _financeLimitSetLimitsTemplate2 = _interopRequireDefault(_financeLimitSetLimitsTemplate);
        var mainChannel = _orchestra2["default"].Radio.channel("mainChannel");
        var $ = _orchestra2["default"].$;
        var _ = _orchestra2["default"]._;
        exports["default"] = _orchestra2["default"].ItemView.extend({
            template: _financeLimitSetLimitsTemplate2["default"],
            ui: {
                limits: 'input[type="number"]',
                daily: 'input[name="daily"]',
                weekly: 'input[name="weekly"]',
                monthly: 'input[name="monthly"]',
                submitLimits: ".js-submit-finance-limits",
                resetForm: ".js-reset-finance-limits-form"
            },
            events: {
                "keyup @ui.limits": "updateLimits",
                "click @ui.submitLimits": "setLimits",
                "click @ui.resetForm": "resetForm"
            },
            updateLimits: function updateLimits(e) {
                var _this = this;
                var key = e.keyCode || e.which;
                if (key !== 37 && key !== 38 && key !== 39 && key !== 40 && key !== 8 && key !== 46) {
                    var sanitized = $(e.target).val().replace(/[^0-9]/g, "");
                    $(e.target).val(sanitized)
                }
                var limits = {
                    daily: Number(this.ui.daily.val()),
                    weekly: Number(this.ui.weekly.val()),
                    monthly: Number(this.ui.monthly.val())
                };
                var hasNewLimits = _.some(_.values(limits));
                if (hasNewLimits) {
                    var errors = [];
                    if (limits.daily > limits.weekly) {
                        errors.push({
                            name: "weekly",
                            message: "Weekly limit should be higher than daily."
                        })
                    }
                    if (limits.weekly > limits.monthly) {
                        errors.push({
                            name: "monthly",
                            message: "Monthly limit should be higher than weekly."
                        })
                    }
                    var siteDefaultLimits = this.model.toJSON().siteDefaultLimits;
                    for (var prop in limits) {
                        if (limits[prop] > siteDefaultLimits[prop]) {
                            errors.push({
                                name: prop,
                                message: "Limit can not be greater than the site default limit."
                            })
                        }
                        if (limits[prop] < this.model.toJSON().minDeposit && limits[prop] !== 0) {
                            errors.push({
                                name: prop,
                                message: "Limit should be higher than the minimum deposit amount."
                            })
                        }
                    }
                    this.$el.find(".error").remove();
                    if (errors.length) {
                        this.ui.submitLimits.prop("disabled", true);
                        errors.forEach(function(error) {
                            return _this.errorHandler(error)
                        })
                    } else {
                        this.model.set("daily", limits.daily);
                        this.model.set("weekly", limits.weekly);
                        this.model.set("monthly", limits.monthly);
                        this.ui.submitLimits.prop("disabled", false)
                    }
                }
            },
            setLimits: function setLimits(e) {
                e.preventDefault();
                var _model$toJSON = this.model.toJSON();
                var daily = _model$toJSON.daily;
                var weekly = _model$toJSON.weekly;
                var monthly = _model$toJSON.monthly;
                if (this.model.get("hasPendingLimits")) {
                    bootbox.confirm("You already have pending limits, would you like to overwrite these limits? (may reset the 24 hour cooling off period).", function(result) {
                        if (result) {
                            mainChannel.trigger("set:limits", {
                                daily: daily,
                                weekly: weekly,
                                monthly: monthly
                            })
                        }
                    })
                } else {
                    mainChannel.trigger("set:limits", {
                        daily: daily,
                        weekly: weekly,
                        monthly: monthly
                    })
                }
            },
            resetForm: function resetForm(e) {
                if (e) {
                    e.preventDefault()
                }
                this.ui.limits.val(null);
                this.ui.submitLimits.prop("disabled", true)
            },
            errorHandler: function errorHandler(error) {
                this.ui[error.name].parent().parent().append('<p class="error">' + error.message + "</p>")
            }
        });
        module.exports = exports["default"]
    }, {
        "./../../../../../CasinoToolkit_High5/Scripts/Widgets/FinanceLimit/SetLimits/template.hbs": 33
    }],
    24: [function(require, module, exports) {
        var HandlebarsCompiler = require("hbsfy/runtime");
        module.exports = HandlebarsCompiler.template({
            compiler: [6, ">= 2.0.0-beta.1"],
            main: function(depth0, helpers, partials, data) {
                var helper;
                return '<p>You have successfully set your deposit limits, you can change these at anytime in your account area.</p>\n<a class="btn btn-primary" href="' + this.escapeExpression((helper = (helper = helpers.nextAction || (depth0 != null ? depth0.nextAction : depth0)) != null ? helper : helpers.helperMissing, typeof helper === "function" ? helper.call(depth0, {
                    name: "nextAction",
                    hash: {},
                    data: data
                }) : helper)) + '">Continue</a>'
            },
            useData: true
        })
    }, {
        "hbsfy/runtime": 10
    }],
    25: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var _templateHbs = require("./template.hbs");
        var _templateHbs2 = _interopRequireDefault(_templateHbs);
        exports["default"] = _orchestra2["default"].ItemView.extend({
            template: _templateHbs2["default"]
        });
        module.exports = exports["default"]
    }, {
        "./template.hbs": 24
    }],
    26: [function(require, module, exports) {
        var HandlebarsCompiler = require("hbsfy/runtime");
        module.exports = HandlebarsCompiler.template({
            compiler: [6, ">= 2.0.0-beta.1"],
            main: function(depth0, helpers, partials, data) {
                return '<div class="finance-limit-flashes section-container"></div>\n<div class="finance-limit-current-limits section-container"></div>\n<div class="finance-limit-pending-limits section-container"></div>\n<div class="finance-limit-set-limits section-container"></div>\n<div class="finance-limit-reset-limits section-container"></div>\n<div class="finance-limit-success section-container"></div>'
            },
            useData: true
        })
    }, {
        "hbsfy/runtime": 10
    }],
    27: [function(require, module, exports) {
        var HandlebarsCompiler = require("hbsfy/runtime");
        module.exports = HandlebarsCompiler.template({
            compiler: [6, ">= 2.0.0-beta.1"],
            main: function(depth0, helpers, partials, data) {
                return '<div class="title">\n <h2>Reset deposit limits</h2>\n</div>\n<p class="info-text">By clicking on the reset button below you will reset your deposit limits. The same terms apply.</p>\n<button class="btn btn-primary">Reset Deposit Limits</button>'
            },
            useData: true
        })
    }, {
        "hbsfy/runtime": 10
    }],
    28: [function(require, module, exports) {
        var HandlebarsCompiler = require("hbsfy/runtime");
        module.exports = HandlebarsCompiler.template({
            compiler: [6, ">= 2.0.0-beta.1"],
            main: function(depth0, helpers, partials, data) {
                var helper, alias1 = helpers.helperMissing,
                    alias2 = "function",
                    alias3 = this.escapeExpression;
                return '<h2>Current Deposit limits</h2>\n<p class="info-text">Below are your current deposit limits, to change these use the form below.</p>\n<div class="row">\n  <div class="col-sm-12">\n    <div class="responsive-table">\n      <table class="table table-striped">\n        <thead>\n          <tr>\n            <th>Daily</th>\n            <th>Weekly</th>\n            <th>Monthly</th>\n          </tr>\n        </thead>\n        <tr>\n          <td>&pound;' + alias3((helper = (helper = helpers.daily || (depth0 != null ? depth0.daily : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "daily",
                    hash: {},
                    data: data
                }) : helper)) + "</td>\n          <td>&pound;" + alias3((helper = (helper = helpers.weekly || (depth0 != null ? depth0.weekly : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "weekly",
                    hash: {},
                    data: data
                }) : helper)) + "</td>\n          <td>&pound;" + alias3((helper = (helper = helpers.monthly || (depth0 != null ? depth0.monthly : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "monthly",
                    hash: {},
                    data: data
                }) : helper)) + "</td>\n        </tr>\n      </table>\n    </div>\n  </div>\n</div>"
            },
            useData: true
        })
    }, {
        "hbsfy/runtime": 10
    }],
    29: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var _financeLimitPendingLimitsTemplate = require("./layout-template.hbs");
        var _financeLimitPendingLimitsTemplate2 = _interopRequireDefault(_financeLimitPendingLimitsTemplate);
        var _financeLimitPendingLimitsView = require("./view.js");
        var _financeLimitPendingLimitsView2 = _interopRequireDefault(_financeLimitPendingLimitsView);
        var mainChannel = _orchestra2["default"].Radio.channel("mainChannel");
        var _ = _orchestra2["default"]._;
        exports["default"] = _orchestra2["default"].CompositeView.extend({
            ui: {
                activatePendingLimits: ".js-activate-pending-limits"
            },
            events: {
                "click @ui.activatePendingLimits": "activatePendingLimits"
            },
            enableActivatePendingLimits: function enableActivatePendingLimits() {
                this.ui.activatePendingLimits.prop("disabled", false)
            },
            activatePendingLimits: function activatePendingLimits(e) {
                e.preventDefault();
                var limits = _.map(this.collection.models, function(model) {
                    return model.toJSON()
                });
                mainChannel.trigger("activate:pending:limits", limits)
            },
            childView: _financeLimitPendingLimitsView2["default"],
            template: _financeLimitPendingLimitsTemplate2["default"],
            childViewContainer: ".pending-container"
        });
        module.exports = exports["default"]
    }, {
        "./layout-template.hbs": 31,
        "./view.js": 32
    }],
    30: [function(require, module, exports) {
        var HandlebarsCompiler = require("hbsfy/runtime");
        module.exports = HandlebarsCompiler.template({
            1: function(depth0, helpers, partials, data) {
                var helper;
                return "    &pound;" + this.escapeExpression((helper = (helper = helpers.value || (depth0 != null ? depth0.value : depth0)) != null ? helper : helpers.helperMissing, typeof helper === "function" ? helper.call(depth0, {
                    name: "value",
                    hash: {},
                    data: data
                }) : helper)) + "\n"
            },
            3: function(depth0, helpers, partials, data) {
                return "    Site Default\n"
            },
            compiler: [6, ">= 2.0.0-beta.1"],
            main: function(depth0, helpers, partials, data) {
                var stack1, helper, alias1 = helpers.helperMissing,
                    alias2 = "function",
                    alias3 = this.escapeExpression;
                return '<div class="time-periods">\n  <h3 data-limit-type="' + alias3((helper = (helper = helpers.type || (depth0 != null ? depth0.type : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "type",
                    hash: {},
                    data: data
                }) : helper)) + '">\n    ' + alias3((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : alias1, typeof helper === alias2 ? helper.call(depth0, {
                    name: "name",
                    hash: {},
                    data: data
                }) : helper)) + '\n </h3>\n</div>\n\n<div class="time-values">\n' + ((stack1 = helpers["if"].call(depth0, depth0 != null ? depth0.value : depth0, {
                    name: "if",
                    hash: {},
                    fn: this.program(1, data, 0),
                    inverse: this.program(3, data, 0),
                    data: data
                })) != null ? stack1 : "") + "</div>\n"
            },
            useData: true
        })
    }, {
        "hbsfy/runtime": 10
    }],
    31: [function(require, module, exports) {
        var HandlebarsCompiler = require("hbsfy/runtime");
        module.exports = HandlebarsCompiler.template({
            compiler: [6, ">= 2.0.0-beta.1"],
            main: function(depth0, helpers, partials, data) {
                return '<h2>Pending Changes</h2>\n<div class="row">\n  <div class="col-sm-12">\n  <div class="pending-container">\n </div>\n  <p class="info-text">You must wait 24 hours before applying these changes to your account.</p>\n  <p class="info-text">Any further increases to your deposit limits will cause a further 24 hours to be applied.</p>\n  <button class="btn btn-primary js-activate-pending-limits" disabled="disabled">Activate Limits</button>\n  <div>\n</div>'
            },
            useData: true
        })
    }, {
        "hbsfy/runtime": 10
    }],
    32: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var _orchestra = window.Orchestra;
        var _orchestra2 = _interopRequireDefault(_orchestra);
        var _financeLimitPendingLimitsItemTemplate = require("./item-template.hbs");
        var _financeLimitPendingLimitsItemTemplate2 = _interopRequireDefault(_financeLimitPendingLimitsItemTemplate);
        var _CasinoToolkit_BaseScriptsWidgetsFinanceLimitPendingLimitsModelJs = require("../../../../../CasinoToolkit_Base/Scripts/Widgets/FinanceLimit/PendingLimits/model.js");
        var _CasinoToolkit_BaseScriptsWidgetsFinanceLimitPendingLimitsModelJs2 = _interopRequireDefault(_CasinoToolkit_BaseScriptsWidgetsFinanceLimitPendingLimitsModelJs);
        exports["default"] = _orchestra2["default"].ItemView.extend({
            template: _financeLimitPendingLimitsItemTemplate2["default"],
            tagName: "div",
            className: "period-column",
            model: _CasinoToolkit_BaseScriptsWidgetsFinanceLimitPendingLimitsModelJs2["default"]
        });
        module.exports = exports["default"]
    }, {
        "../../../../../CasinoToolkit_Base/Scripts/Widgets/FinanceLimit/PendingLimits/model.js": 20,
        "./item-template.hbs": 30
    }],
    33: [function(require, module, exports) {
        var HandlebarsCompiler = require("hbsfy/runtime");
        module.exports = HandlebarsCompiler.template({
            compiler: [6, ">= 2.0.0-beta.1"],
            main: function(depth0, helpers, partials, data) {
                var stack1, alias1 = this.lambda,
                    alias2 = this.escapeExpression;
                return '<h2>Set deposit limits</h2>\n<p class="info-text">We recommend that you set your deposit limits to help you manage your spending. Use the form below to limit the amount that may be deposited daily, weekly or monthly.</p>\n<ul>\n  <li>If you decrease your limit, the change will be instant.</li>\n  <li>If you increase your limit, it will take 24 hours to take effect at which point you can confirm the changes.</li>\n  <li>If you submit a change when you already have a pending change, your pending changes will be cancelled.</li>\n</ul>\n<div class="row">\n  <div class="col-sm-12">\n    <form class="form set-limits-form">\n      <div class="form-group set-limits-period">\n        <label for="daily">Daily</label>\n        <div class="input-group">\n          <span class="currency-sign input-group-addon">£</span>\n          <input type="number" class="form-control" name="daily" value="' + alias2(alias1((stack1 = depth0 != null ? depth0.newLimits : depth0) != null ? stack1.daily : stack1, depth0)) + '" min="0" step="1">\n        </div>\n      </div>\n      <div class="form-group set-limits-period">\n        <label for="weekly">Weekly</label>\n        <div class="input-group">\n          <span class="currency-sign input-group-addon">£</span>\n          <input type="number" class="form-control" name="weekly" value="' + alias2(alias1((stack1 = depth0 != null ? depth0.newLimits : depth0) != null ? stack1.weekly : stack1, depth0)) + '" min="0" step="1">\n        </div>\n      </div>\n      <div class="form-group set-limits-period">\n        <label for="monthly">Monthly</label>\n        <div class="input-group">\n          <span class="currency-sign input-group-addon">£</span>\n          <input type="number" class="form-control" name="monthly" value="' + alias2(alias1((stack1 = depth0 != null ? depth0.newLimits : depth0) != null ? stack1.monthly : stack1, depth0)) + '" min="0" step="1">\n        </div>\n      </div>\n    </from>\n    <div class="set-limits-btn-container">\n      <button type="button" class="btn btn-secondary secondary-btn js-submit-finance-limits" disabled="disabled">Continue</button>\n      <button type="button" class="btn btn-secondary primary-btn js-reset-finance-limits-form">Reset</button>\n    </div>\n  </div>\n</div>'
            },
            useData: true
        })
    }, {
        "hbsfy/runtime": 10
    }]
}, {}, [1]);
var zeus = zeus || {};
zeus.promotionsHistory = zeus.promotionsHistory || {};
(function() {
    var self = this;
    var clickEvent;
    var promoApiUrl = "api/Promotions/";
    self.promoCode = "";
    self.mobile = false;
    this.init = function() {
        this.checkPlatform();
        this.setupPage();
        this.addBindings()
    };
    this.checkPlatform = function() {
        if ($.mobile === undefined) {
            clickEvent = "click";
            self.mobile = false
        } else {
            clickEvent = "vclick";
            self.mobile = true
        }
    };
    this.setupPage = function() {
        defaultReturnURL = $("#defaultURL").val();
        var siteRoot = $("*[data-siteroot]").data("siteroot");
        promoApiUrl = siteRoot + promoApiUrl;
        self.cancelBtn = $(".btn-cancel")
    };
    this.addBindings = function() {
        $(document).on(clickEvent, ".btn-cancel", function(e) {
            e.preventDefault();
            var $this = $(this);
            self.promoCode = $this.data("promotioncode");
            self.popup("cancel")
        });
        $(document).on(clickEvent, "#btnConfirmCancel", function(e) {
            e.preventDefault();
            self.cancelBonus()
        });
        if (self.mobile) {
            $(document).on(clickEvent, "#btnCloseModal", function(e) {
                $("#bonusHistory_Modal").modal("hide")
            });
            $(".bonus-history-table tr.toggle").click(function() {
                $($(this).data("target")).collapse("toggle")
            });
            $(".details .collapse").on("hide", function() {
                self.toggleRow($(this))
            }).on("show", function() {
                self.toggleRow($(this))
            })
        }
    };
    this.cancelBonus = function() {
        $.ajax({
            url: promoApiUrl + "CancelBonus/" + self.promoCode,
            success: function(resp) {
                if (resp === "true" || resp === true) {
                    self.popup("success")
                } else {
                    self.popup("error")
                }
            },
            beforeSend: function() {
                self.cancelBtn.text("Loading").prop("disabled", true).addClass("loading");
                $("#promotionsTable .btn").prop("disabled", true);
                $("#modalButtons .btn").prop("disabled", true);
                $("#loadingText").show()
            },
            complete: function() {
                self.cancelBtn.text("Cancel").prop("disabled", false).removeClass("loading");
                $("#promotionsTable .btn").prop("disabled", false);
                $("#modalButtons .btn").prop("disabled", false);
                $("#loadingText").hide()
            },
            error: function() {
                self.popup("error")
            }
        })
    };
    this.popup = function(type) {
        if (zeus.promotionsHistory.override && zeus.promotionsHistory.override.popup) {
            zeus.promotionsHistory.override.popup(type)
        } else {
            var message = "";
            var title = "";
            var firstButton = "";
            var secondButton = "";
            var okButton = "<button type='button' id='btnCloseModal' class='btn btn-green'>Ok</button>";
            switch (type) {
                case "error":
                    message = "<p>Sorry but the Godz could not cancel the bonus at this time</p><p>Please try again, if the problem continues contact Customer Support</p>";
                    title = "Sorry!";
                    firstButton = okButton;
                    break;
                case "success":
                    message = "<p>The Godz are processing your request to cancel the bonus.</p><p>It may take a while for this to completed, so check back here later.</p>";
                    title = "Processing!";
                    secondButton = "<a type='button' id='btnReturnToLobby' href='" + defaultReturnURL + "' rel='fade' class='btn btn-blue second-button'>Go to Lobby</a>";
                    break;
                case "cancel":
                    message = "<P>By canceling the promotion you will clear all of the funds in your bonus balance and cancel the wagering requirements associated with this promotion.</p><p class='middle-message'>You will then be free to claim any other promotion on offer.</p><p class='are-you-sure'>Are you sure you wish to cancel this promotion?</p>";
                    title = "Cancel Bonus";
                    firstButton = "<button type='button' id='btnCloseModal' class='btn btn-red'>No</button>";
                    secondButton = "<button type='button' id='btnConfirmCancel' class='btn btn-green second-button'>Yes</button>";
                    break;
                default:
                    title = "Sorry!";
                    firstButton = okButton;
                    message = "<p>There has been an error</p><p>Please try again</p>"
            }
            if (self.mobile) {
                self.showMobileModal(title, message, firstButton, secondButton)
            } else {
                self.showDesktopPopup(title, message, type)
            }
        }
    };
    this.showMobileModal = function(title, message, firstButton, secondButton) {
        var modalButtonsArea = $("#modalButtons");
        modalButtonsArea.html("");
        $("#modalTitle").text(title);
        $("#modalMessage").html(message);
        if (firstButton !== "") {
            modalButtonsArea.append(firstButton)
        }
        if (secondButton !== "") {
            modalButtonsArea.append(secondButton)
        }
        $("#bonusHistory_Modal").modal("show")
    };
    this.showDesktopPopup = function(title, message, type) {
        $("#info-dialog").remove();
        if (type == "cancel") {
            secondaryBtn = {
                text: "Yes",
                colour: "green",
                btnId: "btnConfirmCancel",
                link: "#"
            };
            closeBtn = {
                text: "No",
                colour: "red"
            };
            dialogClass = ""
        } else {
            closeBtn = {
                text: "Ok",
                colour: "green"
            };
            dialogClass = type;
            if (type == "success") {
                closeBtn = "";
                secondaryBtn = {
                    text: "Go to Lobby",
                    colour: "blue",
                    link: defaultReturnURL
                }
            } else {
                secondaryBtn = ""
            }
        }
        $("#promotionsTable").helpmessage({
            title: title,
            msg: message,
            dialogClass: "cancel-promo" + dialogClass + "-dialog heading-left",
            dialogId: "info-dialog",
            displayOn: "inFunction",
            appendTo: $("#content"),
            closeButton: closeBtn,
            secondaryButton: secondaryBtn
        })
    };
    this.toggleRow = function(thisElem) {
        $(thisElem).closest("tr").prev().find(".more a i").toggleClass("ico-plus-green ico-minus-green")
    }
}).apply(zeus.promotionsHistory);
var zeus = zeus || {};
zeus.promotions = zeus.promotions || {};
(function() {
    var self = this;
    var clickEvent = "vclick";
    var bonusName;
    var bonusType;
    var bonusTypeText;
    var bonusCode;
    var bonusArea;
    var promoCodeEntered = false;
    var localPromotionsJsonRaw;
    var localPromotionsJson;
    var bonusCodetoDecline;
    var promoApiUrl = "api/Promotions/";
    var depositUrl = "User/Banking/Deposit";
    var tVariables;
    this.mobile = false;
    this.init = function(tVariablesJSON) {
        tVariables = tVariablesJSON;
        this.determinePlatform();
        this.cacheSelectors();
        this.addBindings();
        this.setupPage()
    };
    this.determinePlatform = function() {
        if ($.mobile === undefined) {
            clickEvent = "click";
            self.mobile = false
        } else {
            clickEvent = "vclick";
            self.mobile = true
        }
    };
    this.addBindings = function() {
        $(document).on(clickEvent, ".btn-select-bonus", function() {
            var thisBonus = $(this);
            if (thisBonus.hasClass("btn-hide-bonus")) {
                self.resetInput();
                thisBonus.text("View").removeClass("btn-hide-bonus").addClass("btn-show-bonus");
                self.selectedBonusArea.hide();
                self.bonusCodeAreaMobile.show()
            } else {
                self.resetPromotionPage();
                thisBonus.text("Hide").addClass("btn-hide-bonus").removeClass("btn-show-bonus");
                bonusCode = thisBonus.data("bonuscode");
                self.checkBonusList()
            }
        });
        $(document).on(clickEvent, "#btnPromoCodeCancel", function() {
            self.resetPromotionPage()
        });
        $(document).on(clickEvent, "#btnClaim", function(e) {
            e.preventDefault();
            if (self.agreeCheckbox.is(":checked")) {
                self.claimBonus();
                self.buttonDisable($(this))
            } else {
                self.agreeErrorMessage.show()
            }
        });
        $(document).on(clickEvent, "#btnDecline", function(e) {
            e.preventDefault();
            self.declineBonusConfim()
        });
        $(document).on(clickEvent, "#btnConfirmDecline", function(e) {
            e.preventDefault();
            self.declineBonus()
        });
        self.promoCodeInput.keyup(function(e) {
            if (e.keyCode === 13) {
                e.preventDefault();
                self.promoCodeSubmit()
            }
            if ($(this).val() !== "") {
                self.inputErrorMessage.hide()
            }
        });
        $(window).keydown(function(event) {
            if (event.keyCode == 13) {
                event.preventDefault();
                return false
            }
        });
        $("#btnViewHistory").keyup(function(e) {
            if (event.keyCode == 13) {
                window.location.href = $(this).attr("href");
                return false
            }
        });
        self.agreeCheckbox.change(function() {
            if ($(this).is(":checked")) {
                self.agreeErrorMessage.hide();
                self.claimButton.prop("disabled", false)
            } else {
                self.claimButton.prop("disabled", true)
            }
        });
        $(document).on(clickEvent, "#btnPromoCodeSubmit", function(e) {
            e.preventDefault();
            self.promoCodeSubmit()
        });
        if (self.mobile) {
            $(document).on(clickEvent, "#layout-headertabs a", function(e) {
                var thisElem = $(this);
                var thisParent = thisElem.parent("li");
                if (thisElem.hasClass("bonus-history-link")) {
                    return
                } else {
                    e.preventDefault();
                    if (thisParent.hasClass("active")) {
                        return
                    } else {
                        $(document).trigger("scrollerToTop");
                        self.resetPromotionPage();
                        $("#layout-headertabs li").removeClass("active");
                        $(".promo-tab").hide();
                        thisParent.attr("class", "active");
                        var thisTab = thisElem.attr("name") + "Tab";
                        $("[name='" + thisTab + "']").show()
                    }
                }
            });
            $(document).on(clickEvent, "#btnCloseModal", function(e) {
                self.bonusResultArea.modal("hide");
                self.closeModalButton.hide();
                self.resetPromotionPage()
            });
            $(document).on(clickEvent, "#btnReturntoPromotions", function(e) {
                location.reload()
            })
        }
    };
    this.setupPage = function() {
        localPromotionsJsonRaw = $("#promotionsJson").val();
        localPromotionsJson = JSON && JSON.parse(localPromotionsJsonRaw) || $.parseJSON(localPromotionsJsonRaw);
        defaultReturnURL = $("#defaultURL").val();
        var siteRoot = $("*[data-siteroot]").data("siteroot");
        promoApiUrl = siteRoot + promoApiUrl;
        depositUrl = siteRoot + depositUrl
    };
    this.declineBonusConfim = function() {
        if (self.mobile) {
            self.modalConfirmDecline.modal("show")
        } else {
            self.contentArea.helpmessage({
                title: "Decline Promotion",
                msg: "Are you sure you wish to decline this promotion?</p><p>Once declined, you will no longer be able to claim this promotion",
                dialogClass: "heading-left",
                dialogId: "info-dialog",
                displayOn: "inFunction",
                appendTo: self.contentArea,
                closeButton: {
                    text: "No",
                    colour: "red"
                },
                secondaryButton: {
                    text: "Yes",
                    colour: "green",
                    btnId: "btnConfirmDecline",
                    link: "#"
                }
            })
        }
    };
    this.cacheSelectors = function() {
        self.cancelButton = $("#btnPromoCodeCancel");
        self.submitButton = $("#btnPromoCodeSubmit");
        self.declineButton = $("#btnDecline");
        self.selectedBonusArea = $("#selectedBonusArea");
        self.selectedBonusButton = $(".btn-select-bonus");
        self.bonusResultArea = $("#claimBonusArea");
        self.claimButton = $("#btnClaim");
        self.promoCodeInput = $("#promoCodeInput");
        self.agreeCheckbox = $("#AgreeToTerms");
        self.agreeErrorMessage = $(".agree-message");
        self.resultsContainer = $(".accepted-bonus-result");
        self.resultHeading = $(".accepted-bonus-result h3");
        self.inputErrorMessage = $(".blank-promo");
        self.ajaxLoading = $(".ajax-loader");
        self.bonusCodeAreaMobile = $(".bonus-code-area-mobile");
        self.modalConfirmDecline = $("#modalConfirmDecline");
        self.closeModalButton = $("#btnCloseModal");
        self.contentArea = $("#content");
        self.navTabsLi = $("#layout-headertabs.not-fixed").find("li");
        self.bonusImage = $(".selected.bonus-image");
        self.bonusInfo = $(".bonus-info");
        self.bonusError = $(".bonus-error")
    };
    this.getBonusInformation = function(bonusResult, from) {
        if (typeof bonusResult != "undefined") {
            bonusName = bonusResult.Title;
            bonusCode = bonusResult.PromotionCode;
            bonusWallet = bonusResult.WalletType;
            bonusDescription = bonusResult.Description;
            bonusTermsConditions = bonusResult.TermsAndConditions;
            bonusType = bonusResult.PromotionType;
            bonusDescription = $.parseHTML(bonusDescription);
            self.selectedBonusArea.find(".bonus-name").text(bonusName);
            self.selectedBonusArea.find(".bonus-code").text(bonusCode);
            $(".selected-bonus-description").html(bonusDescription);
            $(".selected-bonus-terms").html(bonusTermsConditions);
            self.bonusImage.removeClass("bingo_bonus instant_bonus").addClass(bonusWallet);
            if (self.mobile) {
                var selectedBonusInfo = $(".selected-bonus-info");
                if (from == "local") {
                    if (promoCodeEntered) {
                        self.selectedBonusArea.appendTo("#myPromotionsForm");
                        selectedBonusInfo.show()
                    } else {
                        bonusArea = $("#" + bonusCode + "");
                        self.selectedBonusArea.appendTo(bonusArea);
                        $("#" + bonusCode + " .bonus-code-area-mobile").hide();
                        selectedBonusInfo.hide()
                    }
                } else {
                    self.selectedBonusArea.appendTo("#myPromotionsForm");
                    self.bonusImage.addClass(bonusWallet);
                    selectedBonusInfo.show()
                }
            }
            self.selectedBonusArea.show();
            if (bonusType == 6) {
                self.claimButton.text("Claim Promotion");
                bonusTypeText = "Instant"
            } else {
                self.claimButton.text("Deposit");
                bonusTypeText = "Deposit"
            }
        } else {
            self.error()
        }
    };
    this.promoCodeSubmit = function() {
        if (self.bonusResultArea.is(":visible")) {
            self.bonusResultArea.hide()
        }
        var thisVal = self.promoCodeInput.val();
        if (thisVal !== "") {
            bonusCode = thisVal;
            promoCodeEntered = true;
            self.checkBonusList()
        } else {
            self.inputErrorMessage.show()
        }
    };
    this.claimBonus = function() {
        if (bonusTypeText == "Deposit") {
            var activation = $("#depositBonusInstantActivation").val();
            window.location.href = depositUrl + "?PromoCode=" + bonusCode + "&AcceptedTermsAndConditions=" + self.agreeCheckbox.is(":checked")
        } else {
            $.ajax({
                url: promoApiUrl + "ActivateBonus/" + bonusCode,
                success: function(resp) {
                    if (resp === true || resp === "true") {
                        self.bonusResultArea.find(".bonus-name").text(bonusName);
                        self.bonusResultArea.find(".bonus-code").text(bonusCode);
                        self.resultsContainer.removeClass("error").addClass("success");
                        self.resultHeading.text("You have successfully claimed an " + bonusTypeText + " Bonus")
                    } else {
                        self.error("error")
                    }
                    if (self.mobile) {
                        self.bonusResultArea.modal("show");
                        self.refreshPageMobile()
                    } else {
                        self.selectedBonusArea.hide();
                        self.bonusResultArea.show();
                        self.refreshPage()
                    }
                },
                beforeSend: function() {
                    self.claimButton.text("Loading").prop("disabled", true).addClass("loading");
                    $("#content").find(".btn, input").prop("disabled", true).addClass("disabled ajax-loading")
                },
                complete: function() {
                    self.claimButton.text("Claim Promotion").prop("disabled", false).removeClass("loading")
                },
                error: function() {
                    $("#content").find(".btn, input").prop("disabled", false).removeClass("disabled ajax-loading");
                    self.claimButton.prop("disabled", true);
                    self.error("error")
                }
            })
        }
    };
    this.declineBonus = function() {
        if (self.mobile) {
            self.modalConfirmDecline.modal("hide")
        } else {
            $("#info-dialog").remove()
        }
        $.ajax({
            url: promoApiUrl + "DeclineBonus/" + bonusCode,
            success: function(resp) {
                if (resp === true || resp === "true") {
                    self.error("bonus-declined")
                } else {
                    self.error("bonus-error")
                }
            },
            beforeSend: function() {
                $("#content").find(".btn, input").prop("disabled", true).addClass("disabled ajax-loading");
                self.declineButton.text("Loading").addClass("loading")
            },
            complete: function() {
                self.declineButton.text("Decline").removeClass("loading")
            },
            error: function() {
                $("#content").find(".btn, input").prop("disabled", false).removeClass("disabled ajax-loading");
                self.declineButton.prop("disabled", true);
                self.error("error")
            }
        })
    };
    this.getTVariable = function(key, value, subKey) {
        var result;
        if (subKey !== undefined) {
            if (tVariables[key][subKey] !== undefined && tVariables[key][subKey][value] !== undefined) {
                result = tVariables[key][subKey][value]
            }
        } else if (tVariables[key] !== undefined && tVariables[key][value] !== undefined) {
            result = tVariables[key][value]
        }
        return result
    };
    this.error = function(errorType) {
        var message = self.getTVariable("promoErrors", "message", errorType);
        var title = self.getTVariable("promoErrors", "title", errorType);
        var tryAgain = $(".try-again");
        self.selectedBonusButton.prop("disabled", true);
        tryAgain.show();
        if (message) {
            switch (errorType) {
                case "bonus-declined":
                    tryAgain.hide();
                    self.showError(title, message);
                    self.closeModalButton.hide();
                    if (self.mobile) {
                        self.refreshPageMobile()
                    } else {
                        self.refreshPage()
                    }
                    break;
                case "id-error":
                    tryAgain.hide();
                    if (self.mobile) {
                        self.showError(title, message);
                        self.closeModalButton.hide()
                    } else {
                        self.contentArea.helpmessage({
                            title: title,
                            msg: self.getTVariable("refreshPage", "message"),
                            dialogClass: "heading-left",
                            dialogId: "info-dialog",
                            displayOn: "inFunction",
                            appendTo: self.contentArea,
                            closeButton: {
                                text: " Ok",
                                colour: "green"
                            },
                            secondaryButton: {
                                text: "Return to lobby",
                                colour: "blue",
                                link: defaultReturnURL
                            }
                        });
                        $(".form-element").prop("disabled", true)
                    }
                    break;
                default:
                    self.showError(title, message)
            }
        } else {
            message = self.getTVariable("promoErrors", "message", "error");
            title = self.getTVariable("promoErrors", "title", "error");
            self.showError(title, message)
        }
    };
    this.showError = function(title, reasonDescription) {
        if (self.mobile) {
            self.navTabsLi.removeClass("active");
            self.bonusResultArea.modal("show");
            self.closeModalButton.show();
            $("#content").find(".btn, input").prop("disabled", false).removeClass("disabled ajax-loading");
            self.claimButton.prop("disabled", true)
        } else {
            self.selectedBonusArea.hide();
            self.bonusResultArea.show();
            self.selectedBonusButton.text("View").removeClass("btn-hide-bonus").addClass("btn-show-bonus")
        }
        self.resultsContainer.removeClass("success").addClass("error");
        self.resultHeading.text(title);
        self.bonusResultArea.find(".bonus-error-reason").text(reasonDescription);
        self.bonusInfo.hide();
        self.bonusError.show()
    };
    this.getBonusAPI = function(code) {
        $.ajax({
            url: promoApiUrl + "ValidatePromotion/" + code,
            dataType: "json",
            success: function(response) {
                if (response) {
                    try {
                        var getPromotionForUserResult = JSON && JSON.parse(response) || $.parseJSON(response);
                        if (getPromotionForUserResult.Error) {
                            var errorType = "getbonus-fail-" + getPromotionForUserResult.Error.Code;
                            if (self.getTVariable("promoErrors", "message", errorType)) {
                                self.error(errorType)
                            } else {
                                self.error("getbonus-fail")
                            }
                        } else if (getPromotionForUserResult.PromotionUserSummary) {
                            self.getBonusInformation(getPromotionForUserResult.PromotionUserSummary, "api")
                        } else {
                            self.error("getbonus-fail")
                        }
                    } catch (err) {
                        self.error("error")
                    }
                } else {
                    self.error("getbonus-fail")
                }
            },
            beforeSend: function() {
                self.cancelButton.text("Loading").prop("disabled", true).addClass("loading")
            },
            complete: function() {
                self.cancelButton.text("Cancel").prop("disabled", false).removeClass("loading")
            },
            error: function() {
                self.error("error")
            }
        })
    };
    this.resetPromotionPage = function() {
        self.agreeCheckbox.prop("checked", false);
        self.claimButton.prop("disabled", true);
        self.selectedBonusArea.hide();
        self.bonusResultArea.hide();
        self.agreeErrorMessage.hide();
        bonusCodetoDecline = "";
        if (self.mobile) {
            self.bonusResultArea.modal("hide");
            self.bonusCodeAreaMobile.show()
        }
        self.bonusInfo.show();
        self.bonusError.hide();
        self.resetInput()
    };
    this.resetInput = function() {
        self.selectedBonusButton.show().prop("disabled", false).text("View").removeClass("btn-hide-bonus btn-show-bonus");
        self.submitButton.show().text("Submit").prop("disabled", false);
        self.cancelButton.hide();
        self.promoCodeInput.val("").prop("disabled", false);
        self.inputErrorMessage.hide();
        promoCodeEntered = false
    };
    this.checkBonusList = function() {
        self.promoCodeInput.val(bonusCode).prop("disabled", true);
        self.submitButton.hide();
        self.cancelButton.show();
        if (localPromotionsJson !== "null" && localPromotionsJson !== null) {
            var localJSON = localPromotionsJson[bonusCode];
            if (typeof localJSON != "undefined") {
                self.getBonusInformation(localJSON, "local")
            } else {
                self.getBonusAPI(bonusCode)
            }
        } else {
            self.getBonusAPI(bonusCode)
        }
    };
    this.refreshPage = function() {
        $(".page-refreshing").show();
        setTimeout(function() {
            location.reload()
        }, 4e3)
    };
    this.refreshPageMobile = function() {
        self.navTabsLi.removeClass("active");
        self.navTabsLi.prop("disabled", true);
        $(document).off(clickEvent, "#layout-headertabs a");
        $("#btnReturntoPromotions").show()
    };
    this.buttonDisable = function(button) {
        if (button.is("button")) {
            button.addClass("ajax-loader");
            button.attr("disabled", true)
        } else {
            button.addClass("ajax-loader");
            button.addClass("btn-disabled")
        }
    }
}).apply(zeus.promotions);
var progressivePromotions = progressivePromotions || {};
progressivePromotions.history = progressivePromotions.history || {};
progressivePromotions.history.common = progressivePromotions.history.common || {};
(function() {
    "use strict";
    var global = {};
    this.init = function(tVars, opts) {
        global.currency = opts.currency || "GBP";
        global.dateFormat = opts.dateFormat || "YYYY-MM-DD HH:mm";
        global.tVars = tVars
    };
    zeus.jit.multipleTables.formatResponse = function(response) {
        var formattedPromos = [];
        var result = {};
        response.Items.forEach(function(promotionHistory) {
            result = {
                promoName: promotionHistory.Name || "-",
                promoType: promotionHistory.PromotionType || "-",
                promoCode: promotionHistory.PromoCode || "-",
                promoStatus: promotionHistory.PromotionStatus || "-",
                promoAmount: (promotionHistory.Amount ? promotionHistory.PromotionStatus === "FreeSpinsRewarded" ? promotionHistory.Amount + " Free Spins" : zeus.utilities.formatCurrency(promotionHistory.Amount, global.currency) : null) || "-",
                promoWageringTarget: promotionHistory.WageringTarget ? zeus.utilities.formatCurrency(promotionHistory.WageringTarget, global.currency) : "-",
                promoWageringContributions: promotionHistory.WageringContributions || promotionHistory.WageringContributions === 0 ? zeus.utilities.formatCurrency(promotionHistory.WageringContributions, global.currency) : "-",
                promoActivationDateFull: promotionHistory.ActivationDate || "-",
                promoActivationDate: promotionHistory.ActivationDate ? moment(promotionHistory.ActivationDate).format(global.dateFormat) : "-",
                promoExpiryDate: promotionHistory.ExpiryDate ? moment(promotionHistory.ExpiryDate).format(global.dateFormat) : "-",
                promoEndDateToQualify: promotionHistory.EndDateToQualify ? moment(promotionHistory.EndDateToQualify).format(global.dateFormat) : "-",
                promoTargetAccumulation: promotionHistory.TargetAccumulation ? zeus.utilities.formatCurrency(promotionHistory.TargetAccumulation, global.currency) : "-",
                promoCurrentAccumulation: promotionHistory.CurrentAccumulation || promotionHistory.CurrentAccumulation === 0 ? zeus.utilities.formatCurrency(promotionHistory.CurrentAccumulation, global.currency) : "-",
                promoPayoutAfterPeriod: promotionHistory.PayoutAfterPeriod === true ? zeus.utilities.tVar(global.tVars, "payoutAfterPeriod", "trueText") : promotionHistory.PayoutAfterPeriod === false ? zeus.utilities.tVar(global.tVars, "payoutAfterPeriod", "falseText") : "-",
                promoTermsAndConditions: promotionHistory.TermsAndConditions || "-",
                promoId: promotionHistory.BonusId || "-"
            };
            formattedPromos.push(result)
        });
        return formattedPromos
    }
}).apply(progressivePromotions.history.common);
var promotions = promotions || {};
promotions.history = promotions.history || {};
promotions.history.common = promotions.history.common || {};
(function() {
    "use strict";
    var self = this;
    var global = {};
    this.init = function(opts) {
        global.currency = opts.currency || "GBP";
        global.dateFormat = opts.dateFormat || "YYYY-MM-DD HH:mm"
    };
    zeus.jit.tabled.formatResponse = function(response) {
        var formattedPromos = [];
        var result = {};
        response.Items.forEach(function(promotionHistory) {
            var promoActivationDate = moment(promotionHistory.ActivationDate);
            var promoExpiryDate = moment(promotionHistory.ExpiryDate);
            result = {
                promoName: promotionHistory.Name || "-",
                promoType: promotionHistory.PromotionType || "-",
                promoCode: promotionHistory.PromoCode || "-",
                promoStatus: promotionHistory.PromotionStatus || "-",
                promoAmount: (promotionHistory.Amount ? promotionHistory.PromotionStatus === "FreeSpinsRewarded" ? promotionHistory.Amount + " Free Spins" : zeus.utilities.formatCurrency(promotionHistory.Amount, global.currency) : null) || "-",
                promoWageringTarget: (promotionHistory.WageringTarget ? zeus.utilities.formatCurrency(promotionHistory.WageringTarget, global.currency) : null) || "-",
                promoWageringContributions: (promotionHistory.WageringContributions || promotionHistory.WageringContributions === 0 ? zeus.utilities.formatCurrency(promotionHistory.WageringContributions, global.currency) : null) || "-",
                promoActivationDate: (promotionHistory.ActivationDate ? moment(promotionHistory.ActivationDate).format(global.dateFormat) : null) || "-",
                promoExpiryDate: (promotionHistory.ExpiryDate ? moment(promotionHistory.ExpiryDate).format(global.dateFormat) : null) || "-",
                promoActivationDateFull: promotionHistory.ActivationDate || "-",
                promoExpiryDateFull: promotionHistory.ExpiryDate || "-",
                promoId: promotionHistory.BonusId || "-"
            };
            formattedPromos.push(result)
        });
        return formattedPromos
    }
}).apply(promotions.history.common);
var promotions = promotions || {};
promotions.history = promotions.history || {};
promotions.history.admin = promotions.history.admin || {};
(function() {
    "use strict";
    var self = this;
    var global = {};
    this.init = function(opts, request) {
        global.tVars = opts.tVars;
        global.playerId = opts.playerId;
        opts.jitApi = "PromotionsHistory";
        global.itemsPerPage = opts.itemsPerPage || 10;
        self.cacheElements(opts);
        self.createBindings();
        promotions.history.common.init(opts);
        zeus.jit.tabled.init(opts);
        if (request) {
            self.makeRequest(request)
        } else if (opts.defaultRequestOnLoad) {
            self.makeRequest(global.request)
        }
    };
    this.cacheElements = function() {
        global.el = {};
        global.el.startDay = $("#BosPromotionsHistoryFilter_SmartStartDate_Day");
        global.el.startMonth = $("#BosPromotionsHistoryFilter_SmartStartDate_Month");
        global.el.startYear = $("#BosPromotionsHistoryFilter_SmartStartDate_Year");
        global.el.endDay = $("#BosPromotionsHistoryFilter_SmartEndDate_Day");
        global.el.endMonth = $("#BosPromotionsHistoryFilter_SmartEndDate_Month");
        global.el.endYear = $("#BosPromotionsHistoryFilter_SmartEndDate_Year");
        global.el.promotionName = $("#BosPromotionsHistoryFilter_PromotionName");
        global.el.promotionType = $("#BosPromotionsHistoryFilter_PromoType");
        global.el.promotionStatus = $("#BosPromotionsHistoryFilter_PromoStatus")
    };
    this.createBindings = function() {
        $(".btn-filter-history").on("click", function() {
            self.makeRequest(self.createRequest())
        })
    };
    this.createRequest = function() {
        var startDate = global.el.startMonth.val() + "/" + global.el.startDay.val() + "/" + global.el.startYear.val() + " 00:00:00";
        var endDate = global.el.endMonth.val() + "/" + global.el.endDay.val() + "/" + global.el.endYear.val() + " 23:59:59";
        var promoName = global.el.promotionName.val().trim() || null;
        var promoType = global.el.promotionType.val().trim();
        var promoStatus = global.el.promotionStatus.val().trim();
        promoType = promoType && promoType !== "All" ? promoType : null;
        promoStatus = promoStatus && promoStatus !== "All" ? promoStatus : null;
        var promotionsHistoryRequest = {
            PlayerId: global.playerId,
            PageNumber: "1",
            Items: global.itemsPerPage,
            StartDate: startDate,
            EndDate: endDate,
            PromoName: promoName,
            PromoType: promoType,
            PromoStatus: promoStatus
        };
        return promotionsHistoryRequest
    };
    this.makeRequest = function(request) {
        request = request || global.request;
        zeus.jit.tabled.makeRequest(request)
    }
}).apply(promotions.history.admin);
var progressivePromotions = progressivePromotions || {};
progressivePromotions.history = progressivePromotions.history || {};
progressivePromotions.history.player = progressivePromotions.history.player || {};
(function() {
    "use strict";
    var self = this;
    var global = {};
    var promoApiUrl = "api/Promotions/";
    var playerAction = {
        CancelPromotion: "Cancel",
        OptOutOfPromotion: "OptOut"
    };
    this.init = function(tVars, promoHistoryTablesOpts, commonOpts) {
        global.tVars = tVars;
        self.createBindings();
        progressivePromotions.history.common.init(tVars, commonOpts);
        zeus.jit.multipleTables.init(tVars, promoHistoryTablesOpts);
        var requests = [];
        for (var key in promoHistoryTablesOpts) {
            if (promoHistoryTablesOpts.hasOwnProperty(key)) {
                requests.push(promoHistoryTablesOpts[key].request)
            }
        }
        zeus.jit.multipleTables.makeRequests(requests)
    };
    this.createBindings = function() {
        $(document).on("click", ".cancel-bonus", function(e) {
            e.preventDefault();
            var thisEl = $(this);
            self.showConfirmationDialog(thisEl.data("promo-code"), thisEl.data("promo-id"), playerAction.CancelPromotion)
        });
        $(document).on("click", ".opt-out-of-bonus", function(e) {
            e.preventDefault();
            var thisEl = $(this);
            self.showConfirmationDialog(thisEl.data("promo-code"), thisEl.data("promo-id"), playerAction.OptOutOfPromotion)
        });
        $(document).on("click", ".show-terms", function(e) {
            e.preventDefault();
            var thisEl = $(this);
            var bootboxTitle = thisEl.data("promo-name") + " " + zeus.utilities.tVar(global.tVars, "termsAndConditions", "title");
            var termsAndConditions = thisEl.next().html();
            if (termsAndConditions === "-") {
                termsAndConditions = zeus.utilities.tVar(global.tVars, "termsAndConditions", "missingTerms")
            } else {
                termsAndConditions = self.splitTermsIntoParagraphs(termsAndConditions)
            }
            self.showBootbox(bootboxTitle, termsAndConditions)
        })
    };
    this.splitTermsIntoParagraphs = function(termsAndConditions) {
        var result = "";
        var lines = termsAndConditions.split(/\r\n|\r|\n/g);
        for (var i = 0; i < lines.length; i++) {
            result += "<p>" + lines[i] + "</p>"
        }
        return result
    };
    this.showConfirmationDialog = function(promoCode, promoId, selectedPlayerAction) {
        var tVarKey = "";
        if (selectedPlayerAction === playerAction.CancelPromotion) {
            tVarKey = "cancelBonus"
        } else if (selectedPlayerAction === playerAction.OptOutOfPromotion) {
            tVarKey = "optOutOfBonus"
        }
        window.bootbox.dialog({
            title: zeus.utilities.tVar(global.tVars, tVarKey, "title"),
            message: zeus.utilities.tVar(global.tVars, tVarKey, "body"),
            buttons: {
                cancel: {
                    label: zeus.utilities.tVar(global.tVars, tVarKey, "cancel"),
                    className: "btn-secondary"
                },
                confirm: {
                    label: zeus.utilities.tVar(global.tVars, tVarKey, "confirm"),
                    className: "btn-primary",
                    callback: function() {
                        if (selectedPlayerAction === playerAction.CancelPromotion) {
                            self.cancelBonus(promoCode, promoId)
                        } else if (selectedPlayerAction === playerAction.OptOutOfPromotion) {
                            self.optOutOfBonus(promoCode, promoId)
                        }
                    }
                }
            },
            className: "info-modal"
        })
    };
    this.cancelBonus = function(promoCode, promoId) {
        var activePromoEl = $('[data-promo-id="' + promoId + '"] .cancel-bonus');
        $.ajax({
            url: zeus.core.siteRoot + promoApiUrl + "CancelBonus/" + promoCode,
            success: function() {
                self.cancelSuccess(promoCode, promoId, activePromoEl)
            },
            beforeSend: function() {
                activePromoEl.addClass("processing")
            },
            complete: function() {
                activePromoEl.removeClass("processing")
            },
            error: function() {
                self.cancelError()
            }
        })
    };
    this.optOutOfBonus = function(promoCode, promoId) {
        var activePromoEl = $('[data-promo-id="' + promoId + '"] .opt-out-of-bonus');
        $.ajax({
            url: zeus.core.siteRoot + promoApiUrl + "OptOutOfBonus/" + promoCode,
            success: function() {
                self.optOutSuccess(promoCode, promoId, activePromoEl)
            },
            beforeSend: function() {
                activePromoEl.addClass("processing")
            },
            complete: function() {
                activePromoEl.removeClass("processing")
            },
            error: function() {
                self.optOutError()
            }
        })
    };
    this.cancelError = function() {
        self.showBootbox(zeus.utilities.tVar(global.tVars, "cancelError", "title"), zeus.utilities.tVar(global.tVars, "cancelError", "body"))
    };
    this.cancelSuccess = function(promoCode, promoId, activePromoEl) {
        self.showBootbox(zeus.utilities.tVar(global.tVars, "cancelSuccess", "title"), zeus.utilities.tVar(global.tVars, "cancelSuccess", "body"));
        $('[data-promo-id="' + promoId + '"] .promo-state').html(zeus.utilities.tVar(global.tVars, "processingState"));
        activePromoEl.remove()
    };
    this.optOutError = function() {
        self.showBootbox(zeus.utilities.tVar(global.tVars, "optOutError", "title"), zeus.utilities.tVar(global.tVars, "optOutError", "body"))
    };
    this.optOutSuccess = function(promoCode, promoId, activePromoEl) {
        self.showBootbox(zeus.utilities.tVar(global.tVars, "optOutSuccess", "title"), zeus.utilities.tVar(global.tVars, "optOutSuccess", "body"));
        $('[data-promo-id="' + promoId + '"] .promo-state').html(zeus.utilities.tVar(global.tVars, "processingState"));
        activePromoEl.remove()
    };
    this.showBootbox = function(title, msg) {
        window.bootbox.alert({
            message: msg,
            title: title,
            className: "info-modal"
        })
    }
}).apply(progressivePromotions.history.player);
var promotions = promotions || {};
promotions.history = promotions.history || {};
promotions.history.player = promotions.history.player || {};
(function() {
    "use strict";
    var self = this;
    var global = {};
    var promoApiUrl = "api/Promotions/";
    this.init = function(opts, request) {
        global.tVars = opts.tVars;
        opts.jitApi = "MyPromotionsHistory";
        global.itemsPerPage = opts.pageSize || "10";
        self.cacheElements(opts);
        self.createBindings();
        promotions.history.common.init(opts);
        zeus.jit.tabled.init(opts);
        if (request) {
            self.makeRequest(request)
        } else if (opts.defaultRequestOnLoad) {
            self.makeRequest(global.request)
        }
    };
    this.cacheElements = function() {
        global.el = {};
        global.el.startDay = $("#SmartStartDate_Day");
        global.el.startMonth = $("#SmartStartDate_Month");
        global.el.startYear = $("#SmartStartDate_Year");
        global.el.endDay = $("#SmartEndDate_Day");
        global.el.endMonth = $("#SmartEndDate_Month");
        global.el.endYear = $("#SmartEndDate_Year");
        global.el.promotionName = $("#PromotionName")
    };
    this.createBindings = function() {
        $(".btn-filter-history").on("click", function() {
            self.makeRequest(self.createRequest())
        });
        $(document).on("click", ".cancel-bonus", function(e) {
            e.preventDefault();
            var thisEl = $(this);
            self.cancelDialog(thisEl.data("promo-code"), thisEl.data("promo-id"))
        })
    };
    this.createRequest = function() {
        var startDate = global.el.startMonth.val() + "/" + global.el.startDay.val() + "/" + global.el.startYear.val() + " 00:00:00";
        var endDate = global.el.endMonth.val() + "/" + global.el.endDay.val() + "/" + global.el.endYear.val() + " 23:59:59";
        var promoName = global.el.promotionName.val().trim() || null;
        var promotionsHistoryRequest = {
            PageNumber: "1",
            Items: global.itemsPerPage,
            StartDate: startDate,
            EndDate: endDate,
            PromoName: promoName
        };
        return promotionsHistoryRequest
    };
    this.makeRequest = function(request) {
        request = request || global.request;
        zeus.jit.tabled.makeRequest(request)
    };
    this.cancelDialog = function(promoCode, promoId) {
        bootbox.dialog({
            title: zeus.utilities.tVar(global.tVars, "cancelBonus", "title"),
            message: zeus.utilities.tVar(global.tVars, "cancelBonus", "body"),
            buttons: {
                cancel: {
                    label: zeus.utilities.tVar(global.tVars, "cancelBonus", "cancel"),
                    className: "btn-secondary"
                },
                confirm: {
                    label: zeus.utilities.tVar(global.tVars, "cancelBonus", "confirm"),
                    className: "btn-primary",
                    callback: function() {
                        self.cancelBonus(promoCode, promoId)
                    }
                }
            },
            className: "info-modal"
        })
    };
    this.cancelBonus = function(promoCode, promoId) {
        var activePromoEl = $('[data-promo-id="' + promoId + '"] .cancel-bonus');
        $.ajax({
            url: zeus.core.siteRoot + promoApiUrl + "CancelBonus/" + promoCode,
            success: function() {
                self.cancelSuccess(promoCode, promoId, activePromoEl)
            },
            beforeSend: function() {
                activePromoEl.addClass("processing")
            },
            complete: function() {
                activePromoEl.removeClass("processing")
            },
            error: function() {
                self.cancelError()
            }
        })
    };
    this.cancelError = function() {
        self.showBootbox(zeus.utilities.tVar(global.tVars, "cancelError", "title"), zeus.utilities.tVar(global.tVars, "cancelError", "body"))
    };
    this.cancelSuccess = function(promoCode, promoId, activePromoEl) {
        self.showBootbox(zeus.utilities.tVar(global.tVars, "cancelSuccess", "title"), zeus.utilities.tVar(global.tVars, "cancelSuccess", "body"));
        $('[data-promo-id="' + promoId + '"] .promo-state').html(zeus.utilities.tVar(global.tVars, "promoCancelledState"));
        activePromoEl.remove()
    };
    this.showBootbox = function(title, msg) {
        bootbox.alert({
            message: msg,
            title: title,
            className: "info-modal"
        })
    }
}).apply(promotions.history.player);
var zeus = zeus || {};
zeus.promotionsHistory = zeus.promotionsHistory || {};
(function() {
    var self = this;
    var clickEvent;
    var promoApiUrl = "api/Promotions/";
    self.promoCode = "";
    self.mobile = false;
    this.init = function() {
        this.checkPlatform();
        this.setupPage();
        this.addBindings()
    };
    this.checkPlatform = function() {
        if ($.mobile === undefined) {
            clickEvent = "click";
            self.mobile = false
        } else {
            clickEvent = "vclick";
            self.mobile = true
        }
    };
    this.setupPage = function() {
        defaultReturnURL = $("#defaultURL").val();
        var siteRoot = $("*[data-siteroot]").data("siteroot");
        promoApiUrl = siteRoot + promoApiUrl;
        self.cancelBtn = $(".btn-cancel")
    };
    this.addBindings = function() {
        $(document).on(clickEvent, ".btn-cancel", function(e) {
            e.preventDefault();
            var $this = $(this);
            self.promoCode = $this.data("promotioncode");
            self.popup("cancel")
        });
        $(document).on(clickEvent, "#btnConfirmCancel", function(e) {
            e.preventDefault();
            self.cancelBonus()
        });
        if (self.mobile) {
            $(document).on(clickEvent, "#btnCloseModal", function(e) {
                $("#bonusHistory_Modal").modal("hide")
            });
            $(".bonus-history-table tr.toggle").click(function() {
                $($(this).data("target")).collapse("toggle")
            });
            $(".details .collapse").on("hide", function() {
                self.toggleRow($(this))
            }).on("show", function() {
                self.toggleRow($(this))
            })
        }
    };
    this.cancelBonus = function() {
        $.ajax({
            url: promoApiUrl + "CancelBonus/" + self.promoCode,
            success: function(resp) {
                if (resp === "true" || resp === true) {
                    self.popup("success")
                } else {
                    self.popup("error")
                }
            },
            beforeSend: function() {
                self.cancelBtn.text("Loading").prop("disabled", true).addClass("loading");
                $("#promotionsTable .btn").prop("disabled", true);
                $("#modalButtons .btn").prop("disabled", true);
                $("#loadingText").show()
            },
            complete: function() {
                self.cancelBtn.text("Cancel").prop("disabled", false).removeClass("loading");
                $("#promotionsTable .btn").prop("disabled", false);
                $("#modalButtons .btn").prop("disabled", false);
                $("#loadingText").hide()
            },
            error: function() {
                self.popup("error")
            }
        })
    };
    this.popup = function(type) {
        if (zeus.promotionsHistory.override && zeus.promotionsHistory.override.popup) {
            zeus.promotionsHistory.override.popup(type)
        } else {
            var message = "";
            var title = "";
            var firstButton = "";
            var secondButton = "";
            var okButton = "<button type='button' id='btnCloseModal' class='btn btn-green'>Ok</button>";
            switch (type) {
                case "error":
                    message = "<p>Sorry but the Godz could not cancel the bonus at this time</p><p>Please try again, if the problem continues contact Customer Support</p>";
                    title = "Sorry!";
                    firstButton = okButton;
                    break;
                case "success":
                    message = "<p>The Godz are processing your request to cancel the bonus.</p><p>It may take a while for this to completed, so check back here later.</p>";
                    title = "Processing!";
                    secondButton = "<a type='button' id='btnReturnToLobby' href='" + defaultReturnURL + "' rel='fade' class='btn btn-blue second-button'>Go to Lobby</a>";
                    break;
                case "cancel":
                    message = "<P>By canceling the promotion you will clear all of the funds in your bonus balance and cancel the wagering requirements associated with this promotion.</p><p class='middle-message'>You will then be free to claim any other promotion on offer.</p><p class='are-you-sure'>Are you sure you wish to cancel this promotion?</p>";
                    title = "Cancel Bonus";
                    firstButton = "<button type='button' id='btnCloseModal' class='btn btn-red'>No</button>";
                    secondButton = "<button type='button' id='btnConfirmCancel' class='btn btn-green second-button'>Yes</button>";
                    break;
                default:
                    title = "Sorry!";
                    firstButton = okButton;
                    message = "<p>There has been an error</p><p>Please try again</p>"
            }
            if (self.mobile) {
                self.showMobileModal(title, message, firstButton, secondButton)
            } else {
                self.showDesktopPopup(title, message, type)
            }
        }
    };
    this.showMobileModal = function(title, message, firstButton, secondButton) {
        var modalButtonsArea = $("#modalButtons");
        modalButtonsArea.html("");
        $("#modalTitle").text(title);
        $("#modalMessage").html(message);
        if (firstButton !== "") {
            modalButtonsArea.append(firstButton)
        }
        if (secondButton !== "") {
            modalButtonsArea.append(secondButton)
        }
        $("#bonusHistory_Modal").modal("show")
    };
    this.showDesktopPopup = function(title, message, type) {
        $("#info-dialog").remove();
        if (type == "cancel") {
            secondaryBtn = {
                text: "Yes",
                colour: "green",
                btnId: "btnConfirmCancel",
                link: "#"
            };
            closeBtn = {
                text: "No",
                colour: "red"
            };
            dialogClass = ""
        } else {
            closeBtn = {
                text: "Ok",
                colour: "green"
            };
            dialogClass = type;
            if (type == "success") {
                closeBtn = "";
                secondaryBtn = {
                    text: "Go to Lobby",
                    colour: "blue",
                    link: defaultReturnURL
                }
            } else {
                secondaryBtn = ""
            }
        }
        $("#promotionsTable").helpmessage({
            title: title,
            msg: message,
            dialogClass: "cancel-promo" + dialogClass + "-dialog heading-left",
            dialogId: "info-dialog",
            displayOn: "inFunction",
            appendTo: $("#content"),
            closeButton: closeBtn,
            secondaryButton: secondaryBtn
        })
    };
    this.toggleRow = function(thisElem) {
        $(thisElem).closest("tr").prev().find(".more a i").toggleClass("ico-plus-green ico-minus-green")
    }
}).apply(zeus.promotionsHistory);
var zeus = zeus || {};
zeus.promotions = zeus.promotions || {};
(function() {
    var self = this;
    var clickEvent = "vclick";
    var bonusName;
    var bonusType;
    var bonusTypeText;
    var bonusCode;
    var bonusArea;
    var promoCodeEntered = false;
    var localPromotionsJsonRaw;
    var localPromotionsJson;
    var bonusCodetoDecline;
    var promoApiUrl = "api/Promotions/";
    var depositUrl = "User/Banking/Deposit";
    var tVariables;
    this.mobile = false;
    this.init = function(tVariablesJSON) {
        tVariables = tVariablesJSON;
        this.determinePlatform();
        this.cacheSelectors();
        this.addBindings();
        this.setupPage()
    };
    this.determinePlatform = function() {
        if ($.mobile === undefined) {
            clickEvent = "click";
            self.mobile = false
        } else {
            clickEvent = "vclick";
            self.mobile = true
        }
    };
    this.addBindings = function() {
        $(document).on(clickEvent, ".btn-select-bonus", function() {
            var thisBonus = $(this);
            if (thisBonus.hasClass("btn-hide-bonus")) {
                self.resetInput();
                thisBonus.text("View").removeClass("btn-hide-bonus").addClass("btn-show-bonus");
                self.selectedBonusArea.hide();
                self.bonusCodeAreaMobile.show()
            } else {
                self.resetPromotionPage();
                thisBonus.text("Hide").addClass("btn-hide-bonus").removeClass("btn-show-bonus");
                bonusCode = thisBonus.data("bonuscode");
                self.checkBonusList()
            }
        });
        $(document).on(clickEvent, "#btnPromoCodeCancel", function() {
            self.resetPromotionPage()
        });
        $(document).on(clickEvent, "#btnClaim", function(e) {
            e.preventDefault();
            if (self.agreeCheckbox.is(":checked")) {
                self.claimBonus();
                self.buttonDisable($(this))
            } else {
                self.agreeErrorMessage.show()
            }
        });
        $(document).on(clickEvent, "#btnDecline", function(e) {
            e.preventDefault();
            self.declineBonusConfim()
        });
        $(document).on(clickEvent, "#btnConfirmDecline", function(e) {
            e.preventDefault();
            self.declineBonus()
        });
        self.promoCodeInput.keyup(function(e) {
            if (e.keyCode === 13) {
                e.preventDefault();
                self.promoCodeSubmit()
            }
            if ($(this).val() !== "") {
                self.inputErrorMessage.hide()
            }
        });
        $(window).keydown(function(event) {
            if (event.keyCode == 13) {
                event.preventDefault();
                return false
            }
        });
        $("#btnViewHistory").keyup(function(e) {
            if (event.keyCode == 13) {
                window.location.href = $(this).attr("href");
                return false
            }
        });
        self.agreeCheckbox.change(function() {
            if ($(this).is(":checked")) {
                self.agreeErrorMessage.hide();
                self.claimButton.prop("disabled", false)
            } else {
                self.claimButton.prop("disabled", true)
            }
        });
        $(document).on(clickEvent, "#btnPromoCodeSubmit", function(e) {
            e.preventDefault();
            self.promoCodeSubmit()
        });
        if (self.mobile) {
            $(document).on(clickEvent, "#layout-headertabs a", function(e) {
                var thisElem = $(this);
                var thisParent = thisElem.parent("li");
                if (thisElem.hasClass("bonus-history-link")) {
                    return
                } else {
                    e.preventDefault();
                    if (thisParent.hasClass("active")) {
                        return
                    } else {
                        $(document).trigger("scrollerToTop");
                        self.resetPromotionPage();
                        $("#layout-headertabs li").removeClass("active");
                        $(".promo-tab").hide();
                        thisParent.attr("class", "active");
                        var thisTab = thisElem.attr("name") + "Tab";
                        $("[name='" + thisTab + "']").show()
                    }
                }
            });
            $(document).on(clickEvent, "#btnCloseModal", function(e) {
                self.bonusResultArea.modal("hide");
                self.closeModalButton.hide();
                self.resetPromotionPage()
            });
            $(document).on(clickEvent, "#btnReturntoPromotions", function(e) {
                location.reload()
            })
        }
    };
    this.setupPage = function() {
        localPromotionsJsonRaw = $("#promotionsJson").val();
        localPromotionsJson = JSON && JSON.parse(localPromotionsJsonRaw) || $.parseJSON(localPromotionsJsonRaw);
        defaultReturnURL = $("#defaultURL").val();
        var siteRoot = $("*[data-siteroot]").data("siteroot");
        promoApiUrl = siteRoot + promoApiUrl;
        depositUrl = siteRoot + depositUrl
    };
    this.declineBonusConfim = function() {
        if (self.mobile) {
            self.modalConfirmDecline.modal("show")
        } else {
            self.contentArea.helpmessage({
                title: "Decline Promotion",
                msg: "Are you sure you wish to decline this promotion?</p><p>Once declined, you will no longer be able to claim this promotion",
                dialogClass: "heading-left",
                dialogId: "info-dialog",
                displayOn: "inFunction",
                appendTo: self.contentArea,
                closeButton: {
                    text: "No",
                    colour: "red"
                },
                secondaryButton: {
                    text: "Yes",
                    colour: "green",
                    btnId: "btnConfirmDecline",
                    link: "#"
                }
            })
        }
    };
    this.cacheSelectors = function() {
        self.cancelButton = $("#btnPromoCodeCancel");
        self.submitButton = $("#btnPromoCodeSubmit");
        self.declineButton = $("#btnDecline");
        self.selectedBonusArea = $("#selectedBonusArea");
        self.selectedBonusButton = $(".btn-select-bonus");
        self.bonusResultArea = $("#claimBonusArea");
        self.claimButton = $("#btnClaim");
        self.promoCodeInput = $("#promoCodeInput");
        self.agreeCheckbox = $("#AgreeToTerms");
        self.agreeErrorMessage = $(".agree-message");
        self.resultsContainer = $(".accepted-bonus-result");
        self.resultHeading = $(".accepted-bonus-result h3");
        self.inputErrorMessage = $(".blank-promo");
        self.ajaxLoading = $(".ajax-loader");
        self.bonusCodeAreaMobile = $(".bonus-code-area-mobile");
        self.modalConfirmDecline = $("#modalConfirmDecline");
        self.closeModalButton = $("#btnCloseModal");
        self.contentArea = $("#content");
        self.navTabsLi = $("#layout-headertabs.not-fixed").find("li");
        self.bonusImage = $(".selected.bonus-image");
        self.bonusInfo = $(".bonus-info");
        self.bonusError = $(".bonus-error")
    };
    this.getBonusInformation = function(bonusResult, from) {
        if (typeof bonusResult != "undefined") {
            bonusName = bonusResult.Title;
            bonusCode = bonusResult.PromotionCode;
            bonusWallet = bonusResult.WalletType;
            bonusDescription = bonusResult.Description;
            bonusTermsConditions = bonusResult.TermsAndConditions;
            bonusType = bonusResult.PromotionType;
            bonusDescription = $.parseHTML(bonusDescription);
            self.selectedBonusArea.find(".bonus-name").text(bonusName);
            self.selectedBonusArea.find(".bonus-code").text(bonusCode);
            $(".selected-bonus-description").html(bonusDescription);
            $(".selected-bonus-terms").html(bonusTermsConditions);
            self.bonusImage.removeClass("bingo_bonus instant_bonus").addClass(bonusWallet);
            if (self.mobile) {
                var selectedBonusInfo = $(".selected-bonus-info");
                if (from == "local") {
                    if (promoCodeEntered) {
                        self.selectedBonusArea.appendTo("#myPromotionsForm");
                        selectedBonusInfo.show()
                    } else {
                        bonusArea = $("#" + bonusCode + "");
                        self.selectedBonusArea.appendTo(bonusArea);
                        $("#" + bonusCode + " .bonus-code-area-mobile").hide();
                        selectedBonusInfo.hide()
                    }
                } else {
                    self.selectedBonusArea.appendTo("#myPromotionsForm");
                    self.bonusImage.addClass(bonusWallet);
                    selectedBonusInfo.show()
                }
            }
            self.selectedBonusArea.show();
            if (bonusType == 6) {
                self.claimButton.text("Claim Promotion");
                bonusTypeText = "Instant"
            } else {
                self.claimButton.text("Deposit");
                bonusTypeText = "Deposit"
            }
        } else {
            self.error()
        }
    };
    this.promoCodeSubmit = function() {
        if (self.bonusResultArea.is(":visible")) {
            self.bonusResultArea.hide()
        }
        var thisVal = self.promoCodeInput.val();
        if (thisVal !== "") {
            bonusCode = thisVal;
            promoCodeEntered = true;
            self.checkBonusList()
        } else {
            self.inputErrorMessage.show()
        }
    };
    this.claimBonus = function() {
        if (bonusTypeText == "Deposit") {
            var activation = $("#depositBonusInstantActivation").val();
            window.location.href = depositUrl + "?PromoCode=" + bonusCode + "&AcceptedTermsAndConditions=" + self.agreeCheckbox.is(":checked")
        } else {
            $.ajax({
                url: promoApiUrl + "ActivateBonus/" + bonusCode,
                success: function(resp) {
                    if (resp === true || resp === "true") {
                        self.bonusResultArea.find(".bonus-name").text(bonusName);
                        self.bonusResultArea.find(".bonus-code").text(bonusCode);
                        self.resultsContainer.removeClass("error").addClass("success");
                        self.resultHeading.text("You have successfully claimed an " + bonusTypeText + " Bonus")
                    } else {
                        self.error("error")
                    }
                    if (self.mobile) {
                        self.bonusResultArea.modal("show");
                        self.refreshPageMobile()
                    } else {
                        self.selectedBonusArea.hide();
                        self.bonusResultArea.show();
                        self.refreshPage()
                    }
                },
                beforeSend: function() {
                    self.claimButton.text("Loading").prop("disabled", true).addClass("loading");
                    $("#content").find(".btn, input").prop("disabled", true).addClass("disabled ajax-loading")
                },
                complete: function() {
                    self.claimButton.text("Claim Promotion").prop("disabled", false).removeClass("loading")
                },
                error: function() {
                    $("#content").find(".btn, input").prop("disabled", false).removeClass("disabled ajax-loading");
                    self.claimButton.prop("disabled", true);
                    self.error("error")
                }
            })
        }
    };
    this.declineBonus = function() {
        if (self.mobile) {
            self.modalConfirmDecline.modal("hide")
        } else {
            $("#info-dialog").remove()
        }
        $.ajax({
            url: promoApiUrl + "DeclineBonus/" + bonusCode,
            success: function(resp) {
                if (resp === true || resp === "true") {
                    self.error("bonus-declined")
                } else {
                    self.error("bonus-error")
                }
            },
            beforeSend: function() {
                $("#content").find(".btn, input").prop("disabled", true).addClass("disabled ajax-loading");
                self.declineButton.text("Loading").addClass("loading")
            },
            complete: function() {
                self.declineButton.text("Decline").removeClass("loading")
            },
            error: function() {
                $("#content").find(".btn, input").prop("disabled", false).removeClass("disabled ajax-loading");
                self.declineButton.prop("disabled", true);
                self.error("error")
            }
        })
    };
    this.getTVariable = function(key, value, subKey) {
        var result;
        if (subKey !== undefined) {
            if (tVariables[key][subKey] !== undefined && tVariables[key][subKey][value] !== undefined) {
                result = tVariables[key][subKey][value]
            }
        } else if (tVariables[key] !== undefined && tVariables[key][value] !== undefined) {
            result = tVariables[key][value]
        }
        return result
    };
    this.error = function(errorType) {
        var message = self.getTVariable("promoErrors", "message", errorType);
        var title = self.getTVariable("promoErrors", "title", errorType);
        var tryAgain = $(".try-again");
        self.selectedBonusButton.prop("disabled", true);
        tryAgain.show();
        if (message) {
            switch (errorType) {
                case "bonus-declined":
                    tryAgain.hide();
                    self.showError(title, message);
                    self.closeModalButton.hide();
                    if (self.mobile) {
                        self.refreshPageMobile()
                    } else {
                        self.refreshPage()
                    }
                    break;
                case "id-error":
                    tryAgain.hide();
                    if (self.mobile) {
                        self.showError(title, message);
                        self.closeModalButton.hide()
                    } else {
                        self.contentArea.helpmessage({
                            title: title,
                            msg: self.getTVariable("refreshPage", "message"),
                            dialogClass: "heading-left",
                            dialogId: "info-dialog",
                            displayOn: "inFunction",
                            appendTo: self.contentArea,
                            closeButton: {
                                text: " Ok",
                                colour: "green"
                            },
                            secondaryButton: {
                                text: "Return to lobby",
                                colour: "blue",
                                link: defaultReturnURL
                            }
                        });
                        $(".form-element").prop("disabled", true)
                    }
                    break;
                default:
                    self.showError(title, message)
            }
        } else {
            message = self.getTVariable("promoErrors", "message", "error");
            title = self.getTVariable("promoErrors", "title", "error");
            self.showError(title, message)
        }
    };
    this.showError = function(title, reasonDescription) {
        if (self.mobile) {
            self.navTabsLi.removeClass("active");
            self.bonusResultArea.modal("show");
            self.closeModalButton.show();
            $("#content").find(".btn, input").prop("disabled", false).removeClass("disabled ajax-loading");
            self.claimButton.prop("disabled", true)
        } else {
            self.selectedBonusArea.hide();
            self.bonusResultArea.show();
            self.selectedBonusButton.text("View").removeClass("btn-hide-bonus").addClass("btn-show-bonus")
        }
        self.resultsContainer.removeClass("success").addClass("error");
        self.resultHeading.text(title);
        self.bonusResultArea.find(".bonus-error-reason").text(reasonDescription);
        self.bonusInfo.hide();
        self.bonusError.show()
    };
    this.getBonusAPI = function(code) {
        $.ajax({
            url: promoApiUrl + "ValidatePromotion/" + code,
            dataType: "json",
            success: function(response) {
                if (response) {
                    try {
                        var getPromotionForUserResult = JSON && JSON.parse(response) || $.parseJSON(response);
                        if (getPromotionForUserResult.Error) {
                            var errorType = "getbonus-fail-" + getPromotionForUserResult.Error.Code;
                            if (self.getTVariable("promoErrors", "message", errorType)) {
                                self.error(errorType)
                            } else {
                                self.error("getbonus-fail")
                            }
                        } else if (getPromotionForUserResult.PromotionUserSummary) {
                            self.getBonusInformation(getPromotionForUserResult.PromotionUserSummary, "api")
                        } else {
                            self.error("getbonus-fail")
                        }
                    } catch (err) {
                        self.error("error")
                    }
                } else {
                    self.error("getbonus-fail")
                }
            },
            beforeSend: function() {
                self.cancelButton.text("Loading").prop("disabled", true).addClass("loading")
            },
            complete: function() {
                self.cancelButton.text("Cancel").prop("disabled", false).removeClass("loading")
            },
            error: function() {
                self.error("error")
            }
        })
    };
    this.resetPromotionPage = function() {
        self.agreeCheckbox.prop("checked", false);
        self.claimButton.prop("disabled", true);
        self.selectedBonusArea.hide();
        self.bonusResultArea.hide();
        self.agreeErrorMessage.hide();
        bonusCodetoDecline = "";
        if (self.mobile) {
            self.bonusResultArea.modal("hide");
            self.bonusCodeAreaMobile.show()
        }
        self.bonusInfo.show();
        self.bonusError.hide();
        self.resetInput()
    };
    this.resetInput = function() {
        self.selectedBonusButton.show().prop("disabled", false).text("View").removeClass("btn-hide-bonus btn-show-bonus");
        self.submitButton.show().text("Submit").prop("disabled", false);
        self.cancelButton.hide();
        self.promoCodeInput.val("").prop("disabled", false);
        self.inputErrorMessage.hide();
        promoCodeEntered = false
    };
    this.checkBonusList = function() {
        self.promoCodeInput.val(bonusCode).prop("disabled", true);
        self.submitButton.hide();
        self.cancelButton.show();
        if (localPromotionsJson !== "null" && localPromotionsJson !== null) {
            var localJSON = localPromotionsJson[bonusCode];
            if (typeof localJSON != "undefined") {
                self.getBonusInformation(localJSON, "local")
            } else {
                self.getBonusAPI(bonusCode)
            }
        } else {
            self.getBonusAPI(bonusCode)
        }
    };
    this.refreshPage = function() {
        $(".page-refreshing").show();
        setTimeout(function() {
            location.reload()
        }, 4e3)
    };
    this.refreshPageMobile = function() {
        self.navTabsLi.removeClass("active");
        self.navTabsLi.prop("disabled", true);
        $(document).off(clickEvent, "#layout-headertabs a");
        $("#btnReturntoPromotions").show()
    };
    this.buttonDisable = function(button) {
        if (button.is("button")) {
            button.addClass("ajax-loader");
            button.attr("disabled", true)
        } else {
            button.addClass("ajax-loader");
            button.addClass("btn-disabled")
        }
    }
}).apply(zeus.promotions);
var progressivePromotions = progressivePromotions || {};
progressivePromotions.history = progressivePromotions.history || {};
progressivePromotions.history.common = progressivePromotions.history.common || {};
(function() {
    "use strict";
    var global = {};
    this.init = function(tVars, opts) {
        global.currency = opts.currency || "GBP";
        global.dateFormat = opts.dateFormat || "YYYY-MM-DD HH:mm";
        global.tVars = tVars
    };
    zeus.jit.multipleTables.formatResponse = function(response) {
        var formattedPromos = [];
        var result = {};
        response.Items.forEach(function(promotionHistory) {
            result = {
                promoName: promotionHistory.Name || "-",
                promoWalletType: promotionHistory.WalletType || "-",
                promoType: promotionHistory.PromotionType || "-",
                promoCode: promotionHistory.PromoCode || "-",
                promoStatus: promotionHistory.PromotionStatus || "-",
                promoAmount: (promotionHistory.Amount ? promotionHistory.PromotionStatus === "FreeSpinsRewarded" ? promotionHistory.Amount + " Free Spins" : zeus.utilities.formatCurrency(promotionHistory.Amount, global.currency) : null) || "-",
                promoWageringTarget: promotionHistory.WageringTarget ? zeus.utilities.formatCurrency(promotionHistory.WageringTarget, global.currency) : "-",
                promoWageringContributions: promotionHistory.WageringContributions || promotionHistory.WageringContributions === 0 ? zeus.utilities.formatCurrency(promotionHistory.WageringContributions, global.currency) : "-",
                promoActivationDateFull: promotionHistory.ActivationDate || "-",
                promoActivationDate: promotionHistory.ActivationDate ? moment(promotionHistory.ActivationDate).format(global.dateFormat) : "-",
                promoExpiryDate: promotionHistory.ExpiryDate ? moment(promotionHistory.ExpiryDate).format(global.dateFormat) : "-",
                promoEndDateToQualify: promotionHistory.EndDateToQualify ? moment(promotionHistory.EndDateToQualify).format(global.dateFormat) : "-",
                promoTargetAccumulation: promotionHistory.TargetAccumulation ? zeus.utilities.formatCurrency(promotionHistory.TargetAccumulation, global.currency) : "-",
                promoCurrentAccumulation: promotionHistory.CurrentAccumulation || promotionHistory.CurrentAccumulation === 0 ? zeus.utilities.formatCurrency(promotionHistory.CurrentAccumulation, global.currency) : "-",
                promoPayoutAfterPeriod: promotionHistory.PayoutAfterPeriod === true ? zeus.utilities.tVar(global.tVars, "payoutAfterPeriod", "trueText") : promotionHistory.PayoutAfterPeriod === false ? zeus.utilities.tVar(global.tVars, "payoutAfterPeriod", "falseText") : "-",
                promoTermsAndConditions: promotionHistory.TermsAndConditions || "-",
                promoId: promotionHistory.BonusId || "-"
            };
            formattedPromos.push(result)
        });
        return formattedPromos
    }
}).apply(progressivePromotions.history.common);
var promotions = promotions || {};
promotions.history = promotions.history || {};
promotions.history.common = promotions.history.common || {};
(function() {
    "use strict";
    var self = this;
    var global = {};
    this.init = function(opts) {
        global.currency = opts.currency || "GBP";
        global.dateFormat = opts.dateFormat || "YYYY-MM-DD HH:mm"
    };
    zeus.jit.tabled.formatResponse = function(response) {
        var formattedPromos = [];
        var result = {};
        response.Items.forEach(function(promotionHistory) {
            var promoActivationDate = moment(promotionHistory.ActivationDate);
            var promoExpiryDate = moment(promotionHistory.ExpiryDate);
            result = {
                promoName: promotionHistory.Name || "-",
                promoWalletType: promotionHistory.WalletType || "-",
                promoType: promotionHistory.PromotionType || "-",
                promoCode: promotionHistory.PromoCode || "-",
                promoStatus: promotionHistory.PromotionStatus || "-",
                promoAmount: (promotionHistory.Amount ? promotionHistory.PromotionStatus === "FreeSpinsRewarded" ? promotionHistory.Amount + " Free Spins" : zeus.utilities.formatCurrency(promotionHistory.Amount, global.currency) : null) || "-",
                promoWageringTarget: (promotionHistory.WageringTarget ? zeus.utilities.formatCurrency(promotionHistory.WageringTarget, global.currency) : null) || "-",
                promoWageringContributions: (promotionHistory.WageringContributions || promotionHistory.WageringContributions === 0 ? zeus.utilities.formatCurrency(promotionHistory.WageringContributions, global.currency) : null) || "-",
                promoActivationDate: (promotionHistory.ActivationDate ? moment(promotionHistory.ActivationDate).format(global.dateFormat) : null) || "-",
                promoExpiryDate: (promotionHistory.ExpiryDate ? moment(promotionHistory.ExpiryDate).format(global.dateFormat) : null) || "-",
                promoActivationDateFull: promotionHistory.ActivationDate || "-",
                promoExpiryDateFull: promotionHistory.ExpiryDate || "-",
                promoId: promotionHistory.BonusId || "-"
            };
            formattedPromos.push(result)
        });
        return formattedPromos
    }
}).apply(promotions.history.common);
var promotions = promotions || {};
promotions.history = promotions.history || {};
promotions.history.admin = promotions.history.admin || {};
(function() {
    "use strict";
    var self = this;
    var global = {};
    this.init = function(opts, request) {
        global.tVars = opts.tVars;
        global.playerId = opts.playerId;
        opts.jitApi = "PromotionsHistory";
        global.itemsPerPage = opts.itemsPerPage || 10;
        self.cacheElements(opts);
        self.createBindings();
        promotions.history.common.init(opts);
        zeus.jit.tabled.init(opts);
        if (request) {
            self.makeRequest(request)
        } else if (opts.defaultRequestOnLoad) {
            self.makeRequest(global.request)
        }
    };
    this.cacheElements = function() {
        global.el = {};
        global.el.startDay = $("#BosPromotionsHistoryFilter_SmartStartDate_Day");
        global.el.startMonth = $("#BosPromotionsHistoryFilter_SmartStartDate_Month");
        global.el.startYear = $("#BosPromotionsHistoryFilter_SmartStartDate_Year");
        global.el.endDay = $("#BosPromotionsHistoryFilter_SmartEndDate_Day");
        global.el.endMonth = $("#BosPromotionsHistoryFilter_SmartEndDate_Month");
        global.el.endYear = $("#BosPromotionsHistoryFilter_SmartEndDate_Year");
        global.el.promotionName = $("#BosPromotionsHistoryFilter_PromotionName");
        global.el.promotionType = $("#BosPromotionsHistoryFilter_PromoType");
        global.el.promotionStatus = $("#BosPromotionsHistoryFilter_PromoStatus")
    };
    this.createBindings = function() {
        $(".btn-filter-history").on("click", function() {
            self.makeRequest(self.createRequest())
        })
    };
    this.createRequest = function() {
        var startDate = global.el.startMonth.val() + "/" + global.el.startDay.val() + "/" + global.el.startYear.val() + " 00:00:00";
        var endDate = global.el.endMonth.val() + "/" + global.el.endDay.val() + "/" + global.el.endYear.val() + " 23:59:59";
        var promoName = global.el.promotionName.val().trim() || null;
        var promoType = global.el.promotionType.val().trim();
        var promoStatus = global.el.promotionStatus.val().trim();
        promoType = promoType && promoType !== "All" ? promoType : null;
        promoStatus = promoStatus && promoStatus !== "All" ? promoStatus : null;
        var promotionsHistoryRequest = {
            PlayerId: global.playerId,
            PageNumber: "1",
            Items: global.itemsPerPage,
            StartDate: startDate,
            EndDate: endDate,
            PromoName: promoName,
            PromoType: promoType,
            PromoStatus: promoStatus
        };
        return promotionsHistoryRequest
    };
    this.makeRequest = function(request) {
        request = request || global.request;
        zeus.jit.tabled.makeRequest(request)
    }
}).apply(promotions.history.admin);
var progressivePromotions = progressivePromotions || {};
progressivePromotions.history = progressivePromotions.history || {};
progressivePromotions.history.player = progressivePromotions.history.player || {};
(function() {
    "use strict";
    var self = this;
    var global = {};
    var promoApiUrl = "api/Bonuses/Cancel/";
    var playerAction = {
        CancelPromotion: "Cancel",
        OptOutOfPromotion: "OptOut"
    };
    this.init = function(tVars, promoHistoryTablesOpts, commonOpts) {
        global.tVars = tVars;
        self.createBindings();
        progressivePromotions.history.common.init(tVars, commonOpts);
        zeus.jit.multipleTables.init(tVars, promoHistoryTablesOpts);
        var requests = [];
        for (var key in promoHistoryTablesOpts) {
            if (promoHistoryTablesOpts.hasOwnProperty(key)) {
                requests.push(promoHistoryTablesOpts[key].request)
            }
        }
        zeus.jit.multipleTables.makeRequests(requests)
    };
    this.createBindings = function() {
        $(document).on("click", ".cancel-bonus", function(e) {
            e.preventDefault();
            var thisEl = $(this);
            self.showConfirmationDialog(thisEl.data("promo-code"), thisEl.data("promo-id"), playerAction.CancelPromotion)
        });
        $(document).on("click", ".opt-out-of-bonus", function(e) {
            e.preventDefault();
            var thisEl = $(this);
            self.showConfirmationDialog(thisEl.data("promo-code"), thisEl.data("promo-id"), playerAction.OptOutOfPromotion)
        });
        $(document).on("click", ".show-terms", function(e) {
            e.preventDefault();
            var thisEl = $(this);
            var bootboxTitle = thisEl.data("promo-name") + " " + zeus.utilities.tVar(global.tVars, "termsAndConditions", "title");
            var termsAndConditions = thisEl.next().html();
            if (termsAndConditions === "-") {
                termsAndConditions = zeus.utilities.tVar(global.tVars, "termsAndConditions", "missingTerms")
            } else {
                termsAndConditions = self.splitTermsIntoParagraphs(termsAndConditions)
            }
            self.showBootbox(bootboxTitle, termsAndConditions)
        })
    };
    this.splitTermsIntoParagraphs = function(termsAndConditions) {
        var result = "";
        var lines = termsAndConditions.split(/\r\n|\r|\n/g);
        for (var i = 0; i < lines.length; i++) {
            result += "<p>" + lines[i] + "</p>"
        }
        return result
    };
    this.showConfirmationDialog = function(promoCode, promoId, selectedPlayerAction) {
        var tVarKey = "";
        if (selectedPlayerAction === playerAction.CancelPromotion) {
            tVarKey = "cancelBonus"
        } else if (selectedPlayerAction === playerAction.OptOutOfPromotion) {
            tVarKey = "optOutOfBonus"
        }
        window.bootbox.dialog({
            title: zeus.utilities.tVar(global.tVars, tVarKey, "title"),
            message: zeus.utilities.tVar(global.tVars, tVarKey, "body"),
            buttons: {
                cancel: {
                    label: zeus.utilities.tVar(global.tVars, tVarKey, "cancel"),
                    className: "btn-secondary"
                },
                confirm: {
                    label: zeus.utilities.tVar(global.tVars, tVarKey, "confirm"),
                    className: "btn-primary",
                    callback: function() {
                        if (selectedPlayerAction === playerAction.CancelPromotion) {
                            self.cancelBonus(promoCode, promoId)
                        } else if (selectedPlayerAction === playerAction.OptOutOfPromotion) {
                            self.optOutOfBonus(promoCode, promoId)
                        }
                    }
                }
            },
            className: "info-modal"
        })
    };
    this.cancelBonus = function(promoCode, promoId) {
        var activePromoEl = $('[data-promo-id="' + promoId + '"] .cancel-bonus');
        $.ajax({
            type: "DELETE",
            url: zeus.core.siteRoot + promoApiUrl + promoId,
            success: function() {
                self.cancelSuccess(promoCode, promoId, activePromoEl)
            },
            beforeSend: function() {
                activePromoEl.addClass("processing")
            },
            complete: function() {
                activePromoEl.removeClass("processing")
            },
            error: function() {
                self.cancelError()
            }
        })
    };
    this.optOutOfBonus = function(promoCode, promoId) {
        var activePromoEl = $('[data-promo-id="' + promoId + '"] .opt-out-of-bonus');
        $.ajax({
            type: "DELETE",
            url: zeus.core.siteRoot + promoApiUrl + promoId,
            success: function() {
                self.optOutSuccess(promoCode, promoId, activePromoEl)
            },
            beforeSend: function() {
                activePromoEl.addClass("processing")
            },
            complete: function() {
                activePromoEl.removeClass("processing")
            },
            error: function() {
                self.optOutError()
            }
        })
    };
    this.cancelError = function() {
        self.showBootbox(zeus.utilities.tVar(global.tVars, "cancelError", "title"), zeus.utilities.tVar(global.tVars, "cancelError", "body"))
    };
    this.cancelSuccess = function(promoCode, promoId, activePromoEl) {
        self.showBootbox(zeus.utilities.tVar(global.tVars, "cancelSuccess", "title"), zeus.utilities.tVar(global.tVars, "cancelSuccess", "body"));
        $('[data-promo-id="' + promoId + '"] .promo-state').html(zeus.utilities.tVar(global.tVars, "processingState"));
        activePromoEl.remove()
    };
    this.optOutError = function() {
        self.showBootbox(zeus.utilities.tVar(global.tVars, "optOutError", "title"), zeus.utilities.tVar(global.tVars, "optOutError", "body"))
    };
    this.optOutSuccess = function(promoCode, promoId, activePromoEl) {
        self.showBootbox(zeus.utilities.tVar(global.tVars, "optOutSuccess", "title"), zeus.utilities.tVar(global.tVars, "optOutSuccess", "body"));
        $('[data-promo-id="' + promoId + '"] .promo-state').html(zeus.utilities.tVar(global.tVars, "processingState"));
        activePromoEl.remove()
    };
    this.showBootbox = function(title, msg) {
        window.bootbox.alert({
            message: msg,
            title: title,
            className: "info-modal"
        })
    }
}).apply(progressivePromotions.history.player);
var promotions = promotions || {};
promotions.history = promotions.history || {};
promotions.history.player = promotions.history.player || {};
(function() {
    "use strict";
    var self = this;
    var global = {};
    var promoApiUrl = "api/Promotions/";
    this.init = function(opts, request) {
        global.tVars = opts.tVars;
        opts.jitApi = "MyPromotionsHistory";
        global.itemsPerPage = opts.pageSize || "10";
        self.cacheElements(opts);
        self.createBindings();
        promotions.history.common.init(opts);
        zeus.jit.tabled.init(opts);
        if (request) {
            self.makeRequest(request)
        } else if (opts.defaultRequestOnLoad) {
            self.makeRequest(global.request)
        }
    };
    this.cacheElements = function() {
        global.el = {};
        global.el.startDay = $("#SmartStartDate_Day");
        global.el.startMonth = $("#SmartStartDate_Month");
        global.el.startYear = $("#SmartStartDate_Year");
        global.el.endDay = $("#SmartEndDate_Day");
        global.el.endMonth = $("#SmartEndDate_Month");
        global.el.endYear = $("#SmartEndDate_Year");
        global.el.promotionName = $("#PromotionName")
    };
    this.createBindings = function() {
        $(".btn-filter-history").on("click", function() {
            self.makeRequest(self.createRequest())
        });
        $(document).on("click", ".cancel-bonus", function(e) {
            e.preventDefault();
            var thisEl = $(this);
            self.cancelDialog(thisEl.data("promo-code"), thisEl.data("promo-id"))
        })
    };
    this.createRequest = function() {
        var startDate = global.el.startMonth.val() + "/" + global.el.startDay.val() + "/" + global.el.startYear.val() + " 00:00:00";
        var endDate = global.el.endMonth.val() + "/" + global.el.endDay.val() + "/" + global.el.endYear.val() + " 23:59:59";
        var promoName = global.el.promotionName.val().trim() || null;
        var promotionsHistoryRequest = {
            PageNumber: "1",
            Items: global.itemsPerPage,
            StartDate: startDate,
            EndDate: endDate,
            PromoName: promoName
        };
        return promotionsHistoryRequest
    };
    this.makeRequest = function(request) {
        request = request || global.request;
        zeus.jit.tabled.makeRequest(request)
    };
    this.cancelDialog = function(promoCode, promoId) {
        bootbox.dialog({
            title: zeus.utilities.tVar(global.tVars, "cancelBonus", "title"),
            message: zeus.utilities.tVar(global.tVars, "cancelBonus", "body"),
            buttons: {
                cancel: {
                    label: zeus.utilities.tVar(global.tVars, "cancelBonus", "cancel"),
                    className: "btn-secondary"
                },
                confirm: {
                    label: zeus.utilities.tVar(global.tVars, "cancelBonus", "confirm"),
                    className: "btn-primary",
                    callback: function() {
                        self.cancelBonus(promoCode, promoId)
                    }
                }
            },
            className: "info-modal"
        })
    };
    this.cancelBonus = function(promoCode, promoId) {
        var activePromoEl = $('[data-promo-id="' + promoId + '"] .cancel-bonus');
        $.ajax({
            url: zeus.core.siteRoot + promoApiUrl + "CancelBonus/" + promoCode,
            success: function() {
                self.cancelSuccess(promoCode, promoId, activePromoEl)
            },
            beforeSend: function() {
                activePromoEl.addClass("processing")
            },
            complete: function() {
                activePromoEl.removeClass("processing")
            },
            error: function() {
                self.cancelError()
            }
        })
    };
    this.cancelError = function() {
        self.showBootbox(zeus.utilities.tVar(global.tVars, "cancelError", "title"), zeus.utilities.tVar(global.tVars, "cancelError", "body"))
    };
    this.cancelSuccess = function(promoCode, promoId, activePromoEl) {
        self.showBootbox(zeus.utilities.tVar(global.tVars, "cancelSuccess", "title"), zeus.utilities.tVar(global.tVars, "cancelSuccess", "body"));
        $('[data-promo-id="' + promoId + '"] .promo-state').html(zeus.utilities.tVar(global.tVars, "promoCancelledState"));
        activePromoEl.remove()
    };
    this.showBootbox = function(title, msg) {
        bootbox.alert({
            message: msg,
            title: title,
            className: "info-modal"
        })
    }
}).apply(promotions.history.player);
"use strict";
var zeus = zeus || {};
(function(root) {
    root.ResRegistrationPart = function(options) {
        var _this = this;
        var captchaResponse = "undefined";
        var loadedCaptchaContainer;
        var isCaptchaLoaded = false;
        this.initialize = function() {
            this.options = options || {};
            if ($("#captchaVerification").length > 0) {
                _this.renderCaptcha();
                isCaptchaLoaded = true
            }
            this.cacheSelectors();
            this.showIsResMemberForm();
            this.addEventListeners();
            if ($("#registrationForm").closest(".layout-lightbox").length) {
                $(document).on("hidden.bs.modal", "#lightboxModal", function() {
                    _this.cacheSelectors();
                    _this.showIsResMemberForm();
                    if ($("#captchaVerification").length > 0) {
                        _this.clearCaptcha()
                    }
                })
            }
            if ($("#registrationForm").closest(".layout-lightbox").length) {
                $(document).on("show.bs.modal", "#lightboxModal", function() {
                    _this.cacheSelectors();
                    if ($("#captchaVerification").length > 0 && isCaptchaLoaded === false) {
                        _this.renderCaptcha();
                        isCaptchaLoaded = true
                    }
                })
            }
        };
        this.cacheSelectors = function() {
            this.$body = $("body");
            this.$isResMemberForm = $("#isResMemberForm");
            this.$getResMemberForm = $("#getResMemberForm");
            this.$isResMemberSubmit = $("#isResMemberSubmit");
            this.$isResMember = $('[name="isResMember"]');
            this.$getResMemberSubmit = $("#getResMemberSubmit");
            this.$resMemberDOBDay = $("#resMemberDOBDay");
            this.$resMemberDOBMonth = $("#resMemberDOBMonth");
            this.$resMemberDOBYear = $("#resMemberDOBYear");
            this.$resMemberNumber = $("#resMemberNumber");
            this.$resMemberBack = $("#getResMemberBack")
        };
        this.addEventListeners = function() {
            $(document).on("click", "#isResMemberSubmit", function(e) {
                e.preventDefault();
                if ($("#captchaVerification").length > 0) {
                    grecaptcha.reset(loadedCaptchaContainer)
                }
                captchaResponse = "undefined";
                if ($('input:radio[name="isResMember"]:checked').val() === "yes") {
                    _this.showGetResMemberForm()
                } else {
                    _this.$isResMemberForm.hide();
                    _this.$getResMemberForm.hide();
                    $(document).trigger("widget:registration:show")
                }
            });
            $(document).on("click", "#getResMemberSubmit", function(e) {
                e.preventDefault();
                _this.submitResMemberForm()
            });
            $(document).on("click", "#getResMemberBack", function(e) {
                e.preventDefault();
                _this.$resMemberNumber.val("");
                _this.$getResMemberForm.validate().resetForm();
                $("#resGetMemberError").remove();
                _this.showIsResMemberForm()
            });
            $(document).on("widget:registration:initialized", function() {
                $(document).trigger("widget:registration:hide")
            });
            $(document).on("part:loyalty:show:get:membership", function() {
                _this.showGetResMemberForm()
            });
            $(document).on("part:loyalty:show:is:membership", function() {
                _this.showIsResMemberForm()
            });
            $(document).trigger("part:loyalty:initialized");
            if (_this.$getResMemberForm.closest(".modal").length) {
                $(document).on("lbClose", function() {
                    _this.showIsResMemberForm();
                    $("#resGetMemberError").remove();
                    _this.$resMemberNumber.val("");
                    _this.$getResMemberForm.validate().resetForm()
                })
            }
        };
        this.showIsResMemberForm = function() {
            this.$isResMemberForm.show();
            this.$getResMemberForm.hide();
            $(document).trigger("widget:registration:hide")
        };
        this.showGetResMemberForm = function() {
            this.$isResMemberForm.hide();
            this.$getResMemberForm.show();
            $(document).trigger("widget:registration:hide")
        };
        this.submitResMemberForm = function() {
            if (this.getResMemberFormValidate()) {
                var resMemberNumber = this.$resMemberNumber.val();
                var resMemberDOB = this.$resMemberDOBYear.val() + "-" + this.$resMemberDOBMonth.val() + "-" + this.$resMemberDOBDay.val();
                this.getResMember(resMemberNumber, resMemberDOB, captchaResponse, function(err, data) {
                    if (err) {
                        _this.errorHandler(data)
                    } else {
                        $("#resGetMemberError").remove();
                        if (data.SiteData.hasOwnProperty("RetailMembershipNumber")) {
                            data.SiteData.retailMembershipNumber = data.SiteData.RetailMembershipNumber;
                            delete data.SiteData.RetailMembershipNumber
                        }
                        $(document).trigger("part:loyalty:membership:repsonse", data);
                        $(document).trigger("widget:registration:show")
                    }
                })
            }
        };
        this.getResMemberFormValidate = function() {
            this.$getResMemberForm.validate({
                rules: {
                    resMemberNumber: {
                        required: true,
                        number: true
                    }
                },
                messages: {
                    resMemberNumber: "Please enter a valid Membership Number"
                }
            });
            return this.$getResMemberForm.valid()
        };
        this.getResMember = function(membershipNo, dob, captcha, callback) {
            var csrf = document.querySelector('meta[name="csrf-token"]');
            var csrfToken = csrf ? csrf.getAttribute("content") : "";
            var getMemberData = $.ajax({
                method: "POST",
                url: "/api/mecca/res/customer/",
                data: {
                    MembershipNo: membershipNo,
                    DateOfBirth: dob,
                    Response: captcha
                },
                headers: {
                    "X-CSRF-Token": csrfToken
                }
            }).done(function(data) {
                callback(false, data)
            }).fail(function(data) {
                callback(true, data)
            });
            captchaResponse = "undefined"
        };
        this.errorHandler = function(error) {
            var errorMessage;
            if (error.status === 400) {
                errorMessage = error.responseJSON.Text || "Incorrect details. Please ensure you have entered them correctly.";
                if (error.responseText.indexOf("Solve reCAPTCHA to continue!") > -1) {
                    errorMessage = "Please verify that you are not a robot."
                }
            }
            if (error.status === 403) errorMessage = error.responseJSON || "We cannot perform this request.";
            if (error.status === 500) errorMessage = error.responseJSON || "Error please try again later.";
            if ($("#captchaVerification").length > 0 && errorMessage.indexOf("Please verify that you are not a robot.") === -1) {
                grecaptcha.reset(loadedCaptchaContainer)
            }
            if ($("#resGetMemberError").length) {
                $("#resGetMemberError").text(errorMessage)
            } else {
                _this.$getResMemberForm.prepend('<div id="resGetMemberError" class="alert alert-danger error" role="alert">' + errorMessage + "</div>")
            }
        };
        this.renderCaptcha = function() {
            var theme = "light";
            loadedCaptchaContainer = grecaptcha.render("captchaVerification", {
                sitekey: $("#captchaVerification").data("sitekey"),
                callback: this.callbackCaptcha,
                "expired-callback": this.expiredCaptcha,
                theme: theme
            });
            return false
        };
        this.callbackCaptcha = function(response) {
            captchaResponse = response;
            return false
        };
        this.expiredCaptcha = function() {
            captchaResponse = "undefined";
            return false
        };
        this.clearCaptcha = function() {
            var $captchaContainer = $("#captchaVerification");
            $captchaContainer.empty();
            $captchaContainer.innerHtml = "";
            captchaResponse = "undefined";
            isCaptchaLoaded = false
        };
        this.initialize()
    };
    return root
})(zeus || {});
var wlzeus = wlzeus || {};
wlzeus.mecca = wlzeus.mecca || {};
wlzeus.mecca.loggedInHeader = wlzeus.mecca.loggedInHeader || {};
(function() {
    "use strict";
    var self = this;
    var balanceOptions;
    var textVariables;
    var balancesOnPage;
    var balanceData;
    var messagesRequest;
    var balanceRequest;
    var pointsRequest;
    this.init = function(options, tVariables) {
        balanceOptions = options;
        textVariables = tVariables;
        self.addBindings();
        self.refreshBalances();
        self.refreshUnreadMessages()
    };
    this.addBindings = function() {
        $(document).on("updateBalances", function() {
            self.refreshBalances()
        });
        $(document).on("click", ".js-playpoints-btn", function() {
            self.refreshPlayPoints()
        });
        var balanceWidgetElem = $(".js-balance-group");
        balanceWidgetElem.find(".js-balance-refresh").on("click", function(e) {
            e.preventDefault();
            self.refreshBalances()
        })
    };
    this.refreshUnreadMessages = function() {
        var unreadMessagesElem = $(".js-profile-link");
        if (!messagesRequest) {
            messagesRequest = true;
            var jitCommands = {
                getUnreadMessages: function(response) {
                    if (!_.isNull(response) && response.DidSucceed && !_.isNull(response.Response) && !_.isUndefined(response.Response)) {
                        var elems = unreadMessagesElem.find(".bubble-label");
                        if (elems.length) {
                            elems.html(response.Response)
                        } else {
                            var templateHtml = $("#unreadMessagesTemplate").html();
                            var template = _.template(templateHtml, {
                                unreadMessageCount: response.Response
                            });
                            unreadMessagesElem.append(template)
                        }
                    }
                }
            };
            $.extend(zeus.jit.responseCommands, jitCommands)
        }
        zeus.jit.add([{
            Name: "PlayerInboxUnreadMessages"
        }, "getUnreadMessages"])
    };
    this.refreshPlayPoints = function() {
        var playPointsElem = $(".js-playpoints");
        playPointsElem.html(textVariables.loadingMessage);
        if (!pointsRequest) {
            pointsRequest = true;
            var jitCommands = {
                getPlayPoints: function(response) {
                    if (!_.isNull(response) && response.DidSucceed && !_.isNull(response.Response) && !_.isUndefined(response.Response)) {
                        playPointsElem.html(textVariables.playPointsStart + response.Response + textVariables.playPointsEnd)
                    } else {
                        playPointsElem.html(textVariables.unavailableMessage)
                    }
                }
            };
            $.extend(zeus.jit.responseCommands, jitCommands)
        }
        zeus.jit.add([{
            Name: "MeccaPlayPoints"
        }, "getPlayPoints"])
    };
    this.refreshBalances = function(useExisting) {
        balancesOnPage = $(".balance-widget-amount, .balance-widget-amount-mecca");
        self.setAllBalances(textVariables.loadingMessage);
        if (useExisting && balanceData) {
            self.updateBalances()
        } else {
            if (!balanceRequest) {
                balanceRequest = true;
                var jitCommands = {
                    getBalanceData: function(response) {
                        if (!_.isNull(response) && response.DidSucceed && !_.isNull(response.Response) && !_.isUndefined(response.Response)) {
                            balanceData = [];
                            balanceData["totalbalance"] = response.Response["TotalBalance"];
                            response.Response.Balances.forEach(function(obj) {
                                balanceData[obj.BalanceName.toLowerCase().replace(/\s+/g, "")] = obj.Value
                            });
                            self.updateBalances()
                        } else {
                            self.error()
                        }
                    }
                };
                $.extend(zeus.jit.responseCommands, jitCommands)
            }
            zeus.jit.add([{
                Name: "GetBalancesAndRingFencedBonuses"
            }, "getBalanceData"])
        }
    };
    this.updateBalances = function() {
        balancesOnPage.each(function() {
            var balance = $(this);
            var balanceType = balance.data("balance");
            if (balanceData[balanceType]) {
                balance.html(balanceData[balanceType]);
                if (balanceType === "reward") {
                    balance.parent(".wallet").show()
                }
            } else {
                if (balanceType === "reward") {
                    balance.parent(".wallet").hide()
                }
                balance.html(textVariables.noBalance)
            }
        });
        $(document).trigger("balanceLoaded")
    };
    this.setAllBalances = function(text) {
        balancesOnPage.each(function() {
            $(this).html(text)
        })
    };
    this.error = function() {
        self.setAllBalances(textVariables.unavailableMessage)
    }
}).apply(wlzeus.mecca.loggedInHeader);
var wlzeus = wlzeus || {};
wlzeus.mecca = wlzeus.mecca || {};
wlzeus.mecca.minilobby = wlzeus.mecca.minilobby || {};
(function() {
    "use strict";
    var self = this;
    var textVariables;
    var lobbyItemTemplate;
    var lobbyContainerEl;
    var TEMPLATE_OPTIONS = {
        evaluate: /\{\{([\s\S]+?)\}\}/g,
        interpolate: /\{\{=([\s\S]+?)\}\}/g,
        escape: /\{\{-([\s\S]+?)\}\}/g
    };
    this.init = function(data, tVariables) {
        this.lobbyData = data;
        textVariables = tVariables;
        lobbyItemTemplate = $("#bingo-item-template").html();
        lobbyContainerEl = $(".js-bingo-row");
        this.renderLobby();
        if (zeus.core.isAuthenticated) {
            this.getFavouriteRooms()
        }
    };
    this.markFavouriteRooms = function(favouriteRooms) {
        _.each(MECCABINGO_MINI_SCHEDULE.ROOMS, function(room) {
            if (favouriteRooms.indexOf(room.FavoriteId) > -1) {
                room.isFavorite = true
            }
        });
        lobbyContainerEl.find(".js-favorite-action").each(function() {
            if (favouriteRooms.indexOf($(this).data("favorite-id")) > -1) {
                $(this).addClass("selected")
            }
        })
    };
    this.getFavouriteRooms = function() {
        var favouriteRoomsEndpoint = MECCABINGO_CONFIG.URLS.GET_FAVORITE_ROOMS;
        $.ajax({
            url: favouriteRoomsEndpoint,
            dataType: "json"
        }).done(this.markFavouriteRooms)
    };
    this.renderLobby = function() {
        lobbyContainerEl = $(".js-bingo-row");
        lobbyContainerEl.attr({
            "data-bingo-items-count": this.lobbyData.DisplayCount,
            "data-bingo-items-switch-time": this.lobbyData.ButtonsSwitchingTime,
            "data-bingo-items-countdown": this.lobbyData.BingoMiniSheduleCountDown
        });
        if (window.mixins) {
            this.renderLobbyItems()
        } else {
            $(document).on("mixinsAdded", function() {
                self.renderLobbyItems()
            })
        }
    };
    this.renderLobbyItems = function() {
        var lobbyItems = "";
        var counter = 0;
        var iterator = 0;
        this.lobbyData.Items = _.filter(this.lobbyData.Items, function(item) {
            return new Date(item.StartTime) > Date.now()
        });
        _.sortBy(this.lobbyData.Items, function(item) {
            return new Date(item.StartTime)
        });
        while (counter < this.lobbyData.DisplayCount && iterator < this.lobbyData.Items.length) {
            var item = this.lobbyData.Items[iterator];
            if (item) {
                var room = _.find(this.lobbyData.Rooms, function(room) {
                    return room.ProviderName.toLowerCase() === item.BingoScheduleItem.RoomName.toLowerCase()
                });
                if (room) {
                    var data = {
                        item: item,
                        room: room,
                        renderLinkHelper: _.bind(window.mixins.renderLinkHelper, window.mixins)
                    };
                    lobbyItems += _.template(lobbyItemTemplate, data, TEMPLATE_OPTIONS);
                    counter++
                }
            }
            iterator++
        }
        this.lobbyData.Items.splice(0, iterator);
        lobbyContainerEl.html(lobbyItems);
        this.rendered = true;
        $(document).trigger("minilobby:rendered")
    }
}).apply(wlzeus.mecca.minilobby);
var wlzeus = wlzeus || {};
wlzeus.GamesLogin = {};
var GamesLogin = function() {
    "use strict";
    var $formElem;
    var tVariables;
    var widgetOptions;
    var $errorsContainerElem;
    var $loginButtonElem;
    var $loginControlElem;
    var $lightboxContainerElem;
    var siteRoot = window.location.protocol + "//" + window.location.host + "/";
    var liveChatMessage;
    var loginButtonText;
    var loginModalTitle;
    var inLightbox = false;
    var minUsernameLength;
    var maxUsernameLength;
    var minPasswordLength;
    var maxPasswordLength;
    var validateOnFocus;
    var formGroupClass;
    var requireFromGroup;
    var gameType;
    var siteCode;
    var gameSoftwareId;
    var tableId;
    var language;
    var country;
    var currencyCode;
    var technology;
    return {
        init: function(tVariablesJSON, widget, opts) {
            var self = this;
            widgetOptions = opts;
            tVariables = tVariablesJSON;
            $formElem = $("#" + widget);
            self.cacheSelectors();
            self.setUpRecaptcha();
            loginModalTitle = zeus.utilities.tVar(tVariables, "LoginModal", "Title");
            loginButtonText = zeus.utilities.tVar(tVariables, "SubmitButton", "NormalState");
            $loginButtonElem.text(loginButtonText);
            minUsernameLength = zeus.utilities.tVar(opts, "minUsernameLength") || 3;
            maxUsernameLength = zeus.utilities.tVar(opts, "maxUsernameLength") || 15;
            minPasswordLength = zeus.utilities.tVar(opts, "minPasswordLength") || 1;
            maxPasswordLength = zeus.utilities.tVar(opts, "maxPasswordLength") || 15;
            validateOnFocus = zeus.utilities.tVar(opts, "validateOnFocus") || false;
            formGroupClass = zeus.utilities.tVar(opts, "formGroupClass") || false;
            requireFromGroup = zeus.utilities.tVar(opts, "requireFromGroup") || false;
            gameType = zeus.utilities.tVar(opts, "gameType");
            siteCode = "meccabingo.com";
            gameSoftwareId = zeus.utilities.tVar(opts, "gameSoftwareId");
            language = zeus.utilities.tVar(opts, "language");
            country = zeus.utilities.tVar(opts, "country");
            currencyCode = zeus.utilities.tVar(opts, "currencyCode");
            tableId = zeus.utilities.tVar(opts, "tableid");
            technology = zeus.utilities.tVar(opts, "technology");
            self.addBindings();
            self.validateForm();
            self.lightboxCheck(widget)
        },
        cacheSelectors: function() {
            $loginButtonElem = $formElem.find(".js-login-button");
            $errorsContainerElem = $formElem.find(".js-login-errors-container");
            $loginControlElem = $formElem.find(".js-login-control");
            $lightboxContainerElem = $("#lightboxModal");
            liveChatMessage = $formElem.find(".live-chat-message")[0]
        },
        setUpRecaptcha: function() {
            this.recaptcha = $formElem.find("[data-sitekey]")[0];
            if (this.recaptcha) {
                var recaptchaCallback = function(g) {
                    this.recaptchaInstance = g.render(this.recaptcha, {
                        sitekey: this.recaptcha.dataset.sitekey,
                        theme: "light",
                        size: "invisible",
                        callback: this.recaptchaCallback.bind(this)
                    })
                };
                window.recaptchaInstances.push(recaptchaCallback.bind(this))
            }
        },
        addBindings: function() {
            var self = this;
            $loginButtonElem.on("click", function(e) {
                e.preventDefault();
                if (self.recaptcha) {
                    window.grecaptcha.execute(this.recaptchaInstance)
                } else {
                    self.submitForm()
                }
            });
            $loginControlElem.on("keypress", function(e) {
                self.onEnterKeyPressed(e)
            })
        },
        validateForm: function() {
            var self = this;
            var requireFromGroupRule = requireFromGroup ? [2, ".js-login-control"] : false;
            self.validator = $($formElem).validate({
                errorElement: "li",
                rules: {
                    "vm.UsernameOrEmail": {
                        requireFromGroup: requireFromGroupRule,
                        alphanumunderscore: true,
                        minlength: minUsernameLength,
                        maxlength: maxUsernameLength
                    },
                    "vm.Password": {
                        requireFromGroup: requireFromGroupRule,
                        alphanum: true,
                        minlength: minPasswordLength,
                        maxlength: maxPasswordLength
                    }
                },
                messages: {
                    "vm.UsernameOrEmail": {
                        required: zeus.utilities.tVar(tVariables, "userNameOrEmail", "required"),
                        requireFromGroup: zeus.utilities.tVar(tVariables, "userNameOrEmail", "required"),
                        alphanumunderscore: zeus.utilities.tVar(tVariables, "userNameOrEmail", "alphanumunderscore")
                    },
                    "vm.Password": {
                        required: zeus.utilities.tVar(tVariables, "password", "required"),
                        requireFromGroup: zeus.utilities.tVar(tVariables, "password", "required"),
                        alphanum: zeus.utilities.tVar(tVariables, "password", "alphanum")
                    }
                },
                errorPlacement: function(error, element) {
                    element = $(element);
                    if (formGroupClass) {
                        element.closest(formGroupClass).removeClass("valid").addClass("error")
                    }
                    $errorsContainerElem.empty();
                    error.appendTo($errorsContainerElem)
                },
                success: function(error, element) {
                    element = $(element);
                    if (formGroupClass) {
                        element.closest(formGroupClass).addClass("valid").removeClass("error")
                    }
                    error.remove();
                    $errorsContainerElem.empty()
                },
                showErrors: function() {
                    this.defaultShowErrors()
                },
                onfocusout: function(element, event) {
                    if (validateOnFocus) {
                        $.validator.defaults.onfocusout.call(this, element, event)
                    }
                }
            })
        },
        submitForm: function() {
            var self = this;
            var csrf = document.querySelector('meta[name="csrf-token"]');
            var csrfToken = csrf ? csrf.getAttribute("content") : "";
            $.ajax({
                type: "POST",
                url: $formElem.attr("action"),
                data: $formElem.serialize(),
                timeout: 12e5,
                tryCount: 0,
                retryLimit: 1,
                headers: {
                    "X-CSRF-Token": csrfToken
                },
                beforeSend: function() {
                    $loginButtonElem.button("loading").addClass("loading");
                    $loginControlElem.prop("disabled", true).addClass("disabled")
                },
                success: function(data) {
                    self.handleSuccess(data)
                },
                error: function(xhr, textStatus, data) {
                    if (self.recaptcha) {
                        window.grecaptcha.reset(this.recaptchaInstance)
                    }
                    $loginButtonElem.button("reset").removeClass("loading").text(loginButtonText);
                    $loginControlElem.prop("disabled", false).removeClass("disabled");
                    if (xhr.responseJSON === undefined) {
                        xhr.responseJSON = $.parseJSON(xhr.responseText)
                    }
                    self.handleErrors(xhr, textStatus, data)
                }
            })
        },
        parseParam: function(param) {
            var search = location.search;
            var vars = search.substring(1).split("&");
            for (var i = 0; i < vars.length; i++) {
                var pair = vars[i].split("=");
                if (decodeURIComponent(pair[0]) === param) {
                    return decodeURIComponent(pair[1] || "")
                }
            }
            return null
        },
        handleSuccess: function(data) {
            var self = this;
            var urlRedirect = zeus.core.siteRoot;
            var dataNextAction = data.NextAction;
            self.resetAttempts();
            window.demoPlayService.resetDemoPlayData(data.Target.BedePlayerId);
            if (typeof dataNextAction !== "undefined" && dataNextAction !== "" && dataNextAction !== null) {
                urlRedirect = dataNextAction
            }
            if (widgetOptions.returnUrl !== "" && widgetOptions.isInheritRedirectURL) {
                urlRedirect = zeus.core.siteHost + zeus.utilities.inheritUrl(widgetOptions.returnUrl)
            }
            if (typeof urlRedirect === "undefined") {
                urlRedirect = ""
            }
            if (window.opener !== null) {
                window.opener.location.reload()
            }
            self.getTokenAndId(function(err, data) {
                if (err) {
                    window.alert(err)
                } else {
                    document.querySelector(".js-top-wrapper").classList.add("hide");
                    document.querySelector(".js-game-loading-message").classList.remove("hide");
                    self.displayBonusWarning(data)
                }
            });
            var event;
            if (typeof Event === "function") {
                event = new Event("registration-success")
            } else {
                event = document.createEvent("Event");
                event.initEvent("registration-success", true, true)
            }
            window.dispatchEvent(event)
        },
        getTokenAndId: function(callback) {
            $.get(siteRoot + "api/Lobby/PlayerToken").success(function(m) {
                if (m !== null) {
                    if (m.GameToken !== "undefined" && m.UserId !== "undefined") {
                        callback(false, {
                            playerToken: m.GameToken,
                            playerId: m.UserId
                        })
                    } else {
                        callback(true, "userToken")
                    }
                } else {
                    callback(true, "userToken")
                }
            }).fail(function() {
                callback(true, "")
            })
        },
        displayBonusWarning: function(data) {
            var bonusWarning = document.querySelector(".js-game-warning-message");
            var self = this;
            if (bonusWarning && gameType !== "demo") {
                $.get(siteRoot + "api/balances").success(function(response) {
                    if (Number(response.balances.digital.bonus.replace(/[^0-9\.-]+/g, "")) > 0) {
                        var loadingMessage = document.querySelector(".js-game-loading-message");
                        var jsGameBonusWarning = bonusWarning.querySelector(".js-game-bonus-warning-btn");
                        loadingMessage.classList.add("hide");
                        bonusWarning.classList.remove("hide");
                        if (jsGameBonusWarning) {
                            jsGameBonusWarning.addEventListener("click", function() {
                                bonusWarning.classList.add("hide");
                                loadingMessage.classList.remove("hide");
                                self.checkGMSLaunchURL(data)
                            })
                        }
                    } else {
                        self.checkGMSLaunchURL(data)
                    }
                }).fail(function(m) {
                    window.alert(m)
                })
            } else {
                self.checkGMSLaunchURL(data)
            }
        },
        checkGMSLaunchURL: function(player) {
            var self = this;
            if (widgetOptions.returnUrl === "gms") {
                player = {
                    PlayerId: player.playerId,
                    PlayerToken: gameType === "demo" ? "demotoken" : player.playerToken,
                    Currency: "GBP",
                    Channel: zeus.core.isMobile ? "mobile" : "desktop",
                    Language: "EN",
                    AutoLaunch: false,
                    IsDemo: gameType === "demo" ? true : false,
                    SourceUrl: "",
                    SourceArea: "",
                    TableId: tableId,
                    Technology: zeus.core.isMobile ? "HTML5" : technology || "FLASH"
                };
                this.getGMSLaunchURl(player, function(err, data) {
                    if (err) {
                        window.alert(err)
                    } else {
                        widgetOptions.returnUrl = data.launchUrl;
                        self.changePage(widgetOptions.returnUrl)
                    }
                })
            } else {
                widgetOptions.returnUrl = widgetOptions.returnUrl.replace("{PLAYER_TOKEN}", player.playerToken).replace("{PLAYER_ID}", player.playerId).replace("{SOFTWARE_ID}", gameSoftwareId).replace("{LANGUAGE}", language).replace("{COUNTRY}", country).replace("{CURRENCY_CODE}", currencyCode);
                this.changePage(widgetOptions.returnUrl)
            }
        },
        getGMSLaunchURl: function(player, callback) {
            $.ajax({
                url: "/gamelaunch/v1/games/" + gameSoftwareId.toString() + "/launch",
                type: "post",
                contentType: "application/json",
                data: JSON.stringify(player),
                headers: {
                    "X-Correlation-Token": window.uuid.v4(),
                    "X-Site-Code": siteCode
                },
                success: function(data) {
                    callback(null, data)
                },
                error: function(xhr, ajaxOptions, thrownError) {
                    window.alert(thrownError)
                }
            })
        },
        handleErrors: function(xhr) {
            var self = this;
            liveChatMessage.classList.remove("hidden");
            if (xhr.responseJSON && xhr.responseJSON.Errors && xhr.responseJSON.Errors.length) {
                $errorsContainerElem.empty();
                if (xhr.responseJSON.Errors[0].Key === "ExpiredTerms") {
                    $formElem.find(".terms").append('<button class="btn-primary terms-submit">ok</button>');
                    $formElem.find(".terms-submit").click(function(e) {
                        e.preventDefault();
                        $formElem.find(".login-inputs").append('<input type="hidden" name="vm.agreeTerms" value="true" />');
                        $formElem.find(".js-login-submit").click();
                        $formElem.find(".terms-submit").html("Loading")
                    });
                    $formElem.find(".form").addClass("hide");
                    $formElem.find(".terms").removeClass("hide")
                } else {
                    xhr.responseJSON.Errors.forEach(function(obj) {
                        var errorMessage = "";
                        if (obj.Key === "SignIn") {
                            var loginFormWrapper = document.querySelector(".js-suspended-error-wrap");
                            var accountLockedWrapper = document.querySelector(".js-login-error-suspended-screen");
                            var usernamefromForm = document.querySelector(".js-games-login-username").value;
                            var localPlayerData = JSON.parse(localStorage.getItem("localAttemptsData"));
                            var customErrorMessages = ["Login attempt unsuccessful. Try again.", "Final login attempt."];
                            if (localPlayerData) {
                                localPlayerData.forEach(function(player, index) {
                                    if (player.username === usernamefromForm) {
                                        localPlayerData[index].failed_attempts += 1;
                                        switch (player.failed_attempts) {
                                            case 1:
                                                errorMessage = customErrorMessages[0];
                                                self.changeResetLinks();
                                                break;
                                            case 2:
                                            case 3:
                                                errorMessage = '<strong>Having Trouble?</strong><p><a class="login-links" href="/forgotten-password">Reset your password</a> or request a <a class="login-links" href="/forgotten-username">username reminder</a> to prevent your account being locked.</p>';
                                                self.changeResetLinks();
                                                break;
                                            case 4:
                                                errorMessage = '<strong>Having Trouble?</strong><p><a class="login-links" href="/forgotten-password">Reset your password</a> or request a <a class="login-links" href="/forgotten-username">username reminder</a> to prevent your account being locked.</p><p>' + customErrorMessages[1] + "</p>";
                                                self.changeResetLinks();
                                                break;
                                            case 5:
                                                loginFormWrapper.classList.add("hidden");
                                                accountLockedWrapper.classList.remove("hidden");
                                                break;
                                            default:
                                                if (player.failed_attempts >= 3) {
                                                    loginFormWrapper.classList.add("hidden");
                                                    accountLockedWrapper.classList.remove("hidden")
                                                }
                                                break
                                        }
                                        localStorage.setItem("localAttemptsData", JSON.stringify(localPlayerData))
                                    } else {
                                        var found = false;
                                        for (var i = 0; i < localPlayerData.length; i++) {
                                            if (localPlayerData[i].username === usernamefromForm) {
                                                found = true;
                                                break
                                            }
                                        }
                                        if (found) {} else {
                                            localPlayerData.push({
                                                username: usernamefromForm,
                                                failed_attempts: 1
                                            });
                                            localStorage.setItem("localAttemptsData", JSON.stringify(localPlayerData));
                                            errorMessage = customErrorMessages[0];
                                            self.changeResetLinks()
                                        }
                                    }
                                })
                            } else {
                                const playerDataToSave = [{
                                    username: usernamefromForm,
                                    failed_attempts: 1
                                }];
                                localStorage.setItem("localAttemptsData", JSON.stringify(playerDataToSave));
                                errorMessage = customErrorMessages[0];
                                self.changeResetLinks()
                            }
                        } else if (obj.Key === "model.VM.UsernameOrEmail") {
                            errorMessage = "Username is required"
                        } else {
                            errorMessage = obj.Message
                        }
                        var errorElement = document.createElement("div");
                        errorElement.classList.add("login-error-container");
                        errorElement.innerHTML = '<div class="red-circle"><span class="i-position">i</span></div><div class="error-margin">' + errorMessage + "</div>";
                        $errorsContainerElem.append(errorElement)
                    })
                }
            }
        },
        resetAttempts: function() {
            var localPlayerData = JSON.parse(localStorage.getItem("localAttemptsData"));
            var usernamefromForm = document.querySelector(".js-games-login-username").value;
            if (localPlayerData) {
                localPlayerData.forEach(function(player, index) {
                    if (player.username === usernamefromForm) {
                        localPlayerData[index].failed_attempts = 0;
                        localStorage.setItem("localAttemptsData", JSON.stringify(localPlayerData))
                    }
                })
            }
        },
        changeResetLinks: function() {
            var plainResetLinks = document.querySelector(".js-login-reset-links-container");
            var buttonResetLinks = document.querySelector(".js-login-reset-button-container");
            var buttonLiveChatLink = document.querySelector(".js-button-live-chat-message");
            plainResetLinks.classList.add("hidden");
            buttonResetLinks.classList.remove("hidden");
            buttonLiveChatLink.classList.remove("hidden")
        },
        changePage: function(url) {
            if (inLightbox) {
                wlzeus.lightbox.lbHide()
            }
            wlzeus.loadingMessage.showLoadingMessage();
            wlzeus.gameLaunch.handler(url)
        },
        onEnterKeyPressed: function(e) {
            var self = this;
            if (e.keyCode === 13) {
                self.submitForm()
            }
        },
        lightboxCheck: function(widget) {
            var self = this;
            if ($formElem.parents(".js-login-slots").length) {
                $(document).on("click", ".slots-login-popup", function() {
                    self.emptySlotsLightbox();
                    self.initLightbox(widget);
                    self.getSlotImage(this);
                    self.getSlotDemoBtn(this)
                })
            }
        },
        initLightbox: function(widget) {
            var self = this;
            inLightbox = true;
            $(".modal-body").empty();
            $formElem = $("#" + widget);
            self.validateForm();
            wlzeus.lightbox.lbLaunch($formElem.parents(".widget"), loginModalTitle);
            $(document).on("lbClose", function() {
                self.closeLightbox()
            });
            $lightboxContainerElem.on("keypress", $loginControlElem, function(e) {
                self.onEnterKeyPressed(e)
            })
        },
        closeLightbox: function() {
            var self = this;
            self.validator.resetForm();
            $(document).unbind("lbClose");
            $lightboxContainerElem.unbind("focus");
            $lightboxContainerElem.unbind("keypress")
        },
        getSlotImage: function(btn) {
            var imgSrc = $(btn).data("thumb");
            if (!imgSrc) {
                imgSrc = $("#logo").attr("src")
            }
            $(".js-modal-slot-image").attr("src", imgSrc)
        },
        getSlotDemoBtn: function(btn) {
            var $demoBtn = $(btn).closest(".slot-links").find(".btn-demo").clone();
            $demoBtn.attr("data-dismiss", "modal");
            $(".js-modal-slot-info").append($demoBtn)
        },
        emptySlotsLightbox: function() {
            $(".js-modal-slot-info").find(".btn-demo").remove();
            $("#loginModalErrors").empty()
        },
        recaptchaCallback: function(response) {
            $formElem.find('[name="vm.Response"]')[0].value = response;
            this.submitForm()
        }
    }
};
if (typeof exports === "object") {
    module.exports = GamesLogin
}
wlzeus.GamesLogin = GamesLogin;
var zeus = zeus || {};
(function(root) {
    root.accountSubMenu = function(options) {
        var mainTrigger = document.querySelector(options.mainTrigger);
        var mainMenu = document.querySelector(options.mainMenu);
        var subTrigger = document.querySelectorAll(options.subTrigger);
        var displayProp;
        this.init = function() {
            window.addEventListener("resize", this.resizer.bind(this));
            this.resizer()
        };
        this.resizer = function() {
            var leng = subTrigger.length;
            displayProp = window.getComputedStyle(mainTrigger).display;
            if (displayProp !== "none") {
                mainTrigger.addEventListener("click", this.mainHandler);
                for (var i = 0; i < leng; i++) {
                    subTrigger[i].addEventListener("click", this.subHanlder)
                }
            } else {
                for (var i = 0; i < leng; i++) {
                    subTrigger[i].classList.remove("open");
                    subTrigger[i].querySelector("ul").classList.remove("open")
                }
            }
        };
        this.mainHandler = function(e) {
            e.preventDefault();
            if (e.currentTarget.classList.contains("open")) {
                mainTrigger.classList.remove("open");
                mainMenu.classList.remove("open")
            } else {
                mainTrigger.classList.add("open");
                mainMenu.classList.add("open")
            }
        };
        this.subHanlder = function(e) {
            if (displayProp !== "none") {
                for (var i = 0, leng = subTrigger.length; i < leng; i++) {
                    $(subTrigger[i]).not(e.currentTarget).removeClass("open").find("ul").removeClass("open")
                }
                e.currentTarget.classList.toggle("open");
                e.currentTarget.querySelector("ul").classList.toggle("open")
            }
        };
        this.init()
    }
})(zeus);
(function() {
    function r(e, n, t) {
        function o(i, f) {
            if (!n[i]) {
                if (!e[i]) {
                    var c = "function" == typeof require && require;
                    if (!f && c) return c(i, !0);
                    if (u) return u(i, !0);
                    var a = new Error("Cannot find module '" + i + "'");
                    throw a.code = "MODULE_NOT_FOUND", a
                }
                var p = n[i] = {
                    exports: {}
                };
                e[i][0].call(p.exports, function(r) {
                    var n = e[i][1][r];
                    return o(n || r)
                }, p, p.exports, r, e, n, t)
            }
            return n[i].exports
        }
        for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);
        return o
    }
    return r
})()({
    1: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _closestParentElement = require("helpers/closest-parent-element");
        var _closestParentElement2 = _interopRequireDefault(_closestParentElement);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        exports.default = function() {
            var body = document.querySelector("body");
            body.addEventListener("click", function(_ref) {
                var target = _ref.target;
                var trigger = (0, _closestParentElement2.default)(target, "[data-toggle=class-toggle]");
                if (!trigger) return;
                trigger.classList.toggle("toggle-active");
                var elClass = target.dataset.class;
                var triggerTarget = target.dataset.target;
                var recievers = document.querySelectorAll("[data-class-reciever=" + triggerTarget + "]");
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;
                try {
                    for (var _iterator = recievers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var reciever = _step.value;
                        reciever.classList.toggle(elClass)
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return()
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError
                        }
                    }
                }
            })
        };
        module.exports = exports["default"]
    }, {
        "helpers/closest-parent-element": 8
    }],
    2: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var eventList = {};
        var listenerQueue = new Map;
        var getSymbol = function getSymbol(value) {
            return typeof value === "string" ? Symbol.for(value) : value
        };
        var contextExists = function contextExists(event, context) {
            return eventList[event] && eventList[event].has(context)
        };
        var unsubscribeByIdentifier = function unsubscribeByIdentifier(event, context, identifier) {
            var id = getSymbol(identifier);
            if (listenerQueue.get(id)) {
                var listeners = eventList[event].get(context);
                if (listeners.includes(id)) {
                    listenerQueue.delete(id);
                    listeners.splice(listeners.indexOf(id), 1);
                    if (listeners.length) {
                        eventList[event].set(context, listeners)
                    } else {
                        eventList[event].delete(context)
                    }
                    if (!eventList[event].size) {
                        delete eventList[event]
                    }
                }
            }
        };
        var unsubscribeByListener = function unsubscribeByListener(event, context, fn) {
            listenerQueue.forEach(function(listener, identifier) {
                if (listener === fn) {
                    unsubscribeByIdentifier(event, context, identifier)
                }
            })
        };
        var unsubscribeAllListeners = function unsubscribeAllListeners(event, context) {
            var listeners = eventList[event].get(context);
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;
            try {
                for (var _iterator = listeners[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var listener = _step.value;
                    listenerQueue.delete(listener)
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return()
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError
                    }
                }
            }
            eventList[event].delete(context);
            if (!eventList[event].size) {
                delete eventList[event]
            }
        };
        var subscribe = exports.subscribe = function subscribe(event, fn, identifier) {
            var context = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "global";
            var binding = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
            var listenerId = identifier ? getSymbol(identifier) : Symbol();
            if (listenerQueue.has(listenerId)) {
                throw new Error("You can't override an existing listener identifier. You must unsubscribe it first")
            }
            if (!eventList[event]) {
                eventList[event] = new Map
            }
            if (!eventList[event].has(context)) {
                eventList[event].set(context, [])
            }
            var listeners = eventList[event].get(context);
            listeners.push(listenerId);
            eventList[event].set(context, listeners);
            listenerQueue.set(listenerId, binding ? fn.bind(binding) : fn);
            return listenerId
        };
        var unsubscribe = exports.unsubscribe = function unsubscribe(event, listener) {
            var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "global";
            if (contextExists(event, context)) {
                if (!listener) {
                    unsubscribeAllListeners(event, context)
                } else if (typeof listener === "function") {
                    unsubscribeByListener(event, context, listener)
                } else {
                    unsubscribeByIdentifier(event, context, listener)
                }
            }
        };
        var broadcast = exports.broadcast = function broadcast(event) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "global";
            var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
            if (contextExists(event, context)) {
                var listeners = eventList[event].get(context);
                if (typeof data !== "undefined") {
                    var _iteratorNormalCompletion2 = true;
                    var _didIteratorError2 = false;
                    var _iteratorError2 = undefined;
                    try {
                        for (var _iterator2 = listeners[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                            var listener = _step2.value;
                            listenerQueue.get(listener).call(null, data)
                        }
                    } catch (err) {
                        _didIteratorError2 = true;
                        _iteratorError2 = err
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                _iterator2.return()
                            }
                        } finally {
                            if (_didIteratorError2) {
                                throw _iteratorError2
                            }
                        }
                    }
                } else {
                    var _iteratorNormalCompletion3 = true;
                    var _didIteratorError3 = false;
                    var _iteratorError3 = undefined;
                    try {
                        for (var _iterator3 = listeners[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                            var _listener = _step3.value;
                            listenerQueue.get(_listener)()
                        }
                    } catch (err) {
                        _didIteratorError3 = true;
                        _iteratorError3 = err
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                _iterator3.return()
                            }
                        } finally {
                            if (_didIteratorError3) {
                                throw _iteratorError3
                            }
                        }
                    }
                }
            }
        }
    }, {}],
    3: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _events = require("components/events");
        var _closestParentElement = require("helpers/closest-parent-element");
        var _closestParentElement2 = _interopRequireDefault(_closestParentElement);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i]
                }
                return arr2
            } else {
                return Array.from(arr)
            }
        }
        var modalComponent = function modalComponent() {
            var activeModal = [];
            var modals = [].concat(_toConsumableArray(document.querySelectorAll("[data-modal-id]")));
            var overlay = document.querySelector(".overlay");
            var modalCloseListener = function modalCloseListener(event) {
                if (event.target.dataset.role === "modal-close") {
                    var modal = activeModal.shift();
                    (0, _events.broadcast)("hide:modal", modal, modal)
                }
                if (event.target.type === "text" && document.activeElement.type === "text") {
                    activeModal[0].classList.add("disable-scroll")
                } else {
                    activeModal[0].classList.remove("disable-scroll")
                }
            };
            var overlayCloseListener = function overlayCloseListener() {
                if (!("modalUnclosable" in activeModal[0].dataset)) {
                    var modal = activeModal.shift();
                    (0, _events.broadcast)("hide:modal", modal, modal)
                }
            };
            var show = function show(targetElement) {
                activeModal.unshift(targetElement);
                targetElement.classList.remove("modal-hide");
                targetElement.classList.add("modal-show");
                document.querySelector("#body").classList.add("modal-open");
                if (targetElement.dataset.scrolllock === "true") {
                    document.querySelector("#body").classList.add("disable-scroll")
                }
                if (targetElement.dataset.focus) {
                    var input = targetElement.querySelector(targetElement.dataset.focus);
                    if (input) {
                        input.focus()
                    }
                }
                if (overlay && targetElement.dataset.noOverlay !== "true") {
                    overlay.classList.add("overlay-show");
                    overlay.classList.remove("overlay-hide");
                    overlay.addEventListener("click", overlayCloseListener)
                }
                targetElement.addEventListener("click", modalCloseListener)
            };
            var hide = function hide(targetElement) {
                targetElement.classList.remove("modal-show");
                targetElement.classList.add("modal-hide");
                document.querySelector("#body").classList.remove("modal-open");
                if (targetElement.dataset.scrolllock === "true") {
                    document.querySelector("#body").classList.remove("disable-scroll")
                }
                if (targetElement.dataset.focus) {
                    var input = targetElement.querySelector(targetElement.dataset.focus);
                    if (input) {
                        input.blur()
                    }
                }
                if (overlay) {
                    overlay.classList.remove("overlay-show");
                    overlay.classList.add("overlay-hide");
                    overlay.removeEventListener("click", show);
                    overlay.removeEventListener("click", overlayCloseListener)
                }
                targetElement.removeEventListener("click", show);
                targetElement.removeEventListener("click", modalCloseListener)
            };
            if (modals.length) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;
                try {
                    for (var _iterator = modals[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var modal = _step.value;
                        (0, _events.subscribe)("show:modal", show, undefined, modal);
                        (0, _events.subscribe)("hide:modal", hide, undefined, modal)
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return()
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError
                        }
                    }
                }
                document.addEventListener("click", function(e) {
                    var trigger = (0, _closestParentElement2.default)(e.target, "[data-toggle=modal]");
                    if (trigger) {
                        var targetElement = document.querySelector('[data-modal-id="' + trigger.dataset.target + '"]');
                        if (targetElement) {
                            (0, _events.broadcast)("show:modal", targetElement, targetElement)
                        }
                    }
                })
            }
        };
        exports.default = modalComponent;
        module.exports = exports["default"]
    }, {
        "components/events": 2,
        "helpers/closest-parent-element": 8
    }],
    4: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _events = require("components/events");
        var _createMessageNode = require("helpers/create-message-node");
        var _createMessageNode2 = _interopRequireDefault(_createMessageNode);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var notificationsMap = new Map;

        function showNotification(message, level, options) {
            var parent = options.parent,
                _options$closable = options.closable,
                closable = _options$closable === undefined ? false : _options$closable,
                _options$duration = options.duration,
                duration = _options$duration === undefined ? 0 : _options$duration;
            if (!notificationsMap.has(message)) {
                var notificationNode = (0, _createMessageNode2.default)(parent, {
                    closable: closable,
                    duration: duration,
                    level: level,
                    message: message
                });
                notificationsMap.set(message, notificationNode);
                parent.appendChild(notificationNode);
                (0, _events.subscribe)("message:close", function(msg) {
                    notificationsMap.delete(msg);
                    parent.removeChild(notificationNode)
                }, undefined, notificationNode)
            }
        }
        exports.default = function() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            options.parent = document.querySelector(options.selector || ".notifications");
            (0, _events.subscribe)("notification:error", function(message) {
                return showNotification(message, "notification--error", options)
            });
            (0, _events.subscribe)("notification:success", function(message) {
                return showNotification(message, "notification--success", options)
            });
            (0, _events.subscribe)("notification:warning", function(message) {
                return showNotification(message, "notification--warning", options)
            });
            (0, _events.subscribe)("notification", function(message) {
                return showNotification(message, "notification", options)
            })
        };
        module.exports = exports["default"]
    }, {
        "components/events": 2,
        "helpers/create-message-node": 10
    }],
    5: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _events = require("components/events");
        var _queryStringParser = require("helpers/query-string-parser");
        var _queryStringParser2 = _interopRequireDefault(_queryStringParser);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function getLevel(level) {
            if (level === "success") return "notification:success";
            if (level === "warning") return "notification:warning";
            if (level === "error") return "notification:error";
            return "notification"
        }
        exports.default = function() {
            var queryString = window.location.search;
            var queryStringObject = (0, _queryStringParser2.default)(queryString);
            if ("notification" in queryStringObject) {
                var decodedMessage = decodeURI(queryStringObject.message);
                (0, _events.broadcast)(getLevel(queryStringObject.notification), undefined, decodedMessage)
            }
        };
        module.exports = exports["default"]
    }, {
        "components/events": 2,
        "helpers/query-string-parser": 15
    }],
    6: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = function(themeName) {
            var serviceWorkerUrl = "/Themes/" + themeName + "/service-worker.js";
            if ("serviceWorker" in navigator) {
                window.addEventListener("load", function() {
                    navigator.serviceWorker.register(serviceWorkerUrl).catch(function(e) {
                        console.error("Error during service worker registration:", e)
                    })
                })
            }
        };
        module.exports = exports["default"]
    }, {}],
    7: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var reveal = function reveal() {
            var toggles = document.querySelectorAll("[data-toggle=reveal]");
            if (toggles.length) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;
                try {
                    for (var _iterator = toggles[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var toggle = _step.value;
                        toggle.addEventListener("click", function(e) {
                            var opts = e.target.dataset;
                            var target = document.querySelector("[data-id=" + opts.reveal + "]");
                            var triggerHide = opts.hideAfterReveal;
                            if (triggerHide) {
                                if (triggerHide === "self") {
                                    e.target.classList.add("hide")
                                }
                                if (triggerHide === "parent") {
                                    e.target.parentNode.classList.add("hide")
                                }
                            }
                            if (target.classList.contains("hide")) {
                                target.classList.remove("hide")
                            }
                        })
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return()
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError
                        }
                    }
                }
            }
        };
        exports.default = reveal;
        module.exports = exports["default"]
    }, {}],
    8: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = function(el) {
            var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var element = el;
            var firstChar = selector.charAt(0);
            for (; el && element.parentNode && element !== document; element = element.parentNode) {
                if (firstChar === ".") {
                    if (element.classList.contains(selector.substr(1))) {
                        return element
                    }
                }
                if (firstChar === "#") {
                    if (element.id === selector.substr(1)) {
                        return element
                    }
                }
                if (firstChar === "[") {
                    var matches = ["matches", "matchesSelector", "webkitMatchesSelector", "mozMatchesSelector", "msMatchesSelector", "oMatchesSelector"];
                    var matchesFn = void 0;
                    matches.some(function(fn) {
                        if (typeof document.body[fn] === "function") {
                            matchesFn = fn;
                            return true
                        }
                        return false
                    });
                    if (element[matchesFn](selector)) {
                        return element
                    }
                }
                if (element.tagName.toLowerCase() === selector) {
                    return element
                }
            }
            return false
        };
        module.exports = exports["default"]
    }, {}],
    9: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var cookieHelper = function cookieHelper(name, val, expiryDate, path) {
            var cookie = void 0;
            var encodedVal = encodeURIComponent(val);
            var getCookie = function getCookie() {
                var newName = name + "=";
                var ca = document.cookie.split(";");
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;
                try {
                    for (var _iterator = ca[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var value = _step.value;
                        var tValue = value.trim();
                        if (tValue.indexOf(newName) === 0) return decodeURIComponent(tValue.substring(newName.length, value.length))
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return()
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError
                        }
                    }
                }
                return null
            };
            var setCookie = function setCookie() {
                var cookieString = name + "=" + encodedVal + ";";
                cookieString = expiryDate !== undefined ? cookieString += " expires=" + expiryDate + ";" : cookieString;
                cookieString = path !== undefined ? cookieString += " path=" + path + ";" : cookieString;
                document.cookie = cookieString;
                return true
            };
            var deleteCookie = function deleteCookie() {
                var deleteDate = new Date;
                deleteDate.setTime(deleteDate.getTime() - 1e3);
                document.cookie = name + "=; max-age=0; expires=" + deleteDate;
                return true
            };
            if (val === "delete") {
                cookie = deleteCookie()
            } else if (val !== undefined) {
                cookie = setCookie()
            } else {
                cookie = getCookie()
            }
            return cookie
        };
        exports.default = cookieHelper;
        module.exports = exports["default"]
    }, {}],
    10: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _whichTransition = require("helpers/which-transition");
        var _whichTransition2 = _interopRequireDefault(_whichTransition);
        var _events = require("components/events");

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var createCloseNode = function createCloseNode(message, messageNode) {
            var close = document.createElement("button");
            close.addEventListener("click", function() {
                (0, _events.broadcast)("message:close", messageNode, message)
            });
            close.innerHTML = "&times";
            return close
        };
        var createItemNode = function createItemNode(parentElement, _ref) {
            var level = _ref.level,
                message = _ref.message,
                durationInSeconds = _ref.duration,
                closable = _ref.closable;
            if (!message) {
                throw new Error("Error message string required")
            }
            var messageElement = document.createElement("div");
            messageElement.classList.add(level);
            messageElement.innerHTML = message;
            if (durationInSeconds) {
                var durationInMilliseconds = durationInSeconds * 1e3;
                parentElement.addEventListener((0, _whichTransition2.default)(parentElement), function(e) {
                    (0, _events.broadcast)("message:close", e.target, message)
                });
                messageElement.setAttribute("aria-hidden", false);
                window.setTimeout(function() {
                    messageElement.setAttribute("aria-hidden", true)
                }, durationInMilliseconds)
            }
            if (closable) {
                messageElement.appendChild(createCloseNode(message, messageElement))
            }
            return messageElement
        };
        exports.default = createItemNode;
        module.exports = exports["default"]
    }, {
        "components/events": 2,
        "helpers/which-transition": 18
    }],
    11: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
            return typeof obj
        } : function(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj
        };
        var encode = function encode(obj) {
            var tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    if (obj[key] === "") {
                        continue
                    }
                    if (_typeof(obj[key]) !== "object") {
                        tokens.push(encodeURIComponent(key) + "=" + encodeURIComponent(obj[key]))
                    } else {
                        encode(obj[key], tokens)
                    }
                }
            }
            return tokens.join("&")
        };
        exports.default = encode;
        module.exports = exports["default"]
    }, {}],
    12: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var checkStatus = function checkStatus(response) {
            if (response.status >= 200 && response.status < 300) {
                return response
            }
            var error = new Error(response.statusText);
            error.response = response;
            throw error
        };
        var parseJSON = function parseJSON(response) {
            return response.json().catch(function() {
                return response
            })
        };
        exports.default = function(url) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var correlation = document.querySelector('meta[name="correlation-token"]');
            var csrf = document.querySelector('meta[name="csrf-token"]');
            options.headers = options.headers || new Headers;
            options.credentials = options.credentials || "same-origin";
            if (!options.headers.has("Content-Type")) {
                options.headers.append("Content-Type", "application/json")
            }
            options.method = options.method ? options.method.toUpperCase() : "GET";
            if (options.method && options.method === "POST" && csrf) {
                options.headers.append("X-CSRF-Token", csrf.getAttribute("content"))
            }
            if (correlation) {
                options.headers.append("X-Correlation-Token", correlation.getAttribute("content"))
            }
            return fetch(url, options).then(function(res) {
                return checkStatus(res)
            }).then(function(res) {
                return parseJSON(res)
            })
        };
        module.exports = exports["default"]
    }, {}],
    13: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _fetch = require("helpers/fetch");
        var _fetch2 = _interopRequireDefault(_fetch);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var cachedCalls = new Map;

        function memoizeFetch(url) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                method: "get"
            };
            var empty = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            if (empty && cachedCalls.has(url)) cachedCalls.delete(url);
            if (cachedCalls.has(url)) return cachedCalls.get(url);
            cachedCalls.set(url, (0, _fetch2.default)(url, options));
            return cachedCalls.get(url)
        }
        exports.default = memoizeFetch;
        module.exports = exports["default"]
    }, {
        "helpers/fetch": 12
    }],
    14: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i]
                }
                return arr2
            } else {
                return Array.from(arr)
            }
        }
        exports.default = function(el, parentClass) {
            var parent = void 0;
            var element = el;
            while (parent === undefined) {
                var parentEl = element.parentElement;
                if (parentEl === null) {
                    parent = false
                } else {
                    var classes = [].concat(_toConsumableArray(parentEl.classList)).join();
                    if (classes.match(parentClass)) {
                        parent = parentEl
                    } else {
                        element = parentEl
                    }
                }
            }
            return parent
        };
        module.exports = exports["default"]
    }, {}],
    15: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _slicedToArray = function() {
            function sliceIterator(arr, i) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = undefined;
                try {
                    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                        _arr.push(_s.value);
                        if (i && _arr.length === i) break
                    }
                } catch (err) {
                    _d = true;
                    _e = err
                } finally {
                    try {
                        if (!_n && _i["return"]) _i["return"]()
                    } finally {
                        if (_d) throw _e
                    }
                }
                return _arr
            }
            return function(arr, i) {
                if (Array.isArray(arr)) {
                    return arr
                } else if (Symbol.iterator in Object(arr)) {
                    return sliceIterator(arr, i)
                } else {
                    throw new TypeError("Invalid attempt to destructure non-iterable instance")
                }
            }
        }();
        exports.default = function(queryString) {
            var obj = {};
            var queries = queryString.substring(1).split("&");
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;
            try {
                for (var _iterator = queries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var query = _step.value;
                    var _query$split = query.split("="),
                        _query$split2 = _slicedToArray(_query$split, 2),
                        key = _query$split2[0],
                        value = _query$split2[1];
                    obj[key] = value
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return()
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError
                    }
                }
            }
            return obj
        };
        module.exports = exports["default"]
    }, {}],
    16: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = function(lockStr) {
            var bodyData = document.body.dataset;
            if (bodyData.scrollLock) {
                var lockArray = bodyData.scrollLock.split(",");
                var lockIndex = lockArray.indexOf(lockStr);
                if (lockIndex !== -1) {
                    if (lockStr === "master") {
                        bodyData.scrollLock = "";
                        document.body.classList.remove("disable-scroll")
                    } else {
                        lockArray.splice(lockIndex, 1);
                        bodyData.scrollLock = lockArray.toString();
                        if (lockArray.length <= 0) {
                            document.body.classList.remove("disable-scroll")
                        }
                    }
                } else {
                    document.body.classList.add("disable-scroll");
                    if (lockStr === "master") {
                        bodyData.scrollLock = lockStr
                    } else {
                        lockArray.splice(lockArray.length, 0, lockStr);
                        bodyData.scrollLock = lockArray.toString()
                    }
                }
            } else {
                document.body.classList.add("disable-scroll");
                bodyData.scrollLock = lockStr
            }
        };
        module.exports = exports["default"]
    }, {}],
    17: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i]
                }
                return arr2
            } else {
                return Array.from(arr)
            }
        }
        exports.default = function(form) {
            var data = {};
            var _arr = [].concat(_toConsumableArray(form.elements));
            for (var _i = 0; _i < _arr.length; _i++) {
                var element = _arr[_i];
                if (element.tagName.toLowerCase() !== "fieldset" && element.tagName.toLowerCase() !== "button" && element.name) {
                    if (element.type === "radio" && element.checked || element.type === "checkbox" && element.checked || element.type !== "radio" && element.type !== "checkbox") {
                        data[element.name] = element.value
                    }
                }
            }
            return data
        };
        module.exports = exports["default"]
    }, {}],
    18: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = function(element) {
            var transitions = {
                transition: "transitionend",
                MozTransition: "transitionend",
                WebkitTransition: "webkitTransitionEnd"
            };
            for (var t in transitions) {
                if (element.style[t] !== undefined) {
                    return transitions[t]
                }
            }
            return void 0
        };
        module.exports = exports["default"]
    }, {}],
    19: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);
            if (desc === undefined) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                    return undefined
                } else {
                    return get(parent, property, receiver)
                }
            } else if ("value" in desc) {
                return desc.value
            } else {
                var getter = desc.get;
                if (getter === undefined) {
                    return undefined
                }
                return getter.call(receiver)
            }
        };
        var _form = require("widgets/form");
        var _form2 = _interopRequireDefault(_form);
        var _events = require("components/events");

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComplianceWidget = function(_FormWidget) {
            _inherits(ComplianceWidget, _FormWidget);

            function ComplianceWidget() {
                _classCallCheck(this, ComplianceWidget);
                return _possibleConstructorReturn(this, (ComplianceWidget.__proto__ || Object.getPrototypeOf(ComplianceWidget)).apply(this, arguments))
            }
            _createClass(ComplianceWidget, [{
                key: "initialise",
                value: function initialise() {
                    _get(ComplianceWidget.prototype.__proto__ || Object.getPrototypeOf(ComplianceWidget.prototype), "initialise", this).call(this)
                }
            }, {
                key: "getMethod",
                value: function getMethod() {
                    return "put"
                }
            }, {
                key: "submitForm",
                value: function submitForm() {
                    var select = this.element.querySelector("select[name=" + this.getDurationProp() + "]");
                    var radio = this.element.querySelector("input[name=" + this.getDurationProp() + "]:checked");
                    if (select) {
                        this.endDateElement.innerHTML = select.options[select.selectedIndex].dataset.enddate
                    }
                    if (radio) {
                        this.endDateElement.innerHTML = radio.dataset.enddate
                    }(0, _events.broadcast)("show:modal", this.modalElement, this.modalElement)
                }
            }, {
                key: "submitModal",
                value: function submitModal() {
                    this.submitMsg = this.submitButton.dataset.message;
                    this.submitButton.innerHTML = this.submitMsg || "Loading";
                    this.sendData()
                }
            }, {
                key: "sendData",
                value: function sendData() {
                    var _this2 = this;
                    this.fetch().then(function(response) {
                        return _this2.handleSuccess(response)
                    }).catch(function(err) {
                        return _this2.handleErrors(err)
                    })
                }
            }, {
                key: "listen",
                value: function listen() {
                    var _this3 = this;
                    _get(ComplianceWidget.prototype.__proto__ || Object.getPrototypeOf(ComplianceWidget.prototype), "listen", this).call(this);
                    this.confirmElement.addEventListener("click", function() {
                        _this3.submitModal()
                    })
                }
            }, {
                key: "getModalId",
                value: function getModalId() {}
            }, {
                key: "getDurationProp",
                value: function getDurationProp() {}
            }, {
                key: "setup",
                value: function setup() {
                    _get(ComplianceWidget.prototype.__proto__ || Object.getPrototypeOf(ComplianceWidget.prototype), "setup", this).call(this);
                    this.modalElement = document.querySelector('[data-modal-id="' + this.getModalId() + '"]');
                    this.endDateElement = this.modalElement.querySelector(".js-compliance-end-date");
                    this.confirmElement = this.modalElement.querySelector(".js-compliance-confirm");
                    this.errorMessage = this.element.dataset.messageError
                }
            }, {
                key: "handleSuccess",
                value: function handleSuccess() {
                    window.location = "/Users/Account/LogOff"
                }
            }, {
                key: "handleErrors",
                value: function handleErrors(err) {
                    this.submitButton.innerHTML = this.submitText;
                    err.response.json().then(function(response) {
                        if (response.errors) {
                            var errors = response.errors.map(function(e) {
                                return e.Message
                            });
                            var _iteratorNormalCompletion = true;
                            var _didIteratorError = false;
                            var _iteratorError = undefined;
                            try {
                                for (var _iterator = errors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                    var error = _step.value;
                                    (0, _events.broadcast)("notification:error", undefined, error)
                                }
                            } catch (err) {
                                _didIteratorError = true;
                                _iteratorError = err
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion && _iterator.return) {
                                        _iterator.return()
                                    }
                                } finally {
                                    if (_didIteratorError) {
                                        throw _iteratorError
                                    }
                                }
                            }
                        }
                    });
                    (0, _events.broadcast)("hide:modal", this.modalElement, this.modalElement)
                }
            }]);
            return ComplianceWidget
        }(_form2.default);
        exports.default = ComplianceWidget;
        module.exports = exports["default"]
    }, {
        "components/events": 2,
        "widgets/form": 420
    }],
    20: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _class = require("widgets/compliance/class");
        var _class2 = _interopRequireDefault(_class);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var SelfExclusion = function(_ComplianceWidget) {
            _inherits(SelfExclusion, _ComplianceWidget);

            function SelfExclusion() {
                _classCallCheck(this, SelfExclusion);
                return _possibleConstructorReturn(this, (SelfExclusion.__proto__ || Object.getPrototypeOf(SelfExclusion)).apply(this, arguments))
            }
            _createClass(SelfExclusion, [{
                key: "getModalId",
                value: function getModalId() {
                    return "selfExclusionConfirmationModal"
                }
            }, {
                key: "getDurationProp",
                value: function getDurationProp() {
                    return "exclusionPeriodInDays"
                }
            }, {
                key: "getFlashesSelector",
                value: function getFlashesSelector() {
                    return ".js-flashes-self-exclusion"
                }
            }]);
            return SelfExclusion
        }(_class2.default);
        exports.default = SelfExclusion;
        module.exports = exports["default"]
    }, {
        "widgets/compliance/class": 19
    }],
    21: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _class = require("widgets/compliance/class");
        var _class2 = _interopRequireDefault(_class);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var TakeABreak = function(_ComplianceWidget) {
            _inherits(TakeABreak, _ComplianceWidget);

            function TakeABreak() {
                _classCallCheck(this, TakeABreak);
                return _possibleConstructorReturn(this, (TakeABreak.__proto__ || Object.getPrototypeOf(TakeABreak)).apply(this, arguments))
            }
            _createClass(TakeABreak, [{
                key: "getModalId",
                value: function getModalId() {
                    return "takeABreakConfirmationModal"
                }
            }, {
                key: "getDurationProp",
                value: function getDurationProp() {
                    return "NumberOfDays"
                }
            }, {
                key: "getFlashesSelector",
                value: function getFlashesSelector() {
                    return ".js-flashes-take-a-break"
                }
            }]);
            return TakeABreak
        }(_class2.default);
        exports.default = TakeABreak;
        module.exports = exports["default"]
    }, {
        "widgets/compliance/class": 19
    }],
    22: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _fetch2 = require("helpers/fetch");
        var _fetch3 = _interopRequireDefault(_fetch2);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var DataWidget = function() {
            function DataWidget() {
                _classCallCheck(this, DataWidget)
            }
            _createClass(DataWidget, [{
                key: "getUrl",
                value: function getUrl() {
                    return ""
                }
            }, {
                key: "getMethod",
                value: function getMethod() {
                    return "get"
                }
            }, {
                key: "getHeaders",
                value: function getHeaders() {
                    return new Headers
                }
            }, {
                key: "getBody",
                value: function getBody() {
                    return null
                }
            }, {
                key: "fetch",
                value: function fetch(url) {
                    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    var payload = Object.assign({
                        method: this.getMethod(),
                        headers: this.getHeaders()
                    }, options);
                    if (payload.method.toLowerCase() !== "get") {
                        payload.body = this.getBody()
                    }
                    return (0, _fetch3.default)(url || this.getUrl(), payload)
                }
            }]);
            return DataWidget
        }();
        exports.default = DataWidget;
        module.exports = exports["default"]
    }, {
        "helpers/fetch": 12
    }],
    23: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();

        function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i]
                }
                return arr2
            } else {
                return Array.from(arr)
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var WidgetFactory = function() {
            function WidgetFactory() {
                _classCallCheck(this, WidgetFactory)
            }
            _createClass(WidgetFactory, null, [{
                key: "attach",
                value: function attach(selector, WidgetName) {
                    this.elements = [].concat(_toConsumableArray(document.querySelectorAll(selector)));
                    if (this.elements.length) {
                        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
                            args[_key - 2] = arguments[_key]
                        }
                        var _iteratorNormalCompletion = true;
                        var _didIteratorError = false;
                        var _iteratorError = undefined;
                        try {
                            for (var _iterator = this.elements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                var element = _step.value;
                                new(Function.prototype.bind.apply(WidgetName, [null].concat([element], args)))
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return()
                                }
                            } finally {
                                if (_didIteratorError) {
                                    throw _iteratorError
                                }
                            }
                        }
                    }
                }
            }]);
            return WidgetFactory
        }();
        exports.default = WidgetFactory;
        module.exports = exports["default"]
    }, {}],
    24: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);
            if (desc === undefined) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                    return undefined
                } else {
                    return get(parent, property, receiver)
                }
            } else if ("value" in desc) {
                return desc.value
            } else {
                var getter = desc.get;
                if (getter === undefined) {
                    return undefined
                }
                return getter.call(receiver)
            }
        };
        var _form = require("widgets/form");
        var _form2 = _interopRequireDefault(_form);
        var _events = require("components/events");

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i]
                }
                return arr2
            } else {
                return Array.from(arr)
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Login = function(_FormWidget) {
            _inherits(Login, _FormWidget);

            function Login() {
                _classCallCheck(this, Login);
                return _possibleConstructorReturn(this, (Login.__proto__ || Object.getPrototypeOf(Login)).apply(this, arguments))
            }
            _createClass(Login, [{
                key: "initialise",
                value: function initialise() {
                    _get(Login.prototype.__proto__ || Object.getPrototypeOf(Login.prototype), "initialise", this).call(this)
                }
            }, {
                key: "getHeaders",
                value: function getHeaders() {
                    return new Headers({
                        Accept: "application/json",
                        "Content-Type": "application/json"
                    })
                }
            }, {
                key: "setup",
                value: function setup() {
                    _get(Login.prototype.__proto__ || Object.getPrototypeOf(Login.prototype), "setup", this).call(this);
                    this.messages = {
                        notFound: this.element.dataset.messageNotFound
                    };
                    this.inheritRedirectUrl = this.opts.inheritRedirectUrl === "true";
                    this.returnUrl = this.opts.returnUrl;
                    this.defaultReturnUrl = this.opts.defaultReturnUrl
                }
            }, {
                key: "handleErrors",
                value: function handleErrors(err) {
                    var _this2 = this;
                    this.submitButton.innerHTML = this.submitText;
                    err.response.json().then(function(res) {
                        var _iteratorNormalCompletion = true;
                        var _didIteratorError = false;
                        var _iteratorError = undefined;
                        try {
                            for (var _iterator = res.errors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                var error = _step.value;
                                if (error.code === 404) {
                                    (0, _events.broadcast)("notification:error", undefined, _this2.messages.notFound)
                                } else {
                                    (0, _events.broadcast)("notification:error", undefined, error.title)
                                }
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return()
                                }
                            } finally {
                                if (_didIteratorError) {
                                    throw _iteratorError
                                }
                            }
                        }
                    })
                }
            }, {
                key: "listen",
                value: function listen() {
                    var _this3 = this;
                    _get(Login.prototype.__proto__ || Object.getPrototypeOf(Login.prototype), "listen", this).call(this);
                    var _arr = [].concat(_toConsumableArray(document.querySelectorAll(this.opts.trigger)));
                    for (var _i = 0; _i < _arr.length; _i++) {
                        var el = _arr[_i];
                        el.addEventListener("click", function() {
                            _this3.element.classList.toggle("active")
                        })
                    }
                }
            }, {
                key: "handleSuccess",
                value: function handleSuccess(response) {
                    var _this4 = this;
                    window.location.href = function(res) {
                        if (_this4.inheritRedirectUrl) return _this4.returnUrl;
                        if (res.nextAction) return res.nextAction;
                        if (_this4.defaultReturnUrl) return _this4.defaultReturnUrl;
                        return window.location.href
                    }(response)
                }
            }]);
            return Login
        }(_form2.default);
        exports.default = Login;
        module.exports = exports["default"]
    }, {
        "components/events": 2,
        "widgets/form": 420
    }],
    25: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);
            if (desc === undefined) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                    return undefined
                } else {
                    return get(parent, property, receiver)
                }
            } else if ("value" in desc) {
                return desc.value
            } else {
                var getter = desc.get;
                if (getter === undefined) {
                    return undefined
                }
                return getter.call(receiver)
            }
        };
        var _serializeForm = require("helpers/serialize-form");
        var _serializeForm2 = _interopRequireDefault(_serializeForm);
        var _events = require("components/events");
        var _form = require("widgets/form");
        var _form2 = _interopRequireDefault(_form);
        var _fetch = require("helpers/fetch");
        var _fetch2 = _interopRequireDefault(_fetch);
        var _scrollLock = require("helpers/scroll-lock");
        var _scrollLock2 = _interopRequireDefault(_scrollLock);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var PlayerFundProtection = function(_FormWidget) {
            _inherits(PlayerFundProtection, _FormWidget);

            function PlayerFundProtection() {
                _classCallCheck(this, PlayerFundProtection);
                return _possibleConstructorReturn(this, (PlayerFundProtection.__proto__ || Object.getPrototypeOf(PlayerFundProtection)).apply(this, arguments))
            }
            _createClass(PlayerFundProtection, [{
                key: "initialise",
                value: function initialise() {
                    var _this2 = this;
                    this.submitButton = this.element.querySelector('[data-submit="acceptTerms"]');
                    (0, _fetch2.default)("/api/PlayerFundProtection/" + this.element.dataset.partId).then(function(agreement) {
                        if (agreement.requiresAcceptance && !!agreement.agreementText) {
                            _this2.setup();
                            _this2.listen()
                        }
                    })
                }
            }, {
                key: "setup",
                value: function setup() {
                    this.modal = this.element.parentNode;
                    (0, _events.broadcast)("show:modal", this.modal, this.modal);
                    (0, _scrollLock2.default)("modal");
                    this.opts = this.element.dataset;
                    this.messages = this.messages || {};
                    this.messages.genericError = this.opts.messageGenericError || "Error please try again later";
                    this.hasValidation = this.opts.hasOwnProperty("validate") ? this.opts.validate.toLowerCase() === "true" : false
                }
            }, {
                key: "listen",
                value: function listen() {
                    _get(PlayerFundProtection.prototype.__proto__ || Object.getPrototypeOf(PlayerFundProtection.prototype), "listen", this).call(this);
                    var closeButton = this.element.querySelector(".js-back");
                    if (closeButton) {
                        closeButton.addEventListener("click", function() {
                            return window.history.back()
                        })
                    }
                }
            }, {
                key: "parse",
                value: function parse(data) {
                    return {
                        acceptedDate: data.acceptedDate
                    }
                }
            }, {
                key: "getBody",
                value: function getBody() {
                    return JSON.stringify(this.parse((0, _serializeForm2.default)(this.element)))
                }
            }, {
                key: "getMethod",
                value: function getMethod() {
                    return "put"
                }
            }, {
                key: "handleSuccess",
                value: function handleSuccess() {
                    (0, _events.broadcast)("hide:modal", this.modal, this.modal);
                    (0, _scrollLock2.default)("modal")
                }
            }, {
                key: "handleErrors",
                value: function handleErrors(err) {
                    err.response.json().then(function(res) {
                        var _iteratorNormalCompletion = true;
                        var _didIteratorError = false;
                        var _iteratorError = undefined;
                        try {
                            for (var _iterator = res.errors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                var error = _step.value;
                                (0, _events.broadcast)("notification:error", undefined, error.title)
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return()
                                }
                            } finally {
                                if (_didIteratorError) {
                                    throw _iteratorError
                                }
                            }
                        }
                    })
                }
            }]);
            return PlayerFundProtection
        }(_form2.default);
        exports.default = PlayerFundProtection;
        module.exports = exports["default"]
    }, {
        "components/events": 2,
        "helpers/fetch": 12,
        "helpers/scroll-lock": 16,
        "helpers/serialize-form": 17,
        "widgets/form": 420
    }],
    26: [function(require, module, exports) {
        (function(global) {
            "use strict";
            require("core-js/shim");
            require("regenerator-runtime/runtime");
            require("core-js/fn/regexp/escape");
            if (global._babelPolyfill) {
                throw new Error("only one instance of babel-polyfill is allowed")
            }
            global._babelPolyfill = true;
            var DEFINE_PROPERTY = "defineProperty";

            function define(O, key, value) {
                O[key] || Object[DEFINE_PROPERTY](O, key, {
                    writable: true,
                    configurable: true,
                    value: value
                })
            }
            define(String.prototype, "padLeft", "".padStart);
            define(String.prototype, "padRight", "".padEnd);
            "pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(key) {
                [][key] && define(Array, key, Function.call.bind([][key]))
            })
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {
        "core-js/fn/regexp/escape": 29,
        "core-js/shim": 379,
        "regenerator-runtime/runtime": 388
    }],
    27: [function(require, module, exports) {
        module.exports = {
            default: require("core-js/library/fn/object/define-property"),
            __esModule: true
        }
    }, {
        "core-js/library/fn/object/define-property": 30
    }],
    28: [function(require, module, exports) {
        module.exports = {
            default: require("core-js/library/fn/object/get-own-property-descriptor"),
            __esModule: true
        }
    }, {
        "core-js/library/fn/object/get-own-property-descriptor": 31
    }],
    29: [function(require, module, exports) {
        require("../../modules/core.regexp.escape");
        module.exports = require("../../modules/_core").RegExp.escape
    }, {
        "../../modules/_core": 77,
        "../../modules/core.regexp.escape": 182
    }],
    30: [function(require, module, exports) {
        require("../../modules/es6.object.define-property");
        var $Object = require("../../modules/_core").Object;
        module.exports = function defineProperty(it, key, desc) {
            return $Object.defineProperty(it, key, desc)
        }
    }, {
        "../../modules/_core": 35,
        "../../modules/es6.object.define-property": 55
    }],
    31: [function(require, module, exports) {
        require("../../modules/es6.object.get-own-property-descriptor");
        var $Object = require("../../modules/_core").Object;
        module.exports = function getOwnPropertyDescriptor(it, key) {
            return $Object.getOwnPropertyDescriptor(it, key)
        }
    }, {
        "../../modules/_core": 35,
        "../../modules/es6.object.get-own-property-descriptor": 56
    }],
    32: [function(require, module, exports) {
        module.exports = function(it) {
            if (typeof it != "function") throw TypeError(it + " is not a function!");
            return it
        }
    }, {}],
    33: [function(require, module, exports) {
        var isObject = require("./_is-object");
        module.exports = function(it) {
            if (!isObject(it)) throw TypeError(it + " is not an object!");
            return it
        }
    }, {
        "./_is-object": 47
    }],
    34: [function(require, module, exports) {
        var toString = {}.toString;
        module.exports = function(it) {
            return toString.call(it).slice(8, -1)
        }
    }, {}],
    35: [function(require, module, exports) {
        var core = module.exports = {
            version: "2.5.7"
        };
        if (typeof __e == "number") __e = core
    }, {}],
    36: [function(require, module, exports) {
        var aFunction = require("./_a-function");
        module.exports = function(fn, that, length) {
            aFunction(fn);
            if (that === undefined) return fn;
            switch (length) {
                case 1:
                    return function(a) {
                        return fn.call(that, a)
                    };
                case 2:
                    return function(a, b) {
                        return fn.call(that, a, b)
                    };
                case 3:
                    return function(a, b, c) {
                        return fn.call(that, a, b, c)
                    }
            }
            return function() {
                return fn.apply(that, arguments)
            }
        }
    }, {
        "./_a-function": 32
    }],
    37: [function(require, module, exports) {
        module.exports = function(it) {
            if (it == undefined) throw TypeError("Can't call method on  " + it);
            return it
        }
    }, {}],
    38: [function(require, module, exports) {
        module.exports = !require("./_fails")(function() {
            return Object.defineProperty({}, "a", {
                get: function() {
                    return 7
                }
            }).a != 7
        })
    }, {
        "./_fails": 41
    }],
    39: [function(require, module, exports) {
        var isObject = require("./_is-object");
        var document = require("./_global").document;
        var is = isObject(document) && isObject(document.createElement);
        module.exports = function(it) {
            return is ? document.createElement(it) : {}
        }
    }, {
        "./_global": 42,
        "./_is-object": 47
    }],
    40: [function(require, module, exports) {
        var global = require("./_global");
        var core = require("./_core");
        var ctx = require("./_ctx");
        var hide = require("./_hide");
        var has = require("./_has");
        var PROTOTYPE = "prototype";
        var $export = function(type, name, source) {
            var IS_FORCED = type & $export.F;
            var IS_GLOBAL = type & $export.G;
            var IS_STATIC = type & $export.S;
            var IS_PROTO = type & $export.P;
            var IS_BIND = type & $export.B;
            var IS_WRAP = type & $export.W;
            var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
            var expProto = exports[PROTOTYPE];
            var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
            var key, own, out;
            if (IS_GLOBAL) source = name;
            for (key in source) {
                own = !IS_FORCED && target && target[key] !== undefined;
                if (own && has(exports, key)) continue;
                out = own ? target[key] : source[key];
                exports[key] = IS_GLOBAL && typeof target[key] != "function" ? source[key] : IS_BIND && own ? ctx(out, global) : IS_WRAP && target[key] == out ? function(C) {
                    var F = function(a, b, c) {
                        if (this instanceof C) {
                            switch (arguments.length) {
                                case 0:
                                    return new C;
                                case 1:
                                    return new C(a);
                                case 2:
                                    return new C(a, b)
                            }
                            return new C(a, b, c)
                        }
                        return C.apply(this, arguments)
                    };
                    F[PROTOTYPE] = C[PROTOTYPE];
                    return F
                }(out) : IS_PROTO && typeof out == "function" ? ctx(Function.call, out) : out;
                if (IS_PROTO) {
                    (exports.virtual || (exports.virtual = {}))[key] = out;
                    if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out)
                }
            }
        };
        $export.F = 1;
        $export.G = 2;
        $export.S = 4;
        $export.P = 8;
        $export.B = 16;
        $export.W = 32;
        $export.U = 64;
        $export.R = 128;
        module.exports = $export
    }, {
        "./_core": 35,
        "./_ctx": 36,
        "./_global": 42,
        "./_has": 43,
        "./_hide": 44
    }],
    41: [function(require, module, exports) {
        module.exports = function(exec) {
            try {
                return !!exec()
            } catch (e) {
                return true
            }
        }
    }, {}],
    42: [function(require, module, exports) {
        var global = module.exports = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : Function("return this")();
        if (typeof __g == "number") __g = global
    }, {}],
    43: [function(require, module, exports) {
        var hasOwnProperty = {}.hasOwnProperty;
        module.exports = function(it, key) {
            return hasOwnProperty.call(it, key)
        }
    }, {}],
    44: [function(require, module, exports) {
        var dP = require("./_object-dp");
        var createDesc = require("./_property-desc");
        module.exports = require("./_descriptors") ? function(object, key, value) {
            return dP.f(object, key, createDesc(1, value))
        } : function(object, key, value) {
            object[key] = value;
            return object
        }
    }, {
        "./_descriptors": 38,
        "./_object-dp": 48,
        "./_property-desc": 52
    }],
    45: [function(require, module, exports) {
        module.exports = !require("./_descriptors") && !require("./_fails")(function() {
            return Object.defineProperty(require("./_dom-create")("div"), "a", {
                get: function() {
                    return 7
                }
            }).a != 7
        })
    }, {
        "./_descriptors": 38,
        "./_dom-create": 39,
        "./_fails": 41
    }],
    46: [function(require, module, exports) {
        var cof = require("./_cof");
        module.exports = Object("z").propertyIsEnumerable(0) ? Object : function(it) {
            return cof(it) == "String" ? it.split("") : Object(it)
        }
    }, {
        "./_cof": 34
    }],
    47: [function(require, module, exports) {
        module.exports = function(it) {
            return typeof it === "object" ? it !== null : typeof it === "function"
        }
    }, {}],
    48: [function(require, module, exports) {
        var anObject = require("./_an-object");
        var IE8_DOM_DEFINE = require("./_ie8-dom-define");
        var toPrimitive = require("./_to-primitive");
        var dP = Object.defineProperty;
        exports.f = require("./_descriptors") ? Object.defineProperty : function defineProperty(O, P, Attributes) {
            anObject(O);
            P = toPrimitive(P, true);
            anObject(Attributes);
            if (IE8_DOM_DEFINE) try {
                return dP(O, P, Attributes)
            } catch (e) {}
            if ("get" in Attributes || "set" in Attributes) throw TypeError("Accessors not supported!");
            if ("value" in Attributes) O[P] = Attributes.value;
            return O
        }
    }, {
        "./_an-object": 33,
        "./_descriptors": 38,
        "./_ie8-dom-define": 45,
        "./_to-primitive": 54
    }],
    49: [function(require, module, exports) {
        var pIE = require("./_object-pie");
        var createDesc = require("./_property-desc");
        var toIObject = require("./_to-iobject");
        var toPrimitive = require("./_to-primitive");
        var has = require("./_has");
        var IE8_DOM_DEFINE = require("./_ie8-dom-define");
        var gOPD = Object.getOwnPropertyDescriptor;
        exports.f = require("./_descriptors") ? gOPD : function getOwnPropertyDescriptor(O, P) {
            O = toIObject(O);
            P = toPrimitive(P, true);
            if (IE8_DOM_DEFINE) try {
                return gOPD(O, P)
            } catch (e) {}
            if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P])
        }
    }, {
        "./_descriptors": 38,
        "./_has": 43,
        "./_ie8-dom-define": 45,
        "./_object-pie": 50,
        "./_property-desc": 52,
        "./_to-iobject": 53,
        "./_to-primitive": 54
    }],
    50: [function(require, module, exports) {
        exports.f = {}.propertyIsEnumerable
    }, {}],
    51: [function(require, module, exports) {
        var $export = require("./_export");
        var core = require("./_core");
        var fails = require("./_fails");
        module.exports = function(KEY, exec) {
            var fn = (core.Object || {})[KEY] || Object[KEY];
            var exp = {};
            exp[KEY] = exec(fn);
            $export($export.S + $export.F * fails(function() {
                fn(1)
            }), "Object", exp)
        }
    }, {
        "./_core": 35,
        "./_export": 40,
        "./_fails": 41
    }],
    52: [function(require, module, exports) {
        module.exports = function(bitmap, value) {
            return {
                enumerable: !(bitmap & 1),
                configurable: !(bitmap & 2),
                writable: !(bitmap & 4),
                value: value
            }
        }
    }, {}],
    53: [function(require, module, exports) {
        var IObject = require("./_iobject");
        var defined = require("./_defined");
        module.exports = function(it) {
            return IObject(defined(it))
        }
    }, {
        "./_defined": 37,
        "./_iobject": 46
    }],
    54: [function(require, module, exports) {
        var isObject = require("./_is-object");
        module.exports = function(it, S) {
            if (!isObject(it)) return it;
            var fn, val;
            if (S && typeof(fn = it.toString) == "function" && !isObject(val = fn.call(it))) return val;
            if (typeof(fn = it.valueOf) == "function" && !isObject(val = fn.call(it))) return val;
            if (!S && typeof(fn = it.toString) == "function" && !isObject(val = fn.call(it))) return val;
            throw TypeError("Can't convert object to primitive value")
        }
    }, {
        "./_is-object": 47
    }],
    55: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S + $export.F * !require("./_descriptors"), "Object", {
            defineProperty: require("./_object-dp").f
        })
    }, {
        "./_descriptors": 38,
        "./_export": 40,
        "./_object-dp": 48
    }],
    56: [function(require, module, exports) {
        var toIObject = require("./_to-iobject");
        var $getOwnPropertyDescriptor = require("./_object-gopd").f;
        require("./_object-sap")("getOwnPropertyDescriptor", function() {
            return function getOwnPropertyDescriptor(it, key) {
                return $getOwnPropertyDescriptor(toIObject(it), key)
            }
        })
    }, {
        "./_object-gopd": 49,
        "./_object-sap": 51,
        "./_to-iobject": 53
    }],
    57: [function(require, module, exports) {
        arguments[4][32][0].apply(exports, arguments)
    }, {
        dup: 32
    }],
    58: [function(require, module, exports) {
        var cof = require("./_cof");
        module.exports = function(it, msg) {
            if (typeof it != "number" && cof(it) != "Number") throw TypeError(msg);
            return +it
        }
    }, {
        "./_cof": 72
    }],
    59: [function(require, module, exports) {
        var UNSCOPABLES = require("./_wks")("unscopables");
        var ArrayProto = Array.prototype;
        if (ArrayProto[UNSCOPABLES] == undefined) require("./_hide")(ArrayProto, UNSCOPABLES, {});
        module.exports = function(key) {
            ArrayProto[UNSCOPABLES][key] = true
        }
    }, {
        "./_hide": 96,
        "./_wks": 180
    }],
    60: [function(require, module, exports) {
        module.exports = function(it, Constructor, name, forbiddenField) {
            if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
                throw TypeError(name + ": incorrect invocation!")
            }
            return it
        }
    }, {}],
    61: [function(require, module, exports) {
        arguments[4][33][0].apply(exports, arguments)
    }, {
        "./_is-object": 105,
        dup: 33
    }],
    62: [function(require, module, exports) {
        "use strict";
        var toObject = require("./_to-object");
        var toAbsoluteIndex = require("./_to-absolute-index");
        var toLength = require("./_to-length");
        module.exports = [].copyWithin || function copyWithin(target, start) {
            var O = toObject(this);
            var len = toLength(O.length);
            var to = toAbsoluteIndex(target, len);
            var from = toAbsoluteIndex(start, len);
            var end = arguments.length > 2 ? arguments[2] : undefined;
            var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
            var inc = 1;
            if (from < to && to < from + count) {
                inc = -1;
                from += count - 1;
                to += count - 1
            }
            while (count-- > 0) {
                if (from in O) O[to] = O[from];
                else delete O[to];
                to += inc;
                from += inc
            }
            return O
        }
    }, {
        "./_to-absolute-index": 165,
        "./_to-length": 169,
        "./_to-object": 170
    }],
    63: [function(require, module, exports) {
        "use strict";
        var toObject = require("./_to-object");
        var toAbsoluteIndex = require("./_to-absolute-index");
        var toLength = require("./_to-length");
        module.exports = function fill(value) {
            var O = toObject(this);
            var length = toLength(O.length);
            var aLen = arguments.length;
            var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
            var end = aLen > 2 ? arguments[2] : undefined;
            var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
            while (endPos > index) O[index++] = value;
            return O
        }
    }, {
        "./_to-absolute-index": 165,
        "./_to-length": 169,
        "./_to-object": 170
    }],
    64: [function(require, module, exports) {
        var forOf = require("./_for-of");
        module.exports = function(iter, ITERATOR) {
            var result = [];
            forOf(iter, false, result.push, result, ITERATOR);
            return result
        }
    }, {
        "./_for-of": 93
    }],
    65: [function(require, module, exports) {
        var toIObject = require("./_to-iobject");
        var toLength = require("./_to-length");
        var toAbsoluteIndex = require("./_to-absolute-index");
        module.exports = function(IS_INCLUDES) {
            return function($this, el, fromIndex) {
                var O = toIObject($this);
                var length = toLength(O.length);
                var index = toAbsoluteIndex(fromIndex, length);
                var value;
                if (IS_INCLUDES && el != el)
                    while (length > index) {
                        value = O[index++];
                        if (value != value) return true
                    } else
                        for (; length > index; index++)
                            if (IS_INCLUDES || index in O) {
                                if (O[index] === el) return IS_INCLUDES || index || 0
                            } return !IS_INCLUDES && -1
            }
        }
    }, {
        "./_to-absolute-index": 165,
        "./_to-iobject": 168,
        "./_to-length": 169
    }],
    66: [function(require, module, exports) {
        var ctx = require("./_ctx");
        var IObject = require("./_iobject");
        var toObject = require("./_to-object");
        var toLength = require("./_to-length");
        var asc = require("./_array-species-create");
        module.exports = function(TYPE, $create) {
            var IS_MAP = TYPE == 1;
            var IS_FILTER = TYPE == 2;
            var IS_SOME = TYPE == 3;
            var IS_EVERY = TYPE == 4;
            var IS_FIND_INDEX = TYPE == 6;
            var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
            var create = $create || asc;
            return function($this, callbackfn, that) {
                var O = toObject($this);
                var self = IObject(O);
                var f = ctx(callbackfn, that, 3);
                var length = toLength(self.length);
                var index = 0;
                var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
                var val, res;
                for (; length > index; index++)
                    if (NO_HOLES || index in self) {
                        val = self[index];
                        res = f(val, index, O);
                        if (TYPE) {
                            if (IS_MAP) result[index] = res;
                            else if (res) switch (TYPE) {
                                case 3:
                                    return true;
                                case 5:
                                    return val;
                                case 6:
                                    return index;
                                case 2:
                                    result.push(val)
                            } else if (IS_EVERY) return false
                        }
                    } return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result
            }
        }
    }, {
        "./_array-species-create": 69,
        "./_ctx": 79,
        "./_iobject": 101,
        "./_to-length": 169,
        "./_to-object": 170
    }],
    67: [function(require, module, exports) {
        var aFunction = require("./_a-function");
        var toObject = require("./_to-object");
        var IObject = require("./_iobject");
        var toLength = require("./_to-length");
        module.exports = function(that, callbackfn, aLen, memo, isRight) {
            aFunction(callbackfn);
            var O = toObject(that);
            var self = IObject(O);
            var length = toLength(O.length);
            var index = isRight ? length - 1 : 0;
            var i = isRight ? -1 : 1;
            if (aLen < 2)
                for (;;) {
                    if (index in self) {
                        memo = self[index];
                        index += i;
                        break
                    }
                    index += i;
                    if (isRight ? index < 0 : length <= index) {
                        throw TypeError("Reduce of empty array with no initial value")
                    }
                }
            for (; isRight ? index >= 0 : length > index; index += i)
                if (index in self) {
                    memo = callbackfn(memo, self[index], index, O)
                } return memo
        }
    }, {
        "./_a-function": 57,
        "./_iobject": 101,
        "./_to-length": 169,
        "./_to-object": 170
    }],
    68: [function(require, module, exports) {
        var isObject = require("./_is-object");
        var isArray = require("./_is-array");
        var SPECIES = require("./_wks")("species");
        module.exports = function(original) {
            var C;
            if (isArray(original)) {
                C = original.constructor;
                if (typeof C == "function" && (C === Array || isArray(C.prototype))) C = undefined;
                if (isObject(C)) {
                    C = C[SPECIES];
                    if (C === null) C = undefined
                }
            }
            return C === undefined ? Array : C
        }
    }, {
        "./_is-array": 103,
        "./_is-object": 105,
        "./_wks": 180
    }],
    69: [function(require, module, exports) {
        var speciesConstructor = require("./_array-species-constructor");
        module.exports = function(original, length) {
            return new(speciesConstructor(original))(length)
        }
    }, {
        "./_array-species-constructor": 68
    }],
    70: [function(require, module, exports) {
        "use strict";
        var aFunction = require("./_a-function");
        var isObject = require("./_is-object");
        var invoke = require("./_invoke");
        var arraySlice = [].slice;
        var factories = {};
        var construct = function(F, len, args) {
            if (!(len in factories)) {
                for (var n = [], i = 0; i < len; i++) n[i] = "a[" + i + "]";
                factories[len] = Function("F,a", "return new F(" + n.join(",") + ")")
            }
            return factories[len](F, args)
        };
        module.exports = Function.bind || function bind(that) {
            var fn = aFunction(this);
            var partArgs = arraySlice.call(arguments, 1);
            var bound = function() {
                var args = partArgs.concat(arraySlice.call(arguments));
                return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that)
            };
            if (isObject(fn.prototype)) bound.prototype = fn.prototype;
            return bound
        }
    }, {
        "./_a-function": 57,
        "./_invoke": 100,
        "./_is-object": 105
    }],
    71: [function(require, module, exports) {
        var cof = require("./_cof");
        var TAG = require("./_wks")("toStringTag");
        var ARG = cof(function() {
            return arguments
        }()) == "Arguments";
        var tryGet = function(it, key) {
            try {
                return it[key]
            } catch (e) {}
        };
        module.exports = function(it) {
            var O, T, B;
            return it === undefined ? "Undefined" : it === null ? "Null" : typeof(T = tryGet(O = Object(it), TAG)) == "string" ? T : ARG ? cof(O) : (B = cof(O)) == "Object" && typeof O.callee == "function" ? "Arguments" : B
        }
    }, {
        "./_cof": 72,
        "./_wks": 180
    }],
    72: [function(require, module, exports) {
        arguments[4][34][0].apply(exports, arguments)
    }, {
        dup: 34
    }],
    73: [function(require, module, exports) {
        "use strict";
        var dP = require("./_object-dp").f;
        var create = require("./_object-create");
        var redefineAll = require("./_redefine-all");
        var ctx = require("./_ctx");
        var anInstance = require("./_an-instance");
        var forOf = require("./_for-of");
        var $iterDefine = require("./_iter-define");
        var step = require("./_iter-step");
        var setSpecies = require("./_set-species");
        var DESCRIPTORS = require("./_descriptors");
        var fastKey = require("./_meta").fastKey;
        var validate = require("./_validate-collection");
        var SIZE = DESCRIPTORS ? "_s" : "size";
        var getEntry = function(that, key) {
            var index = fastKey(key);
            var entry;
            if (index !== "F") return that._i[index];
            for (entry = that._f; entry; entry = entry.n) {
                if (entry.k == key) return entry
            }
        };
        module.exports = {
            getConstructor: function(wrapper, NAME, IS_MAP, ADDER) {
                var C = wrapper(function(that, iterable) {
                    anInstance(that, C, NAME, "_i");
                    that._t = NAME;
                    that._i = create(null);
                    that._f = undefined;
                    that._l = undefined;
                    that[SIZE] = 0;
                    if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that)
                });
                redefineAll(C.prototype, {
                    clear: function clear() {
                        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
                            entry.r = true;
                            if (entry.p) entry.p = entry.p.n = undefined;
                            delete data[entry.i]
                        }
                        that._f = that._l = undefined;
                        that[SIZE] = 0
                    },
                    delete: function(key) {
                        var that = validate(this, NAME);
                        var entry = getEntry(that, key);
                        if (entry) {
                            var next = entry.n;
                            var prev = entry.p;
                            delete that._i[entry.i];
                            entry.r = true;
                            if (prev) prev.n = next;
                            if (next) next.p = prev;
                            if (that._f == entry) that._f = next;
                            if (that._l == entry) that._l = prev;
                            that[SIZE]--
                        }
                        return !!entry
                    },
                    forEach: function forEach(callbackfn) {
                        validate(this, NAME);
                        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
                        var entry;
                        while (entry = entry ? entry.n : this._f) {
                            f(entry.v, entry.k, this);
                            while (entry && entry.r) entry = entry.p
                        }
                    },
                    has: function has(key) {
                        return !!getEntry(validate(this, NAME), key)
                    }
                });
                if (DESCRIPTORS) dP(C.prototype, "size", {
                    get: function() {
                        return validate(this, NAME)[SIZE]
                    }
                });
                return C
            },
            def: function(that, key, value) {
                var entry = getEntry(that, key);
                var prev, index;
                if (entry) {
                    entry.v = value
                } else {
                    that._l = entry = {
                        i: index = fastKey(key, true),
                        k: key,
                        v: value,
                        p: prev = that._l,
                        n: undefined,
                        r: false
                    };
                    if (!that._f) that._f = entry;
                    if (prev) prev.n = entry;
                    that[SIZE]++;
                    if (index !== "F") that._i[index] = entry
                }
                return that
            },
            getEntry: getEntry,
            setStrong: function(C, NAME, IS_MAP) {
                $iterDefine(C, NAME, function(iterated, kind) {
                    this._t = validate(iterated, NAME);
                    this._k = kind;
                    this._l = undefined
                }, function() {
                    var that = this;
                    var kind = that._k;
                    var entry = that._l;
                    while (entry && entry.r) entry = entry.p;
                    if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
                        that._t = undefined;
                        return step(1)
                    }
                    if (kind == "keys") return step(0, entry.k);
                    if (kind == "values") return step(0, entry.v);
                    return step(0, [entry.k, entry.v])
                }, IS_MAP ? "entries" : "values", !IS_MAP, true);
                setSpecies(NAME)
            }
        }
    }, {
        "./_an-instance": 60,
        "./_ctx": 79,
        "./_descriptors": 83,
        "./_for-of": 93,
        "./_iter-define": 109,
        "./_iter-step": 111,
        "./_meta": 119,
        "./_object-create": 124,
        "./_object-dp": 125,
        "./_redefine-all": 144,
        "./_set-species": 151,
        "./_validate-collection": 177
    }],
    74: [function(require, module, exports) {
        var classof = require("./_classof");
        var from = require("./_array-from-iterable");
        module.exports = function(NAME) {
            return function toJSON() {
                if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
                return from(this)
            }
        }
    }, {
        "./_array-from-iterable": 64,
        "./_classof": 71
    }],
    75: [function(require, module, exports) {
        "use strict";
        var redefineAll = require("./_redefine-all");
        var getWeak = require("./_meta").getWeak;
        var anObject = require("./_an-object");
        var isObject = require("./_is-object");
        var anInstance = require("./_an-instance");
        var forOf = require("./_for-of");
        var createArrayMethod = require("./_array-methods");
        var $has = require("./_has");
        var validate = require("./_validate-collection");
        var arrayFind = createArrayMethod(5);
        var arrayFindIndex = createArrayMethod(6);
        var id = 0;
        var uncaughtFrozenStore = function(that) {
            return that._l || (that._l = new UncaughtFrozenStore)
        };
        var UncaughtFrozenStore = function() {
            this.a = []
        };
        var findUncaughtFrozen = function(store, key) {
            return arrayFind(store.a, function(it) {
                return it[0] === key
            })
        };
        UncaughtFrozenStore.prototype = {
            get: function(key) {
                var entry = findUncaughtFrozen(this, key);
                if (entry) return entry[1]
            },
            has: function(key) {
                return !!findUncaughtFrozen(this, key)
            },
            set: function(key, value) {
                var entry = findUncaughtFrozen(this, key);
                if (entry) entry[1] = value;
                else this.a.push([key, value])
            },
            delete: function(key) {
                var index = arrayFindIndex(this.a, function(it) {
                    return it[0] === key
                });
                if (~index) this.a.splice(index, 1);
                return !!~index
            }
        };
        module.exports = {
            getConstructor: function(wrapper, NAME, IS_MAP, ADDER) {
                var C = wrapper(function(that, iterable) {
                    anInstance(that, C, NAME, "_i");
                    that._t = NAME;
                    that._i = id++;
                    that._l = undefined;
                    if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that)
                });
                redefineAll(C.prototype, {
                    delete: function(key) {
                        if (!isObject(key)) return false;
                        var data = getWeak(key);
                        if (data === true) return uncaughtFrozenStore(validate(this, NAME))["delete"](key);
                        return data && $has(data, this._i) && delete data[this._i]
                    },
                    has: function has(key) {
                        if (!isObject(key)) return false;
                        var data = getWeak(key);
                        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
                        return data && $has(data, this._i)
                    }
                });
                return C
            },
            def: function(that, key, value) {
                var data = getWeak(anObject(key), true);
                if (data === true) uncaughtFrozenStore(that).set(key, value);
                else data[that._i] = value;
                return that
            },
            ufstore: uncaughtFrozenStore
        }
    }, {
        "./_an-instance": 60,
        "./_an-object": 61,
        "./_array-methods": 66,
        "./_for-of": 93,
        "./_has": 95,
        "./_is-object": 105,
        "./_meta": 119,
        "./_redefine-all": 144,
        "./_validate-collection": 177
    }],
    76: [function(require, module, exports) {
        "use strict";
        var global = require("./_global");
        var $export = require("./_export");
        var redefine = require("./_redefine");
        var redefineAll = require("./_redefine-all");
        var meta = require("./_meta");
        var forOf = require("./_for-of");
        var anInstance = require("./_an-instance");
        var isObject = require("./_is-object");
        var fails = require("./_fails");
        var $iterDetect = require("./_iter-detect");
        var setToStringTag = require("./_set-to-string-tag");
        var inheritIfRequired = require("./_inherit-if-required");
        module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
            var Base = global[NAME];
            var C = Base;
            var ADDER = IS_MAP ? "set" : "add";
            var proto = C && C.prototype;
            var O = {};
            var fixMethod = function(KEY) {
                var fn = proto[KEY];
                redefine(proto, KEY, KEY == "delete" ? function(a) {
                    return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a)
                } : KEY == "has" ? function has(a) {
                    return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a)
                } : KEY == "get" ? function get(a) {
                    return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a)
                } : KEY == "add" ? function add(a) {
                    fn.call(this, a === 0 ? 0 : a);
                    return this
                } : function set(a, b) {
                    fn.call(this, a === 0 ? 0 : a, b);
                    return this
                })
            };
            if (typeof C != "function" || !(IS_WEAK || proto.forEach && !fails(function() {
                    (new C).entries().next()
                }))) {
                C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
                redefineAll(C.prototype, methods);
                meta.NEED = true
            } else {
                var instance = new C;
                var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
                var THROWS_ON_PRIMITIVES = fails(function() {
                    instance.has(1)
                });
                var ACCEPT_ITERABLES = $iterDetect(function(iter) {
                    new C(iter)
                });
                var BUGGY_ZERO = !IS_WEAK && fails(function() {
                    var $instance = new C;
                    var index = 5;
                    while (index--) $instance[ADDER](index, index);
                    return !$instance.has(-0)
                });
                if (!ACCEPT_ITERABLES) {
                    C = wrapper(function(target, iterable) {
                        anInstance(target, C, NAME);
                        var that = inheritIfRequired(new Base, target, C);
                        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
                        return that
                    });
                    C.prototype = proto;
                    proto.constructor = C
                }
                if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
                    fixMethod("delete");
                    fixMethod("has");
                    IS_MAP && fixMethod("get")
                }
                if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
                if (IS_WEAK && proto.clear) delete proto.clear
            }
            setToStringTag(C, NAME);
            O[NAME] = C;
            $export($export.G + $export.W + $export.F * (C != Base), O);
            if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);
            return C
        }
    }, {
        "./_an-instance": 60,
        "./_export": 87,
        "./_fails": 89,
        "./_for-of": 93,
        "./_global": 94,
        "./_inherit-if-required": 99,
        "./_is-object": 105,
        "./_iter-detect": 110,
        "./_meta": 119,
        "./_redefine": 145,
        "./_redefine-all": 144,
        "./_set-to-string-tag": 152
    }],
    77: [function(require, module, exports) {
        arguments[4][35][0].apply(exports, arguments)
    }, {
        dup: 35
    }],
    78: [function(require, module, exports) {
        "use strict";
        var $defineProperty = require("./_object-dp");
        var createDesc = require("./_property-desc");
        module.exports = function(object, index, value) {
            if (index in object) $defineProperty.f(object, index, createDesc(0, value));
            else object[index] = value
        }
    }, {
        "./_object-dp": 125,
        "./_property-desc": 143
    }],
    79: [function(require, module, exports) {
        arguments[4][36][0].apply(exports, arguments)
    }, {
        "./_a-function": 57,
        dup: 36
    }],
    80: [function(require, module, exports) {
        "use strict";
        var fails = require("./_fails");
        var getTime = Date.prototype.getTime;
        var $toISOString = Date.prototype.toISOString;
        var lz = function(num) {
            return num > 9 ? num : "0" + num
        };
        module.exports = fails(function() {
            return $toISOString.call(new Date(-5e13 - 1)) != "0385-07-25T07:06:39.999Z"
        }) || !fails(function() {
            $toISOString.call(new Date(NaN))
        }) ? function toISOString() {
            if (!isFinite(getTime.call(this))) throw RangeError("Invalid time value");
            var d = this;
            var y = d.getUTCFullYear();
            var m = d.getUTCMilliseconds();
            var s = y < 0 ? "-" : y > 9999 ? "+" : "";
            return s + ("00000" + Math.abs(y)).slice(s ? -6 : -4) + "-" + lz(d.getUTCMonth() + 1) + "-" + lz(d.getUTCDate()) + "T" + lz(d.getUTCHours()) + ":" + lz(d.getUTCMinutes()) + ":" + lz(d.getUTCSeconds()) + "." + (m > 99 ? m : "0" + lz(m)) + "Z"
        } : $toISOString
    }, {
        "./_fails": 89
    }],
    81: [function(require, module, exports) {
        "use strict";
        var anObject = require("./_an-object");
        var toPrimitive = require("./_to-primitive");
        var NUMBER = "number";
        module.exports = function(hint) {
            if (hint !== "string" && hint !== NUMBER && hint !== "default") throw TypeError("Incorrect hint");
            return toPrimitive(anObject(this), hint != NUMBER)
        }
    }, {
        "./_an-object": 61,
        "./_to-primitive": 171
    }],
    82: [function(require, module, exports) {
        arguments[4][37][0].apply(exports, arguments)
    }, {
        dup: 37
    }],
    83: [function(require, module, exports) {
        arguments[4][38][0].apply(exports, arguments)
    }, {
        "./_fails": 89,
        dup: 38
    }],
    84: [function(require, module, exports) {
        arguments[4][39][0].apply(exports, arguments)
    }, {
        "./_global": 94,
        "./_is-object": 105,
        dup: 39
    }],
    85: [function(require, module, exports) {
        module.exports = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")
    }, {}],
    86: [function(require, module, exports) {
        var getKeys = require("./_object-keys");
        var gOPS = require("./_object-gops");
        var pIE = require("./_object-pie");
        module.exports = function(it) {
            var result = getKeys(it);
            var getSymbols = gOPS.f;
            if (getSymbols) {
                var symbols = getSymbols(it);
                var isEnum = pIE.f;
                var i = 0;
                var key;
                while (symbols.length > i)
                    if (isEnum.call(it, key = symbols[i++])) result.push(key)
            }
            return result
        }
    }, {
        "./_object-gops": 131,
        "./_object-keys": 134,
        "./_object-pie": 135
    }],
    87: [function(require, module, exports) {
        var global = require("./_global");
        var core = require("./_core");
        var hide = require("./_hide");
        var redefine = require("./_redefine");
        var ctx = require("./_ctx");
        var PROTOTYPE = "prototype";
        var $export = function(type, name, source) {
            var IS_FORCED = type & $export.F;
            var IS_GLOBAL = type & $export.G;
            var IS_STATIC = type & $export.S;
            var IS_PROTO = type & $export.P;
            var IS_BIND = type & $export.B;
            var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
            var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
            var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
            var key, own, out, exp;
            if (IS_GLOBAL) source = name;
            for (key in source) {
                own = !IS_FORCED && target && target[key] !== undefined;
                out = (own ? target : source)[key];
                exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == "function" ? ctx(Function.call, out) : out;
                if (target) redefine(target, key, out, type & $export.U);
                if (exports[key] != out) hide(exports, key, exp);
                if (IS_PROTO && expProto[key] != out) expProto[key] = out
            }
        };
        global.core = core;
        $export.F = 1;
        $export.G = 2;
        $export.S = 4;
        $export.P = 8;
        $export.B = 16;
        $export.W = 32;
        $export.U = 64;
        $export.R = 128;
        module.exports = $export
    }, {
        "./_core": 77,
        "./_ctx": 79,
        "./_global": 94,
        "./_hide": 96,
        "./_redefine": 145
    }],
    88: [function(require, module, exports) {
        var MATCH = require("./_wks")("match");
        module.exports = function(KEY) {
            var re = /./;
            try {
                "/./" [KEY](re)
            } catch (e) {
                try {
                    re[MATCH] = false;
                    return !"/./" [KEY](re)
                } catch (f) {}
            }
            return true
        }
    }, {
        "./_wks": 180
    }],
    89: [function(require, module, exports) {
        arguments[4][41][0].apply(exports, arguments)
    }, {
        dup: 41
    }],
    90: [function(require, module, exports) {
        "use strict";
        var hide = require("./_hide");
        var redefine = require("./_redefine");
        var fails = require("./_fails");
        var defined = require("./_defined");
        var wks = require("./_wks");
        module.exports = function(KEY, length, exec) {
            var SYMBOL = wks(KEY);
            var fns = exec(defined, SYMBOL, "" [KEY]);
            var strfn = fns[0];
            var rxfn = fns[1];
            if (fails(function() {
                    var O = {};
                    O[SYMBOL] = function() {
                        return 7
                    };
                    return "" [KEY](O) != 7
                })) {
                redefine(String.prototype, KEY, strfn);
                hide(RegExp.prototype, SYMBOL, length == 2 ? function(string, arg) {
                    return rxfn.call(string, this, arg)
                } : function(string) {
                    return rxfn.call(string, this)
                })
            }
        }
    }, {
        "./_defined": 82,
        "./_fails": 89,
        "./_hide": 96,
        "./_redefine": 145,
        "./_wks": 180
    }],
    91: [function(require, module, exports) {
        "use strict";
        var anObject = require("./_an-object");
        module.exports = function() {
            var that = anObject(this);
            var result = "";
            if (that.global) result += "g";
            if (that.ignoreCase) result += "i";
            if (that.multiline) result += "m";
            if (that.unicode) result += "u";
            if (that.sticky) result += "y";
            return result
        }
    }, {
        "./_an-object": 61
    }],
    92: [function(require, module, exports) {
        "use strict";
        var isArray = require("./_is-array");
        var isObject = require("./_is-object");
        var toLength = require("./_to-length");
        var ctx = require("./_ctx");
        var IS_CONCAT_SPREADABLE = require("./_wks")("isConcatSpreadable");

        function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
            var targetIndex = start;
            var sourceIndex = 0;
            var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
            var element, spreadable;
            while (sourceIndex < sourceLen) {
                if (sourceIndex in source) {
                    element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];
                    spreadable = false;
                    if (isObject(element)) {
                        spreadable = element[IS_CONCAT_SPREADABLE];
                        spreadable = spreadable !== undefined ? !!spreadable : isArray(element)
                    }
                    if (spreadable && depth > 0) {
                        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1
                    } else {
                        if (targetIndex >= 9007199254740991) throw TypeError();
                        target[targetIndex] = element
                    }
                    targetIndex++
                }
                sourceIndex++
            }
            return targetIndex
        }
        module.exports = flattenIntoArray
    }, {
        "./_ctx": 79,
        "./_is-array": 103,
        "./_is-object": 105,
        "./_to-length": 169,
        "./_wks": 180
    }],
    93: [function(require, module, exports) {
        var ctx = require("./_ctx");
        var call = require("./_iter-call");
        var isArrayIter = require("./_is-array-iter");
        var anObject = require("./_an-object");
        var toLength = require("./_to-length");
        var getIterFn = require("./core.get-iterator-method");
        var BREAK = {};
        var RETURN = {};
        var exports = module.exports = function(iterable, entries, fn, that, ITERATOR) {
            var iterFn = ITERATOR ? function() {
                return iterable
            } : getIterFn(iterable);
            var f = ctx(fn, that, entries ? 2 : 1);
            var index = 0;
            var length, step, iterator, result;
            if (typeof iterFn != "function") throw TypeError(iterable + " is not iterable!");
            if (isArrayIter(iterFn))
                for (length = toLength(iterable.length); length > index; index++) {
                    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
                    if (result === BREAK || result === RETURN) return result
                } else
                    for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
                        result = call(iterator, f, step.value, entries);
                        if (result === BREAK || result === RETURN) return result
                    }
        };
        exports.BREAK = BREAK;
        exports.RETURN = RETURN
    }, {
        "./_an-object": 61,
        "./_ctx": 79,
        "./_is-array-iter": 102,
        "./_iter-call": 107,
        "./_to-length": 169,
        "./core.get-iterator-method": 181
    }],
    94: [function(require, module, exports) {
        arguments[4][42][0].apply(exports, arguments)
    }, {
        dup: 42
    }],
    95: [function(require, module, exports) {
        arguments[4][43][0].apply(exports, arguments)
    }, {
        dup: 43
    }],
    96: [function(require, module, exports) {
        arguments[4][44][0].apply(exports, arguments)
    }, {
        "./_descriptors": 83,
        "./_object-dp": 125,
        "./_property-desc": 143,
        dup: 44
    }],
    97: [function(require, module, exports) {
        var document = require("./_global").document;
        module.exports = document && document.documentElement
    }, {
        "./_global": 94
    }],
    98: [function(require, module, exports) {
        arguments[4][45][0].apply(exports, arguments)
    }, {
        "./_descriptors": 83,
        "./_dom-create": 84,
        "./_fails": 89,
        dup: 45
    }],
    99: [function(require, module, exports) {
        var isObject = require("./_is-object");
        var setPrototypeOf = require("./_set-proto").set;
        module.exports = function(that, target, C) {
            var S = target.constructor;
            var P;
            if (S !== C && typeof S == "function" && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
                setPrototypeOf(that, P)
            }
            return that
        }
    }, {
        "./_is-object": 105,
        "./_set-proto": 150
    }],
    100: [function(require, module, exports) {
        module.exports = function(fn, args, that) {
            var un = that === undefined;
            switch (args.length) {
                case 0:
                    return un ? fn() : fn.call(that);
                case 1:
                    return un ? fn(args[0]) : fn.call(that, args[0]);
                case 2:
                    return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);
                case 3:
                    return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);
                case 4:
                    return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3])
            }
            return fn.apply(that, args)
        }
    }, {}],
    101: [function(require, module, exports) {
        arguments[4][46][0].apply(exports, arguments)
    }, {
        "./_cof": 72,
        dup: 46
    }],
    102: [function(require, module, exports) {
        var Iterators = require("./_iterators");
        var ITERATOR = require("./_wks")("iterator");
        var ArrayProto = Array.prototype;
        module.exports = function(it) {
            return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it)
        }
    }, {
        "./_iterators": 112,
        "./_wks": 180
    }],
    103: [function(require, module, exports) {
        var cof = require("./_cof");
        module.exports = Array.isArray || function isArray(arg) {
            return cof(arg) == "Array"
        }
    }, {
        "./_cof": 72
    }],
    104: [function(require, module, exports) {
        var isObject = require("./_is-object");
        var floor = Math.floor;
        module.exports = function isInteger(it) {
            return !isObject(it) && isFinite(it) && floor(it) === it
        }
    }, {
        "./_is-object": 105
    }],
    105: [function(require, module, exports) {
        arguments[4][47][0].apply(exports, arguments)
    }, {
        dup: 47
    }],
    106: [function(require, module, exports) {
        var isObject = require("./_is-object");
        var cof = require("./_cof");
        var MATCH = require("./_wks")("match");
        module.exports = function(it) {
            var isRegExp;
            return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == "RegExp")
        }
    }, {
        "./_cof": 72,
        "./_is-object": 105,
        "./_wks": 180
    }],
    107: [function(require, module, exports) {
        var anObject = require("./_an-object");
        module.exports = function(iterator, fn, value, entries) {
            try {
                return entries ? fn(anObject(value)[0], value[1]) : fn(value)
            } catch (e) {
                var ret = iterator["return"];
                if (ret !== undefined) anObject(ret.call(iterator));
                throw e
            }
        }
    }, {
        "./_an-object": 61
    }],
    108: [function(require, module, exports) {
        "use strict";
        var create = require("./_object-create");
        var descriptor = require("./_property-desc");
        var setToStringTag = require("./_set-to-string-tag");
        var IteratorPrototype = {};
        require("./_hide")(IteratorPrototype, require("./_wks")("iterator"), function() {
            return this
        });
        module.exports = function(Constructor, NAME, next) {
            Constructor.prototype = create(IteratorPrototype, {
                next: descriptor(1, next)
            });
            setToStringTag(Constructor, NAME + " Iterator")
        }
    }, {
        "./_hide": 96,
        "./_object-create": 124,
        "./_property-desc": 143,
        "./_set-to-string-tag": 152,
        "./_wks": 180
    }],
    109: [function(require, module, exports) {
        "use strict";
        var LIBRARY = require("./_library");
        var $export = require("./_export");
        var redefine = require("./_redefine");
        var hide = require("./_hide");
        var Iterators = require("./_iterators");
        var $iterCreate = require("./_iter-create");
        var setToStringTag = require("./_set-to-string-tag");
        var getPrototypeOf = require("./_object-gpo");
        var ITERATOR = require("./_wks")("iterator");
        var BUGGY = !([].keys && "next" in [].keys());
        var FF_ITERATOR = "@@iterator";
        var KEYS = "keys";
        var VALUES = "values";
        var returnThis = function() {
            return this
        };
        module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
            $iterCreate(Constructor, NAME, next);
            var getMethod = function(kind) {
                if (!BUGGY && kind in proto) return proto[kind];
                switch (kind) {
                    case KEYS:
                        return function keys() {
                            return new Constructor(this, kind)
                        };
                    case VALUES:
                        return function values() {
                            return new Constructor(this, kind)
                        }
                }
                return function entries() {
                    return new Constructor(this, kind)
                }
            };
            var TAG = NAME + " Iterator";
            var DEF_VALUES = DEFAULT == VALUES;
            var VALUES_BUG = false;
            var proto = Base.prototype;
            var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
            var $default = $native || getMethod(DEFAULT);
            var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod("entries") : undefined;
            var $anyNative = NAME == "Array" ? proto.entries || $native : $native;
            var methods, key, IteratorPrototype;
            if ($anyNative) {
                IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
                if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
                    setToStringTag(IteratorPrototype, TAG, true);
                    if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != "function") hide(IteratorPrototype, ITERATOR, returnThis)
                }
            }
            if (DEF_VALUES && $native && $native.name !== VALUES) {
                VALUES_BUG = true;
                $default = function values() {
                    return $native.call(this)
                }
            }
            if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
                hide(proto, ITERATOR, $default)
            }
            Iterators[NAME] = $default;
            Iterators[TAG] = returnThis;
            if (DEFAULT) {
                methods = {
                    values: DEF_VALUES ? $default : getMethod(VALUES),
                    keys: IS_SET ? $default : getMethod(KEYS),
                    entries: $entries
                };
                if (FORCED)
                    for (key in methods) {
                        if (!(key in proto)) redefine(proto, key, methods[key])
                    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods)
            }
            return methods
        }
    }, {
        "./_export": 87,
        "./_hide": 96,
        "./_iter-create": 108,
        "./_iterators": 112,
        "./_library": 113,
        "./_object-gpo": 132,
        "./_redefine": 145,
        "./_set-to-string-tag": 152,
        "./_wks": 180
    }],
    110: [function(require, module, exports) {
        var ITERATOR = require("./_wks")("iterator");
        var SAFE_CLOSING = false;
        try {
            var riter = [7][ITERATOR]();
            riter["return"] = function() {
                SAFE_CLOSING = true
            };
            Array.from(riter, function() {
                throw 2
            })
        } catch (e) {}
        module.exports = function(exec, skipClosing) {
            if (!skipClosing && !SAFE_CLOSING) return false;
            var safe = false;
            try {
                var arr = [7];
                var iter = arr[ITERATOR]();
                iter.next = function() {
                    return {
                        done: safe = true
                    }
                };
                arr[ITERATOR] = function() {
                    return iter
                };
                exec(arr)
            } catch (e) {}
            return safe
        }
    }, {
        "./_wks": 180
    }],
    111: [function(require, module, exports) {
        module.exports = function(done, value) {
            return {
                value: value,
                done: !!done
            }
        }
    }, {}],
    112: [function(require, module, exports) {
        module.exports = {}
    }, {}],
    113: [function(require, module, exports) {
        module.exports = false
    }, {}],
    114: [function(require, module, exports) {
        var $expm1 = Math.expm1;
        module.exports = !$expm1 || $expm1(10) > 22025.465794806718 || $expm1(10) < 22025.465794806718 || $expm1(-2e-17) != -2e-17 ? function expm1(x) {
            return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1
        } : $expm1
    }, {}],
    115: [function(require, module, exports) {
        var sign = require("./_math-sign");
        var pow = Math.pow;
        var EPSILON = pow(2, -52);
        var EPSILON32 = pow(2, -23);
        var MAX32 = pow(2, 127) * (2 - EPSILON32);
        var MIN32 = pow(2, -126);
        var roundTiesToEven = function(n) {
            return n + 1 / EPSILON - 1 / EPSILON
        };
        module.exports = Math.fround || function fround(x) {
            var $abs = Math.abs(x);
            var $sign = sign(x);
            var a, result;
            if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
            a = (1 + EPSILON32 / EPSILON) * $abs;
            result = a - (a - $abs);
            if (result > MAX32 || result != result) return $sign * Infinity;
            return $sign * result
        }
    }, {
        "./_math-sign": 118
    }],
    116: [function(require, module, exports) {
        module.exports = Math.log1p || function log1p(x) {
            return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x)
        }
    }, {}],
    117: [function(require, module, exports) {
        module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
            if (arguments.length === 0 || x != x || inLow != inLow || inHigh != inHigh || outLow != outLow || outHigh != outHigh) return NaN;
            if (x === Infinity || x === -Infinity) return x;
            return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow
        }
    }, {}],
    118: [function(require, module, exports) {
        module.exports = Math.sign || function sign(x) {
            return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1
        }
    }, {}],
    119: [function(require, module, exports) {
        var META = require("./_uid")("meta");
        var isObject = require("./_is-object");
        var has = require("./_has");
        var setDesc = require("./_object-dp").f;
        var id = 0;
        var isExtensible = Object.isExtensible || function() {
            return true
        };
        var FREEZE = !require("./_fails")(function() {
            return isExtensible(Object.preventExtensions({}))
        });
        var setMeta = function(it) {
            setDesc(it, META, {
                value: {
                    i: "O" + ++id,
                    w: {}
                }
            })
        };
        var fastKey = function(it, create) {
            if (!isObject(it)) return typeof it == "symbol" ? it : (typeof it == "string" ? "S" : "P") + it;
            if (!has(it, META)) {
                if (!isExtensible(it)) return "F";
                if (!create) return "E";
                setMeta(it)
            }
            return it[META].i
        };
        var getWeak = function(it, create) {
            if (!has(it, META)) {
                if (!isExtensible(it)) return true;
                if (!create) return false;
                setMeta(it)
            }
            return it[META].w
        };
        var onFreeze = function(it) {
            if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
            return it
        };
        var meta = module.exports = {
            KEY: META,
            NEED: false,
            fastKey: fastKey,
            getWeak: getWeak,
            onFreeze: onFreeze
        }
    }, {
        "./_fails": 89,
        "./_has": 95,
        "./_is-object": 105,
        "./_object-dp": 125,
        "./_uid": 175
    }],
    120: [function(require, module, exports) {
        var Map = require("./es6.map");
        var $export = require("./_export");
        var shared = require("./_shared")("metadata");
        var store = shared.store || (shared.store = new(require("./es6.weak-map")));
        var getOrCreateMetadataMap = function(target, targetKey, create) {
            var targetMetadata = store.get(target);
            if (!targetMetadata) {
                if (!create) return undefined;
                store.set(target, targetMetadata = new Map)
            }
            var keyMetadata = targetMetadata.get(targetKey);
            if (!keyMetadata) {
                if (!create) return undefined;
                targetMetadata.set(targetKey, keyMetadata = new Map)
            }
            return keyMetadata
        };
        var ordinaryHasOwnMetadata = function(MetadataKey, O, P) {
            var metadataMap = getOrCreateMetadataMap(O, P, false);
            return metadataMap === undefined ? false : metadataMap.has(MetadataKey)
        };
        var ordinaryGetOwnMetadata = function(MetadataKey, O, P) {
            var metadataMap = getOrCreateMetadataMap(O, P, false);
            return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey)
        };
        var ordinaryDefineOwnMetadata = function(MetadataKey, MetadataValue, O, P) {
            getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue)
        };
        var ordinaryOwnMetadataKeys = function(target, targetKey) {
            var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
            var keys = [];
            if (metadataMap) metadataMap.forEach(function(_, key) {
                keys.push(key)
            });
            return keys
        };
        var toMetaKey = function(it) {
            return it === undefined || typeof it == "symbol" ? it : String(it)
        };
        var exp = function(O) {
            $export($export.S, "Reflect", O)
        };
        module.exports = {
            store: store,
            map: getOrCreateMetadataMap,
            has: ordinaryHasOwnMetadata,
            get: ordinaryGetOwnMetadata,
            set: ordinaryDefineOwnMetadata,
            keys: ordinaryOwnMetadataKeys,
            key: toMetaKey,
            exp: exp
        }
    }, {
        "./_export": 87,
        "./_shared": 154,
        "./es6.map": 212,
        "./es6.weak-map": 318
    }],
    121: [function(require, module, exports) {
        var global = require("./_global");
        var macrotask = require("./_task").set;
        var Observer = global.MutationObserver || global.WebKitMutationObserver;
        var process = global.process;
        var Promise = global.Promise;
        var isNode = require("./_cof")(process) == "process";
        module.exports = function() {
            var head, last, notify;
            var flush = function() {
                var parent, fn;
                if (isNode && (parent = process.domain)) parent.exit();
                while (head) {
                    fn = head.fn;
                    head = head.next;
                    try {
                        fn()
                    } catch (e) {
                        if (head) notify();
                        else last = undefined;
                        throw e
                    }
                }
                last = undefined;
                if (parent) parent.enter()
            };
            if (isNode) {
                notify = function() {
                    process.nextTick(flush)
                }
            } else if (Observer && !(global.navigator && global.navigator.standalone)) {
                var toggle = true;
                var node = document.createTextNode("");
                new Observer(flush).observe(node, {
                    characterData: true
                });
                notify = function() {
                    node.data = toggle = !toggle
                }
            } else if (Promise && Promise.resolve) {
                var promise = Promise.resolve(undefined);
                notify = function() {
                    promise.then(flush)
                }
            } else {
                notify = function() {
                    macrotask.call(global, flush)
                }
            }
            return function(fn) {
                var task = {
                    fn: fn,
                    next: undefined
                };
                if (last) last.next = task;
                if (!head) {
                    head = task;
                    notify()
                }
                last = task
            }
        }
    }, {
        "./_cof": 72,
        "./_global": 94,
        "./_task": 164
    }],
    122: [function(require, module, exports) {
        "use strict";
        var aFunction = require("./_a-function");

        function PromiseCapability(C) {
            var resolve, reject;
            this.promise = new C(function($$resolve, $$reject) {
                if (resolve !== undefined || reject !== undefined) throw TypeError("Bad Promise constructor");
                resolve = $$resolve;
                reject = $$reject
            });
            this.resolve = aFunction(resolve);
            this.reject = aFunction(reject)
        }
        module.exports.f = function(C) {
            return new PromiseCapability(C)
        }
    }, {
        "./_a-function": 57
    }],
    123: [function(require, module, exports) {
        "use strict";
        var getKeys = require("./_object-keys");
        var gOPS = require("./_object-gops");
        var pIE = require("./_object-pie");
        var toObject = require("./_to-object");
        var IObject = require("./_iobject");
        var $assign = Object.assign;
        module.exports = !$assign || require("./_fails")(function() {
            var A = {};
            var B = {};
            var S = Symbol();
            var K = "abcdefghijklmnopqrst";
            A[S] = 7;
            K.split("").forEach(function(k) {
                B[k] = k
            });
            return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join("") != K
        }) ? function assign(target, source) {
            var T = toObject(target);
            var aLen = arguments.length;
            var index = 1;
            var getSymbols = gOPS.f;
            var isEnum = pIE.f;
            while (aLen > index) {
                var S = IObject(arguments[index++]);
                var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
                var length = keys.length;
                var j = 0;
                var key;
                while (length > j)
                    if (isEnum.call(S, key = keys[j++])) T[key] = S[key]
            }
            return T
        } : $assign
    }, {
        "./_fails": 89,
        "./_iobject": 101,
        "./_object-gops": 131,
        "./_object-keys": 134,
        "./_object-pie": 135,
        "./_to-object": 170
    }],
    124: [function(require, module, exports) {
        var anObject = require("./_an-object");
        var dPs = require("./_object-dps");
        var enumBugKeys = require("./_enum-bug-keys");
        var IE_PROTO = require("./_shared-key")("IE_PROTO");
        var Empty = function() {};
        var PROTOTYPE = "prototype";
        var createDict = function() {
            var iframe = require("./_dom-create")("iframe");
            var i = enumBugKeys.length;
            var lt = "<";
            var gt = ">";
            var iframeDocument;
            iframe.style.display = "none";
            require("./_html").appendChild(iframe);
            iframe.src = "javascript:";
            iframeDocument = iframe.contentWindow.document;
            iframeDocument.open();
            iframeDocument.write(lt + "script" + gt + "document.F=Object" + lt + "/script" + gt);
            iframeDocument.close();
            createDict = iframeDocument.F;
            while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
            return createDict()
        };
        module.exports = Object.create || function create(O, Properties) {
            var result;
            if (O !== null) {
                Empty[PROTOTYPE] = anObject(O);
                result = new Empty;
                Empty[PROTOTYPE] = null;
                result[IE_PROTO] = O
            } else result = createDict();
            return Properties === undefined ? result : dPs(result, Properties)
        }
    }, {
        "./_an-object": 61,
        "./_dom-create": 84,
        "./_enum-bug-keys": 85,
        "./_html": 97,
        "./_object-dps": 126,
        "./_shared-key": 153
    }],
    125: [function(require, module, exports) {
        arguments[4][48][0].apply(exports, arguments)
    }, {
        "./_an-object": 61,
        "./_descriptors": 83,
        "./_ie8-dom-define": 98,
        "./_to-primitive": 171,
        dup: 48
    }],
    126: [function(require, module, exports) {
        var dP = require("./_object-dp");
        var anObject = require("./_an-object");
        var getKeys = require("./_object-keys");
        module.exports = require("./_descriptors") ? Object.defineProperties : function defineProperties(O, Properties) {
            anObject(O);
            var keys = getKeys(Properties);
            var length = keys.length;
            var i = 0;
            var P;
            while (length > i) dP.f(O, P = keys[i++], Properties[P]);
            return O
        }
    }, {
        "./_an-object": 61,
        "./_descriptors": 83,
        "./_object-dp": 125,
        "./_object-keys": 134
    }],
    127: [function(require, module, exports) {
        "use strict";
        module.exports = require("./_library") || !require("./_fails")(function() {
            var K = Math.random();
            __defineSetter__.call(null, K, function() {});
            delete require("./_global")[K]
        })
    }, {
        "./_fails": 89,
        "./_global": 94,
        "./_library": 113
    }],
    128: [function(require, module, exports) {
        arguments[4][49][0].apply(exports, arguments)
    }, {
        "./_descriptors": 83,
        "./_has": 95,
        "./_ie8-dom-define": 98,
        "./_object-pie": 135,
        "./_property-desc": 143,
        "./_to-iobject": 168,
        "./_to-primitive": 171,
        dup: 49
    }],
    129: [function(require, module, exports) {
        var toIObject = require("./_to-iobject");
        var gOPN = require("./_object-gopn").f;
        var toString = {}.toString;
        var windowNames = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
        var getWindowNames = function(it) {
            try {
                return gOPN(it)
            } catch (e) {
                return windowNames.slice()
            }
        };
        module.exports.f = function getOwnPropertyNames(it) {
            return windowNames && toString.call(it) == "[object Window]" ? getWindowNames(it) : gOPN(toIObject(it))
        }
    }, {
        "./_object-gopn": 130,
        "./_to-iobject": 168
    }],
    130: [function(require, module, exports) {
        var $keys = require("./_object-keys-internal");
        var hiddenKeys = require("./_enum-bug-keys").concat("length", "prototype");
        exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
            return $keys(O, hiddenKeys)
        }
    }, {
        "./_enum-bug-keys": 85,
        "./_object-keys-internal": 133
    }],
    131: [function(require, module, exports) {
        exports.f = Object.getOwnPropertySymbols
    }, {}],
    132: [function(require, module, exports) {
        var has = require("./_has");
        var toObject = require("./_to-object");
        var IE_PROTO = require("./_shared-key")("IE_PROTO");
        var ObjectProto = Object.prototype;
        module.exports = Object.getPrototypeOf || function(O) {
            O = toObject(O);
            if (has(O, IE_PROTO)) return O[IE_PROTO];
            if (typeof O.constructor == "function" && O instanceof O.constructor) {
                return O.constructor.prototype
            }
            return O instanceof Object ? ObjectProto : null
        }
    }, {
        "./_has": 95,
        "./_shared-key": 153,
        "./_to-object": 170
    }],
    133: [function(require, module, exports) {
        var has = require("./_has");
        var toIObject = require("./_to-iobject");
        var arrayIndexOf = require("./_array-includes")(false);
        var IE_PROTO = require("./_shared-key")("IE_PROTO");
        module.exports = function(object, names) {
            var O = toIObject(object);
            var i = 0;
            var result = [];
            var key;
            for (key in O)
                if (key != IE_PROTO) has(O, key) && result.push(key);
            while (names.length > i)
                if (has(O, key = names[i++])) {
                    ~arrayIndexOf(result, key) || result.push(key)
                } return result
        }
    }, {
        "./_array-includes": 65,
        "./_has": 95,
        "./_shared-key": 153,
        "./_to-iobject": 168
    }],
    134: [function(require, module, exports) {
        var $keys = require("./_object-keys-internal");
        var enumBugKeys = require("./_enum-bug-keys");
        module.exports = Object.keys || function keys(O) {
            return $keys(O, enumBugKeys)
        }
    }, {
        "./_enum-bug-keys": 85,
        "./_object-keys-internal": 133
    }],
    135: [function(require, module, exports) {
        arguments[4][50][0].apply(exports, arguments)
    }, {
        dup: 50
    }],
    136: [function(require, module, exports) {
        arguments[4][51][0].apply(exports, arguments)
    }, {
        "./_core": 77,
        "./_export": 87,
        "./_fails": 89,
        dup: 51
    }],
    137: [function(require, module, exports) {
        var getKeys = require("./_object-keys");
        var toIObject = require("./_to-iobject");
        var isEnum = require("./_object-pie").f;
        module.exports = function(isEntries) {
            return function(it) {
                var O = toIObject(it);
                var keys = getKeys(O);
                var length = keys.length;
                var i = 0;
                var result = [];
                var key;
                while (length > i)
                    if (isEnum.call(O, key = keys[i++])) {
                        result.push(isEntries ? [key, O[key]] : O[key])
                    } return result
            }
        }
    }, {
        "./_object-keys": 134,
        "./_object-pie": 135,
        "./_to-iobject": 168
    }],
    138: [function(require, module, exports) {
        var gOPN = require("./_object-gopn");
        var gOPS = require("./_object-gops");
        var anObject = require("./_an-object");
        var Reflect = require("./_global").Reflect;
        module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
            var keys = gOPN.f(anObject(it));
            var getSymbols = gOPS.f;
            return getSymbols ? keys.concat(getSymbols(it)) : keys
        }
    }, {
        "./_an-object": 61,
        "./_global": 94,
        "./_object-gopn": 130,
        "./_object-gops": 131
    }],
    139: [function(require, module, exports) {
        var $parseFloat = require("./_global").parseFloat;
        var $trim = require("./_string-trim").trim;
        module.exports = 1 / $parseFloat(require("./_string-ws") + "-0") !== -Infinity ? function parseFloat(str) {
            var string = $trim(String(str), 3);
            var result = $parseFloat(string);
            return result === 0 && string.charAt(0) == "-" ? -0 : result
        } : $parseFloat
    }, {
        "./_global": 94,
        "./_string-trim": 162,
        "./_string-ws": 163
    }],
    140: [function(require, module, exports) {
        var $parseInt = require("./_global").parseInt;
        var $trim = require("./_string-trim").trim;
        var ws = require("./_string-ws");
        var hex = /^[-+]?0[xX]/;
        module.exports = $parseInt(ws + "08") !== 8 || $parseInt(ws + "0x16") !== 22 ? function parseInt(str, radix) {
            var string = $trim(String(str), 3);
            return $parseInt(string, radix >>> 0 || (hex.test(string) ? 16 : 10))
        } : $parseInt
    }, {
        "./_global": 94,
        "./_string-trim": 162,
        "./_string-ws": 163
    }],
    141: [function(require, module, exports) {
        module.exports = function(exec) {
            try {
                return {
                    e: false,
                    v: exec()
                }
            } catch (e) {
                return {
                    e: true,
                    v: e
                }
            }
        }
    }, {}],
    142: [function(require, module, exports) {
        var anObject = require("./_an-object");
        var isObject = require("./_is-object");
        var newPromiseCapability = require("./_new-promise-capability");
        module.exports = function(C, x) {
            anObject(C);
            if (isObject(x) && x.constructor === C) return x;
            var promiseCapability = newPromiseCapability.f(C);
            var resolve = promiseCapability.resolve;
            resolve(x);
            return promiseCapability.promise
        }
    }, {
        "./_an-object": 61,
        "./_is-object": 105,
        "./_new-promise-capability": 122
    }],
    143: [function(require, module, exports) {
        arguments[4][52][0].apply(exports, arguments)
    }, {
        dup: 52
    }],
    144: [function(require, module, exports) {
        var redefine = require("./_redefine");
        module.exports = function(target, src, safe) {
            for (var key in src) redefine(target, key, src[key], safe);
            return target
        }
    }, {
        "./_redefine": 145
    }],
    145: [function(require, module, exports) {
        var global = require("./_global");
        var hide = require("./_hide");
        var has = require("./_has");
        var SRC = require("./_uid")("src");
        var TO_STRING = "toString";
        var $toString = Function[TO_STRING];
        var TPL = ("" + $toString).split(TO_STRING);
        require("./_core").inspectSource = function(it) {
            return $toString.call(it)
        };
        (module.exports = function(O, key, val, safe) {
            var isFunction = typeof val == "function";
            if (isFunction) has(val, "name") || hide(val, "name", key);
            if (O[key] === val) return;
            if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? "" + O[key] : TPL.join(String(key)));
            if (O === global) {
                O[key] = val
            } else if (!safe) {
                delete O[key];
                hide(O, key, val)
            } else if (O[key]) {
                O[key] = val
            } else {
                hide(O, key, val)
            }
        })(Function.prototype, TO_STRING, function toString() {
            return typeof this == "function" && this[SRC] || $toString.call(this)
        })
    }, {
        "./_core": 77,
        "./_global": 94,
        "./_has": 95,
        "./_hide": 96,
        "./_uid": 175
    }],
    146: [function(require, module, exports) {
        module.exports = function(regExp, replace) {
            var replacer = replace === Object(replace) ? function(part) {
                return replace[part]
            } : replace;
            return function(it) {
                return String(it).replace(regExp, replacer)
            }
        }
    }, {}],
    147: [function(require, module, exports) {
        module.exports = Object.is || function is(x, y) {
            return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y
        }
    }, {}],
    148: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var aFunction = require("./_a-function");
        var ctx = require("./_ctx");
        var forOf = require("./_for-of");
        module.exports = function(COLLECTION) {
            $export($export.S, COLLECTION, {
                from: function from(source) {
                    var mapFn = arguments[1];
                    var mapping, A, n, cb;
                    aFunction(this);
                    mapping = mapFn !== undefined;
                    if (mapping) aFunction(mapFn);
                    if (source == undefined) return new this;
                    A = [];
                    if (mapping) {
                        n = 0;
                        cb = ctx(mapFn, arguments[2], 2);
                        forOf(source, false, function(nextItem) {
                            A.push(cb(nextItem, n++))
                        })
                    } else {
                        forOf(source, false, A.push, A)
                    }
                    return new this(A)
                }
            })
        }
    }, {
        "./_a-function": 57,
        "./_ctx": 79,
        "./_export": 87,
        "./_for-of": 93
    }],
    149: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        module.exports = function(COLLECTION) {
            $export($export.S, COLLECTION, {
                of: function of () {
                    var length = arguments.length;
                    var A = new Array(length);
                    while (length--) A[length] = arguments[length];
                    return new this(A)
                }
            })
        }
    }, {
        "./_export": 87
    }],
    150: [function(require, module, exports) {
        var isObject = require("./_is-object");
        var anObject = require("./_an-object");
        var check = function(O, proto) {
            anObject(O);
            if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!")
        };
        module.exports = {
            set: Object.setPrototypeOf || ("__proto__" in {} ? function(test, buggy, set) {
                try {
                    set = require("./_ctx")(Function.call, require("./_object-gopd").f(Object.prototype, "__proto__").set, 2);
                    set(test, []);
                    buggy = !(test instanceof Array)
                } catch (e) {
                    buggy = true
                }
                return function setPrototypeOf(O, proto) {
                    check(O, proto);
                    if (buggy) O.__proto__ = proto;
                    else set(O, proto);
                    return O
                }
            }({}, false) : undefined),
            check: check
        }
    }, {
        "./_an-object": 61,
        "./_ctx": 79,
        "./_is-object": 105,
        "./_object-gopd": 128
    }],
    151: [function(require, module, exports) {
        "use strict";
        var global = require("./_global");
        var dP = require("./_object-dp");
        var DESCRIPTORS = require("./_descriptors");
        var SPECIES = require("./_wks")("species");
        module.exports = function(KEY) {
            var C = global[KEY];
            if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
                configurable: true,
                get: function() {
                    return this
                }
            })
        }
    }, {
        "./_descriptors": 83,
        "./_global": 94,
        "./_object-dp": 125,
        "./_wks": 180
    }],
    152: [function(require, module, exports) {
        var def = require("./_object-dp").f;
        var has = require("./_has");
        var TAG = require("./_wks")("toStringTag");
        module.exports = function(it, tag, stat) {
            if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
                configurable: true,
                value: tag
            })
        }
    }, {
        "./_has": 95,
        "./_object-dp": 125,
        "./_wks": 180
    }],
    153: [function(require, module, exports) {
        var shared = require("./_shared")("keys");
        var uid = require("./_uid");
        module.exports = function(key) {
            return shared[key] || (shared[key] = uid(key))
        }
    }, {
        "./_shared": 154,
        "./_uid": 175
    }],
    154: [function(require, module, exports) {
        var core = require("./_core");
        var global = require("./_global");
        var SHARED = "__core-js_shared__";
        var store = global[SHARED] || (global[SHARED] = {});
        (module.exports = function(key, value) {
            return store[key] || (store[key] = value !== undefined ? value : {})
        })("versions", []).push({
            version: core.version,
            mode: require("./_library") ? "pure" : "global",
            copyright: "© 2018 Denis Pushkarev (zloirock.ru)"
        })
    }, {
        "./_core": 77,
        "./_global": 94,
        "./_library": 113
    }],
    155: [function(require, module, exports) {
        var anObject = require("./_an-object");
        var aFunction = require("./_a-function");
        var SPECIES = require("./_wks")("species");
        module.exports = function(O, D) {
            var C = anObject(O).constructor;
            var S;
            return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S)
        }
    }, {
        "./_a-function": 57,
        "./_an-object": 61,
        "./_wks": 180
    }],
    156: [function(require, module, exports) {
        "use strict";
        var fails = require("./_fails");
        module.exports = function(method, arg) {
            return !!method && fails(function() {
                arg ? method.call(null, function() {}, 1) : method.call(null)
            })
        }
    }, {
        "./_fails": 89
    }],
    157: [function(require, module, exports) {
        var toInteger = require("./_to-integer");
        var defined = require("./_defined");
        module.exports = function(TO_STRING) {
            return function(that, pos) {
                var s = String(defined(that));
                var i = toInteger(pos);
                var l = s.length;
                var a, b;
                if (i < 0 || i >= l) return TO_STRING ? "" : undefined;
                a = s.charCodeAt(i);
                return a < 55296 || a > 56319 || i + 1 === l || (b = s.charCodeAt(i + 1)) < 56320 || b > 57343 ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 55296 << 10) + (b - 56320) + 65536
            }
        }
    }, {
        "./_defined": 82,
        "./_to-integer": 167
    }],
    158: [function(require, module, exports) {
        var isRegExp = require("./_is-regexp");
        var defined = require("./_defined");
        module.exports = function(that, searchString, NAME) {
            if (isRegExp(searchString)) throw TypeError("String#" + NAME + " doesn't accept regex!");
            return String(defined(that))
        }
    }, {
        "./_defined": 82,
        "./_is-regexp": 106
    }],
    159: [function(require, module, exports) {
        var $export = require("./_export");
        var fails = require("./_fails");
        var defined = require("./_defined");
        var quot = /"/g;
        var createHTML = function(string, tag, attribute, value) {
            var S = String(defined(string));
            var p1 = "<" + tag;
            if (attribute !== "") p1 += " " + attribute + '="' + String(value).replace(quot, "&quot;") + '"';
            return p1 + ">" + S + "</" + tag + ">"
        };
        module.exports = function(NAME, exec) {
            var O = {};
            O[NAME] = exec(createHTML);
            $export($export.P + $export.F * fails(function() {
                var test = "" [NAME]('"');
                return test !== test.toLowerCase() || test.split('"').length > 3
            }), "String", O)
        }
    }, {
        "./_defined": 82,
        "./_export": 87,
        "./_fails": 89
    }],
    160: [function(require, module, exports) {
        var toLength = require("./_to-length");
        var repeat = require("./_string-repeat");
        var defined = require("./_defined");
        module.exports = function(that, maxLength, fillString, left) {
            var S = String(defined(that));
            var stringLength = S.length;
            var fillStr = fillString === undefined ? " " : String(fillString);
            var intMaxLength = toLength(maxLength);
            if (intMaxLength <= stringLength || fillStr == "") return S;
            var fillLen = intMaxLength - stringLength;
            var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
            if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
            return left ? stringFiller + S : S + stringFiller
        }
    }, {
        "./_defined": 82,
        "./_string-repeat": 161,
        "./_to-length": 169
    }],
    161: [function(require, module, exports) {
        "use strict";
        var toInteger = require("./_to-integer");
        var defined = require("./_defined");
        module.exports = function repeat(count) {
            var str = String(defined(this));
            var res = "";
            var n = toInteger(count);
            if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
            for (; n > 0;
                (n >>>= 1) && (str += str))
                if (n & 1) res += str;
            return res
        }
    }, {
        "./_defined": 82,
        "./_to-integer": 167
    }],
    162: [function(require, module, exports) {
        var $export = require("./_export");
        var defined = require("./_defined");
        var fails = require("./_fails");
        var spaces = require("./_string-ws");
        var space = "[" + spaces + "]";
        var non = "​";
        var ltrim = RegExp("^" + space + space + "*");
        var rtrim = RegExp(space + space + "*$");
        var exporter = function(KEY, exec, ALIAS) {
            var exp = {};
            var FORCE = fails(function() {
                return !!spaces[KEY]() || non[KEY]() != non
            });
            var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
            if (ALIAS) exp[ALIAS] = fn;
            $export($export.P + $export.F * FORCE, "String", exp)
        };
        var trim = exporter.trim = function(string, TYPE) {
            string = String(defined(string));
            if (TYPE & 1) string = string.replace(ltrim, "");
            if (TYPE & 2) string = string.replace(rtrim, "");
            return string
        };
        module.exports = exporter
    }, {
        "./_defined": 82,
        "./_export": 87,
        "./_fails": 89,
        "./_string-ws": 163
    }],
    163: [function(require, module, exports) {
        module.exports = "\t\n\v\f\r   ᠎    " + "         　\u2028\u2029\ufeff"
    }, {}],
    164: [function(require, module, exports) {
        var ctx = require("./_ctx");
        var invoke = require("./_invoke");
        var html = require("./_html");
        var cel = require("./_dom-create");
        var global = require("./_global");
        var process = global.process;
        var setTask = global.setImmediate;
        var clearTask = global.clearImmediate;
        var MessageChannel = global.MessageChannel;
        var Dispatch = global.Dispatch;
        var counter = 0;
        var queue = {};
        var ONREADYSTATECHANGE = "onreadystatechange";
        var defer, channel, port;
        var run = function() {
            var id = +this;
            if (queue.hasOwnProperty(id)) {
                var fn = queue[id];
                delete queue[id];
                fn()
            }
        };
        var listener = function(event) {
            run.call(event.data)
        };
        if (!setTask || !clearTask) {
            setTask = function setImmediate(fn) {
                var args = [];
                var i = 1;
                while (arguments.length > i) args.push(arguments[i++]);
                queue[++counter] = function() {
                    invoke(typeof fn == "function" ? fn : Function(fn), args)
                };
                defer(counter);
                return counter
            };
            clearTask = function clearImmediate(id) {
                delete queue[id]
            };
            if (require("./_cof")(process) == "process") {
                defer = function(id) {
                    process.nextTick(ctx(run, id, 1))
                }
            } else if (Dispatch && Dispatch.now) {
                defer = function(id) {
                    Dispatch.now(ctx(run, id, 1))
                }
            } else if (MessageChannel) {
                channel = new MessageChannel;
                port = channel.port2;
                channel.port1.onmessage = listener;
                defer = ctx(port.postMessage, port, 1)
            } else if (global.addEventListener && typeof postMessage == "function" && !global.importScripts) {
                defer = function(id) {
                    global.postMessage(id + "", "*")
                };
                global.addEventListener("message", listener, false)
            } else if (ONREADYSTATECHANGE in cel("script")) {
                defer = function(id) {
                    html.appendChild(cel("script"))[ONREADYSTATECHANGE] = function() {
                        html.removeChild(this);
                        run.call(id)
                    }
                }
            } else {
                defer = function(id) {
                    setTimeout(ctx(run, id, 1), 0)
                }
            }
        }
        module.exports = {
            set: setTask,
            clear: clearTask
        }
    }, {
        "./_cof": 72,
        "./_ctx": 79,
        "./_dom-create": 84,
        "./_global": 94,
        "./_html": 97,
        "./_invoke": 100
    }],
    165: [function(require, module, exports) {
        var toInteger = require("./_to-integer");
        var max = Math.max;
        var min = Math.min;
        module.exports = function(index, length) {
            index = toInteger(index);
            return index < 0 ? max(index + length, 0) : min(index, length)
        }
    }, {
        "./_to-integer": 167
    }],
    166: [function(require, module, exports) {
        var toInteger = require("./_to-integer");
        var toLength = require("./_to-length");
        module.exports = function(it) {
            if (it === undefined) return 0;
            var number = toInteger(it);
            var length = toLength(number);
            if (number !== length) throw RangeError("Wrong length!");
            return length
        }
    }, {
        "./_to-integer": 167,
        "./_to-length": 169
    }],
    167: [function(require, module, exports) {
        var ceil = Math.ceil;
        var floor = Math.floor;
        module.exports = function(it) {
            return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it)
        }
    }, {}],
    168: [function(require, module, exports) {
        arguments[4][53][0].apply(exports, arguments)
    }, {
        "./_defined": 82,
        "./_iobject": 101,
        dup: 53
    }],
    169: [function(require, module, exports) {
        var toInteger = require("./_to-integer");
        var min = Math.min;
        module.exports = function(it) {
            return it > 0 ? min(toInteger(it), 9007199254740991) : 0
        }
    }, {
        "./_to-integer": 167
    }],
    170: [function(require, module, exports) {
        var defined = require("./_defined");
        module.exports = function(it) {
            return Object(defined(it))
        }
    }, {
        "./_defined": 82
    }],
    171: [function(require, module, exports) {
        arguments[4][54][0].apply(exports, arguments)
    }, {
        "./_is-object": 105,
        dup: 54
    }],
    172: [function(require, module, exports) {
        "use strict";
        if (require("./_descriptors")) {
            var LIBRARY = require("./_library");
            var global = require("./_global");
            var fails = require("./_fails");
            var $export = require("./_export");
            var $typed = require("./_typed");
            var $buffer = require("./_typed-buffer");
            var ctx = require("./_ctx");
            var anInstance = require("./_an-instance");
            var propertyDesc = require("./_property-desc");
            var hide = require("./_hide");
            var redefineAll = require("./_redefine-all");
            var toInteger = require("./_to-integer");
            var toLength = require("./_to-length");
            var toIndex = require("./_to-index");
            var toAbsoluteIndex = require("./_to-absolute-index");
            var toPrimitive = require("./_to-primitive");
            var has = require("./_has");
            var classof = require("./_classof");
            var isObject = require("./_is-object");
            var toObject = require("./_to-object");
            var isArrayIter = require("./_is-array-iter");
            var create = require("./_object-create");
            var getPrototypeOf = require("./_object-gpo");
            var gOPN = require("./_object-gopn").f;
            var getIterFn = require("./core.get-iterator-method");
            var uid = require("./_uid");
            var wks = require("./_wks");
            var createArrayMethod = require("./_array-methods");
            var createArrayIncludes = require("./_array-includes");
            var speciesConstructor = require("./_species-constructor");
            var ArrayIterators = require("./es6.array.iterator");
            var Iterators = require("./_iterators");
            var $iterDetect = require("./_iter-detect");
            var setSpecies = require("./_set-species");
            var arrayFill = require("./_array-fill");
            var arrayCopyWithin = require("./_array-copy-within");
            var $DP = require("./_object-dp");
            var $GOPD = require("./_object-gopd");
            var dP = $DP.f;
            var gOPD = $GOPD.f;
            var RangeError = global.RangeError;
            var TypeError = global.TypeError;
            var Uint8Array = global.Uint8Array;
            var ARRAY_BUFFER = "ArrayBuffer";
            var SHARED_BUFFER = "Shared" + ARRAY_BUFFER;
            var BYTES_PER_ELEMENT = "BYTES_PER_ELEMENT";
            var PROTOTYPE = "prototype";
            var ArrayProto = Array[PROTOTYPE];
            var $ArrayBuffer = $buffer.ArrayBuffer;
            var $DataView = $buffer.DataView;
            var arrayForEach = createArrayMethod(0);
            var arrayFilter = createArrayMethod(2);
            var arraySome = createArrayMethod(3);
            var arrayEvery = createArrayMethod(4);
            var arrayFind = createArrayMethod(5);
            var arrayFindIndex = createArrayMethod(6);
            var arrayIncludes = createArrayIncludes(true);
            var arrayIndexOf = createArrayIncludes(false);
            var arrayValues = ArrayIterators.values;
            var arrayKeys = ArrayIterators.keys;
            var arrayEntries = ArrayIterators.entries;
            var arrayLastIndexOf = ArrayProto.lastIndexOf;
            var arrayReduce = ArrayProto.reduce;
            var arrayReduceRight = ArrayProto.reduceRight;
            var arrayJoin = ArrayProto.join;
            var arraySort = ArrayProto.sort;
            var arraySlice = ArrayProto.slice;
            var arrayToString = ArrayProto.toString;
            var arrayToLocaleString = ArrayProto.toLocaleString;
            var ITERATOR = wks("iterator");
            var TAG = wks("toStringTag");
            var TYPED_CONSTRUCTOR = uid("typed_constructor");
            var DEF_CONSTRUCTOR = uid("def_constructor");
            var ALL_CONSTRUCTORS = $typed.CONSTR;
            var TYPED_ARRAY = $typed.TYPED;
            var VIEW = $typed.VIEW;
            var WRONG_LENGTH = "Wrong length!";
            var $map = createArrayMethod(1, function(O, length) {
                return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length)
            });
            var LITTLE_ENDIAN = fails(function() {
                return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1
            });
            var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function() {
                new Uint8Array(1).set({})
            });
            var toOffset = function(it, BYTES) {
                var offset = toInteger(it);
                if (offset < 0 || offset % BYTES) throw RangeError("Wrong offset!");
                return offset
            };
            var validate = function(it) {
                if (isObject(it) && TYPED_ARRAY in it) return it;
                throw TypeError(it + " is not a typed array!")
            };
            var allocate = function(C, length) {
                if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
                    throw TypeError("It is not a typed array constructor!")
                }
                return new C(length)
            };
            var speciesFromList = function(O, list) {
                return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list)
            };
            var fromList = function(C, list) {
                var index = 0;
                var length = list.length;
                var result = allocate(C, length);
                while (length > index) result[index] = list[index++];
                return result
            };
            var addGetter = function(it, key, internal) {
                dP(it, key, {
                    get: function() {
                        return this._d[internal]
                    }
                })
            };
            var $from = function from(source) {
                var O = toObject(source);
                var aLen = arguments.length;
                var mapfn = aLen > 1 ? arguments[1] : undefined;
                var mapping = mapfn !== undefined;
                var iterFn = getIterFn(O);
                var i, length, values, result, step, iterator;
                if (iterFn != undefined && !isArrayIter(iterFn)) {
                    for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
                        values.push(step.value)
                    }
                    O = values
                }
                if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
                for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
                    result[i] = mapping ? mapfn(O[i], i) : O[i]
                }
                return result
            };
            var $of = function of () {
                var index = 0;
                var length = arguments.length;
                var result = allocate(this, length);
                while (length > index) result[index] = arguments[index++];
                return result
            };
            var TO_LOCALE_BUG = !!Uint8Array && fails(function() {
                arrayToLocaleString.call(new Uint8Array(1))
            });
            var $toLocaleString = function toLocaleString() {
                return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments)
            };
            var proto = {
                copyWithin: function copyWithin(target, start) {
                    return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined)
                },
                every: function every(callbackfn) {
                    return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined)
                },
                fill: function fill(value) {
                    return arrayFill.apply(validate(this), arguments)
                },
                filter: function filter(callbackfn) {
                    return speciesFromList(this, arrayFilter(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined))
                },
                find: function find(predicate) {
                    return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined)
                },
                findIndex: function findIndex(predicate) {
                    return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined)
                },
                forEach: function forEach(callbackfn) {
                    arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined)
                },
                indexOf: function indexOf(searchElement) {
                    return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined)
                },
                includes: function includes(searchElement) {
                    return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined)
                },
                join: function join(separator) {
                    return arrayJoin.apply(validate(this), arguments)
                },
                lastIndexOf: function lastIndexOf(searchElement) {
                    return arrayLastIndexOf.apply(validate(this), arguments)
                },
                map: function map(mapfn) {
                    return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined)
                },
                reduce: function reduce(callbackfn) {
                    return arrayReduce.apply(validate(this), arguments)
                },
                reduceRight: function reduceRight(callbackfn) {
                    return arrayReduceRight.apply(validate(this), arguments)
                },
                reverse: function reverse() {
                    var that = this;
                    var length = validate(that).length;
                    var middle = Math.floor(length / 2);
                    var index = 0;
                    var value;
                    while (index < middle) {
                        value = that[index];
                        that[index++] = that[--length];
                        that[length] = value
                    }
                    return that
                },
                some: function some(callbackfn) {
                    return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined)
                },
                sort: function sort(comparefn) {
                    return arraySort.call(validate(this), comparefn)
                },
                subarray: function subarray(begin, end) {
                    var O = validate(this);
                    var length = O.length;
                    var $begin = toAbsoluteIndex(begin, length);
                    return new(speciesConstructor(O, O[DEF_CONSTRUCTOR]))(O.buffer, O.byteOffset + $begin * O.BYTES_PER_ELEMENT, toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin))
                }
            };
            var $slice = function slice(start, end) {
                return speciesFromList(this, arraySlice.call(validate(this), start, end))
            };
            var $set = function set(arrayLike) {
                validate(this);
                var offset = toOffset(arguments[1], 1);
                var length = this.length;
                var src = toObject(arrayLike);
                var len = toLength(src.length);
                var index = 0;
                if (len + offset > length) throw RangeError(WRONG_LENGTH);
                while (index < len) this[offset + index] = src[index++]
            };
            var $iterators = {
                entries: function entries() {
                    return arrayEntries.call(validate(this))
                },
                keys: function keys() {
                    return arrayKeys.call(validate(this))
                },
                values: function values() {
                    return arrayValues.call(validate(this))
                }
            };
            var isTAIndex = function(target, key) {
                return isObject(target) && target[TYPED_ARRAY] && typeof key != "symbol" && key in target && String(+key) == String(key)
            };
            var $getDesc = function getOwnPropertyDescriptor(target, key) {
                return isTAIndex(target, key = toPrimitive(key, true)) ? propertyDesc(2, target[key]) : gOPD(target, key)
            };
            var $setDesc = function defineProperty(target, key, desc) {
                if (isTAIndex(target, key = toPrimitive(key, true)) && isObject(desc) && has(desc, "value") && !has(desc, "get") && !has(desc, "set") && !desc.configurable && (!has(desc, "writable") || desc.writable) && (!has(desc, "enumerable") || desc.enumerable)) {
                    target[key] = desc.value;
                    return target
                }
                return dP(target, key, desc)
            };
            if (!ALL_CONSTRUCTORS) {
                $GOPD.f = $getDesc;
                $DP.f = $setDesc
            }
            $export($export.S + $export.F * !ALL_CONSTRUCTORS, "Object", {
                getOwnPropertyDescriptor: $getDesc,
                defineProperty: $setDesc
            });
            if (fails(function() {
                    arrayToString.call({})
                })) {
                arrayToString = arrayToLocaleString = function toString() {
                    return arrayJoin.call(this)
                }
            }
            var $TypedArrayPrototype$ = redefineAll({}, proto);
            redefineAll($TypedArrayPrototype$, $iterators);
            hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
            redefineAll($TypedArrayPrototype$, {
                slice: $slice,
                set: $set,
                constructor: function() {},
                toString: arrayToString,
                toLocaleString: $toLocaleString
            });
            addGetter($TypedArrayPrototype$, "buffer", "b");
            addGetter($TypedArrayPrototype$, "byteOffset", "o");
            addGetter($TypedArrayPrototype$, "byteLength", "l");
            addGetter($TypedArrayPrototype$, "length", "e");
            dP($TypedArrayPrototype$, TAG, {
                get: function() {
                    return this[TYPED_ARRAY]
                }
            });
            module.exports = function(KEY, BYTES, wrapper, CLAMPED) {
                CLAMPED = !!CLAMPED;
                var NAME = KEY + (CLAMPED ? "Clamped" : "") + "Array";
                var GETTER = "get" + KEY;
                var SETTER = "set" + KEY;
                var TypedArray = global[NAME];
                var Base = TypedArray || {};
                var TAC = TypedArray && getPrototypeOf(TypedArray);
                var FORCED = !TypedArray || !$typed.ABV;
                var O = {};
                var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
                var getter = function(that, index) {
                    var data = that._d;
                    return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN)
                };
                var setter = function(that, index, value) {
                    var data = that._d;
                    if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 255 ? 255 : value & 255;
                    data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN)
                };
                var addElement = function(that, index) {
                    dP(that, index, {
                        get: function() {
                            return getter(this, index)
                        },
                        set: function(value) {
                            return setter(this, index, value)
                        },
                        enumerable: true
                    })
                };
                if (FORCED) {
                    TypedArray = wrapper(function(that, data, $offset, $length) {
                        anInstance(that, TypedArray, NAME, "_d");
                        var index = 0;
                        var offset = 0;
                        var buffer, byteLength, length, klass;
                        if (!isObject(data)) {
                            length = toIndex(data);
                            byteLength = length * BYTES;
                            buffer = new $ArrayBuffer(byteLength)
                        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
                            buffer = data;
                            offset = toOffset($offset, BYTES);
                            var $len = data.byteLength;
                            if ($length === undefined) {
                                if ($len % BYTES) throw RangeError(WRONG_LENGTH);
                                byteLength = $len - offset;
                                if (byteLength < 0) throw RangeError(WRONG_LENGTH)
                            } else {
                                byteLength = toLength($length) * BYTES;
                                if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH)
                            }
                            length = byteLength / BYTES
                        } else if (TYPED_ARRAY in data) {
                            return fromList(TypedArray, data)
                        } else {
                            return $from.call(TypedArray, data)
                        }
                        hide(that, "_d", {
                            b: buffer,
                            o: offset,
                            l: byteLength,
                            e: length,
                            v: new $DataView(buffer)
                        });
                        while (index < length) addElement(that, index++)
                    });
                    TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
                    hide(TypedArrayPrototype, "constructor", TypedArray)
                } else if (!fails(function() {
                        TypedArray(1)
                    }) || !fails(function() {
                        new TypedArray(-1)
                    }) || !$iterDetect(function(iter) {
                        new TypedArray;
                        new TypedArray(null);
                        new TypedArray(1.5);
                        new TypedArray(iter)
                    }, true)) {
                    TypedArray = wrapper(function(that, data, $offset, $length) {
                        anInstance(that, TypedArray, NAME);
                        var klass;
                        if (!isObject(data)) return new Base(toIndex(data));
                        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
                            return $length !== undefined ? new Base(data, toOffset($offset, BYTES), $length) : $offset !== undefined ? new Base(data, toOffset($offset, BYTES)) : new Base(data)
                        }
                        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
                        return $from.call(TypedArray, data)
                    });
                    arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function(key) {
                        if (!(key in TypedArray)) hide(TypedArray, key, Base[key])
                    });
                    TypedArray[PROTOTYPE] = TypedArrayPrototype;
                    if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray
                }
                var $nativeIterator = TypedArrayPrototype[ITERATOR];
                var CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == "values" || $nativeIterator.name == undefined);
                var $iterator = $iterators.values;
                hide(TypedArray, TYPED_CONSTRUCTOR, true);
                hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
                hide(TypedArrayPrototype, VIEW, true);
                hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);
                if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
                    dP(TypedArrayPrototype, TAG, {
                        get: function() {
                            return NAME
                        }
                    })
                }
                O[NAME] = TypedArray;
                $export($export.G + $export.W + $export.F * (TypedArray != Base), O);
                $export($export.S, NAME, {
                    BYTES_PER_ELEMENT: BYTES
                });
                $export($export.S + $export.F * fails(function() {
                    Base.of.call(TypedArray, 1)
                }), NAME, {
                    from: $from,
                    of: $of
                });
                if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);
                $export($export.P, NAME, proto);
                setSpecies(NAME);
                $export($export.P + $export.F * FORCED_SET, NAME, {
                    set: $set
                });
                $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);
                if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;
                $export($export.P + $export.F * fails(function() {
                    new TypedArray(1).slice()
                }), NAME, {
                    slice: $slice
                });
                $export($export.P + $export.F * (fails(function() {
                    return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString()
                }) || !fails(function() {
                    TypedArrayPrototype.toLocaleString.call([1, 2])
                })), NAME, {
                    toLocaleString: $toLocaleString
                });
                Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
                if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator)
            }
        } else module.exports = function() {}
    }, {
        "./_an-instance": 60,
        "./_array-copy-within": 62,
        "./_array-fill": 63,
        "./_array-includes": 65,
        "./_array-methods": 66,
        "./_classof": 71,
        "./_ctx": 79,
        "./_descriptors": 83,
        "./_export": 87,
        "./_fails": 89,
        "./_global": 94,
        "./_has": 95,
        "./_hide": 96,
        "./_is-array-iter": 102,
        "./_is-object": 105,
        "./_iter-detect": 110,
        "./_iterators": 112,
        "./_library": 113,
        "./_object-create": 124,
        "./_object-dp": 125,
        "./_object-gopd": 128,
        "./_object-gopn": 130,
        "./_object-gpo": 132,
        "./_property-desc": 143,
        "./_redefine-all": 144,
        "./_set-species": 151,
        "./_species-constructor": 155,
        "./_to-absolute-index": 165,
        "./_to-index": 166,
        "./_to-integer": 167,
        "./_to-length": 169,
        "./_to-object": 170,
        "./_to-primitive": 171,
        "./_typed": 174,
        "./_typed-buffer": 173,
        "./_uid": 175,
        "./_wks": 180,
        "./core.get-iterator-method": 181,
        "./es6.array.iterator": 193
    }],
    173: [function(require, module, exports) {
        "use strict";
        var global = require("./_global");
        var DESCRIPTORS = require("./_descriptors");
        var LIBRARY = require("./_library");
        var $typed = require("./_typed");
        var hide = require("./_hide");
        var redefineAll = require("./_redefine-all");
        var fails = require("./_fails");
        var anInstance = require("./_an-instance");
        var toInteger = require("./_to-integer");
        var toLength = require("./_to-length");
        var toIndex = require("./_to-index");
        var gOPN = require("./_object-gopn").f;
        var dP = require("./_object-dp").f;
        var arrayFill = require("./_array-fill");
        var setToStringTag = require("./_set-to-string-tag");
        var ARRAY_BUFFER = "ArrayBuffer";
        var DATA_VIEW = "DataView";
        var PROTOTYPE = "prototype";
        var WRONG_LENGTH = "Wrong length!";
        var WRONG_INDEX = "Wrong index!";
        var $ArrayBuffer = global[ARRAY_BUFFER];
        var $DataView = global[DATA_VIEW];
        var Math = global.Math;
        var RangeError = global.RangeError;
        var Infinity = global.Infinity;
        var BaseBuffer = $ArrayBuffer;
        var abs = Math.abs;
        var pow = Math.pow;
        var floor = Math.floor;
        var log = Math.log;
        var LN2 = Math.LN2;
        var BUFFER = "buffer";
        var BYTE_LENGTH = "byteLength";
        var BYTE_OFFSET = "byteOffset";
        var $BUFFER = DESCRIPTORS ? "_b" : BUFFER;
        var $LENGTH = DESCRIPTORS ? "_l" : BYTE_LENGTH;
        var $OFFSET = DESCRIPTORS ? "_o" : BYTE_OFFSET;

        function packIEEE754(value, mLen, nBytes) {
            var buffer = new Array(nBytes);
            var eLen = nBytes * 8 - mLen - 1;
            var eMax = (1 << eLen) - 1;
            var eBias = eMax >> 1;
            var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
            var i = 0;
            var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
            var e, m, c;
            value = abs(value);
            if (value != value || value === Infinity) {
                m = value != value ? 1 : 0;
                e = eMax
            } else {
                e = floor(log(value) / LN2);
                if (value * (c = pow(2, -e)) < 1) {
                    e--;
                    c *= 2
                }
                if (e + eBias >= 1) {
                    value += rt / c
                } else {
                    value += rt * pow(2, 1 - eBias)
                }
                if (value * c >= 2) {
                    e++;
                    c /= 2
                }
                if (e + eBias >= eMax) {
                    m = 0;
                    e = eMax
                } else if (e + eBias >= 1) {
                    m = (value * c - 1) * pow(2, mLen);
                    e = e + eBias
                } else {
                    m = value * pow(2, eBias - 1) * pow(2, mLen);
                    e = 0
                }
            }
            for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
            e = e << mLen | m;
            eLen += mLen;
            for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
            buffer[--i] |= s * 128;
            return buffer
        }

        function unpackIEEE754(buffer, mLen, nBytes) {
            var eLen = nBytes * 8 - mLen - 1;
            var eMax = (1 << eLen) - 1;
            var eBias = eMax >> 1;
            var nBits = eLen - 7;
            var i = nBytes - 1;
            var s = buffer[i--];
            var e = s & 127;
            var m;
            s >>= 7;
            for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
            m = e & (1 << -nBits) - 1;
            e >>= -nBits;
            nBits += mLen;
            for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
            if (e === 0) {
                e = 1 - eBias
            } else if (e === eMax) {
                return m ? NaN : s ? -Infinity : Infinity
            } else {
                m = m + pow(2, mLen);
                e = e - eBias
            }
            return (s ? -1 : 1) * m * pow(2, e - mLen)
        }

        function unpackI32(bytes) {
            return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0]
        }

        function packI8(it) {
            return [it & 255]
        }

        function packI16(it) {
            return [it & 255, it >> 8 & 255]
        }

        function packI32(it) {
            return [it & 255, it >> 8 & 255, it >> 16 & 255, it >> 24 & 255]
        }

        function packF64(it) {
            return packIEEE754(it, 52, 8)
        }

        function packF32(it) {
            return packIEEE754(it, 23, 4)
        }

        function addGetter(C, key, internal) {
            dP(C[PROTOTYPE], key, {
                get: function() {
                    return this[internal]
                }
            })
        }

        function get(view, bytes, index, isLittleEndian) {
            var numIndex = +index;
            var intIndex = toIndex(numIndex);
            if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
            var store = view[$BUFFER]._b;
            var start = intIndex + view[$OFFSET];
            var pack = store.slice(start, start + bytes);
            return isLittleEndian ? pack : pack.reverse()
        }

        function set(view, bytes, index, conversion, value, isLittleEndian) {
            var numIndex = +index;
            var intIndex = toIndex(numIndex);
            if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
            var store = view[$BUFFER]._b;
            var start = intIndex + view[$OFFSET];
            var pack = conversion(+value);
            for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1]
        }
        if (!$typed.ABV) {
            $ArrayBuffer = function ArrayBuffer(length) {
                anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
                var byteLength = toIndex(length);
                this._b = arrayFill.call(new Array(byteLength), 0);
                this[$LENGTH] = byteLength
            };
            $DataView = function DataView(buffer, byteOffset, byteLength) {
                anInstance(this, $DataView, DATA_VIEW);
                anInstance(buffer, $ArrayBuffer, DATA_VIEW);
                var bufferLength = buffer[$LENGTH];
                var offset = toInteger(byteOffset);
                if (offset < 0 || offset > bufferLength) throw RangeError("Wrong offset!");
                byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
                if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
                this[$BUFFER] = buffer;
                this[$OFFSET] = offset;
                this[$LENGTH] = byteLength
            };
            if (DESCRIPTORS) {
                addGetter($ArrayBuffer, BYTE_LENGTH, "_l");
                addGetter($DataView, BUFFER, "_b");
                addGetter($DataView, BYTE_LENGTH, "_l");
                addGetter($DataView, BYTE_OFFSET, "_o")
            }
            redefineAll($DataView[PROTOTYPE], {
                getInt8: function getInt8(byteOffset) {
                    return get(this, 1, byteOffset)[0] << 24 >> 24
                },
                getUint8: function getUint8(byteOffset) {
                    return get(this, 1, byteOffset)[0]
                },
                getInt16: function getInt16(byteOffset) {
                    var bytes = get(this, 2, byteOffset, arguments[1]);
                    return (bytes[1] << 8 | bytes[0]) << 16 >> 16
                },
                getUint16: function getUint16(byteOffset) {
                    var bytes = get(this, 2, byteOffset, arguments[1]);
                    return bytes[1] << 8 | bytes[0]
                },
                getInt32: function getInt32(byteOffset) {
                    return unpackI32(get(this, 4, byteOffset, arguments[1]))
                },
                getUint32: function getUint32(byteOffset) {
                    return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0
                },
                getFloat32: function getFloat32(byteOffset) {
                    return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4)
                },
                getFloat64: function getFloat64(byteOffset) {
                    return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8)
                },
                setInt8: function setInt8(byteOffset, value) {
                    set(this, 1, byteOffset, packI8, value)
                },
                setUint8: function setUint8(byteOffset, value) {
                    set(this, 1, byteOffset, packI8, value)
                },
                setInt16: function setInt16(byteOffset, value) {
                    set(this, 2, byteOffset, packI16, value, arguments[2])
                },
                setUint16: function setUint16(byteOffset, value) {
                    set(this, 2, byteOffset, packI16, value, arguments[2])
                },
                setInt32: function setInt32(byteOffset, value) {
                    set(this, 4, byteOffset, packI32, value, arguments[2])
                },
                setUint32: function setUint32(byteOffset, value) {
                    set(this, 4, byteOffset, packI32, value, arguments[2])
                },
                setFloat32: function setFloat32(byteOffset, value) {
                    set(this, 4, byteOffset, packF32, value, arguments[2])
                },
                setFloat64: function setFloat64(byteOffset, value) {
                    set(this, 8, byteOffset, packF64, value, arguments[2])
                }
            })
        } else {
            if (!fails(function() {
                    $ArrayBuffer(1)
                }) || !fails(function() {
                    new $ArrayBuffer(-1)
                }) || fails(function() {
                    new $ArrayBuffer;
                    new $ArrayBuffer(1.5);
                    new $ArrayBuffer(NaN);
                    return $ArrayBuffer.name != ARRAY_BUFFER
                })) {
                $ArrayBuffer = function ArrayBuffer(length) {
                    anInstance(this, $ArrayBuffer);
                    return new BaseBuffer(toIndex(length))
                };
                var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
                for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
                    if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key])
                }
                if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer
            }
            var view = new $DataView(new $ArrayBuffer(2));
            var $setInt8 = $DataView[PROTOTYPE].setInt8;
            view.setInt8(0, 2147483648);
            view.setInt8(1, 2147483649);
            if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
                setInt8: function setInt8(byteOffset, value) {
                    $setInt8.call(this, byteOffset, value << 24 >> 24)
                },
                setUint8: function setUint8(byteOffset, value) {
                    $setInt8.call(this, byteOffset, value << 24 >> 24)
                }
            }, true)
        }
        setToStringTag($ArrayBuffer, ARRAY_BUFFER);
        setToStringTag($DataView, DATA_VIEW);
        hide($DataView[PROTOTYPE], $typed.VIEW, true);
        exports[ARRAY_BUFFER] = $ArrayBuffer;
        exports[DATA_VIEW] = $DataView
    }, {
        "./_an-instance": 60,
        "./_array-fill": 63,
        "./_descriptors": 83,
        "./_fails": 89,
        "./_global": 94,
        "./_hide": 96,
        "./_library": 113,
        "./_object-dp": 125,
        "./_object-gopn": 130,
        "./_redefine-all": 144,
        "./_set-to-string-tag": 152,
        "./_to-index": 166,
        "./_to-integer": 167,
        "./_to-length": 169,
        "./_typed": 174
    }],
    174: [function(require, module, exports) {
        var global = require("./_global");
        var hide = require("./_hide");
        var uid = require("./_uid");
        var TYPED = uid("typed_array");
        var VIEW = uid("view");
        var ABV = !!(global.ArrayBuffer && global.DataView);
        var CONSTR = ABV;
        var i = 0;
        var l = 9;
        var Typed;
        var TypedArrayConstructors = "Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");
        while (i < l) {
            if (Typed = global[TypedArrayConstructors[i++]]) {
                hide(Typed.prototype, TYPED, true);
                hide(Typed.prototype, VIEW, true)
            } else CONSTR = false
        }
        module.exports = {
            ABV: ABV,
            CONSTR: CONSTR,
            TYPED: TYPED,
            VIEW: VIEW
        }
    }, {
        "./_global": 94,
        "./_hide": 96,
        "./_uid": 175
    }],
    175: [function(require, module, exports) {
        var id = 0;
        var px = Math.random();
        module.exports = function(key) {
            return "Symbol(".concat(key === undefined ? "" : key, ")_", (++id + px).toString(36))
        }
    }, {}],
    176: [function(require, module, exports) {
        var global = require("./_global");
        var navigator = global.navigator;
        module.exports = navigator && navigator.userAgent || ""
    }, {
        "./_global": 94
    }],
    177: [function(require, module, exports) {
        var isObject = require("./_is-object");
        module.exports = function(it, TYPE) {
            if (!isObject(it) || it._t !== TYPE) throw TypeError("Incompatible receiver, " + TYPE + " required!");
            return it
        }
    }, {
        "./_is-object": 105
    }],
    178: [function(require, module, exports) {
        var global = require("./_global");
        var core = require("./_core");
        var LIBRARY = require("./_library");
        var wksExt = require("./_wks-ext");
        var defineProperty = require("./_object-dp").f;
        module.exports = function(name) {
            var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
            if (name.charAt(0) != "_" && !(name in $Symbol)) defineProperty($Symbol, name, {
                value: wksExt.f(name)
            })
        }
    }, {
        "./_core": 77,
        "./_global": 94,
        "./_library": 113,
        "./_object-dp": 125,
        "./_wks-ext": 179
    }],
    179: [function(require, module, exports) {
        exports.f = require("./_wks")
    }, {
        "./_wks": 180
    }],
    180: [function(require, module, exports) {
        var store = require("./_shared")("wks");
        var uid = require("./_uid");
        var Symbol = require("./_global").Symbol;
        var USE_SYMBOL = typeof Symbol == "function";
        var $exports = module.exports = function(name) {
            return store[name] || (store[name] = USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)("Symbol." + name))
        };
        $exports.store = store
    }, {
        "./_global": 94,
        "./_shared": 154,
        "./_uid": 175
    }],
    181: [function(require, module, exports) {
        var classof = require("./_classof");
        var ITERATOR = require("./_wks")("iterator");
        var Iterators = require("./_iterators");
        module.exports = require("./_core").getIteratorMethod = function(it) {
            if (it != undefined) return it[ITERATOR] || it["@@iterator"] || Iterators[classof(it)]
        }
    }, {
        "./_classof": 71,
        "./_core": 77,
        "./_iterators": 112,
        "./_wks": 180
    }],
    182: [function(require, module, exports) {
        var $export = require("./_export");
        var $re = require("./_replacer")(/[\\^$*+?.()|[\]{}]/g, "\\$&");
        $export($export.S, "RegExp", {
            escape: function escape(it) {
                return $re(it)
            }
        })
    }, {
        "./_export": 87,
        "./_replacer": 146
    }],
    183: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.P, "Array", {
            copyWithin: require("./_array-copy-within")
        });
        require("./_add-to-unscopables")("copyWithin")
    }, {
        "./_add-to-unscopables": 59,
        "./_array-copy-within": 62,
        "./_export": 87
    }],
    184: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var $every = require("./_array-methods")(4);
        $export($export.P + $export.F * !require("./_strict-method")([].every, true), "Array", {
            every: function every(callbackfn) {
                return $every(this, callbackfn, arguments[1])
            }
        })
    }, {
        "./_array-methods": 66,
        "./_export": 87,
        "./_strict-method": 156
    }],
    185: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.P, "Array", {
            fill: require("./_array-fill")
        });
        require("./_add-to-unscopables")("fill")
    }, {
        "./_add-to-unscopables": 59,
        "./_array-fill": 63,
        "./_export": 87
    }],
    186: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var $filter = require("./_array-methods")(2);
        $export($export.P + $export.F * !require("./_strict-method")([].filter, true), "Array", {
            filter: function filter(callbackfn) {
                return $filter(this, callbackfn, arguments[1])
            }
        })
    }, {
        "./_array-methods": 66,
        "./_export": 87,
        "./_strict-method": 156
    }],
    187: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var $find = require("./_array-methods")(6);
        var KEY = "findIndex";
        var forced = true;
        if (KEY in []) Array(1)[KEY](function() {
            forced = false
        });
        $export($export.P + $export.F * forced, "Array", {
            findIndex: function findIndex(callbackfn) {
                return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined)
            }
        });
        require("./_add-to-unscopables")(KEY)
    }, {
        "./_add-to-unscopables": 59,
        "./_array-methods": 66,
        "./_export": 87
    }],
    188: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var $find = require("./_array-methods")(5);
        var KEY = "find";
        var forced = true;
        if (KEY in []) Array(1)[KEY](function() {
            forced = false
        });
        $export($export.P + $export.F * forced, "Array", {
            find: function find(callbackfn) {
                return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined)
            }
        });
        require("./_add-to-unscopables")(KEY)
    }, {
        "./_add-to-unscopables": 59,
        "./_array-methods": 66,
        "./_export": 87
    }],
    189: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var $forEach = require("./_array-methods")(0);
        var STRICT = require("./_strict-method")([].forEach, true);
        $export($export.P + $export.F * !STRICT, "Array", {
            forEach: function forEach(callbackfn) {
                return $forEach(this, callbackfn, arguments[1])
            }
        })
    }, {
        "./_array-methods": 66,
        "./_export": 87,
        "./_strict-method": 156
    }],
    190: [function(require, module, exports) {
        "use strict";
        var ctx = require("./_ctx");
        var $export = require("./_export");
        var toObject = require("./_to-object");
        var call = require("./_iter-call");
        var isArrayIter = require("./_is-array-iter");
        var toLength = require("./_to-length");
        var createProperty = require("./_create-property");
        var getIterFn = require("./core.get-iterator-method");
        $export($export.S + $export.F * !require("./_iter-detect")(function(iter) {
            Array.from(iter)
        }), "Array", {
            from: function from(arrayLike) {
                var O = toObject(arrayLike);
                var C = typeof this == "function" ? this : Array;
                var aLen = arguments.length;
                var mapfn = aLen > 1 ? arguments[1] : undefined;
                var mapping = mapfn !== undefined;
                var index = 0;
                var iterFn = getIterFn(O);
                var length, result, step, iterator;
                if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
                if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
                    for (iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++) {
                        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value)
                    }
                } else {
                    length = toLength(O.length);
                    for (result = new C(length); length > index; index++) {
                        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index])
                    }
                }
                result.length = index;
                return result
            }
        })
    }, {
        "./_create-property": 78,
        "./_ctx": 79,
        "./_export": 87,
        "./_is-array-iter": 102,
        "./_iter-call": 107,
        "./_iter-detect": 110,
        "./_to-length": 169,
        "./_to-object": 170,
        "./core.get-iterator-method": 181
    }],
    191: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var $indexOf = require("./_array-includes")(false);
        var $native = [].indexOf;
        var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;
        $export($export.P + $export.F * (NEGATIVE_ZERO || !require("./_strict-method")($native)), "Array", {
            indexOf: function indexOf(searchElement) {
                return NEGATIVE_ZERO ? $native.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments[1])
            }
        })
    }, {
        "./_array-includes": 65,
        "./_export": 87,
        "./_strict-method": 156
    }],
    192: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S, "Array", {
            isArray: require("./_is-array")
        })
    }, {
        "./_export": 87,
        "./_is-array": 103
    }],
    193: [function(require, module, exports) {
        "use strict";
        var addToUnscopables = require("./_add-to-unscopables");
        var step = require("./_iter-step");
        var Iterators = require("./_iterators");
        var toIObject = require("./_to-iobject");
        module.exports = require("./_iter-define")(Array, "Array", function(iterated, kind) {
            this._t = toIObject(iterated);
            this._i = 0;
            this._k = kind
        }, function() {
            var O = this._t;
            var kind = this._k;
            var index = this._i++;
            if (!O || index >= O.length) {
                this._t = undefined;
                return step(1)
            }
            if (kind == "keys") return step(0, index);
            if (kind == "values") return step(0, O[index]);
            return step(0, [index, O[index]])
        }, "values");
        Iterators.Arguments = Iterators.Array;
        addToUnscopables("keys");
        addToUnscopables("values");
        addToUnscopables("entries")
    }, {
        "./_add-to-unscopables": 59,
        "./_iter-define": 109,
        "./_iter-step": 111,
        "./_iterators": 112,
        "./_to-iobject": 168
    }],
    194: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var toIObject = require("./_to-iobject");
        var arrayJoin = [].join;
        $export($export.P + $export.F * (require("./_iobject") != Object || !require("./_strict-method")(arrayJoin)), "Array", {
            join: function join(separator) {
                return arrayJoin.call(toIObject(this), separator === undefined ? "," : separator)
            }
        })
    }, {
        "./_export": 87,
        "./_iobject": 101,
        "./_strict-method": 156,
        "./_to-iobject": 168
    }],
    195: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var toIObject = require("./_to-iobject");
        var toInteger = require("./_to-integer");
        var toLength = require("./_to-length");
        var $native = [].lastIndexOf;
        var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;
        $export($export.P + $export.F * (NEGATIVE_ZERO || !require("./_strict-method")($native)), "Array", {
            lastIndexOf: function lastIndexOf(searchElement) {
                if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
                var O = toIObject(this);
                var length = toLength(O.length);
                var index = length - 1;
                if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
                if (index < 0) index = length + index;
                for (; index >= 0; index--)
                    if (index in O)
                        if (O[index] === searchElement) return index || 0;
                return -1
            }
        })
    }, {
        "./_export": 87,
        "./_strict-method": 156,
        "./_to-integer": 167,
        "./_to-iobject": 168,
        "./_to-length": 169
    }],
    196: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var $map = require("./_array-methods")(1);
        $export($export.P + $export.F * !require("./_strict-method")([].map, true), "Array", {
            map: function map(callbackfn) {
                return $map(this, callbackfn, arguments[1])
            }
        })
    }, {
        "./_array-methods": 66,
        "./_export": 87,
        "./_strict-method": 156
    }],
    197: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var createProperty = require("./_create-property");
        $export($export.S + $export.F * require("./_fails")(function() {
            function F() {}
            return !(Array.of.call(F) instanceof F)
        }), "Array", {
            of: function of () {
                var index = 0;
                var aLen = arguments.length;
                var result = new(typeof this == "function" ? this : Array)(aLen);
                while (aLen > index) createProperty(result, index, arguments[index++]);
                result.length = aLen;
                return result
            }
        })
    }, {
        "./_create-property": 78,
        "./_export": 87,
        "./_fails": 89
    }],
    198: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var $reduce = require("./_array-reduce");
        $export($export.P + $export.F * !require("./_strict-method")([].reduceRight, true), "Array", {
            reduceRight: function reduceRight(callbackfn) {
                return $reduce(this, callbackfn, arguments.length, arguments[1], true)
            }
        })
    }, {
        "./_array-reduce": 67,
        "./_export": 87,
        "./_strict-method": 156
    }],
    199: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var $reduce = require("./_array-reduce");
        $export($export.P + $export.F * !require("./_strict-method")([].reduce, true), "Array", {
            reduce: function reduce(callbackfn) {
                return $reduce(this, callbackfn, arguments.length, arguments[1], false)
            }
        })
    }, {
        "./_array-reduce": 67,
        "./_export": 87,
        "./_strict-method": 156
    }],
    200: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var html = require("./_html");
        var cof = require("./_cof");
        var toAbsoluteIndex = require("./_to-absolute-index");
        var toLength = require("./_to-length");
        var arraySlice = [].slice;
        $export($export.P + $export.F * require("./_fails")(function() {
            if (html) arraySlice.call(html)
        }), "Array", {
            slice: function slice(begin, end) {
                var len = toLength(this.length);
                var klass = cof(this);
                end = end === undefined ? len : end;
                if (klass == "Array") return arraySlice.call(this, begin, end);
                var start = toAbsoluteIndex(begin, len);
                var upTo = toAbsoluteIndex(end, len);
                var size = toLength(upTo - start);
                var cloned = new Array(size);
                var i = 0;
                for (; i < size; i++) cloned[i] = klass == "String" ? this.charAt(start + i) : this[start + i];
                return cloned
            }
        })
    }, {
        "./_cof": 72,
        "./_export": 87,
        "./_fails": 89,
        "./_html": 97,
        "./_to-absolute-index": 165,
        "./_to-length": 169
    }],
    201: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var $some = require("./_array-methods")(3);
        $export($export.P + $export.F * !require("./_strict-method")([].some, true), "Array", {
            some: function some(callbackfn) {
                return $some(this, callbackfn, arguments[1])
            }
        })
    }, {
        "./_array-methods": 66,
        "./_export": 87,
        "./_strict-method": 156
    }],
    202: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var aFunction = require("./_a-function");
        var toObject = require("./_to-object");
        var fails = require("./_fails");
        var $sort = [].sort;
        var test = [1, 2, 3];
        $export($export.P + $export.F * (fails(function() {
            test.sort(undefined)
        }) || !fails(function() {
            test.sort(null)
        }) || !require("./_strict-method")($sort)), "Array", {
            sort: function sort(comparefn) {
                return comparefn === undefined ? $sort.call(toObject(this)) : $sort.call(toObject(this), aFunction(comparefn))
            }
        })
    }, {
        "./_a-function": 57,
        "./_export": 87,
        "./_fails": 89,
        "./_strict-method": 156,
        "./_to-object": 170
    }],
    203: [function(require, module, exports) {
        require("./_set-species")("Array")
    }, {
        "./_set-species": 151
    }],
    204: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S, "Date", {
            now: function() {
                return (new Date).getTime()
            }
        })
    }, {
        "./_export": 87
    }],
    205: [function(require, module, exports) {
        var $export = require("./_export");
        var toISOString = require("./_date-to-iso-string");
        $export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), "Date", {
            toISOString: toISOString
        })
    }, {
        "./_date-to-iso-string": 80,
        "./_export": 87
    }],
    206: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var toObject = require("./_to-object");
        var toPrimitive = require("./_to-primitive");
        $export($export.P + $export.F * require("./_fails")(function() {
            return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({
                toISOString: function() {
                    return 1
                }
            }) !== 1
        }), "Date", {
            toJSON: function toJSON(key) {
                var O = toObject(this);
                var pv = toPrimitive(O);
                return typeof pv == "number" && !isFinite(pv) ? null : O.toISOString()
            }
        })
    }, {
        "./_export": 87,
        "./_fails": 89,
        "./_to-object": 170,
        "./_to-primitive": 171
    }],
    207: [function(require, module, exports) {
        var TO_PRIMITIVE = require("./_wks")("toPrimitive");
        var proto = Date.prototype;
        if (!(TO_PRIMITIVE in proto)) require("./_hide")(proto, TO_PRIMITIVE, require("./_date-to-primitive"))
    }, {
        "./_date-to-primitive": 81,
        "./_hide": 96,
        "./_wks": 180
    }],
    208: [function(require, module, exports) {
        var DateProto = Date.prototype;
        var INVALID_DATE = "Invalid Date";
        var TO_STRING = "toString";
        var $toString = DateProto[TO_STRING];
        var getTime = DateProto.getTime;
        if (new Date(NaN) + "" != INVALID_DATE) {
            require("./_redefine")(DateProto, TO_STRING, function toString() {
                var value = getTime.call(this);
                return value === value ? $toString.call(this) : INVALID_DATE
            })
        }
    }, {
        "./_redefine": 145
    }],
    209: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.P, "Function", {
            bind: require("./_bind")
        })
    }, {
        "./_bind": 70,
        "./_export": 87
    }],
    210: [function(require, module, exports) {
        "use strict";
        var isObject = require("./_is-object");
        var getPrototypeOf = require("./_object-gpo");
        var HAS_INSTANCE = require("./_wks")("hasInstance");
        var FunctionProto = Function.prototype;
        if (!(HAS_INSTANCE in FunctionProto)) require("./_object-dp").f(FunctionProto, HAS_INSTANCE, {
            value: function(O) {
                if (typeof this != "function" || !isObject(O)) return false;
                if (!isObject(this.prototype)) return O instanceof this;
                while (O = getPrototypeOf(O))
                    if (this.prototype === O) return true;
                return false
            }
        })
    }, {
        "./_is-object": 105,
        "./_object-dp": 125,
        "./_object-gpo": 132,
        "./_wks": 180
    }],
    211: [function(require, module, exports) {
        var dP = require("./_object-dp").f;
        var FProto = Function.prototype;
        var nameRE = /^\s*function ([^ (]*)/;
        var NAME = "name";
        NAME in FProto || require("./_descriptors") && dP(FProto, NAME, {
            configurable: true,
            get: function() {
                try {
                    return ("" + this).match(nameRE)[1]
                } catch (e) {
                    return ""
                }
            }
        })
    }, {
        "./_descriptors": 83,
        "./_object-dp": 125
    }],
    212: [function(require, module, exports) {
        "use strict";
        var strong = require("./_collection-strong");
        var validate = require("./_validate-collection");
        var MAP = "Map";
        module.exports = require("./_collection")(MAP, function(get) {
            return function Map() {
                return get(this, arguments.length > 0 ? arguments[0] : undefined)
            }
        }, {
            get: function get(key) {
                var entry = strong.getEntry(validate(this, MAP), key);
                return entry && entry.v
            },
            set: function set(key, value) {
                return strong.def(validate(this, MAP), key === 0 ? 0 : key, value)
            }
        }, strong, true)
    }, {
        "./_collection": 76,
        "./_collection-strong": 73,
        "./_validate-collection": 177
    }],
    213: [function(require, module, exports) {
        var $export = require("./_export");
        var log1p = require("./_math-log1p");
        var sqrt = Math.sqrt;
        var $acosh = Math.acosh;
        $export($export.S + $export.F * !($acosh && Math.floor($acosh(Number.MAX_VALUE)) == 710 && $acosh(Infinity) == Infinity), "Math", {
            acosh: function acosh(x) {
                return (x = +x) < 1 ? NaN : x > 94906265.62425156 ? Math.log(x) + Math.LN2 : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1))
            }
        })
    }, {
        "./_export": 87,
        "./_math-log1p": 116
    }],
    214: [function(require, module, exports) {
        var $export = require("./_export");
        var $asinh = Math.asinh;

        function asinh(x) {
            return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1))
        }
        $export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), "Math", {
            asinh: asinh
        })
    }, {
        "./_export": 87
    }],
    215: [function(require, module, exports) {
        var $export = require("./_export");
        var $atanh = Math.atanh;
        $export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), "Math", {
            atanh: function atanh(x) {
                return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2
            }
        })
    }, {
        "./_export": 87
    }],
    216: [function(require, module, exports) {
        var $export = require("./_export");
        var sign = require("./_math-sign");
        $export($export.S, "Math", {
            cbrt: function cbrt(x) {
                return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3)
            }
        })
    }, {
        "./_export": 87,
        "./_math-sign": 118
    }],
    217: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S, "Math", {
            clz32: function clz32(x) {
                return (x >>>= 0) ? 31 - Math.floor(Math.log(x + .5) * Math.LOG2E) : 32
            }
        })
    }, {
        "./_export": 87
    }],
    218: [function(require, module, exports) {
        var $export = require("./_export");
        var exp = Math.exp;
        $export($export.S, "Math", {
            cosh: function cosh(x) {
                return (exp(x = +x) + exp(-x)) / 2
            }
        })
    }, {
        "./_export": 87
    }],
    219: [function(require, module, exports) {
        var $export = require("./_export");
        var $expm1 = require("./_math-expm1");
        $export($export.S + $export.F * ($expm1 != Math.expm1), "Math", {
            expm1: $expm1
        })
    }, {
        "./_export": 87,
        "./_math-expm1": 114
    }],
    220: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S, "Math", {
            fround: require("./_math-fround")
        })
    }, {
        "./_export": 87,
        "./_math-fround": 115
    }],
    221: [function(require, module, exports) {
        var $export = require("./_export");
        var abs = Math.abs;
        $export($export.S, "Math", {
            hypot: function hypot(value1, value2) {
                var sum = 0;
                var i = 0;
                var aLen = arguments.length;
                var larg = 0;
                var arg, div;
                while (i < aLen) {
                    arg = abs(arguments[i++]);
                    if (larg < arg) {
                        div = larg / arg;
                        sum = sum * div * div + 1;
                        larg = arg
                    } else if (arg > 0) {
                        div = arg / larg;
                        sum += div * div
                    } else sum += arg
                }
                return larg === Infinity ? Infinity : larg * Math.sqrt(sum)
            }
        })
    }, {
        "./_export": 87
    }],
    222: [function(require, module, exports) {
        var $export = require("./_export");
        var $imul = Math.imul;
        $export($export.S + $export.F * require("./_fails")(function() {
            return $imul(4294967295, 5) != -5 || $imul.length != 2
        }), "Math", {
            imul: function imul(x, y) {
                var UINT16 = 65535;
                var xn = +x;
                var yn = +y;
                var xl = UINT16 & xn;
                var yl = UINT16 & yn;
                return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0)
            }
        })
    }, {
        "./_export": 87,
        "./_fails": 89
    }],
    223: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S, "Math", {
            log10: function log10(x) {
                return Math.log(x) * Math.LOG10E
            }
        })
    }, {
        "./_export": 87
    }],
    224: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S, "Math", {
            log1p: require("./_math-log1p")
        })
    }, {
        "./_export": 87,
        "./_math-log1p": 116
    }],
    225: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S, "Math", {
            log2: function log2(x) {
                return Math.log(x) / Math.LN2
            }
        })
    }, {
        "./_export": 87
    }],
    226: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S, "Math", {
            sign: require("./_math-sign")
        })
    }, {
        "./_export": 87,
        "./_math-sign": 118
    }],
    227: [function(require, module, exports) {
        var $export = require("./_export");
        var expm1 = require("./_math-expm1");
        var exp = Math.exp;
        $export($export.S + $export.F * require("./_fails")(function() {
            return !Math.sinh(-2e-17) != -2e-17
        }), "Math", {
            sinh: function sinh(x) {
                return Math.abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2)
            }
        })
    }, {
        "./_export": 87,
        "./_fails": 89,
        "./_math-expm1": 114
    }],
    228: [function(require, module, exports) {
        var $export = require("./_export");
        var expm1 = require("./_math-expm1");
        var exp = Math.exp;
        $export($export.S, "Math", {
            tanh: function tanh(x) {
                var a = expm1(x = +x);
                var b = expm1(-x);
                return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x))
            }
        })
    }, {
        "./_export": 87,
        "./_math-expm1": 114
    }],
    229: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S, "Math", {
            trunc: function trunc(it) {
                return (it > 0 ? Math.floor : Math.ceil)(it)
            }
        })
    }, {
        "./_export": 87
    }],
    230: [function(require, module, exports) {
        "use strict";
        var global = require("./_global");
        var has = require("./_has");
        var cof = require("./_cof");
        var inheritIfRequired = require("./_inherit-if-required");
        var toPrimitive = require("./_to-primitive");
        var fails = require("./_fails");
        var gOPN = require("./_object-gopn").f;
        var gOPD = require("./_object-gopd").f;
        var dP = require("./_object-dp").f;
        var $trim = require("./_string-trim").trim;
        var NUMBER = "Number";
        var $Number = global[NUMBER];
        var Base = $Number;
        var proto = $Number.prototype;
        var BROKEN_COF = cof(require("./_object-create")(proto)) == NUMBER;
        var TRIM = "trim" in String.prototype;
        var toNumber = function(argument) {
            var it = toPrimitive(argument, false);
            if (typeof it == "string" && it.length > 2) {
                it = TRIM ? it.trim() : $trim(it, 3);
                var first = it.charCodeAt(0);
                var third, radix, maxCode;
                if (first === 43 || first === 45) {
                    third = it.charCodeAt(2);
                    if (third === 88 || third === 120) return NaN
                } else if (first === 48) {
                    switch (it.charCodeAt(1)) {
                        case 66:
                        case 98:
                            radix = 2;
                            maxCode = 49;
                            break;
                        case 79:
                        case 111:
                            radix = 8;
                            maxCode = 55;
                            break;
                        default:
                            return +it
                    }
                    for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
                        code = digits.charCodeAt(i);
                        if (code < 48 || code > maxCode) return NaN
                    }
                    return parseInt(digits, radix)
                }
            }
            return +it
        };
        if (!$Number(" 0o1") || !$Number("0b1") || $Number("+0x1")) {
            $Number = function Number(value) {
                var it = arguments.length < 1 ? 0 : value;
                var that = this;
                return that instanceof $Number && (BROKEN_COF ? fails(function() {
                    proto.valueOf.call(that)
                }) : cof(that) != NUMBER) ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it)
            };
            for (var keys = require("./_descriptors") ? gOPN(Base) : ("MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY," + "EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER," + "MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger").split(","), j = 0, key; keys.length > j; j++) {
                if (has(Base, key = keys[j]) && !has($Number, key)) {
                    dP($Number, key, gOPD(Base, key))
                }
            }
            $Number.prototype = proto;
            proto.constructor = $Number;
            require("./_redefine")(global, NUMBER, $Number)
        }
    }, {
        "./_cof": 72,
        "./_descriptors": 83,
        "./_fails": 89,
        "./_global": 94,
        "./_has": 95,
        "./_inherit-if-required": 99,
        "./_object-create": 124,
        "./_object-dp": 125,
        "./_object-gopd": 128,
        "./_object-gopn": 130,
        "./_redefine": 145,
        "./_string-trim": 162,
        "./_to-primitive": 171
    }],
    231: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S, "Number", {
            EPSILON: Math.pow(2, -52)
        })
    }, {
        "./_export": 87
    }],
    232: [function(require, module, exports) {
        var $export = require("./_export");
        var _isFinite = require("./_global").isFinite;
        $export($export.S, "Number", {
            isFinite: function isFinite(it) {
                return typeof it == "number" && _isFinite(it)
            }
        })
    }, {
        "./_export": 87,
        "./_global": 94
    }],
    233: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S, "Number", {
            isInteger: require("./_is-integer")
        })
    }, {
        "./_export": 87,
        "./_is-integer": 104
    }],
    234: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S, "Number", {
            isNaN: function isNaN(number) {
                return number != number
            }
        })
    }, {
        "./_export": 87
    }],
    235: [function(require, module, exports) {
        var $export = require("./_export");
        var isInteger = require("./_is-integer");
        var abs = Math.abs;
        $export($export.S, "Number", {
            isSafeInteger: function isSafeInteger(number) {
                return isInteger(number) && abs(number) <= 9007199254740991
            }
        })
    }, {
        "./_export": 87,
        "./_is-integer": 104
    }],
    236: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S, "Number", {
            MAX_SAFE_INTEGER: 9007199254740991
        })
    }, {
        "./_export": 87
    }],
    237: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S, "Number", {
            MIN_SAFE_INTEGER: -9007199254740991
        })
    }, {
        "./_export": 87
    }],
    238: [function(require, module, exports) {
        var $export = require("./_export");
        var $parseFloat = require("./_parse-float");
        $export($export.S + $export.F * (Number.parseFloat != $parseFloat), "Number", {
            parseFloat: $parseFloat
        })
    }, {
        "./_export": 87,
        "./_parse-float": 139
    }],
    239: [function(require, module, exports) {
        var $export = require("./_export");
        var $parseInt = require("./_parse-int");
        $export($export.S + $export.F * (Number.parseInt != $parseInt), "Number", {
            parseInt: $parseInt
        })
    }, {
        "./_export": 87,
        "./_parse-int": 140
    }],
    240: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var toInteger = require("./_to-integer");
        var aNumberValue = require("./_a-number-value");
        var repeat = require("./_string-repeat");
        var $toFixed = 1..toFixed;
        var floor = Math.floor;
        var data = [0, 0, 0, 0, 0, 0];
        var ERROR = "Number.toFixed: incorrect invocation!";
        var ZERO = "0";
        var multiply = function(n, c) {
            var i = -1;
            var c2 = c;
            while (++i < 6) {
                c2 += n * data[i];
                data[i] = c2 % 1e7;
                c2 = floor(c2 / 1e7)
            }
        };
        var divide = function(n) {
            var i = 6;
            var c = 0;
            while (--i >= 0) {
                c += data[i];
                data[i] = floor(c / n);
                c = c % n * 1e7
            }
        };
        var numToString = function() {
            var i = 6;
            var s = "";
            while (--i >= 0) {
                if (s !== "" || i === 0 || data[i] !== 0) {
                    var t = String(data[i]);
                    s = s === "" ? t : s + repeat.call(ZERO, 7 - t.length) + t
                }
            }
            return s
        };
        var pow = function(x, n, acc) {
            return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc)
        };
        var log = function(x) {
            var n = 0;
            var x2 = x;
            while (x2 >= 4096) {
                n += 12;
                x2 /= 4096
            }
            while (x2 >= 2) {
                n += 1;
                x2 /= 2
            }
            return n
        };
        $export($export.P + $export.F * (!!$toFixed && (8e-5.toFixed(3) !== "0.000" || .9.toFixed(0) !== "1" || 1.255.toFixed(2) !== "1.25" || (0xde0b6b3a7640080).toFixed(0) !== "1000000000000000128") || !require("./_fails")(function() {
            $toFixed.call({})
        })), "Number", {
            toFixed: function toFixed(fractionDigits) {
                var x = aNumberValue(this, ERROR);
                var f = toInteger(fractionDigits);
                var s = "";
                var m = ZERO;
                var e, z, j, k;
                if (f < 0 || f > 20) throw RangeError(ERROR);
                if (x != x) return "NaN";
                if (x <= -1e21 || x >= 1e21) return String(x);
                if (x < 0) {
                    s = "-";
                    x = -x
                }
                if (x > 1e-21) {
                    e = log(x * pow(2, 69, 1)) - 69;
                    z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
                    z *= 4503599627370496;
                    e = 52 - e;
                    if (e > 0) {
                        multiply(0, z);
                        j = f;
                        while (j >= 7) {
                            multiply(1e7, 0);
                            j -= 7
                        }
                        multiply(pow(10, j, 1), 0);
                        j = e - 1;
                        while (j >= 23) {
                            divide(1 << 23);
                            j -= 23
                        }
                        divide(1 << j);
                        multiply(1, 1);
                        divide(2);
                        m = numToString()
                    } else {
                        multiply(0, z);
                        multiply(1 << -e, 0);
                        m = numToString() + repeat.call(ZERO, f)
                    }
                }
                if (f > 0) {
                    k = m.length;
                    m = s + (k <= f ? "0." + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + "." + m.slice(k - f))
                } else {
                    m = s + m
                }
                return m
            }
        })
    }, {
        "./_a-number-value": 58,
        "./_export": 87,
        "./_fails": 89,
        "./_string-repeat": 161,
        "./_to-integer": 167
    }],
    241: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var $fails = require("./_fails");
        var aNumberValue = require("./_a-number-value");
        var $toPrecision = 1..toPrecision;
        $export($export.P + $export.F * ($fails(function() {
            return $toPrecision.call(1, undefined) !== "1"
        }) || !$fails(function() {
            $toPrecision.call({})
        })), "Number", {
            toPrecision: function toPrecision(precision) {
                var that = aNumberValue(this, "Number#toPrecision: incorrect invocation!");
                return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision)
            }
        })
    }, {
        "./_a-number-value": 58,
        "./_export": 87,
        "./_fails": 89
    }],
    242: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S + $export.F, "Object", {
            assign: require("./_object-assign")
        })
    }, {
        "./_export": 87,
        "./_object-assign": 123
    }],
    243: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S, "Object", {
            create: require("./_object-create")
        })
    }, {
        "./_export": 87,
        "./_object-create": 124
    }],
    244: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S + $export.F * !require("./_descriptors"), "Object", {
            defineProperties: require("./_object-dps")
        })
    }, {
        "./_descriptors": 83,
        "./_export": 87,
        "./_object-dps": 126
    }],
    245: [function(require, module, exports) {
        arguments[4][55][0].apply(exports, arguments)
    }, {
        "./_descriptors": 83,
        "./_export": 87,
        "./_object-dp": 125,
        dup: 55
    }],
    246: [function(require, module, exports) {
        var isObject = require("./_is-object");
        var meta = require("./_meta").onFreeze;
        require("./_object-sap")("freeze", function($freeze) {
            return function freeze(it) {
                return $freeze && isObject(it) ? $freeze(meta(it)) : it
            }
        })
    }, {
        "./_is-object": 105,
        "./_meta": 119,
        "./_object-sap": 136
    }],
    247: [function(require, module, exports) {
        arguments[4][56][0].apply(exports, arguments)
    }, {
        "./_object-gopd": 128,
        "./_object-sap": 136,
        "./_to-iobject": 168,
        dup: 56
    }],
    248: [function(require, module, exports) {
        require("./_object-sap")("getOwnPropertyNames", function() {
            return require("./_object-gopn-ext").f
        })
    }, {
        "./_object-gopn-ext": 129,
        "./_object-sap": 136
    }],
    249: [function(require, module, exports) {
        var toObject = require("./_to-object");
        var $getPrototypeOf = require("./_object-gpo");
        require("./_object-sap")("getPrototypeOf", function() {
            return function getPrototypeOf(it) {
                return $getPrototypeOf(toObject(it))
            }
        })
    }, {
        "./_object-gpo": 132,
        "./_object-sap": 136,
        "./_to-object": 170
    }],
    250: [function(require, module, exports) {
        var isObject = require("./_is-object");
        require("./_object-sap")("isExtensible", function($isExtensible) {
            return function isExtensible(it) {
                return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false
            }
        })
    }, {
        "./_is-object": 105,
        "./_object-sap": 136
    }],
    251: [function(require, module, exports) {
        var isObject = require("./_is-object");
        require("./_object-sap")("isFrozen", function($isFrozen) {
            return function isFrozen(it) {
                return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true
            }
        })
    }, {
        "./_is-object": 105,
        "./_object-sap": 136
    }],
    252: [function(require, module, exports) {
        var isObject = require("./_is-object");
        require("./_object-sap")("isSealed", function($isSealed) {
            return function isSealed(it) {
                return isObject(it) ? $isSealed ? $isSealed(it) : false : true
            }
        })
    }, {
        "./_is-object": 105,
        "./_object-sap": 136
    }],
    253: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S, "Object", {
            is: require("./_same-value")
        })
    }, {
        "./_export": 87,
        "./_same-value": 147
    }],
    254: [function(require, module, exports) {
        var toObject = require("./_to-object");
        var $keys = require("./_object-keys");
        require("./_object-sap")("keys", function() {
            return function keys(it) {
                return $keys(toObject(it))
            }
        })
    }, {
        "./_object-keys": 134,
        "./_object-sap": 136,
        "./_to-object": 170
    }],
    255: [function(require, module, exports) {
        var isObject = require("./_is-object");
        var meta = require("./_meta").onFreeze;
        require("./_object-sap")("preventExtensions", function($preventExtensions) {
            return function preventExtensions(it) {
                return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it
            }
        })
    }, {
        "./_is-object": 105,
        "./_meta": 119,
        "./_object-sap": 136
    }],
    256: [function(require, module, exports) {
        var isObject = require("./_is-object");
        var meta = require("./_meta").onFreeze;
        require("./_object-sap")("seal", function($seal) {
            return function seal(it) {
                return $seal && isObject(it) ? $seal(meta(it)) : it
            }
        })
    }, {
        "./_is-object": 105,
        "./_meta": 119,
        "./_object-sap": 136
    }],
    257: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S, "Object", {
            setPrototypeOf: require("./_set-proto").set
        })
    }, {
        "./_export": 87,
        "./_set-proto": 150
    }],
    258: [function(require, module, exports) {
        "use strict";
        var classof = require("./_classof");
        var test = {};
        test[require("./_wks")("toStringTag")] = "z";
        if (test + "" != "[object z]") {
            require("./_redefine")(Object.prototype, "toString", function toString() {
                return "[object " + classof(this) + "]"
            }, true)
        }
    }, {
        "./_classof": 71,
        "./_redefine": 145,
        "./_wks": 180
    }],
    259: [function(require, module, exports) {
        var $export = require("./_export");
        var $parseFloat = require("./_parse-float");
        $export($export.G + $export.F * (parseFloat != $parseFloat), {
            parseFloat: $parseFloat
        })
    }, {
        "./_export": 87,
        "./_parse-float": 139
    }],
    260: [function(require, module, exports) {
        var $export = require("./_export");
        var $parseInt = require("./_parse-int");
        $export($export.G + $export.F * (parseInt != $parseInt), {
            parseInt: $parseInt
        })
    }, {
        "./_export": 87,
        "./_parse-int": 140
    }],
    261: [function(require, module, exports) {
        "use strict";
        var LIBRARY = require("./_library");
        var global = require("./_global");
        var ctx = require("./_ctx");
        var classof = require("./_classof");
        var $export = require("./_export");
        var isObject = require("./_is-object");
        var aFunction = require("./_a-function");
        var anInstance = require("./_an-instance");
        var forOf = require("./_for-of");
        var speciesConstructor = require("./_species-constructor");
        var task = require("./_task").set;
        var microtask = require("./_microtask")();
        var newPromiseCapabilityModule = require("./_new-promise-capability");
        var perform = require("./_perform");
        var userAgent = require("./_user-agent");
        var promiseResolve = require("./_promise-resolve");
        var PROMISE = "Promise";
        var TypeError = global.TypeError;
        var process = global.process;
        var versions = process && process.versions;
        var v8 = versions && versions.v8 || "";
        var $Promise = global[PROMISE];
        var isNode = classof(process) == "process";
        var empty = function() {};
        var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
        var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;
        var USE_NATIVE = !! function() {
            try {
                var promise = $Promise.resolve(1);
                var FakePromise = (promise.constructor = {})[require("./_wks")("species")] = function(exec) {
                    exec(empty, empty)
                };
                return (isNode || typeof PromiseRejectionEvent == "function") && promise.then(empty) instanceof FakePromise && v8.indexOf("6.6") !== 0 && userAgent.indexOf("Chrome/66") === -1
            } catch (e) {}
        }();
        var isThenable = function(it) {
            var then;
            return isObject(it) && typeof(then = it.then) == "function" ? then : false
        };
        var notify = function(promise, isReject) {
            if (promise._n) return;
            promise._n = true;
            var chain = promise._c;
            microtask(function() {
                var value = promise._v;
                var ok = promise._s == 1;
                var i = 0;
                var run = function(reaction) {
                    var handler = ok ? reaction.ok : reaction.fail;
                    var resolve = reaction.resolve;
                    var reject = reaction.reject;
                    var domain = reaction.domain;
                    var result, then, exited;
                    try {
                        if (handler) {
                            if (!ok) {
                                if (promise._h == 2) onHandleUnhandled(promise);
                                promise._h = 1
                            }
                            if (handler === true) result = value;
                            else {
                                if (domain) domain.enter();
                                result = handler(value);
                                if (domain) {
                                    domain.exit();
                                    exited = true
                                }
                            }
                            if (result === reaction.promise) {
                                reject(TypeError("Promise-chain cycle"))
                            } else if (then = isThenable(result)) {
                                then.call(result, resolve, reject)
                            } else resolve(result)
                        } else reject(value)
                    } catch (e) {
                        if (domain && !exited) domain.exit();
                        reject(e)
                    }
                };
                while (chain.length > i) run(chain[i++]);
                promise._c = [];
                promise._n = false;
                if (isReject && !promise._h) onUnhandled(promise)
            })
        };
        var onUnhandled = function(promise) {
            task.call(global, function() {
                var value = promise._v;
                var unhandled = isUnhandled(promise);
                var result, handler, console;
                if (unhandled) {
                    result = perform(function() {
                        if (isNode) {
                            process.emit("unhandledRejection", value, promise)
                        } else if (handler = global.onunhandledrejection) {
                            handler({
                                promise: promise,
                                reason: value
                            })
                        } else if ((console = global.console) && console.error) {
                            console.error("Unhandled promise rejection", value)
                        }
                    });
                    promise._h = isNode || isUnhandled(promise) ? 2 : 1
                }
                promise._a = undefined;
                if (unhandled && result.e) throw result.v
            })
        };
        var isUnhandled = function(promise) {
            return promise._h !== 1 && (promise._a || promise._c).length === 0
        };
        var onHandleUnhandled = function(promise) {
            task.call(global, function() {
                var handler;
                if (isNode) {
                    process.emit("rejectionHandled", promise)
                } else if (handler = global.onrejectionhandled) {
                    handler({
                        promise: promise,
                        reason: promise._v
                    })
                }
            })
        };
        var $reject = function(value) {
            var promise = this;
            if (promise._d) return;
            promise._d = true;
            promise = promise._w || promise;
            promise._v = value;
            promise._s = 2;
            if (!promise._a) promise._a = promise._c.slice();
            notify(promise, true)
        };
        var $resolve = function(value) {
            var promise = this;
            var then;
            if (promise._d) return;
            promise._d = true;
            promise = promise._w || promise;
            try {
                if (promise === value) throw TypeError("Promise can't be resolved itself");
                if (then = isThenable(value)) {
                    microtask(function() {
                        var wrapper = {
                            _w: promise,
                            _d: false
                        };
                        try {
                            then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1))
                        } catch (e) {
                            $reject.call(wrapper, e)
                        }
                    })
                } else {
                    promise._v = value;
                    promise._s = 1;
                    notify(promise, false)
                }
            } catch (e) {
                $reject.call({
                    _w: promise,
                    _d: false
                }, e)
            }
        };
        if (!USE_NATIVE) {
            $Promise = function Promise(executor) {
                anInstance(this, $Promise, PROMISE, "_h");
                aFunction(executor);
                Internal.call(this);
                try {
                    executor(ctx($resolve, this, 1), ctx($reject, this, 1))
                } catch (err) {
                    $reject.call(this, err)
                }
            };
            Internal = function Promise(executor) {
                this._c = [];
                this._a = undefined;
                this._s = 0;
                this._d = false;
                this._v = undefined;
                this._h = 0;
                this._n = false
            };
            Internal.prototype = require("./_redefine-all")($Promise.prototype, {
                then: function then(onFulfilled, onRejected) {
                    var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
                    reaction.ok = typeof onFulfilled == "function" ? onFulfilled : true;
                    reaction.fail = typeof onRejected == "function" && onRejected;
                    reaction.domain = isNode ? process.domain : undefined;
                    this._c.push(reaction);
                    if (this._a) this._a.push(reaction);
                    if (this._s) notify(this, false);
                    return reaction.promise
                },
                catch: function(onRejected) {
                    return this.then(undefined, onRejected)
                }
            });
            OwnPromiseCapability = function() {
                var promise = new Internal;
                this.promise = promise;
                this.resolve = ctx($resolve, promise, 1);
                this.reject = ctx($reject, promise, 1)
            };
            newPromiseCapabilityModule.f = newPromiseCapability = function(C) {
                return C === $Promise || C === Wrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C)
            }
        }
        $export($export.G + $export.W + $export.F * !USE_NATIVE, {
            Promise: $Promise
        });
        require("./_set-to-string-tag")($Promise, PROMISE);
        require("./_set-species")(PROMISE);
        Wrapper = require("./_core")[PROMISE];
        $export($export.S + $export.F * !USE_NATIVE, PROMISE, {
            reject: function reject(r) {
                var capability = newPromiseCapability(this);
                var $$reject = capability.reject;
                $$reject(r);
                return capability.promise
            }
        });
        $export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
            resolve: function resolve(x) {
                return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x)
            }
        });
        $export($export.S + $export.F * !(USE_NATIVE && require("./_iter-detect")(function(iter) {
            $Promise.all(iter)["catch"](empty)
        })), PROMISE, {
            all: function all(iterable) {
                var C = this;
                var capability = newPromiseCapability(C);
                var resolve = capability.resolve;
                var reject = capability.reject;
                var result = perform(function() {
                    var values = [];
                    var index = 0;
                    var remaining = 1;
                    forOf(iterable, false, function(promise) {
                        var $index = index++;
                        var alreadyCalled = false;
                        values.push(undefined);
                        remaining++;
                        C.resolve(promise).then(function(value) {
                            if (alreadyCalled) return;
                            alreadyCalled = true;
                            values[$index] = value;
                            --remaining || resolve(values)
                        }, reject)
                    });
                    --remaining || resolve(values)
                });
                if (result.e) reject(result.v);
                return capability.promise
            },
            race: function race(iterable) {
                var C = this;
                var capability = newPromiseCapability(C);
                var reject = capability.reject;
                var result = perform(function() {
                    forOf(iterable, false, function(promise) {
                        C.resolve(promise).then(capability.resolve, reject)
                    })
                });
                if (result.e) reject(result.v);
                return capability.promise
            }
        })
    }, {
        "./_a-function": 57,
        "./_an-instance": 60,
        "./_classof": 71,
        "./_core": 77,
        "./_ctx": 79,
        "./_export": 87,
        "./_for-of": 93,
        "./_global": 94,
        "./_is-object": 105,
        "./_iter-detect": 110,
        "./_library": 113,
        "./_microtask": 121,
        "./_new-promise-capability": 122,
        "./_perform": 141,
        "./_promise-resolve": 142,
        "./_redefine-all": 144,
        "./_set-species": 151,
        "./_set-to-string-tag": 152,
        "./_species-constructor": 155,
        "./_task": 164,
        "./_user-agent": 176,
        "./_wks": 180
    }],
    262: [function(require, module, exports) {
        var $export = require("./_export");
        var aFunction = require("./_a-function");
        var anObject = require("./_an-object");
        var rApply = (require("./_global").Reflect || {}).apply;
        var fApply = Function.apply;
        $export($export.S + $export.F * !require("./_fails")(function() {
            rApply(function() {})
        }), "Reflect", {
            apply: function apply(target, thisArgument, argumentsList) {
                var T = aFunction(target);
                var L = anObject(argumentsList);
                return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L)
            }
        })
    }, {
        "./_a-function": 57,
        "./_an-object": 61,
        "./_export": 87,
        "./_fails": 89,
        "./_global": 94
    }],
    263: [function(require, module, exports) {
        var $export = require("./_export");
        var create = require("./_object-create");
        var aFunction = require("./_a-function");
        var anObject = require("./_an-object");
        var isObject = require("./_is-object");
        var fails = require("./_fails");
        var bind = require("./_bind");
        var rConstruct = (require("./_global").Reflect || {}).construct;
        var NEW_TARGET_BUG = fails(function() {
            function F() {}
            return !(rConstruct(function() {}, [], F) instanceof F)
        });
        var ARGS_BUG = !fails(function() {
            rConstruct(function() {})
        });
        $export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), "Reflect", {
            construct: function construct(Target, args) {
                aFunction(Target);
                anObject(args);
                var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
                if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
                if (Target == newTarget) {
                    switch (args.length) {
                        case 0:
                            return new Target;
                        case 1:
                            return new Target(args[0]);
                        case 2:
                            return new Target(args[0], args[1]);
                        case 3:
                            return new Target(args[0], args[1], args[2]);
                        case 4:
                            return new Target(args[0], args[1], args[2], args[3])
                    }
                    var $args = [null];
                    $args.push.apply($args, args);
                    return new(bind.apply(Target, $args))
                }
                var proto = newTarget.prototype;
                var instance = create(isObject(proto) ? proto : Object.prototype);
                var result = Function.apply.call(Target, instance, args);
                return isObject(result) ? result : instance
            }
        })
    }, {
        "./_a-function": 57,
        "./_an-object": 61,
        "./_bind": 70,
        "./_export": 87,
        "./_fails": 89,
        "./_global": 94,
        "./_is-object": 105,
        "./_object-create": 124
    }],
    264: [function(require, module, exports) {
        var dP = require("./_object-dp");
        var $export = require("./_export");
        var anObject = require("./_an-object");
        var toPrimitive = require("./_to-primitive");
        $export($export.S + $export.F * require("./_fails")(function() {
            Reflect.defineProperty(dP.f({}, 1, {
                value: 1
            }), 1, {
                value: 2
            })
        }), "Reflect", {
            defineProperty: function defineProperty(target, propertyKey, attributes) {
                anObject(target);
                propertyKey = toPrimitive(propertyKey, true);
                anObject(attributes);
                try {
                    dP.f(target, propertyKey, attributes);
                    return true
                } catch (e) {
                    return false
                }
            }
        })
    }, {
        "./_an-object": 61,
        "./_export": 87,
        "./_fails": 89,
        "./_object-dp": 125,
        "./_to-primitive": 171
    }],
    265: [function(require, module, exports) {
        var $export = require("./_export");
        var gOPD = require("./_object-gopd").f;
        var anObject = require("./_an-object");
        $export($export.S, "Reflect", {
            deleteProperty: function deleteProperty(target, propertyKey) {
                var desc = gOPD(anObject(target), propertyKey);
                return desc && !desc.configurable ? false : delete target[propertyKey]
            }
        })
    }, {
        "./_an-object": 61,
        "./_export": 87,
        "./_object-gopd": 128
    }],
    266: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var anObject = require("./_an-object");
        var Enumerate = function(iterated) {
            this._t = anObject(iterated);
            this._i = 0;
            var keys = this._k = [];
            var key;
            for (key in iterated) keys.push(key)
        };
        require("./_iter-create")(Enumerate, "Object", function() {
            var that = this;
            var keys = that._k;
            var key;
            do {
                if (that._i >= keys.length) return {
                    value: undefined,
                    done: true
                }
            } while (!((key = keys[that._i++]) in that._t));
            return {
                value: key,
                done: false
            }
        });
        $export($export.S, "Reflect", {
            enumerate: function enumerate(target) {
                return new Enumerate(target)
            }
        })
    }, {
        "./_an-object": 61,
        "./_export": 87,
        "./_iter-create": 108
    }],
    267: [function(require, module, exports) {
        var gOPD = require("./_object-gopd");
        var $export = require("./_export");
        var anObject = require("./_an-object");
        $export($export.S, "Reflect", {
            getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
                return gOPD.f(anObject(target), propertyKey)
            }
        })
    }, {
        "./_an-object": 61,
        "./_export": 87,
        "./_object-gopd": 128
    }],
    268: [function(require, module, exports) {
        var $export = require("./_export");
        var getProto = require("./_object-gpo");
        var anObject = require("./_an-object");
        $export($export.S, "Reflect", {
            getPrototypeOf: function getPrototypeOf(target) {
                return getProto(anObject(target))
            }
        })
    }, {
        "./_an-object": 61,
        "./_export": 87,
        "./_object-gpo": 132
    }],
    269: [function(require, module, exports) {
        var gOPD = require("./_object-gopd");
        var getPrototypeOf = require("./_object-gpo");
        var has = require("./_has");
        var $export = require("./_export");
        var isObject = require("./_is-object");
        var anObject = require("./_an-object");

        function get(target, propertyKey) {
            var receiver = arguments.length < 3 ? target : arguments[2];
            var desc, proto;
            if (anObject(target) === receiver) return target[propertyKey];
            if (desc = gOPD.f(target, propertyKey)) return has(desc, "value") ? desc.value : desc.get !== undefined ? desc.get.call(receiver) : undefined;
            if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver)
        }
        $export($export.S, "Reflect", {
            get: get
        })
    }, {
        "./_an-object": 61,
        "./_export": 87,
        "./_has": 95,
        "./_is-object": 105,
        "./_object-gopd": 128,
        "./_object-gpo": 132
    }],
    270: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S, "Reflect", {
            has: function has(target, propertyKey) {
                return propertyKey in target
            }
        })
    }, {
        "./_export": 87
    }],
    271: [function(require, module, exports) {
        var $export = require("./_export");
        var anObject = require("./_an-object");
        var $isExtensible = Object.isExtensible;
        $export($export.S, "Reflect", {
            isExtensible: function isExtensible(target) {
                anObject(target);
                return $isExtensible ? $isExtensible(target) : true
            }
        })
    }, {
        "./_an-object": 61,
        "./_export": 87
    }],
    272: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S, "Reflect", {
            ownKeys: require("./_own-keys")
        })
    }, {
        "./_export": 87,
        "./_own-keys": 138
    }],
    273: [function(require, module, exports) {
        var $export = require("./_export");
        var anObject = require("./_an-object");
        var $preventExtensions = Object.preventExtensions;
        $export($export.S, "Reflect", {
            preventExtensions: function preventExtensions(target) {
                anObject(target);
                try {
                    if ($preventExtensions) $preventExtensions(target);
                    return true
                } catch (e) {
                    return false
                }
            }
        })
    }, {
        "./_an-object": 61,
        "./_export": 87
    }],
    274: [function(require, module, exports) {
        var $export = require("./_export");
        var setProto = require("./_set-proto");
        if (setProto) $export($export.S, "Reflect", {
            setPrototypeOf: function setPrototypeOf(target, proto) {
                setProto.check(target, proto);
                try {
                    setProto.set(target, proto);
                    return true
                } catch (e) {
                    return false
                }
            }
        })
    }, {
        "./_export": 87,
        "./_set-proto": 150
    }],
    275: [function(require, module, exports) {
        var dP = require("./_object-dp");
        var gOPD = require("./_object-gopd");
        var getPrototypeOf = require("./_object-gpo");
        var has = require("./_has");
        var $export = require("./_export");
        var createDesc = require("./_property-desc");
        var anObject = require("./_an-object");
        var isObject = require("./_is-object");

        function set(target, propertyKey, V) {
            var receiver = arguments.length < 4 ? target : arguments[3];
            var ownDesc = gOPD.f(anObject(target), propertyKey);
            var existingDescriptor, proto;
            if (!ownDesc) {
                if (isObject(proto = getPrototypeOf(target))) {
                    return set(proto, propertyKey, V, receiver)
                }
                ownDesc = createDesc(0)
            }
            if (has(ownDesc, "value")) {
                if (ownDesc.writable === false || !isObject(receiver)) return false;
                if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
                    if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
                    existingDescriptor.value = V;
                    dP.f(receiver, propertyKey, existingDescriptor)
                } else dP.f(receiver, propertyKey, createDesc(0, V));
                return true
            }
            return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true)
        }
        $export($export.S, "Reflect", {
            set: set
        })
    }, {
        "./_an-object": 61,
        "./_export": 87,
        "./_has": 95,
        "./_is-object": 105,
        "./_object-dp": 125,
        "./_object-gopd": 128,
        "./_object-gpo": 132,
        "./_property-desc": 143
    }],
    276: [function(require, module, exports) {
        var global = require("./_global");
        var inheritIfRequired = require("./_inherit-if-required");
        var dP = require("./_object-dp").f;
        var gOPN = require("./_object-gopn").f;
        var isRegExp = require("./_is-regexp");
        var $flags = require("./_flags");
        var $RegExp = global.RegExp;
        var Base = $RegExp;
        var proto = $RegExp.prototype;
        var re1 = /a/g;
        var re2 = /a/g;
        var CORRECT_NEW = new $RegExp(re1) !== re1;
        if (require("./_descriptors") && (!CORRECT_NEW || require("./_fails")(function() {
                re2[require("./_wks")("match")] = false;
                return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, "i") != "/a/i"
            }))) {
            $RegExp = function RegExp(p, f) {
                var tiRE = this instanceof $RegExp;
                var piRE = isRegExp(p);
                var fiU = f === undefined;
                return !tiRE && piRE && p.constructor === $RegExp && fiU ? p : inheritIfRequired(CORRECT_NEW ? new Base(piRE && !fiU ? p.source : p, f) : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f), tiRE ? this : proto, $RegExp)
            };
            var proxy = function(key) {
                key in $RegExp || dP($RegExp, key, {
                    configurable: true,
                    get: function() {
                        return Base[key]
                    },
                    set: function(it) {
                        Base[key] = it
                    }
                })
            };
            for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
            proto.constructor = $RegExp;
            $RegExp.prototype = proto;
            require("./_redefine")(global, "RegExp", $RegExp)
        }
        require("./_set-species")("RegExp")
    }, {
        "./_descriptors": 83,
        "./_fails": 89,
        "./_flags": 91,
        "./_global": 94,
        "./_inherit-if-required": 99,
        "./_is-regexp": 106,
        "./_object-dp": 125,
        "./_object-gopn": 130,
        "./_redefine": 145,
        "./_set-species": 151,
        "./_wks": 180
    }],
    277: [function(require, module, exports) {
        if (require("./_descriptors") && /./g.flags != "g") require("./_object-dp").f(RegExp.prototype, "flags", {
            configurable: true,
            get: require("./_flags")
        })
    }, {
        "./_descriptors": 83,
        "./_flags": 91,
        "./_object-dp": 125
    }],
    278: [function(require, module, exports) {
        require("./_fix-re-wks")("match", 1, function(defined, MATCH, $match) {
            return [function match(regexp) {
                "use strict";
                var O = defined(this);
                var fn = regexp == undefined ? undefined : regexp[MATCH];
                return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O))
            }, $match]
        })
    }, {
        "./_fix-re-wks": 90
    }],
    279: [function(require, module, exports) {
        require("./_fix-re-wks")("replace", 2, function(defined, REPLACE, $replace) {
            return [function replace(searchValue, replaceValue) {
                "use strict";
                var O = defined(this);
                var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
                return fn !== undefined ? fn.call(searchValue, O, replaceValue) : $replace.call(String(O), searchValue, replaceValue)
            }, $replace]
        })
    }, {
        "./_fix-re-wks": 90
    }],
    280: [function(require, module, exports) {
        require("./_fix-re-wks")("search", 1, function(defined, SEARCH, $search) {
            return [function search(regexp) {
                "use strict";
                var O = defined(this);
                var fn = regexp == undefined ? undefined : regexp[SEARCH];
                return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O))
            }, $search]
        })
    }, {
        "./_fix-re-wks": 90
    }],
    281: [function(require, module, exports) {
        require("./_fix-re-wks")("split", 2, function(defined, SPLIT, $split) {
            "use strict";
            var isRegExp = require("./_is-regexp");
            var _split = $split;
            var $push = [].push;
            var $SPLIT = "split";
            var LENGTH = "length";
            var LAST_INDEX = "lastIndex";
            if ("abbc" [$SPLIT](/(b)*/)[1] == "c" || "test" [$SPLIT](/(?:)/, -1)[LENGTH] != 4 || "ab" [$SPLIT](/(?:ab)*/)[LENGTH] != 2 || "." [$SPLIT](/(.?)(.?)/)[LENGTH] != 4 || "." [$SPLIT](/()()/)[LENGTH] > 1 || "" [$SPLIT](/.?/)[LENGTH]) {
                var NPCG = /()??/.exec("")[1] === undefined;
                $split = function(separator, limit) {
                    var string = String(this);
                    if (separator === undefined && limit === 0) return [];
                    if (!isRegExp(separator)) return _split.call(string, separator, limit);
                    var output = [];
                    var flags = (separator.ignoreCase ? "i" : "") + (separator.multiline ? "m" : "") + (separator.unicode ? "u" : "") + (separator.sticky ? "y" : "");
                    var lastLastIndex = 0;
                    var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
                    var separatorCopy = new RegExp(separator.source, flags + "g");
                    var separator2, match, lastIndex, lastLength, i;
                    if (!NPCG) separator2 = new RegExp("^" + separatorCopy.source + "$(?!\\s)", flags);
                    while (match = separatorCopy.exec(string)) {
                        lastIndex = match.index + match[0][LENGTH];
                        if (lastIndex > lastLastIndex) {
                            output.push(string.slice(lastLastIndex, match.index));
                            if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function() {
                                for (i = 1; i < arguments[LENGTH] - 2; i++)
                                    if (arguments[i] === undefined) match[i] = undefined
                            });
                            if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
                            lastLength = match[0][LENGTH];
                            lastLastIndex = lastIndex;
                            if (output[LENGTH] >= splitLimit) break
                        }
                        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++
                    }
                    if (lastLastIndex === string[LENGTH]) {
                        if (lastLength || !separatorCopy.test("")) output.push("")
                    } else output.push(string.slice(lastLastIndex));
                    return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output
                }
            } else if ("0" [$SPLIT](undefined, 0)[LENGTH]) {
                $split = function(separator, limit) {
                    return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit)
                }
            }
            return [function split(separator, limit) {
                var O = defined(this);
                var fn = separator == undefined ? undefined : separator[SPLIT];
                return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit)
            }, $split]
        })
    }, {
        "./_fix-re-wks": 90,
        "./_is-regexp": 106
    }],
    282: [function(require, module, exports) {
        "use strict";
        require("./es6.regexp.flags");
        var anObject = require("./_an-object");
        var $flags = require("./_flags");
        var DESCRIPTORS = require("./_descriptors");
        var TO_STRING = "toString";
        var $toString = /./ [TO_STRING];
        var define = function(fn) {
            require("./_redefine")(RegExp.prototype, TO_STRING, fn, true)
        };
        if (require("./_fails")(function() {
                return $toString.call({
                    source: "a",
                    flags: "b"
                }) != "/a/b"
            })) {
            define(function toString() {
                var R = anObject(this);
                return "/".concat(R.source, "/", "flags" in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined)
            })
        } else if ($toString.name != TO_STRING) {
            define(function toString() {
                return $toString.call(this)
            })
        }
    }, {
        "./_an-object": 61,
        "./_descriptors": 83,
        "./_fails": 89,
        "./_flags": 91,
        "./_redefine": 145,
        "./es6.regexp.flags": 277
    }],
    283: [function(require, module, exports) {
        "use strict";
        var strong = require("./_collection-strong");
        var validate = require("./_validate-collection");
        var SET = "Set";
        module.exports = require("./_collection")(SET, function(get) {
            return function Set() {
                return get(this, arguments.length > 0 ? arguments[0] : undefined)
            }
        }, {
            add: function add(value) {
                return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value)
            }
        }, strong)
    }, {
        "./_collection": 76,
        "./_collection-strong": 73,
        "./_validate-collection": 177
    }],
    284: [function(require, module, exports) {
        "use strict";
        require("./_string-html")("anchor", function(createHTML) {
            return function anchor(name) {
                return createHTML(this, "a", "name", name)
            }
        })
    }, {
        "./_string-html": 159
    }],
    285: [function(require, module, exports) {
        "use strict";
        require("./_string-html")("big", function(createHTML) {
            return function big() {
                return createHTML(this, "big", "", "")
            }
        })
    }, {
        "./_string-html": 159
    }],
    286: [function(require, module, exports) {
        "use strict";
        require("./_string-html")("blink", function(createHTML) {
            return function blink() {
                return createHTML(this, "blink", "", "")
            }
        })
    }, {
        "./_string-html": 159
    }],
    287: [function(require, module, exports) {
        "use strict";
        require("./_string-html")("bold", function(createHTML) {
            return function bold() {
                return createHTML(this, "b", "", "")
            }
        })
    }, {
        "./_string-html": 159
    }],
    288: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var $at = require("./_string-at")(false);
        $export($export.P, "String", {
            codePointAt: function codePointAt(pos) {
                return $at(this, pos)
            }
        })
    }, {
        "./_export": 87,
        "./_string-at": 157
    }],
    289: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var toLength = require("./_to-length");
        var context = require("./_string-context");
        var ENDS_WITH = "endsWith";
        var $endsWith = "" [ENDS_WITH];
        $export($export.P + $export.F * require("./_fails-is-regexp")(ENDS_WITH), "String", {
            endsWith: function endsWith(searchString) {
                var that = context(this, searchString, ENDS_WITH);
                var endPosition = arguments.length > 1 ? arguments[1] : undefined;
                var len = toLength(that.length);
                var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
                var search = String(searchString);
                return $endsWith ? $endsWith.call(that, search, end) : that.slice(end - search.length, end) === search
            }
        })
    }, {
        "./_export": 87,
        "./_fails-is-regexp": 88,
        "./_string-context": 158,
        "./_to-length": 169
    }],
    290: [function(require, module, exports) {
        "use strict";
        require("./_string-html")("fixed", function(createHTML) {
            return function fixed() {
                return createHTML(this, "tt", "", "")
            }
        })
    }, {
        "./_string-html": 159
    }],
    291: [function(require, module, exports) {
        "use strict";
        require("./_string-html")("fontcolor", function(createHTML) {
            return function fontcolor(color) {
                return createHTML(this, "font", "color", color)
            }
        })
    }, {
        "./_string-html": 159
    }],
    292: [function(require, module, exports) {
        "use strict";
        require("./_string-html")("fontsize", function(createHTML) {
            return function fontsize(size) {
                return createHTML(this, "font", "size", size)
            }
        })
    }, {
        "./_string-html": 159
    }],
    293: [function(require, module, exports) {
        var $export = require("./_export");
        var toAbsoluteIndex = require("./_to-absolute-index");
        var fromCharCode = String.fromCharCode;
        var $fromCodePoint = String.fromCodePoint;
        $export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), "String", {
            fromCodePoint: function fromCodePoint(x) {
                var res = [];
                var aLen = arguments.length;
                var i = 0;
                var code;
                while (aLen > i) {
                    code = +arguments[i++];
                    if (toAbsoluteIndex(code, 1114111) !== code) throw RangeError(code + " is not a valid code point");
                    res.push(code < 65536 ? fromCharCode(code) : fromCharCode(((code -= 65536) >> 10) + 55296, code % 1024 + 56320))
                }
                return res.join("")
            }
        })
    }, {
        "./_export": 87,
        "./_to-absolute-index": 165
    }],
    294: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var context = require("./_string-context");
        var INCLUDES = "includes";
        $export($export.P + $export.F * require("./_fails-is-regexp")(INCLUDES), "String", {
            includes: function includes(searchString) {
                return !!~context(this, searchString, INCLUDES).indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined)
            }
        })
    }, {
        "./_export": 87,
        "./_fails-is-regexp": 88,
        "./_string-context": 158
    }],
    295: [function(require, module, exports) {
        "use strict";
        require("./_string-html")("italics", function(createHTML) {
            return function italics() {
                return createHTML(this, "i", "", "")
            }
        })
    }, {
        "./_string-html": 159
    }],
    296: [function(require, module, exports) {
        "use strict";
        var $at = require("./_string-at")(true);
        require("./_iter-define")(String, "String", function(iterated) {
            this._t = String(iterated);
            this._i = 0
        }, function() {
            var O = this._t;
            var index = this._i;
            var point;
            if (index >= O.length) return {
                value: undefined,
                done: true
            };
            point = $at(O, index);
            this._i += point.length;
            return {
                value: point,
                done: false
            }
        })
    }, {
        "./_iter-define": 109,
        "./_string-at": 157
    }],
    297: [function(require, module, exports) {
        "use strict";
        require("./_string-html")("link", function(createHTML) {
            return function link(url) {
                return createHTML(this, "a", "href", url)
            }
        })
    }, {
        "./_string-html": 159
    }],
    298: [function(require, module, exports) {
        var $export = require("./_export");
        var toIObject = require("./_to-iobject");
        var toLength = require("./_to-length");
        $export($export.S, "String", {
            raw: function raw(callSite) {
                var tpl = toIObject(callSite.raw);
                var len = toLength(tpl.length);
                var aLen = arguments.length;
                var res = [];
                var i = 0;
                while (len > i) {
                    res.push(String(tpl[i++]));
                    if (i < aLen) res.push(String(arguments[i]))
                }
                return res.join("")
            }
        })
    }, {
        "./_export": 87,
        "./_to-iobject": 168,
        "./_to-length": 169
    }],
    299: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.P, "String", {
            repeat: require("./_string-repeat")
        })
    }, {
        "./_export": 87,
        "./_string-repeat": 161
    }],
    300: [function(require, module, exports) {
        "use strict";
        require("./_string-html")("small", function(createHTML) {
            return function small() {
                return createHTML(this, "small", "", "")
            }
        })
    }, {
        "./_string-html": 159
    }],
    301: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var toLength = require("./_to-length");
        var context = require("./_string-context");
        var STARTS_WITH = "startsWith";
        var $startsWith = "" [STARTS_WITH];
        $export($export.P + $export.F * require("./_fails-is-regexp")(STARTS_WITH), "String", {
            startsWith: function startsWith(searchString) {
                var that = context(this, searchString, STARTS_WITH);
                var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
                var search = String(searchString);
                return $startsWith ? $startsWith.call(that, search, index) : that.slice(index, index + search.length) === search
            }
        })
    }, {
        "./_export": 87,
        "./_fails-is-regexp": 88,
        "./_string-context": 158,
        "./_to-length": 169
    }],
    302: [function(require, module, exports) {
        "use strict";
        require("./_string-html")("strike", function(createHTML) {
            return function strike() {
                return createHTML(this, "strike", "", "")
            }
        })
    }, {
        "./_string-html": 159
    }],
    303: [function(require, module, exports) {
        "use strict";
        require("./_string-html")("sub", function(createHTML) {
            return function sub() {
                return createHTML(this, "sub", "", "")
            }
        })
    }, {
        "./_string-html": 159
    }],
    304: [function(require, module, exports) {
        "use strict";
        require("./_string-html")("sup", function(createHTML) {
            return function sup() {
                return createHTML(this, "sup", "", "")
            }
        })
    }, {
        "./_string-html": 159
    }],
    305: [function(require, module, exports) {
        "use strict";
        require("./_string-trim")("trim", function($trim) {
            return function trim() {
                return $trim(this, 3)
            }
        })
    }, {
        "./_string-trim": 162
    }],
    306: [function(require, module, exports) {
        "use strict";
        var global = require("./_global");
        var has = require("./_has");
        var DESCRIPTORS = require("./_descriptors");
        var $export = require("./_export");
        var redefine = require("./_redefine");
        var META = require("./_meta").KEY;
        var $fails = require("./_fails");
        var shared = require("./_shared");
        var setToStringTag = require("./_set-to-string-tag");
        var uid = require("./_uid");
        var wks = require("./_wks");
        var wksExt = require("./_wks-ext");
        var wksDefine = require("./_wks-define");
        var enumKeys = require("./_enum-keys");
        var isArray = require("./_is-array");
        var anObject = require("./_an-object");
        var isObject = require("./_is-object");
        var toIObject = require("./_to-iobject");
        var toPrimitive = require("./_to-primitive");
        var createDesc = require("./_property-desc");
        var _create = require("./_object-create");
        var gOPNExt = require("./_object-gopn-ext");
        var $GOPD = require("./_object-gopd");
        var $DP = require("./_object-dp");
        var $keys = require("./_object-keys");
        var gOPD = $GOPD.f;
        var dP = $DP.f;
        var gOPN = gOPNExt.f;
        var $Symbol = global.Symbol;
        var $JSON = global.JSON;
        var _stringify = $JSON && $JSON.stringify;
        var PROTOTYPE = "prototype";
        var HIDDEN = wks("_hidden");
        var TO_PRIMITIVE = wks("toPrimitive");
        var isEnum = {}.propertyIsEnumerable;
        var SymbolRegistry = shared("symbol-registry");
        var AllSymbols = shared("symbols");
        var OPSymbols = shared("op-symbols");
        var ObjectProto = Object[PROTOTYPE];
        var USE_NATIVE = typeof $Symbol == "function";
        var QObject = global.QObject;
        var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
        var setSymbolDesc = DESCRIPTORS && $fails(function() {
            return _create(dP({}, "a", {
                get: function() {
                    return dP(this, "a", {
                        value: 7
                    }).a
                }
            })).a != 7
        }) ? function(it, key, D) {
            var protoDesc = gOPD(ObjectProto, key);
            if (protoDesc) delete ObjectProto[key];
            dP(it, key, D);
            if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc)
        } : dP;
        var wrap = function(tag) {
            var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
            sym._k = tag;
            return sym
        };
        var isSymbol = USE_NATIVE && typeof $Symbol.iterator == "symbol" ? function(it) {
            return typeof it == "symbol"
        } : function(it) {
            return it instanceof $Symbol
        };
        var $defineProperty = function defineProperty(it, key, D) {
            if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
            anObject(it);
            key = toPrimitive(key, true);
            anObject(D);
            if (has(AllSymbols, key)) {
                if (!D.enumerable) {
                    if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
                    it[HIDDEN][key] = true
                } else {
                    if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
                    D = _create(D, {
                        enumerable: createDesc(0, false)
                    })
                }
                return setSymbolDesc(it, key, D)
            }
            return dP(it, key, D)
        };
        var $defineProperties = function defineProperties(it, P) {
            anObject(it);
            var keys = enumKeys(P = toIObject(P));
            var i = 0;
            var l = keys.length;
            var key;
            while (l > i) $defineProperty(it, key = keys[i++], P[key]);
            return it
        };
        var $create = function create(it, P) {
            return P === undefined ? _create(it) : $defineProperties(_create(it), P)
        };
        var $propertyIsEnumerable = function propertyIsEnumerable(key) {
            var E = isEnum.call(this, key = toPrimitive(key, true));
            if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
            return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true
        };
        var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
            it = toIObject(it);
            key = toPrimitive(key, true);
            if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
            var D = gOPD(it, key);
            if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
            return D
        };
        var $getOwnPropertyNames = function getOwnPropertyNames(it) {
            var names = gOPN(toIObject(it));
            var result = [];
            var i = 0;
            var key;
            while (names.length > i) {
                if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key)
            }
            return result
        };
        var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
            var IS_OP = it === ObjectProto;
            var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
            var result = [];
            var i = 0;
            var key;
            while (names.length > i) {
                if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key])
            }
            return result
        };
        if (!USE_NATIVE) {
            $Symbol = function Symbol() {
                if (this instanceof $Symbol) throw TypeError("Symbol is not a constructor!");
                var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
                var $set = function(value) {
                    if (this === ObjectProto) $set.call(OPSymbols, value);
                    if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
                    setSymbolDesc(this, tag, createDesc(1, value))
                };
                if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, {
                    configurable: true,
                    set: $set
                });
                return wrap(tag)
            };
            redefine($Symbol[PROTOTYPE], "toString", function toString() {
                return this._k
            });
            $GOPD.f = $getOwnPropertyDescriptor;
            $DP.f = $defineProperty;
            require("./_object-gopn").f = gOPNExt.f = $getOwnPropertyNames;
            require("./_object-pie").f = $propertyIsEnumerable;
            require("./_object-gops").f = $getOwnPropertySymbols;
            if (DESCRIPTORS && !require("./_library")) {
                redefine(ObjectProto, "propertyIsEnumerable", $propertyIsEnumerable, true)
            }
            wksExt.f = function(name) {
                return wrap(wks(name))
            }
        }
        $export($export.G + $export.W + $export.F * !USE_NATIVE, {
            Symbol: $Symbol
        });
        for (var es6Symbols = "hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","), j = 0; es6Symbols.length > j;) wks(es6Symbols[j++]);
        for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);
        $export($export.S + $export.F * !USE_NATIVE, "Symbol", {
            for: function(key) {
                return has(SymbolRegistry, key += "") ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key)
            },
            keyFor: function keyFor(sym) {
                if (!isSymbol(sym)) throw TypeError(sym + " is not a symbol!");
                for (var key in SymbolRegistry)
                    if (SymbolRegistry[key] === sym) return key
            },
            useSetter: function() {
                setter = true
            },
            useSimple: function() {
                setter = false
            }
        });
        $export($export.S + $export.F * !USE_NATIVE, "Object", {
            create: $create,
            defineProperty: $defineProperty,
            defineProperties: $defineProperties,
            getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
            getOwnPropertyNames: $getOwnPropertyNames,
            getOwnPropertySymbols: $getOwnPropertySymbols
        });
        $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function() {
            var S = $Symbol();
            return _stringify([S]) != "[null]" || _stringify({
                a: S
            }) != "{}" || _stringify(Object(S)) != "{}"
        })), "JSON", {
            stringify: function stringify(it) {
                var args = [it];
                var i = 1;
                var replacer, $replacer;
                while (arguments.length > i) args.push(arguments[i++]);
                $replacer = replacer = args[1];
                if (!isObject(replacer) && it === undefined || isSymbol(it)) return;
                if (!isArray(replacer)) replacer = function(key, value) {
                    if (typeof $replacer == "function") value = $replacer.call(this, key, value);
                    if (!isSymbol(value)) return value
                };
                args[1] = replacer;
                return _stringify.apply($JSON, args)
            }
        });
        $Symbol[PROTOTYPE][TO_PRIMITIVE] || require("./_hide")($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
        setToStringTag($Symbol, "Symbol");
        setToStringTag(Math, "Math", true);
        setToStringTag(global.JSON, "JSON", true)
    }, {
        "./_an-object": 61,
        "./_descriptors": 83,
        "./_enum-keys": 86,
        "./_export": 87,
        "./_fails": 89,
        "./_global": 94,
        "./_has": 95,
        "./_hide": 96,
        "./_is-array": 103,
        "./_is-object": 105,
        "./_library": 113,
        "./_meta": 119,
        "./_object-create": 124,
        "./_object-dp": 125,
        "./_object-gopd": 128,
        "./_object-gopn": 130,
        "./_object-gopn-ext": 129,
        "./_object-gops": 131,
        "./_object-keys": 134,
        "./_object-pie": 135,
        "./_property-desc": 143,
        "./_redefine": 145,
        "./_set-to-string-tag": 152,
        "./_shared": 154,
        "./_to-iobject": 168,
        "./_to-primitive": 171,
        "./_uid": 175,
        "./_wks": 180,
        "./_wks-define": 178,
        "./_wks-ext": 179
    }],
    307: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var $typed = require("./_typed");
        var buffer = require("./_typed-buffer");
        var anObject = require("./_an-object");
        var toAbsoluteIndex = require("./_to-absolute-index");
        var toLength = require("./_to-length");
        var isObject = require("./_is-object");
        var ArrayBuffer = require("./_global").ArrayBuffer;
        var speciesConstructor = require("./_species-constructor");
        var $ArrayBuffer = buffer.ArrayBuffer;
        var $DataView = buffer.DataView;
        var $isView = $typed.ABV && ArrayBuffer.isView;
        var $slice = $ArrayBuffer.prototype.slice;
        var VIEW = $typed.VIEW;
        var ARRAY_BUFFER = "ArrayBuffer";
        $export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {
            ArrayBuffer: $ArrayBuffer
        });
        $export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
            isView: function isView(it) {
                return $isView && $isView(it) || isObject(it) && VIEW in it
            }
        });
        $export($export.P + $export.U + $export.F * require("./_fails")(function() {
            return !new $ArrayBuffer(2).slice(1, undefined).byteLength
        }), ARRAY_BUFFER, {
            slice: function slice(start, end) {
                if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start);
                var len = anObject(this).byteLength;
                var first = toAbsoluteIndex(start, len);
                var fin = toAbsoluteIndex(end === undefined ? len : end, len);
                var result = new(speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
                var viewS = new $DataView(this);
                var viewT = new $DataView(result);
                var index = 0;
                while (first < fin) {
                    viewT.setUint8(index++, viewS.getUint8(first++))
                }
                return result
            }
        });
        require("./_set-species")(ARRAY_BUFFER)
    }, {
        "./_an-object": 61,
        "./_export": 87,
        "./_fails": 89,
        "./_global": 94,
        "./_is-object": 105,
        "./_set-species": 151,
        "./_species-constructor": 155,
        "./_to-absolute-index": 165,
        "./_to-length": 169,
        "./_typed": 174,
        "./_typed-buffer": 173
    }],
    308: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.G + $export.W + $export.F * !require("./_typed").ABV, {
            DataView: require("./_typed-buffer").DataView
        })
    }, {
        "./_export": 87,
        "./_typed": 174,
        "./_typed-buffer": 173
    }],
    309: [function(require, module, exports) {
        require("./_typed-array")("Float32", 4, function(init) {
            return function Float32Array(data, byteOffset, length) {
                return init(this, data, byteOffset, length)
            }
        })
    }, {
        "./_typed-array": 172
    }],
    310: [function(require, module, exports) {
        require("./_typed-array")("Float64", 8, function(init) {
            return function Float64Array(data, byteOffset, length) {
                return init(this, data, byteOffset, length)
            }
        })
    }, {
        "./_typed-array": 172
    }],
    311: [function(require, module, exports) {
        require("./_typed-array")("Int16", 2, function(init) {
            return function Int16Array(data, byteOffset, length) {
                return init(this, data, byteOffset, length)
            }
        })
    }, {
        "./_typed-array": 172
    }],
    312: [function(require, module, exports) {
        require("./_typed-array")("Int32", 4, function(init) {
            return function Int32Array(data, byteOffset, length) {
                return init(this, data, byteOffset, length)
            }
        })
    }, {
        "./_typed-array": 172
    }],
    313: [function(require, module, exports) {
        require("./_typed-array")("Int8", 1, function(init) {
            return function Int8Array(data, byteOffset, length) {
                return init(this, data, byteOffset, length)
            }
        })
    }, {
        "./_typed-array": 172
    }],
    314: [function(require, module, exports) {
        require("./_typed-array")("Uint16", 2, function(init) {
            return function Uint16Array(data, byteOffset, length) {
                return init(this, data, byteOffset, length)
            }
        })
    }, {
        "./_typed-array": 172
    }],
    315: [function(require, module, exports) {
        require("./_typed-array")("Uint32", 4, function(init) {
            return function Uint32Array(data, byteOffset, length) {
                return init(this, data, byteOffset, length)
            }
        })
    }, {
        "./_typed-array": 172
    }],
    316: [function(require, module, exports) {
        require("./_typed-array")("Uint8", 1, function(init) {
            return function Uint8Array(data, byteOffset, length) {
                return init(this, data, byteOffset, length)
            }
        })
    }, {
        "./_typed-array": 172
    }],
    317: [function(require, module, exports) {
        require("./_typed-array")("Uint8", 1, function(init) {
            return function Uint8ClampedArray(data, byteOffset, length) {
                return init(this, data, byteOffset, length)
            }
        }, true)
    }, {
        "./_typed-array": 172
    }],
    318: [function(require, module, exports) {
        "use strict";
        var each = require("./_array-methods")(0);
        var redefine = require("./_redefine");
        var meta = require("./_meta");
        var assign = require("./_object-assign");
        var weak = require("./_collection-weak");
        var isObject = require("./_is-object");
        var fails = require("./_fails");
        var validate = require("./_validate-collection");
        var WEAK_MAP = "WeakMap";
        var getWeak = meta.getWeak;
        var isExtensible = Object.isExtensible;
        var uncaughtFrozenStore = weak.ufstore;
        var tmp = {};
        var InternalMap;
        var wrapper = function(get) {
            return function WeakMap() {
                return get(this, arguments.length > 0 ? arguments[0] : undefined)
            }
        };
        var methods = {
            get: function get(key) {
                if (isObject(key)) {
                    var data = getWeak(key);
                    if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
                    return data ? data[this._i] : undefined
                }
            },
            set: function set(key, value) {
                return weak.def(validate(this, WEAK_MAP), key, value)
            }
        };
        var $WeakMap = module.exports = require("./_collection")(WEAK_MAP, wrapper, methods, weak, true, true);
        if (fails(function() {
                return (new $WeakMap).set((Object.freeze || Object)(tmp), 7).get(tmp) != 7
            })) {
            InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
            assign(InternalMap.prototype, methods);
            meta.NEED = true;
            each(["delete", "has", "get", "set"], function(key) {
                var proto = $WeakMap.prototype;
                var method = proto[key];
                redefine(proto, key, function(a, b) {
                    if (isObject(a) && !isExtensible(a)) {
                        if (!this._f) this._f = new InternalMap;
                        var result = this._f[key](a, b);
                        return key == "set" ? this : result
                    }
                    return method.call(this, a, b)
                })
            })
        }
    }, {
        "./_array-methods": 66,
        "./_collection": 76,
        "./_collection-weak": 75,
        "./_fails": 89,
        "./_is-object": 105,
        "./_meta": 119,
        "./_object-assign": 123,
        "./_redefine": 145,
        "./_validate-collection": 177
    }],
    319: [function(require, module, exports) {
        "use strict";
        var weak = require("./_collection-weak");
        var validate = require("./_validate-collection");
        var WEAK_SET = "WeakSet";
        require("./_collection")(WEAK_SET, function(get) {
            return function WeakSet() {
                return get(this, arguments.length > 0 ? arguments[0] : undefined)
            }
        }, {
            add: function add(value) {
                return weak.def(validate(this, WEAK_SET), value, true)
            }
        }, weak, false, true)
    }, {
        "./_collection": 76,
        "./_collection-weak": 75,
        "./_validate-collection": 177
    }],
    320: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var flattenIntoArray = require("./_flatten-into-array");
        var toObject = require("./_to-object");
        var toLength = require("./_to-length");
        var aFunction = require("./_a-function");
        var arraySpeciesCreate = require("./_array-species-create");
        $export($export.P, "Array", {
            flatMap: function flatMap(callbackfn) {
                var O = toObject(this);
                var sourceLen, A;
                aFunction(callbackfn);
                sourceLen = toLength(O.length);
                A = arraySpeciesCreate(O, 0);
                flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
                return A
            }
        });
        require("./_add-to-unscopables")("flatMap")
    }, {
        "./_a-function": 57,
        "./_add-to-unscopables": 59,
        "./_array-species-create": 69,
        "./_export": 87,
        "./_flatten-into-array": 92,
        "./_to-length": 169,
        "./_to-object": 170
    }],
    321: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var flattenIntoArray = require("./_flatten-into-array");
        var toObject = require("./_to-object");
        var toLength = require("./_to-length");
        var toInteger = require("./_to-integer");
        var arraySpeciesCreate = require("./_array-species-create");
        $export($export.P, "Array", {
            flatten: function flatten() {
                var depthArg = arguments[0];
                var O = toObject(this);
                var sourceLen = toLength(O.length);
                var A = arraySpeciesCreate(O, 0);
                flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
                return A
            }
        });
        require("./_add-to-unscopables")("flatten")
    }, {
        "./_add-to-unscopables": 59,
        "./_array-species-create": 69,
        "./_export": 87,
        "./_flatten-into-array": 92,
        "./_to-integer": 167,
        "./_to-length": 169,
        "./_to-object": 170
    }],
    322: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var $includes = require("./_array-includes")(true);
        $export($export.P, "Array", {
            includes: function includes(el) {
                return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined)
            }
        });
        require("./_add-to-unscopables")("includes")
    }, {
        "./_add-to-unscopables": 59,
        "./_array-includes": 65,
        "./_export": 87
    }],
    323: [function(require, module, exports) {
        var $export = require("./_export");
        var microtask = require("./_microtask")();
        var process = require("./_global").process;
        var isNode = require("./_cof")(process) == "process";
        $export($export.G, {
            asap: function asap(fn) {
                var domain = isNode && process.domain;
                microtask(domain ? domain.bind(fn) : fn)
            }
        })
    }, {
        "./_cof": 72,
        "./_export": 87,
        "./_global": 94,
        "./_microtask": 121
    }],
    324: [function(require, module, exports) {
        var $export = require("./_export");
        var cof = require("./_cof");
        $export($export.S, "Error", {
            isError: function isError(it) {
                return cof(it) === "Error"
            }
        })
    }, {
        "./_cof": 72,
        "./_export": 87
    }],
    325: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.G, {
            global: require("./_global")
        })
    }, {
        "./_export": 87,
        "./_global": 94
    }],
    326: [function(require, module, exports) {
        require("./_set-collection-from")("Map")
    }, {
        "./_set-collection-from": 148
    }],
    327: [function(require, module, exports) {
        require("./_set-collection-of")("Map")
    }, {
        "./_set-collection-of": 149
    }],
    328: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.P + $export.R, "Map", {
            toJSON: require("./_collection-to-json")("Map")
        })
    }, {
        "./_collection-to-json": 74,
        "./_export": 87
    }],
    329: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S, "Math", {
            clamp: function clamp(x, lower, upper) {
                return Math.min(upper, Math.max(lower, x))
            }
        })
    }, {
        "./_export": 87
    }],
    330: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S, "Math", {
            DEG_PER_RAD: Math.PI / 180
        })
    }, {
        "./_export": 87
    }],
    331: [function(require, module, exports) {
        var $export = require("./_export");
        var RAD_PER_DEG = 180 / Math.PI;
        $export($export.S, "Math", {
            degrees: function degrees(radians) {
                return radians * RAD_PER_DEG
            }
        })
    }, {
        "./_export": 87
    }],
    332: [function(require, module, exports) {
        var $export = require("./_export");
        var scale = require("./_math-scale");
        var fround = require("./_math-fround");
        $export($export.S, "Math", {
            fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
                return fround(scale(x, inLow, inHigh, outLow, outHigh))
            }
        })
    }, {
        "./_export": 87,
        "./_math-fround": 115,
        "./_math-scale": 117
    }],
    333: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S, "Math", {
            iaddh: function iaddh(x0, x1, y0, y1) {
                var $x0 = x0 >>> 0;
                var $x1 = x1 >>> 0;
                var $y0 = y0 >>> 0;
                return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0
            }
        })
    }, {
        "./_export": 87
    }],
    334: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S, "Math", {
            imulh: function imulh(u, v) {
                var UINT16 = 65535;
                var $u = +u;
                var $v = +v;
                var u0 = $u & UINT16;
                var v0 = $v & UINT16;
                var u1 = $u >> 16;
                var v1 = $v >> 16;
                var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
                return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16)
            }
        })
    }, {
        "./_export": 87
    }],
    335: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S, "Math", {
            isubh: function isubh(x0, x1, y0, y1) {
                var $x0 = x0 >>> 0;
                var $x1 = x1 >>> 0;
                var $y0 = y0 >>> 0;
                return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0
            }
        })
    }, {
        "./_export": 87
    }],
    336: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S, "Math", {
            RAD_PER_DEG: 180 / Math.PI
        })
    }, {
        "./_export": 87
    }],
    337: [function(require, module, exports) {
        var $export = require("./_export");
        var DEG_PER_RAD = Math.PI / 180;
        $export($export.S, "Math", {
            radians: function radians(degrees) {
                return degrees * DEG_PER_RAD
            }
        })
    }, {
        "./_export": 87
    }],
    338: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S, "Math", {
            scale: require("./_math-scale")
        })
    }, {
        "./_export": 87,
        "./_math-scale": 117
    }],
    339: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S, "Math", {
            signbit: function signbit(x) {
                return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0
            }
        })
    }, {
        "./_export": 87
    }],
    340: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S, "Math", {
            umulh: function umulh(u, v) {
                var UINT16 = 65535;
                var $u = +u;
                var $v = +v;
                var u0 = $u & UINT16;
                var v0 = $v & UINT16;
                var u1 = $u >>> 16;
                var v1 = $v >>> 16;
                var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
                return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16)
            }
        })
    }, {
        "./_export": 87
    }],
    341: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var toObject = require("./_to-object");
        var aFunction = require("./_a-function");
        var $defineProperty = require("./_object-dp");
        require("./_descriptors") && $export($export.P + require("./_object-forced-pam"), "Object", {
            __defineGetter__: function __defineGetter__(P, getter) {
                $defineProperty.f(toObject(this), P, {
                    get: aFunction(getter),
                    enumerable: true,
                    configurable: true
                })
            }
        })
    }, {
        "./_a-function": 57,
        "./_descriptors": 83,
        "./_export": 87,
        "./_object-dp": 125,
        "./_object-forced-pam": 127,
        "./_to-object": 170
    }],
    342: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var toObject = require("./_to-object");
        var aFunction = require("./_a-function");
        var $defineProperty = require("./_object-dp");
        require("./_descriptors") && $export($export.P + require("./_object-forced-pam"), "Object", {
            __defineSetter__: function __defineSetter__(P, setter) {
                $defineProperty.f(toObject(this), P, {
                    set: aFunction(setter),
                    enumerable: true,
                    configurable: true
                })
            }
        })
    }, {
        "./_a-function": 57,
        "./_descriptors": 83,
        "./_export": 87,
        "./_object-dp": 125,
        "./_object-forced-pam": 127,
        "./_to-object": 170
    }],
    343: [function(require, module, exports) {
        var $export = require("./_export");
        var $entries = require("./_object-to-array")(true);
        $export($export.S, "Object", {
            entries: function entries(it) {
                return $entries(it)
            }
        })
    }, {
        "./_export": 87,
        "./_object-to-array": 137
    }],
    344: [function(require, module, exports) {
        var $export = require("./_export");
        var ownKeys = require("./_own-keys");
        var toIObject = require("./_to-iobject");
        var gOPD = require("./_object-gopd");
        var createProperty = require("./_create-property");
        $export($export.S, "Object", {
            getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
                var O = toIObject(object);
                var getDesc = gOPD.f;
                var keys = ownKeys(O);
                var result = {};
                var i = 0;
                var key, desc;
                while (keys.length > i) {
                    desc = getDesc(O, key = keys[i++]);
                    if (desc !== undefined) createProperty(result, key, desc)
                }
                return result
            }
        })
    }, {
        "./_create-property": 78,
        "./_export": 87,
        "./_object-gopd": 128,
        "./_own-keys": 138,
        "./_to-iobject": 168
    }],
    345: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var toObject = require("./_to-object");
        var toPrimitive = require("./_to-primitive");
        var getPrototypeOf = require("./_object-gpo");
        var getOwnPropertyDescriptor = require("./_object-gopd").f;
        require("./_descriptors") && $export($export.P + require("./_object-forced-pam"), "Object", {
            __lookupGetter__: function __lookupGetter__(P) {
                var O = toObject(this);
                var K = toPrimitive(P, true);
                var D;
                do {
                    if (D = getOwnPropertyDescriptor(O, K)) return D.get
                } while (O = getPrototypeOf(O))
            }
        })
    }, {
        "./_descriptors": 83,
        "./_export": 87,
        "./_object-forced-pam": 127,
        "./_object-gopd": 128,
        "./_object-gpo": 132,
        "./_to-object": 170,
        "./_to-primitive": 171
    }],
    346: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var toObject = require("./_to-object");
        var toPrimitive = require("./_to-primitive");
        var getPrototypeOf = require("./_object-gpo");
        var getOwnPropertyDescriptor = require("./_object-gopd").f;
        require("./_descriptors") && $export($export.P + require("./_object-forced-pam"), "Object", {
            __lookupSetter__: function __lookupSetter__(P) {
                var O = toObject(this);
                var K = toPrimitive(P, true);
                var D;
                do {
                    if (D = getOwnPropertyDescriptor(O, K)) return D.set
                } while (O = getPrototypeOf(O))
            }
        })
    }, {
        "./_descriptors": 83,
        "./_export": 87,
        "./_object-forced-pam": 127,
        "./_object-gopd": 128,
        "./_object-gpo": 132,
        "./_to-object": 170,
        "./_to-primitive": 171
    }],
    347: [function(require, module, exports) {
        var $export = require("./_export");
        var $values = require("./_object-to-array")(false);
        $export($export.S, "Object", {
            values: function values(it) {
                return $values(it)
            }
        })
    }, {
        "./_export": 87,
        "./_object-to-array": 137
    }],
    348: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var global = require("./_global");
        var core = require("./_core");
        var microtask = require("./_microtask")();
        var OBSERVABLE = require("./_wks")("observable");
        var aFunction = require("./_a-function");
        var anObject = require("./_an-object");
        var anInstance = require("./_an-instance");
        var redefineAll = require("./_redefine-all");
        var hide = require("./_hide");
        var forOf = require("./_for-of");
        var RETURN = forOf.RETURN;
        var getMethod = function(fn) {
            return fn == null ? undefined : aFunction(fn)
        };
        var cleanupSubscription = function(subscription) {
            var cleanup = subscription._c;
            if (cleanup) {
                subscription._c = undefined;
                cleanup()
            }
        };
        var subscriptionClosed = function(subscription) {
            return subscription._o === undefined
        };
        var closeSubscription = function(subscription) {
            if (!subscriptionClosed(subscription)) {
                subscription._o = undefined;
                cleanupSubscription(subscription)
            }
        };
        var Subscription = function(observer, subscriber) {
            anObject(observer);
            this._c = undefined;
            this._o = observer;
            observer = new SubscriptionObserver(this);
            try {
                var cleanup = subscriber(observer);
                var subscription = cleanup;
                if (cleanup != null) {
                    if (typeof cleanup.unsubscribe === "function") cleanup = function() {
                        subscription.unsubscribe()
                    };
                    else aFunction(cleanup);
                    this._c = cleanup
                }
            } catch (e) {
                observer.error(e);
                return
            }
            if (subscriptionClosed(this)) cleanupSubscription(this)
        };
        Subscription.prototype = redefineAll({}, {
            unsubscribe: function unsubscribe() {
                closeSubscription(this)
            }
        });
        var SubscriptionObserver = function(subscription) {
            this._s = subscription
        };
        SubscriptionObserver.prototype = redefineAll({}, {
            next: function next(value) {
                var subscription = this._s;
                if (!subscriptionClosed(subscription)) {
                    var observer = subscription._o;
                    try {
                        var m = getMethod(observer.next);
                        if (m) return m.call(observer, value)
                    } catch (e) {
                        try {
                            closeSubscription(subscription)
                        } finally {
                            throw e
                        }
                    }
                }
            },
            error: function error(value) {
                var subscription = this._s;
                if (subscriptionClosed(subscription)) throw value;
                var observer = subscription._o;
                subscription._o = undefined;
                try {
                    var m = getMethod(observer.error);
                    if (!m) throw value;
                    value = m.call(observer, value)
                } catch (e) {
                    try {
                        cleanupSubscription(subscription)
                    } finally {
                        throw e
                    }
                }
                cleanupSubscription(subscription);
                return value
            },
            complete: function complete(value) {
                var subscription = this._s;
                if (!subscriptionClosed(subscription)) {
                    var observer = subscription._o;
                    subscription._o = undefined;
                    try {
                        var m = getMethod(observer.complete);
                        value = m ? m.call(observer, value) : undefined
                    } catch (e) {
                        try {
                            cleanupSubscription(subscription)
                        } finally {
                            throw e
                        }
                    }
                    cleanupSubscription(subscription);
                    return value
                }
            }
        });
        var $Observable = function Observable(subscriber) {
            anInstance(this, $Observable, "Observable", "_f")._f = aFunction(subscriber)
        };
        redefineAll($Observable.prototype, {
            subscribe: function subscribe(observer) {
                return new Subscription(observer, this._f)
            },
            forEach: function forEach(fn) {
                var that = this;
                return new(core.Promise || global.Promise)(function(resolve, reject) {
                    aFunction(fn);
                    var subscription = that.subscribe({
                        next: function(value) {
                            try {
                                return fn(value)
                            } catch (e) {
                                reject(e);
                                subscription.unsubscribe()
                            }
                        },
                        error: reject,
                        complete: resolve
                    })
                })
            }
        });
        redefineAll($Observable, {
            from: function from(x) {
                var C = typeof this === "function" ? this : $Observable;
                var method = getMethod(anObject(x)[OBSERVABLE]);
                if (method) {
                    var observable = anObject(method.call(x));
                    return observable.constructor === C ? observable : new C(function(observer) {
                        return observable.subscribe(observer)
                    })
                }
                return new C(function(observer) {
                    var done = false;
                    microtask(function() {
                        if (!done) {
                            try {
                                if (forOf(x, false, function(it) {
                                        observer.next(it);
                                        if (done) return RETURN
                                    }) === RETURN) return
                            } catch (e) {
                                if (done) throw e;
                                observer.error(e);
                                return
                            }
                            observer.complete()
                        }
                    });
                    return function() {
                        done = true
                    }
                })
            },
            of: function of () {
                for (var i = 0, l = arguments.length, items = new Array(l); i < l;) items[i] = arguments[i++];
                return new(typeof this === "function" ? this : $Observable)(function(observer) {
                    var done = false;
                    microtask(function() {
                        if (!done) {
                            for (var j = 0; j < items.length; ++j) {
                                observer.next(items[j]);
                                if (done) return
                            }
                            observer.complete()
                        }
                    });
                    return function() {
                        done = true
                    }
                })
            }
        });
        hide($Observable.prototype, OBSERVABLE, function() {
            return this
        });
        $export($export.G, {
            Observable: $Observable
        });
        require("./_set-species")("Observable")
    }, {
        "./_a-function": 57,
        "./_an-instance": 60,
        "./_an-object": 61,
        "./_core": 77,
        "./_export": 87,
        "./_for-of": 93,
        "./_global": 94,
        "./_hide": 96,
        "./_microtask": 121,
        "./_redefine-all": 144,
        "./_set-species": 151,
        "./_wks": 180
    }],
    349: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var core = require("./_core");
        var global = require("./_global");
        var speciesConstructor = require("./_species-constructor");
        var promiseResolve = require("./_promise-resolve");
        $export($export.P + $export.R, "Promise", {
            finally: function(onFinally) {
                var C = speciesConstructor(this, core.Promise || global.Promise);
                var isFunction = typeof onFinally == "function";
                return this.then(isFunction ? function(x) {
                    return promiseResolve(C, onFinally()).then(function() {
                        return x
                    })
                } : onFinally, isFunction ? function(e) {
                    return promiseResolve(C, onFinally()).then(function() {
                        throw e
                    })
                } : onFinally)
            }
        })
    }, {
        "./_core": 77,
        "./_export": 87,
        "./_global": 94,
        "./_promise-resolve": 142,
        "./_species-constructor": 155
    }],
    350: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var newPromiseCapability = require("./_new-promise-capability");
        var perform = require("./_perform");
        $export($export.S, "Promise", {
            try: function(callbackfn) {
                var promiseCapability = newPromiseCapability.f(this);
                var result = perform(callbackfn);
                (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
                return promiseCapability.promise
            }
        })
    }, {
        "./_export": 87,
        "./_new-promise-capability": 122,
        "./_perform": 141
    }],
    351: [function(require, module, exports) {
        var metadata = require("./_metadata");
        var anObject = require("./_an-object");
        var toMetaKey = metadata.key;
        var ordinaryDefineOwnMetadata = metadata.set;
        metadata.exp({
            defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
                ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey))
            }
        })
    }, {
        "./_an-object": 61,
        "./_metadata": 120
    }],
    352: [function(require, module, exports) {
        var metadata = require("./_metadata");
        var anObject = require("./_an-object");
        var toMetaKey = metadata.key;
        var getOrCreateMetadataMap = metadata.map;
        var store = metadata.store;
        metadata.exp({
            deleteMetadata: function deleteMetadata(metadataKey, target) {
                var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
                var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
                if (metadataMap === undefined || !metadataMap["delete"](metadataKey)) return false;
                if (metadataMap.size) return true;
                var targetMetadata = store.get(target);
                targetMetadata["delete"](targetKey);
                return !!targetMetadata.size || store["delete"](target)
            }
        })
    }, {
        "./_an-object": 61,
        "./_metadata": 120
    }],
    353: [function(require, module, exports) {
        var Set = require("./es6.set");
        var from = require("./_array-from-iterable");
        var metadata = require("./_metadata");
        var anObject = require("./_an-object");
        var getPrototypeOf = require("./_object-gpo");
        var ordinaryOwnMetadataKeys = metadata.keys;
        var toMetaKey = metadata.key;
        var ordinaryMetadataKeys = function(O, P) {
            var oKeys = ordinaryOwnMetadataKeys(O, P);
            var parent = getPrototypeOf(O);
            if (parent === null) return oKeys;
            var pKeys = ordinaryMetadataKeys(parent, P);
            return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys
        };
        metadata.exp({
            getMetadataKeys: function getMetadataKeys(target) {
                return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]))
            }
        })
    }, {
        "./_an-object": 61,
        "./_array-from-iterable": 64,
        "./_metadata": 120,
        "./_object-gpo": 132,
        "./es6.set": 283
    }],
    354: [function(require, module, exports) {
        var metadata = require("./_metadata");
        var anObject = require("./_an-object");
        var getPrototypeOf = require("./_object-gpo");
        var ordinaryHasOwnMetadata = metadata.has;
        var ordinaryGetOwnMetadata = metadata.get;
        var toMetaKey = metadata.key;
        var ordinaryGetMetadata = function(MetadataKey, O, P) {
            var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
            if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
            var parent = getPrototypeOf(O);
            return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined
        };
        metadata.exp({
            getMetadata: function getMetadata(metadataKey, target) {
                return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]))
            }
        })
    }, {
        "./_an-object": 61,
        "./_metadata": 120,
        "./_object-gpo": 132
    }],
    355: [function(require, module, exports) {
        var metadata = require("./_metadata");
        var anObject = require("./_an-object");
        var ordinaryOwnMetadataKeys = metadata.keys;
        var toMetaKey = metadata.key;
        metadata.exp({
            getOwnMetadataKeys: function getOwnMetadataKeys(target) {
                return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]))
            }
        })
    }, {
        "./_an-object": 61,
        "./_metadata": 120
    }],
    356: [function(require, module, exports) {
        var metadata = require("./_metadata");
        var anObject = require("./_an-object");
        var ordinaryGetOwnMetadata = metadata.get;
        var toMetaKey = metadata.key;
        metadata.exp({
            getOwnMetadata: function getOwnMetadata(metadataKey, target) {
                return ordinaryGetOwnMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]))
            }
        })
    }, {
        "./_an-object": 61,
        "./_metadata": 120
    }],
    357: [function(require, module, exports) {
        var metadata = require("./_metadata");
        var anObject = require("./_an-object");
        var getPrototypeOf = require("./_object-gpo");
        var ordinaryHasOwnMetadata = metadata.has;
        var toMetaKey = metadata.key;
        var ordinaryHasMetadata = function(MetadataKey, O, P) {
            var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
            if (hasOwn) return true;
            var parent = getPrototypeOf(O);
            return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false
        };
        metadata.exp({
            hasMetadata: function hasMetadata(metadataKey, target) {
                return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]))
            }
        })
    }, {
        "./_an-object": 61,
        "./_metadata": 120,
        "./_object-gpo": 132
    }],
    358: [function(require, module, exports) {
        var metadata = require("./_metadata");
        var anObject = require("./_an-object");
        var ordinaryHasOwnMetadata = metadata.has;
        var toMetaKey = metadata.key;
        metadata.exp({
            hasOwnMetadata: function hasOwnMetadata(metadataKey, target) {
                return ordinaryHasOwnMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]))
            }
        })
    }, {
        "./_an-object": 61,
        "./_metadata": 120
    }],
    359: [function(require, module, exports) {
        var $metadata = require("./_metadata");
        var anObject = require("./_an-object");
        var aFunction = require("./_a-function");
        var toMetaKey = $metadata.key;
        var ordinaryDefineOwnMetadata = $metadata.set;
        $metadata.exp({
            metadata: function metadata(metadataKey, metadataValue) {
                return function decorator(target, targetKey) {
                    ordinaryDefineOwnMetadata(metadataKey, metadataValue, (targetKey !== undefined ? anObject : aFunction)(target), toMetaKey(targetKey))
                }
            }
        })
    }, {
        "./_a-function": 57,
        "./_an-object": 61,
        "./_metadata": 120
    }],
    360: [function(require, module, exports) {
        require("./_set-collection-from")("Set")
    }, {
        "./_set-collection-from": 148
    }],
    361: [function(require, module, exports) {
        require("./_set-collection-of")("Set")
    }, {
        "./_set-collection-of": 149
    }],
    362: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.P + $export.R, "Set", {
            toJSON: require("./_collection-to-json")("Set")
        })
    }, {
        "./_collection-to-json": 74,
        "./_export": 87
    }],
    363: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var $at = require("./_string-at")(true);
        $export($export.P, "String", {
            at: function at(pos) {
                return $at(this, pos)
            }
        })
    }, {
        "./_export": 87,
        "./_string-at": 157
    }],
    364: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var defined = require("./_defined");
        var toLength = require("./_to-length");
        var isRegExp = require("./_is-regexp");
        var getFlags = require("./_flags");
        var RegExpProto = RegExp.prototype;
        var $RegExpStringIterator = function(regexp, string) {
            this._r = regexp;
            this._s = string
        };
        require("./_iter-create")($RegExpStringIterator, "RegExp String", function next() {
            var match = this._r.exec(this._s);
            return {
                value: match,
                done: match === null
            }
        });
        $export($export.P, "String", {
            matchAll: function matchAll(regexp) {
                defined(this);
                if (!isRegExp(regexp)) throw TypeError(regexp + " is not a regexp!");
                var S = String(this);
                var flags = "flags" in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);
                var rx = new RegExp(regexp.source, ~flags.indexOf("g") ? flags : "g" + flags);
                rx.lastIndex = toLength(regexp.lastIndex);
                return new $RegExpStringIterator(rx, S)
            }
        })
    }, {
        "./_defined": 82,
        "./_export": 87,
        "./_flags": 91,
        "./_is-regexp": 106,
        "./_iter-create": 108,
        "./_to-length": 169
    }],
    365: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var $pad = require("./_string-pad");
        var userAgent = require("./_user-agent");
        $export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), "String", {
            padEnd: function padEnd(maxLength) {
                return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false)
            }
        })
    }, {
        "./_export": 87,
        "./_string-pad": 160,
        "./_user-agent": 176
    }],
    366: [function(require, module, exports) {
        "use strict";
        var $export = require("./_export");
        var $pad = require("./_string-pad");
        var userAgent = require("./_user-agent");
        $export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), "String", {
            padStart: function padStart(maxLength) {
                return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true)
            }
        })
    }, {
        "./_export": 87,
        "./_string-pad": 160,
        "./_user-agent": 176
    }],
    367: [function(require, module, exports) {
        "use strict";
        require("./_string-trim")("trimLeft", function($trim) {
            return function trimLeft() {
                return $trim(this, 1)
            }
        }, "trimStart")
    }, {
        "./_string-trim": 162
    }],
    368: [function(require, module, exports) {
        "use strict";
        require("./_string-trim")("trimRight", function($trim) {
            return function trimRight() {
                return $trim(this, 2)
            }
        }, "trimEnd")
    }, {
        "./_string-trim": 162
    }],
    369: [function(require, module, exports) {
        require("./_wks-define")("asyncIterator")
    }, {
        "./_wks-define": 178
    }],
    370: [function(require, module, exports) {
        require("./_wks-define")("observable")
    }, {
        "./_wks-define": 178
    }],
    371: [function(require, module, exports) {
        var $export = require("./_export");
        $export($export.S, "System", {
            global: require("./_global")
        })
    }, {
        "./_export": 87,
        "./_global": 94
    }],
    372: [function(require, module, exports) {
        require("./_set-collection-from")("WeakMap")
    }, {
        "./_set-collection-from": 148
    }],
    373: [function(require, module, exports) {
        require("./_set-collection-of")("WeakMap")
    }, {
        "./_set-collection-of": 149
    }],
    374: [function(require, module, exports) {
        require("./_set-collection-from")("WeakSet")
    }, {
        "./_set-collection-from": 148
    }],
    375: [function(require, module, exports) {
        require("./_set-collection-of")("WeakSet")
    }, {
        "./_set-collection-of": 149
    }],
    376: [function(require, module, exports) {
        var $iterators = require("./es6.array.iterator");
        var getKeys = require("./_object-keys");
        var redefine = require("./_redefine");
        var global = require("./_global");
        var hide = require("./_hide");
        var Iterators = require("./_iterators");
        var wks = require("./_wks");
        var ITERATOR = wks("iterator");
        var TO_STRING_TAG = wks("toStringTag");
        var ArrayValues = Iterators.Array;
        var DOMIterables = {
            CSSRuleList: true,
            CSSStyleDeclaration: false,
            CSSValueList: false,
            ClientRectList: false,
            DOMRectList: false,
            DOMStringList: false,
            DOMTokenList: true,
            DataTransferItemList: false,
            FileList: false,
            HTMLAllCollection: false,
            HTMLCollection: false,
            HTMLFormElement: false,
            HTMLSelectElement: false,
            MediaList: true,
            MimeTypeArray: false,
            NamedNodeMap: false,
            NodeList: true,
            PaintRequestList: false,
            Plugin: false,
            PluginArray: false,
            SVGLengthList: false,
            SVGNumberList: false,
            SVGPathSegList: false,
            SVGPointList: false,
            SVGStringList: false,
            SVGTransformList: false,
            SourceBufferList: false,
            StyleSheetList: true,
            TextTrackCueList: false,
            TextTrackList: false,
            TouchList: false
        };
        for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
            var NAME = collections[i];
            var explicit = DOMIterables[NAME];
            var Collection = global[NAME];
            var proto = Collection && Collection.prototype;
            var key;
            if (proto) {
                if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
                if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
                Iterators[NAME] = ArrayValues;
                if (explicit)
                    for (key in $iterators)
                        if (!proto[key]) redefine(proto, key, $iterators[key], true)
            }
        }
    }, {
        "./_global": 94,
        "./_hide": 96,
        "./_iterators": 112,
        "./_object-keys": 134,
        "./_redefine": 145,
        "./_wks": 180,
        "./es6.array.iterator": 193
    }],
    377: [function(require, module, exports) {
        var $export = require("./_export");
        var $task = require("./_task");
        $export($export.G + $export.B, {
            setImmediate: $task.set,
            clearImmediate: $task.clear
        })
    }, {
        "./_export": 87,
        "./_task": 164
    }],
    378: [function(require, module, exports) {
        var global = require("./_global");
        var $export = require("./_export");
        var userAgent = require("./_user-agent");
        var slice = [].slice;
        var MSIE = /MSIE .\./.test(userAgent);
        var wrap = function(set) {
            return function(fn, time) {
                var boundArgs = arguments.length > 2;
                var args = boundArgs ? slice.call(arguments, 2) : false;
                return set(boundArgs ? function() {
                    (typeof fn == "function" ? fn : Function(fn)).apply(this, args)
                } : fn, time)
            }
        };
        $export($export.G + $export.B + $export.F * MSIE, {
            setTimeout: wrap(global.setTimeout),
            setInterval: wrap(global.setInterval)
        })
    }, {
        "./_export": 87,
        "./_global": 94,
        "./_user-agent": 176
    }],
    379: [function(require, module, exports) {
        require("./modules/es6.symbol");
        require("./modules/es6.object.create");
        require("./modules/es6.object.define-property");
        require("./modules/es6.object.define-properties");
        require("./modules/es6.object.get-own-property-descriptor");
        require("./modules/es6.object.get-prototype-of");
        require("./modules/es6.object.keys");
        require("./modules/es6.object.get-own-property-names");
        require("./modules/es6.object.freeze");
        require("./modules/es6.object.seal");
        require("./modules/es6.object.prevent-extensions");
        require("./modules/es6.object.is-frozen");
        require("./modules/es6.object.is-sealed");
        require("./modules/es6.object.is-extensible");
        require("./modules/es6.object.assign");
        require("./modules/es6.object.is");
        require("./modules/es6.object.set-prototype-of");
        require("./modules/es6.object.to-string");
        require("./modules/es6.function.bind");
        require("./modules/es6.function.name");
        require("./modules/es6.function.has-instance");
        require("./modules/es6.parse-int");
        require("./modules/es6.parse-float");
        require("./modules/es6.number.constructor");
        require("./modules/es6.number.to-fixed");
        require("./modules/es6.number.to-precision");
        require("./modules/es6.number.epsilon");
        require("./modules/es6.number.is-finite");
        require("./modules/es6.number.is-integer");
        require("./modules/es6.number.is-nan");
        require("./modules/es6.number.is-safe-integer");
        require("./modules/es6.number.max-safe-integer");
        require("./modules/es6.number.min-safe-integer");
        require("./modules/es6.number.parse-float");
        require("./modules/es6.number.parse-int");
        require("./modules/es6.math.acosh");
        require("./modules/es6.math.asinh");
        require("./modules/es6.math.atanh");
        require("./modules/es6.math.cbrt");
        require("./modules/es6.math.clz32");
        require("./modules/es6.math.cosh");
        require("./modules/es6.math.expm1");
        require("./modules/es6.math.fround");
        require("./modules/es6.math.hypot");
        require("./modules/es6.math.imul");
        require("./modules/es6.math.log10");
        require("./modules/es6.math.log1p");
        require("./modules/es6.math.log2");
        require("./modules/es6.math.sign");
        require("./modules/es6.math.sinh");
        require("./modules/es6.math.tanh");
        require("./modules/es6.math.trunc");
        require("./modules/es6.string.from-code-point");
        require("./modules/es6.string.raw");
        require("./modules/es6.string.trim");
        require("./modules/es6.string.iterator");
        require("./modules/es6.string.code-point-at");
        require("./modules/es6.string.ends-with");
        require("./modules/es6.string.includes");
        require("./modules/es6.string.repeat");
        require("./modules/es6.string.starts-with");
        require("./modules/es6.string.anchor");
        require("./modules/es6.string.big");
        require("./modules/es6.string.blink");
        require("./modules/es6.string.bold");
        require("./modules/es6.string.fixed");
        require("./modules/es6.string.fontcolor");
        require("./modules/es6.string.fontsize");
        require("./modules/es6.string.italics");
        require("./modules/es6.string.link");
        require("./modules/es6.string.small");
        require("./modules/es6.string.strike");
        require("./modules/es6.string.sub");
        require("./modules/es6.string.sup");
        require("./modules/es6.date.now");
        require("./modules/es6.date.to-json");
        require("./modules/es6.date.to-iso-string");
        require("./modules/es6.date.to-string");
        require("./modules/es6.date.to-primitive");
        require("./modules/es6.array.is-array");
        require("./modules/es6.array.from");
        require("./modules/es6.array.of");
        require("./modules/es6.array.join");
        require("./modules/es6.array.slice");
        require("./modules/es6.array.sort");
        require("./modules/es6.array.for-each");
        require("./modules/es6.array.map");
        require("./modules/es6.array.filter");
        require("./modules/es6.array.some");
        require("./modules/es6.array.every");
        require("./modules/es6.array.reduce");
        require("./modules/es6.array.reduce-right");
        require("./modules/es6.array.index-of");
        require("./modules/es6.array.last-index-of");
        require("./modules/es6.array.copy-within");
        require("./modules/es6.array.fill");
        require("./modules/es6.array.find");
        require("./modules/es6.array.find-index");
        require("./modules/es6.array.species");
        require("./modules/es6.array.iterator");
        require("./modules/es6.regexp.constructor");
        require("./modules/es6.regexp.to-string");
        require("./modules/es6.regexp.flags");
        require("./modules/es6.regexp.match");
        require("./modules/es6.regexp.replace");
        require("./modules/es6.regexp.search");
        require("./modules/es6.regexp.split");
        require("./modules/es6.promise");
        require("./modules/es6.map");
        require("./modules/es6.set");
        require("./modules/es6.weak-map");
        require("./modules/es6.weak-set");
        require("./modules/es6.typed.array-buffer");
        require("./modules/es6.typed.data-view");
        require("./modules/es6.typed.int8-array");
        require("./modules/es6.typed.uint8-array");
        require("./modules/es6.typed.uint8-clamped-array");
        require("./modules/es6.typed.int16-array");
        require("./modules/es6.typed.uint16-array");
        require("./modules/es6.typed.int32-array");
        require("./modules/es6.typed.uint32-array");
        require("./modules/es6.typed.float32-array");
        require("./modules/es6.typed.float64-array");
        require("./modules/es6.reflect.apply");
        require("./modules/es6.reflect.construct");
        require("./modules/es6.reflect.define-property");
        require("./modules/es6.reflect.delete-property");
        require("./modules/es6.reflect.enumerate");
        require("./modules/es6.reflect.get");
        require("./modules/es6.reflect.get-own-property-descriptor");
        require("./modules/es6.reflect.get-prototype-of");
        require("./modules/es6.reflect.has");
        require("./modules/es6.reflect.is-extensible");
        require("./modules/es6.reflect.own-keys");
        require("./modules/es6.reflect.prevent-extensions");
        require("./modules/es6.reflect.set");
        require("./modules/es6.reflect.set-prototype-of");
        require("./modules/es7.array.includes");
        require("./modules/es7.array.flat-map");
        require("./modules/es7.array.flatten");
        require("./modules/es7.string.at");
        require("./modules/es7.string.pad-start");
        require("./modules/es7.string.pad-end");
        require("./modules/es7.string.trim-left");
        require("./modules/es7.string.trim-right");
        require("./modules/es7.string.match-all");
        require("./modules/es7.symbol.async-iterator");
        require("./modules/es7.symbol.observable");
        require("./modules/es7.object.get-own-property-descriptors");
        require("./modules/es7.object.values");
        require("./modules/es7.object.entries");
        require("./modules/es7.object.define-getter");
        require("./modules/es7.object.define-setter");
        require("./modules/es7.object.lookup-getter");
        require("./modules/es7.object.lookup-setter");
        require("./modules/es7.map.to-json");
        require("./modules/es7.set.to-json");
        require("./modules/es7.map.of");
        require("./modules/es7.set.of");
        require("./modules/es7.weak-map.of");
        require("./modules/es7.weak-set.of");
        require("./modules/es7.map.from");
        require("./modules/es7.set.from");
        require("./modules/es7.weak-map.from");
        require("./modules/es7.weak-set.from");
        require("./modules/es7.global");
        require("./modules/es7.system.global");
        require("./modules/es7.error.is-error");
        require("./modules/es7.math.clamp");
        require("./modules/es7.math.deg-per-rad");
        require("./modules/es7.math.degrees");
        require("./modules/es7.math.fscale");
        require("./modules/es7.math.iaddh");
        require("./modules/es7.math.isubh");
        require("./modules/es7.math.imulh");
        require("./modules/es7.math.rad-per-deg");
        require("./modules/es7.math.radians");
        require("./modules/es7.math.scale");
        require("./modules/es7.math.umulh");
        require("./modules/es7.math.signbit");
        require("./modules/es7.promise.finally");
        require("./modules/es7.promise.try");
        require("./modules/es7.reflect.define-metadata");
        require("./modules/es7.reflect.delete-metadata");
        require("./modules/es7.reflect.get-metadata");
        require("./modules/es7.reflect.get-metadata-keys");
        require("./modules/es7.reflect.get-own-metadata");
        require("./modules/es7.reflect.get-own-metadata-keys");
        require("./modules/es7.reflect.has-metadata");
        require("./modules/es7.reflect.has-own-metadata");
        require("./modules/es7.reflect.metadata");
        require("./modules/es7.asap");
        require("./modules/es7.observable");
        require("./modules/web.timers");
        require("./modules/web.immediate");
        require("./modules/web.dom.iterable");
        module.exports = require("./modules/_core")
    }, {
        "./modules/_core": 77,
        "./modules/es6.array.copy-within": 183,
        "./modules/es6.array.every": 184,
        "./modules/es6.array.fill": 185,
        "./modules/es6.array.filter": 186,
        "./modules/es6.array.find": 188,
        "./modules/es6.array.find-index": 187,
        "./modules/es6.array.for-each": 189,
        "./modules/es6.array.from": 190,
        "./modules/es6.array.index-of": 191,
        "./modules/es6.array.is-array": 192,
        "./modules/es6.array.iterator": 193,
        "./modules/es6.array.join": 194,
        "./modules/es6.array.last-index-of": 195,
        "./modules/es6.array.map": 196,
        "./modules/es6.array.of": 197,
        "./modules/es6.array.reduce": 199,
        "./modules/es6.array.reduce-right": 198,
        "./modules/es6.array.slice": 200,
        "./modules/es6.array.some": 201,
        "./modules/es6.array.sort": 202,
        "./modules/es6.array.species": 203,
        "./modules/es6.date.now": 204,
        "./modules/es6.date.to-iso-string": 205,
        "./modules/es6.date.to-json": 206,
        "./modules/es6.date.to-primitive": 207,
        "./modules/es6.date.to-string": 208,
        "./modules/es6.function.bind": 209,
        "./modules/es6.function.has-instance": 210,
        "./modules/es6.function.name": 211,
        "./modules/es6.map": 212,
        "./modules/es6.math.acosh": 213,
        "./modules/es6.math.asinh": 214,
        "./modules/es6.math.atanh": 215,
        "./modules/es6.math.cbrt": 216,
        "./modules/es6.math.clz32": 217,
        "./modules/es6.math.cosh": 218,
        "./modules/es6.math.expm1": 219,
        "./modules/es6.math.fround": 220,
        "./modules/es6.math.hypot": 221,
        "./modules/es6.math.imul": 222,
        "./modules/es6.math.log10": 223,
        "./modules/es6.math.log1p": 224,
        "./modules/es6.math.log2": 225,
        "./modules/es6.math.sign": 226,
        "./modules/es6.math.sinh": 227,
        "./modules/es6.math.tanh": 228,
        "./modules/es6.math.trunc": 229,
        "./modules/es6.number.constructor": 230,
        "./modules/es6.number.epsilon": 231,
        "./modules/es6.number.is-finite": 232,
        "./modules/es6.number.is-integer": 233,
        "./modules/es6.number.is-nan": 234,
        "./modules/es6.number.is-safe-integer": 235,
        "./modules/es6.number.max-safe-integer": 236,
        "./modules/es6.number.min-safe-integer": 237,
        "./modules/es6.number.parse-float": 238,
        "./modules/es6.number.parse-int": 239,
        "./modules/es6.number.to-fixed": 240,
        "./modules/es6.number.to-precision": 241,
        "./modules/es6.object.assign": 242,
        "./modules/es6.object.create": 243,
        "./modules/es6.object.define-properties": 244,
        "./modules/es6.object.define-property": 245,
        "./modules/es6.object.freeze": 246,
        "./modules/es6.object.get-own-property-descriptor": 247,
        "./modules/es6.object.get-own-property-names": 248,
        "./modules/es6.object.get-prototype-of": 249,
        "./modules/es6.object.is": 253,
        "./modules/es6.object.is-extensible": 250,
        "./modules/es6.object.is-frozen": 251,
        "./modules/es6.object.is-sealed": 252,
        "./modules/es6.object.keys": 254,
        "./modules/es6.object.prevent-extensions": 255,
        "./modules/es6.object.seal": 256,
        "./modules/es6.object.set-prototype-of": 257,
        "./modules/es6.object.to-string": 258,
        "./modules/es6.parse-float": 259,
        "./modules/es6.parse-int": 260,
        "./modules/es6.promise": 261,
        "./modules/es6.reflect.apply": 262,
        "./modules/es6.reflect.construct": 263,
        "./modules/es6.reflect.define-property": 264,
        "./modules/es6.reflect.delete-property": 265,
        "./modules/es6.reflect.enumerate": 266,
        "./modules/es6.reflect.get": 269,
        "./modules/es6.reflect.get-own-property-descriptor": 267,
        "./modules/es6.reflect.get-prototype-of": 268,
        "./modules/es6.reflect.has": 270,
        "./modules/es6.reflect.is-extensible": 271,
        "./modules/es6.reflect.own-keys": 272,
        "./modules/es6.reflect.prevent-extensions": 273,
        "./modules/es6.reflect.set": 275,
        "./modules/es6.reflect.set-prototype-of": 274,
        "./modules/es6.regexp.constructor": 276,
        "./modules/es6.regexp.flags": 277,
        "./modules/es6.regexp.match": 278,
        "./modules/es6.regexp.replace": 279,
        "./modules/es6.regexp.search": 280,
        "./modules/es6.regexp.split": 281,
        "./modules/es6.regexp.to-string": 282,
        "./modules/es6.set": 283,
        "./modules/es6.string.anchor": 284,
        "./modules/es6.string.big": 285,
        "./modules/es6.string.blink": 286,
        "./modules/es6.string.bold": 287,
        "./modules/es6.string.code-point-at": 288,
        "./modules/es6.string.ends-with": 289,
        "./modules/es6.string.fixed": 290,
        "./modules/es6.string.fontcolor": 291,
        "./modules/es6.string.fontsize": 292,
        "./modules/es6.string.from-code-point": 293,
        "./modules/es6.string.includes": 294,
        "./modules/es6.string.italics": 295,
        "./modules/es6.string.iterator": 296,
        "./modules/es6.string.link": 297,
        "./modules/es6.string.raw": 298,
        "./modules/es6.string.repeat": 299,
        "./modules/es6.string.small": 300,
        "./modules/es6.string.starts-with": 301,
        "./modules/es6.string.strike": 302,
        "./modules/es6.string.sub": 303,
        "./modules/es6.string.sup": 304,
        "./modules/es6.string.trim": 305,
        "./modules/es6.symbol": 306,
        "./modules/es6.typed.array-buffer": 307,
        "./modules/es6.typed.data-view": 308,
        "./modules/es6.typed.float32-array": 309,
        "./modules/es6.typed.float64-array": 310,
        "./modules/es6.typed.int16-array": 311,
        "./modules/es6.typed.int32-array": 312,
        "./modules/es6.typed.int8-array": 313,
        "./modules/es6.typed.uint16-array": 314,
        "./modules/es6.typed.uint32-array": 315,
        "./modules/es6.typed.uint8-array": 316,
        "./modules/es6.typed.uint8-clamped-array": 317,
        "./modules/es6.weak-map": 318,
        "./modules/es6.weak-set": 319,
        "./modules/es7.array.flat-map": 320,
        "./modules/es7.array.flatten": 321,
        "./modules/es7.array.includes": 322,
        "./modules/es7.asap": 323,
        "./modules/es7.error.is-error": 324,
        "./modules/es7.global": 325,
        "./modules/es7.map.from": 326,
        "./modules/es7.map.of": 327,
        "./modules/es7.map.to-json": 328,
        "./modules/es7.math.clamp": 329,
        "./modules/es7.math.deg-per-rad": 330,
        "./modules/es7.math.degrees": 331,
        "./modules/es7.math.fscale": 332,
        "./modules/es7.math.iaddh": 333,
        "./modules/es7.math.imulh": 334,
        "./modules/es7.math.isubh": 335,
        "./modules/es7.math.rad-per-deg": 336,
        "./modules/es7.math.radians": 337,
        "./modules/es7.math.scale": 338,
        "./modules/es7.math.signbit": 339,
        "./modules/es7.math.umulh": 340,
        "./modules/es7.object.define-getter": 341,
        "./modules/es7.object.define-setter": 342,
        "./modules/es7.object.entries": 343,
        "./modules/es7.object.get-own-property-descriptors": 344,
        "./modules/es7.object.lookup-getter": 345,
        "./modules/es7.object.lookup-setter": 346,
        "./modules/es7.object.values": 347,
        "./modules/es7.observable": 348,
        "./modules/es7.promise.finally": 349,
        "./modules/es7.promise.try": 350,
        "./modules/es7.reflect.define-metadata": 351,
        "./modules/es7.reflect.delete-metadata": 352,
        "./modules/es7.reflect.get-metadata": 354,
        "./modules/es7.reflect.get-metadata-keys": 353,
        "./modules/es7.reflect.get-own-metadata": 356,
        "./modules/es7.reflect.get-own-metadata-keys": 355,
        "./modules/es7.reflect.has-metadata": 357,
        "./modules/es7.reflect.has-own-metadata": 358,
        "./modules/es7.reflect.metadata": 359,
        "./modules/es7.set.from": 360,
        "./modules/es7.set.of": 361,
        "./modules/es7.set.to-json": 362,
        "./modules/es7.string.at": 363,
        "./modules/es7.string.match-all": 364,
        "./modules/es7.string.pad-end": 365,
        "./modules/es7.string.pad-start": 366,
        "./modules/es7.string.trim-left": 367,
        "./modules/es7.string.trim-right": 368,
        "./modules/es7.symbol.async-iterator": 369,
        "./modules/es7.symbol.observable": 370,
        "./modules/es7.system.global": 371,
        "./modules/es7.weak-map.from": 372,
        "./modules/es7.weak-map.of": 373,
        "./modules/es7.weak-set.from": 374,
        "./modules/es7.weak-set.of": 375,
        "./modules/web.dom.iterable": 376,
        "./modules/web.immediate": 377,
        "./modules/web.timers": 378
    }],
    380: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _interopDefault(ex) {
            return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex
        }
        var _Object$defineProperty = _interopDefault(require("babel-runtime/core-js/object/define-property"));
        var _Object$getOwnPropertyDescriptor = _interopDefault(require("babel-runtime/core-js/object/get-own-property-descriptor"));

        function elementDatasetPolyfill() {
            if (!document.documentElement.dataset && (!_Object$getOwnPropertyDescriptor(HTMLElement.prototype, "dataset") || !_Object$getOwnPropertyDescriptor(HTMLElement.prototype, "dataset").get)) {
                var descriptor = {};
                descriptor.enumerable = true;
                descriptor.get = function get() {
                    var element = this;
                    var map = {};
                    var attributes = this.attributes;

                    function toUpperCase(n0) {
                        return n0.charAt(1).toUpperCase()
                    }

                    function getter() {
                        return this.value
                    }

                    function setter(name, value) {
                        if (typeof value !== "undefined") {
                            this.setAttribute(name, value)
                        } else {
                            this.removeAttribute(name)
                        }
                    }
                    for (var i = 0; i < attributes.length; i += 1) {
                        var attribute = attributes[i];
                        if (attribute && attribute.name && /^data-\w[\w-]*$/.test(attribute.name)) {
                            var name = attribute.name;
                            var value = attribute.value;
                            var propName = name.substr(5).replace(/-./g, toUpperCase);
                            _Object$defineProperty(map, propName, {
                                enumerable: descriptor.enumerable,
                                get: getter.bind({
                                    value: value || ""
                                }),
                                set: setter.bind(element, name)
                            })
                        }
                    }
                    return map
                };
                Object.defineProperty(HTMLElement.prototype, "dataset", descriptor)
            }
        }
        exports["default"] = elementDatasetPolyfill
    }, {
        "babel-runtime/core-js/object/define-property": 27,
        "babel-runtime/core-js/object/get-own-property-descriptor": 28
    }],
    381: [function(require, module, exports) {
        (function() {
            var testObject = {};
            if (!(Object.setPrototypeOf || testObject.__proto__)) {
                var nativeGetPrototypeOf = Object.getPrototypeOf;
                Object.getPrototypeOf = function(object) {
                    if (object.__proto__) {
                        return object.__proto__
                    } else {
                        return nativeGetPrototypeOf.call(Object, object)
                    }
                }
            }
        })()
    }, {}],
    382: [function(require, module, exports) {
        module.exports = require("./lib/jquery-deferred")
    }, {
        "./lib/jquery-deferred": 385
    }],
    383: [function(require, module, exports) {
        var jQuery = module.exports = require("./jquery-core.js"),
            core_rspace = /\s+/;
        var optionsCache = {};

        function createOptions(options) {
            var object = optionsCache[options] = {};
            jQuery.each(options.split(core_rspace), function(_, flag) {
                object[flag] = true
            });
            return object
        }
        jQuery.Callbacks = function(options) {
            options = typeof options === "string" ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);
            var memory, fired, firing, firingStart, firingLength, firingIndex, list = [],
                stack = !options.once && [],
                fire = function(data) {
                    memory = options.memory && data;
                    fired = true;
                    firingIndex = firingStart || 0;
                    firingStart = 0;
                    firingLength = list.length;
                    firing = true;
                    for (; list && firingIndex < firingLength; firingIndex++) {
                        if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
                            memory = false;
                            break
                        }
                    }
                    firing = false;
                    if (list) {
                        if (stack) {
                            if (stack.length) {
                                fire(stack.shift())
                            }
                        } else if (memory) {
                            list = []
                        } else {
                            self.disable()
                        }
                    }
                },
                self = {
                    add: function() {
                        if (list) {
                            var start = list.length;
                            (function add(args) {
                                jQuery.each(args, function(_, arg) {
                                    var type = jQuery.type(arg);
                                    if (type === "function") {
                                        if (!options.unique || !self.has(arg)) {
                                            list.push(arg)
                                        }
                                    } else if (arg && arg.length && type !== "string") {
                                        add(arg)
                                    }
                                })
                            })(arguments);
                            if (firing) {
                                firingLength = list.length
                            } else if (memory) {
                                firingStart = start;
                                fire(memory)
                            }
                        }
                        return this
                    },
                    remove: function() {
                        if (list) {
                            jQuery.each(arguments, function(_, arg) {
                                var index;
                                while ((index = jQuery.inArray(arg, list, index)) > -1) {
                                    list.splice(index, 1);
                                    if (firing) {
                                        if (index <= firingLength) {
                                            firingLength--
                                        }
                                        if (index <= firingIndex) {
                                            firingIndex--
                                        }
                                    }
                                }
                            })
                        }
                        return this
                    },
                    has: function(fn) {
                        return jQuery.inArray(fn, list) > -1
                    },
                    empty: function() {
                        list = [];
                        return this
                    },
                    disable: function() {
                        list = stack = memory = undefined;
                        return this
                    },
                    disabled: function() {
                        return !list
                    },
                    lock: function() {
                        stack = undefined;
                        if (!memory) {
                            self.disable()
                        }
                        return this
                    },
                    locked: function() {
                        return !stack
                    },
                    fireWith: function(context, args) {
                        args = args || [];
                        args = [context, args.slice ? args.slice() : args];
                        if (list && (!fired || stack)) {
                            if (firing) {
                                stack.push(args)
                            } else {
                                fire(args)
                            }
                        }
                        return this
                    },
                    fire: function() {
                        self.fireWith(this, arguments);
                        return this
                    },
                    fired: function() {
                        return !!fired
                    }
                };
            return self
        }
    }, {
        "./jquery-core.js": 384
    }],
    384: [function(require, module, exports) {
        var jQuery = module.exports = {
            type: type,
            isArray: isArray,
            isFunction: isFunction,
            isPlainObject: isPlainObject,
            each: each,
            extend: extend,
            noop: function() {}
        };
        var toString = Object.prototype.toString;
        var class2type = {};
        "Boolean Number String Function Array Date RegExp Object".split(" ").forEach(function(name) {
            class2type["[object " + name + "]"] = name.toLowerCase()
        });

        function type(obj) {
            return obj == null ? String(obj) : class2type[toString.call(obj)] || "object"
        }

        function isFunction(obj) {
            return jQuery.type(obj) === "function"
        }

        function isArray(obj) {
            return jQuery.type(obj) === "array"
        }

        function each(object, callback, args) {
            var name, i = 0,
                length = object.length,
                isObj = length === undefined || isFunction(object);
            if (args) {
                if (isObj) {
                    for (name in object) {
                        if (callback.apply(object[name], args) === false) {
                            break
                        }
                    }
                } else {
                    for (; i < length;) {
                        if (callback.apply(object[i++], args) === false) {
                            break
                        }
                    }
                }
            } else {
                if (isObj) {
                    for (name in object) {
                        if (callback.call(object[name], name, object[name]) === false) {
                            break
                        }
                    }
                } else {
                    for (; i < length;) {
                        if (callback.call(object[i], i, object[i++]) === false) {
                            break
                        }
                    }
                }
            }
            return object
        }

        function isPlainObject(obj) {
            if (!obj || jQuery.type(obj) !== "object") {
                return false
            }
            return true
        }

        function extend() {
            var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {},
                i = 1,
                length = arguments.length,
                deep = false;
            if (typeof target === "boolean") {
                deep = target;
                target = arguments[1] || {};
                i = 2
            }
            if (typeof target !== "object" && !jQuery.isFunction(target)) {
                target = {}
            }
            if (length === i) {
                target = this;
                --i
            }
            for (; i < length; i++) {
                if ((options = arguments[i]) != null) {
                    for (name in options) {
                        src = target[name];
                        copy = options[name];
                        if (target === copy) {
                            continue
                        }
                        if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                            if (copyIsArray) {
                                copyIsArray = false;
                                clone = src && jQuery.isArray(src) ? src : []
                            } else {
                                clone = src && jQuery.isPlainObject(src) ? src : {}
                            }
                            target[name] = jQuery.extend(deep, clone, copy)
                        } else if (copy !== undefined) {
                            target[name] = copy
                        }
                    }
                }
            }
            return target
        }
    }, {}],
    385: [function(require, module, exports) {
        var jQuery = module.exports = require("./jquery-callbacks.js"),
            core_slice = Array.prototype.slice;
        jQuery.extend({
            Deferred: function(func) {
                var tuples = [
                        ["resolve", "done", jQuery.Callbacks("once memory"), "resolved"],
                        ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"],
                        ["notify", "progress", jQuery.Callbacks("memory")]
                    ],
                    state = "pending",
                    promise = {
                        state: function() {
                            return state
                        },
                        always: function() {
                            deferred.done(arguments).fail(arguments);
                            return this
                        },
                        then: function() {
                            var fns = arguments;
                            return jQuery.Deferred(function(newDefer) {
                                jQuery.each(tuples, function(i, tuple) {
                                    var action = tuple[0],
                                        fn = fns[i];
                                    deferred[tuple[1]](jQuery.isFunction(fn) ? function() {
                                        var returned = fn.apply(this, arguments);
                                        if (returned && jQuery.isFunction(returned.promise)) {
                                            returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify)
                                        } else {
                                            newDefer[action + "With"](this === deferred ? newDefer : this, [returned])
                                        }
                                    } : newDefer[action])
                                });
                                fns = null
                            }).promise()
                        },
                        promise: function(obj) {
                            return obj != null ? jQuery.extend(obj, promise) : promise
                        }
                    },
                    deferred = {};
                promise.pipe = promise.then;
                jQuery.each(tuples, function(i, tuple) {
                    var list = tuple[2],
                        stateString = tuple[3];
                    promise[tuple[1]] = list.add;
                    if (stateString) {
                        list.add(function() {
                            state = stateString
                        }, tuples[i ^ 1][2].disable, tuples[2][2].lock)
                    }
                    deferred[tuple[0]] = list.fire;
                    deferred[tuple[0] + "With"] = list.fireWith
                });
                promise.promise(deferred);
                if (func) {
                    func.call(deferred, deferred)
                }
                return deferred
            },
            when: function(subordinate) {
                var i = 0,
                    resolveValues = core_slice.call(arguments),
                    length = resolveValues.length,
                    remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,
                    deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
                    updateFunc = function(i, contexts, values) {
                        return function(value) {
                            contexts[i] = this;
                            values[i] = arguments.length > 1 ? core_slice.call(arguments) : value;
                            if (values === progressValues) {
                                deferred.notifyWith(contexts, values)
                            } else if (!--remaining) {
                                deferred.resolveWith(contexts, values)
                            }
                        }
                    },
                    progressValues, progressContexts, resolveContexts;
                if (length > 1) {
                    progressValues = new Array(length);
                    progressContexts = new Array(length);
                    resolveContexts = new Array(length);
                    for (; i < length; i++) {
                        if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
                            resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues))
                        } else {
                            --remaining
                        }
                    }
                }
                if (!remaining) {
                    deferred.resolveWith(resolveContexts, resolveValues)
                }
                return deferred.promise()
            }
        })
    }, {
        "./jquery-callbacks.js": 383
    }],
    386: [function(require, module, exports) {
        (function(global) {
            "use strict";
            var param = function(a) {
                var s = [],
                    rbracket = /\[\]$/,
                    isArray = function(obj) {
                        return Object.prototype.toString.call(obj) === "[object Array]"
                    },
                    add = function(k, v) {
                        v = typeof v === "function" ? v() : v === null ? "" : v === undefined ? "" : v;
                        s[s.length] = encodeURIComponent(k) + "=" + encodeURIComponent(v)
                    },
                    buildParams = function(prefix, obj) {
                        var i, len, key;
                        if (prefix) {
                            if (isArray(obj)) {
                                for (i = 0, len = obj.length; i < len; i++) {
                                    if (rbracket.test(prefix)) {
                                        add(prefix, obj[i])
                                    } else {
                                        buildParams(prefix + "[" + (typeof obj[i] === "object" ? i : "") + "]", obj[i])
                                    }
                                }
                            } else if (obj && String(obj) === "[object Object]") {
                                for (key in obj) {
                                    buildParams(prefix + "[" + key + "]", obj[key])
                                }
                            } else {
                                add(prefix, obj)
                            }
                        } else if (isArray(obj)) {
                            for (i = 0, len = obj.length; i < len; i++) {
                                add(obj[i].name, obj[i].value)
                            }
                        } else {
                            for (key in obj) {
                                buildParams(key, obj[key])
                            }
                        }
                        return s
                    };
                return buildParams("", a).join("&").replace(/%20/g, "+")
            };
            if (typeof module === "object" && typeof module.exports === "object") {
                module.exports = param
            } else if (typeof define === "function" && define.amd) {
                define([], function() {
                    return param
                })
            } else {
                global.param = param
            }
        })(this)
    }, {}],
    387: [function(require, module, exports) {
        (function(global, factory) {
            typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global.moment = factory()
        })(this, function() {
            "use strict";
            var hookCallback;

            function hooks() {
                return hookCallback.apply(null, arguments)
            }

            function setHookCallback(callback) {
                hookCallback = callback
            }

            function isArray(input) {
                return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]"
            }

            function isObject(input) {
                return input != null && Object.prototype.toString.call(input) === "[object Object]"
            }

            function isObjectEmpty(obj) {
                if (Object.getOwnPropertyNames) {
                    return Object.getOwnPropertyNames(obj).length === 0
                } else {
                    var k;
                    for (k in obj) {
                        if (obj.hasOwnProperty(k)) {
                            return false
                        }
                    }
                    return true
                }
            }

            function isUndefined(input) {
                return input === void 0
            }

            function isNumber(input) {
                return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]"
            }

            function isDate(input) {
                return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]"
            }

            function map(arr, fn) {
                var res = [],
                    i;
                for (i = 0; i < arr.length; ++i) {
                    res.push(fn(arr[i], i))
                }
                return res
            }

            function hasOwnProp(a, b) {
                return Object.prototype.hasOwnProperty.call(a, b)
            }

            function extend(a, b) {
                for (var i in b) {
                    if (hasOwnProp(b, i)) {
                        a[i] = b[i]
                    }
                }
                if (hasOwnProp(b, "toString")) {
                    a.toString = b.toString
                }
                if (hasOwnProp(b, "valueOf")) {
                    a.valueOf = b.valueOf
                }
                return a
            }

            function createUTC(input, format, locale, strict) {
                return createLocalOrUTC(input, format, locale, strict, true).utc()
            }

            function defaultParsingFlags() {
                return {
                    empty: false,
                    unusedTokens: [],
                    unusedInput: [],
                    overflow: -2,
                    charsLeftOver: 0,
                    nullInput: false,
                    invalidMonth: null,
                    invalidFormat: false,
                    userInvalidated: false,
                    iso: false,
                    parsedDateParts: [],
                    meridiem: null,
                    rfc2822: false,
                    weekdayMismatch: false
                }
            }

            function getParsingFlags(m) {
                if (m._pf == null) {
                    m._pf = defaultParsingFlags()
                }
                return m._pf
            }
            var some;
            if (Array.prototype.some) {
                some = Array.prototype.some
            } else {
                some = function(fun) {
                    var t = Object(this);
                    var len = t.length >>> 0;
                    for (var i = 0; i < len; i++) {
                        if (i in t && fun.call(this, t[i], i, t)) {
                            return true
                        }
                    }
                    return false
                }
            }

            function isValid(m) {
                if (m._isValid == null) {
                    var flags = getParsingFlags(m);
                    var parsedParts = some.call(flags.parsedDateParts, function(i) {
                        return i != null
                    });
                    var isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
                    if (m._strict) {
                        isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined
                    }
                    if (Object.isFrozen == null || !Object.isFrozen(m)) {
                        m._isValid = isNowValid
                    } else {
                        return isNowValid
                    }
                }
                return m._isValid
            }

            function createInvalid(flags) {
                var m = createUTC(NaN);
                if (flags != null) {
                    extend(getParsingFlags(m), flags)
                } else {
                    getParsingFlags(m).userInvalidated = true
                }
                return m
            }
            var momentProperties = hooks.momentProperties = [];

            function copyConfig(to, from) {
                var i, prop, val;
                if (!isUndefined(from._isAMomentObject)) {
                    to._isAMomentObject = from._isAMomentObject
                }
                if (!isUndefined(from._i)) {
                    to._i = from._i
                }
                if (!isUndefined(from._f)) {
                    to._f = from._f
                }
                if (!isUndefined(from._l)) {
                    to._l = from._l
                }
                if (!isUndefined(from._strict)) {
                    to._strict = from._strict
                }
                if (!isUndefined(from._tzm)) {
                    to._tzm = from._tzm
                }
                if (!isUndefined(from._isUTC)) {
                    to._isUTC = from._isUTC
                }
                if (!isUndefined(from._offset)) {
                    to._offset = from._offset
                }
                if (!isUndefined(from._pf)) {
                    to._pf = getParsingFlags(from)
                }
                if (!isUndefined(from._locale)) {
                    to._locale = from._locale
                }
                if (momentProperties.length > 0) {
                    for (i = 0; i < momentProperties.length; i++) {
                        prop = momentProperties[i];
                        val = from[prop];
                        if (!isUndefined(val)) {
                            to[prop] = val
                        }
                    }
                }
                return to
            }
            var updateInProgress = false;

            function Moment(config) {
                copyConfig(this, config);
                this._d = new Date(config._d != null ? config._d.getTime() : NaN);
                if (!this.isValid()) {
                    this._d = new Date(NaN)
                }
                if (updateInProgress === false) {
                    updateInProgress = true;
                    hooks.updateOffset(this);
                    updateInProgress = false
                }
            }

            function isMoment(obj) {
                return obj instanceof Moment || obj != null && obj._isAMomentObject != null
            }

            function absFloor(number) {
                if (number < 0) {
                    return Math.ceil(number) || 0
                } else {
                    return Math.floor(number)
                }
            }

            function toInt(argumentForCoercion) {
                var coercedNumber = +argumentForCoercion,
                    value = 0;
                if (coercedNumber !== 0 && isFinite(coercedNumber)) {
                    value = absFloor(coercedNumber)
                }
                return value
            }

            function compareArrays(array1, array2, dontConvert) {
                var len = Math.min(array1.length, array2.length),
                    lengthDiff = Math.abs(array1.length - array2.length),
                    diffs = 0,
                    i;
                for (i = 0; i < len; i++) {
                    if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
                        diffs++
                    }
                }
                return diffs + lengthDiff
            }

            function warn(msg) {
                if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
                    console.warn("Deprecation warning: " + msg)
                }
            }

            function deprecate(msg, fn) {
                var firstTime = true;
                return extend(function() {
                    if (hooks.deprecationHandler != null) {
                        hooks.deprecationHandler(null, msg)
                    }
                    if (firstTime) {
                        var args = [];
                        var arg;
                        for (var i = 0; i < arguments.length; i++) {
                            arg = "";
                            if (typeof arguments[i] === "object") {
                                arg += "\n[" + i + "] ";
                                for (var key in arguments[0]) {
                                    arg += key + ": " + arguments[0][key] + ", "
                                }
                                arg = arg.slice(0, -2)
                            } else {
                                arg = arguments[i]
                            }
                            args.push(arg)
                        }
                        warn(msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + (new Error).stack);
                        firstTime = false
                    }
                    return fn.apply(this, arguments)
                }, fn)
            }
            var deprecations = {};

            function deprecateSimple(name, msg) {
                if (hooks.deprecationHandler != null) {
                    hooks.deprecationHandler(name, msg)
                }
                if (!deprecations[name]) {
                    warn(msg);
                    deprecations[name] = true
                }
            }
            hooks.suppressDeprecationWarnings = false;
            hooks.deprecationHandler = null;

            function isFunction(input) {
                return input instanceof Function || Object.prototype.toString.call(input) === "[object Function]"
            }

            function set(config) {
                var prop, i;
                for (i in config) {
                    prop = config[i];
                    if (isFunction(prop)) {
                        this[i] = prop
                    } else {
                        this["_" + i] = prop
                    }
                }
                this._config = config;
                this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source)
            }

            function mergeConfigs(parentConfig, childConfig) {
                var res = extend({}, parentConfig),
                    prop;
                for (prop in childConfig) {
                    if (hasOwnProp(childConfig, prop)) {
                        if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                            res[prop] = {};
                            extend(res[prop], parentConfig[prop]);
                            extend(res[prop], childConfig[prop])
                        } else if (childConfig[prop] != null) {
                            res[prop] = childConfig[prop]
                        } else {
                            delete res[prop]
                        }
                    }
                }
                for (prop in parentConfig) {
                    if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
                        res[prop] = extend({}, res[prop])
                    }
                }
                return res
            }

            function Locale(config) {
                if (config != null) {
                    this.set(config)
                }
            }
            var keys;
            if (Object.keys) {
                keys = Object.keys
            } else {
                keys = function(obj) {
                    var i, res = [];
                    for (i in obj) {
                        if (hasOwnProp(obj, i)) {
                            res.push(i)
                        }
                    }
                    return res
                }
            }
            var defaultCalendar = {
                sameDay: "[Today at] LT",
                nextDay: "[Tomorrow at] LT",
                nextWeek: "dddd [at] LT",
                lastDay: "[Yesterday at] LT",
                lastWeek: "[Last] dddd [at] LT",
                sameElse: "L"
            };

            function calendar(key, mom, now) {
                var output = this._calendar[key] || this._calendar["sameElse"];
                return isFunction(output) ? output.call(mom, now) : output
            }
            var defaultLongDateFormat = {
                LTS: "h:mm:ss A",
                LT: "h:mm A",
                L: "MM/DD/YYYY",
                LL: "MMMM D, YYYY",
                LLL: "MMMM D, YYYY h:mm A",
                LLLL: "dddd, MMMM D, YYYY h:mm A"
            };

            function longDateFormat(key) {
                var format = this._longDateFormat[key],
                    formatUpper = this._longDateFormat[key.toUpperCase()];
                if (format || !formatUpper) {
                    return format
                }
                this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function(val) {
                    return val.slice(1)
                });
                return this._longDateFormat[key]
            }
            var defaultInvalidDate = "Invalid date";

            function invalidDate() {
                return this._invalidDate
            }
            var defaultOrdinal = "%d";
            var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

            function ordinal(number) {
                return this._ordinal.replace("%d", number)
            }
            var defaultRelativeTime = {
                future: "in %s",
                past: "%s ago",
                s: "a few seconds",
                ss: "%d seconds",
                m: "a minute",
                mm: "%d minutes",
                h: "an hour",
                hh: "%d hours",
                d: "a day",
                dd: "%d days",
                M: "a month",
                MM: "%d months",
                y: "a year",
                yy: "%d years"
            };

            function relativeTime(number, withoutSuffix, string, isFuture) {
                var output = this._relativeTime[string];
                return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number)
            }

            function pastFuture(diff, output) {
                var format = this._relativeTime[diff > 0 ? "future" : "past"];
                return isFunction(format) ? format(output) : format.replace(/%s/i, output)
            }
            var aliases = {};

            function addUnitAlias(unit, shorthand) {
                var lowerCase = unit.toLowerCase();
                aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit
            }

            function normalizeUnits(units) {
                return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : undefined
            }

            function normalizeObjectUnits(inputObject) {
                var normalizedInput = {},
                    normalizedProp, prop;
                for (prop in inputObject) {
                    if (hasOwnProp(inputObject, prop)) {
                        normalizedProp = normalizeUnits(prop);
                        if (normalizedProp) {
                            normalizedInput[normalizedProp] = inputObject[prop]
                        }
                    }
                }
                return normalizedInput
            }
            var priorities = {};

            function addUnitPriority(unit, priority) {
                priorities[unit] = priority
            }

            function getPrioritizedUnits(unitsObj) {
                var units = [];
                for (var u in unitsObj) {
                    units.push({
                        unit: u,
                        priority: priorities[u]
                    })
                }
                units.sort(function(a, b) {
                    return a.priority - b.priority
                });
                return units
            }

            function zeroFill(number, targetLength, forceSign) {
                var absNumber = "" + Math.abs(number),
                    zerosToFill = targetLength - absNumber.length,
                    sign = number >= 0;
                return (sign ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber
            }
            var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
            var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
            var formatFunctions = {};
            var formatTokenFunctions = {};

            function addFormatToken(token, padded, ordinal, callback) {
                var func = callback;
                if (typeof callback === "string") {
                    func = function() {
                        return this[callback]()
                    }
                }
                if (token) {
                    formatTokenFunctions[token] = func
                }
                if (padded) {
                    formatTokenFunctions[padded[0]] = function() {
                        return zeroFill(func.apply(this, arguments), padded[1], padded[2])
                    }
                }
                if (ordinal) {
                    formatTokenFunctions[ordinal] = function() {
                        return this.localeData().ordinal(func.apply(this, arguments), token)
                    }
                }
            }

            function removeFormattingTokens(input) {
                if (input.match(/\[[\s\S]/)) {
                    return input.replace(/^\[|\]$/g, "")
                }
                return input.replace(/\\/g, "")
            }

            function makeFormatFunction(format) {
                var array = format.match(formattingTokens),
                    i, length;
                for (i = 0, length = array.length; i < length; i++) {
                    if (formatTokenFunctions[array[i]]) {
                        array[i] = formatTokenFunctions[array[i]]
                    } else {
                        array[i] = removeFormattingTokens(array[i])
                    }
                }
                return function(mom) {
                    var output = "",
                        i;
                    for (i = 0; i < length; i++) {
                        output += isFunction(array[i]) ? array[i].call(mom, format) : array[i]
                    }
                    return output
                }
            }

            function formatMoment(m, format) {
                if (!m.isValid()) {
                    return m.localeData().invalidDate()
                }
                format = expandFormat(format, m.localeData());
                formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
                return formatFunctions[format](m)
            }

            function expandFormat(format, locale) {
                var i = 5;

                function replaceLongDateFormatTokens(input) {
                    return locale.longDateFormat(input) || input
                }
                localFormattingTokens.lastIndex = 0;
                while (i >= 0 && localFormattingTokens.test(format)) {
                    format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
                    localFormattingTokens.lastIndex = 0;
                    i -= 1
                }
                return format
            }
            var match1 = /\d/;
            var match2 = /\d\d/;
            var match3 = /\d{3}/;
            var match4 = /\d{4}/;
            var match6 = /[+-]?\d{6}/;
            var match1to2 = /\d\d?/;
            var match3to4 = /\d\d\d\d?/;
            var match5to6 = /\d\d\d\d\d\d?/;
            var match1to3 = /\d{1,3}/;
            var match1to4 = /\d{1,4}/;
            var match1to6 = /[+-]?\d{1,6}/;
            var matchUnsigned = /\d+/;
            var matchSigned = /[+-]?\d+/;
            var matchOffset = /Z|[+-]\d\d:?\d\d/gi;
            var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi;
            var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/;
            var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;
            var regexes = {};

            function addRegexToken(token, regex, strictRegex) {
                regexes[token] = isFunction(regex) ? regex : function(isStrict, localeData) {
                    return isStrict && strictRegex ? strictRegex : regex
                }
            }

            function getParseRegexForToken(token, config) {
                if (!hasOwnProp(regexes, token)) {
                    return new RegExp(unescapeFormat(token))
                }
                return regexes[token](config._strict, config._locale)
            }

            function unescapeFormat(s) {
                return regexEscape(s.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p2, p3, p4) {
                    return p1 || p2 || p3 || p4
                }))
            }

            function regexEscape(s) {
                return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&")
            }
            var tokens = {};

            function addParseToken(token, callback) {
                var i, func = callback;
                if (typeof token === "string") {
                    token = [token]
                }
                if (isNumber(callback)) {
                    func = function(input, array) {
                        array[callback] = toInt(input)
                    }
                }
                for (i = 0; i < token.length; i++) {
                    tokens[token[i]] = func
                }
            }

            function addWeekParseToken(token, callback) {
                addParseToken(token, function(input, array, config, token) {
                    config._w = config._w || {};
                    callback(input, config._w, config, token)
                })
            }

            function addTimeToArrayFromToken(token, input, config) {
                if (input != null && hasOwnProp(tokens, token)) {
                    tokens[token](input, config._a, config, token)
                }
            }
            var YEAR = 0;
            var MONTH = 1;
            var DATE = 2;
            var HOUR = 3;
            var MINUTE = 4;
            var SECOND = 5;
            var MILLISECOND = 6;
            var WEEK = 7;
            var WEEKDAY = 8;
            addFormatToken("Y", 0, 0, function() {
                var y = this.year();
                return y <= 9999 ? "" + y : "+" + y
            });
            addFormatToken(0, ["YY", 2], 0, function() {
                return this.year() % 100
            });
            addFormatToken(0, ["YYYY", 4], 0, "year");
            addFormatToken(0, ["YYYYY", 5], 0, "year");
            addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
            addUnitAlias("year", "y");
            addUnitPriority("year", 1);
            addRegexToken("Y", matchSigned);
            addRegexToken("YY", match1to2, match2);
            addRegexToken("YYYY", match1to4, match4);
            addRegexToken("YYYYY", match1to6, match6);
            addRegexToken("YYYYYY", match1to6, match6);
            addParseToken(["YYYYY", "YYYYYY"], YEAR);
            addParseToken("YYYY", function(input, array) {
                array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input)
            });
            addParseToken("YY", function(input, array) {
                array[YEAR] = hooks.parseTwoDigitYear(input)
            });
            addParseToken("Y", function(input, array) {
                array[YEAR] = parseInt(input, 10)
            });

            function daysInYear(year) {
                return isLeapYear(year) ? 366 : 365
            }

            function isLeapYear(year) {
                return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0
            }
            hooks.parseTwoDigitYear = function(input) {
                return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3)
            };
            var getSetYear = makeGetSet("FullYear", true);

            function getIsLeapYear() {
                return isLeapYear(this.year())
            }

            function makeGetSet(unit, keepTime) {
                return function(value) {
                    if (value != null) {
                        set$1(this, unit, value);
                        hooks.updateOffset(this, keepTime);
                        return this
                    } else {
                        return get(this, unit)
                    }
                }
            }

            function get(mom, unit) {
                return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN
            }

            function set$1(mom, unit, value) {
                if (mom.isValid() && !isNaN(value)) {
                    if (unit === "FullYear" && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
                        mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value, mom.month(), daysInMonth(value, mom.month()))
                    } else {
                        mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value)
                    }
                }
            }

            function stringGet(units) {
                units = normalizeUnits(units);
                if (isFunction(this[units])) {
                    return this[units]()
                }
                return this
            }

            function stringSet(units, value) {
                if (typeof units === "object") {
                    units = normalizeObjectUnits(units);
                    var prioritized = getPrioritizedUnits(units);
                    for (var i = 0; i < prioritized.length; i++) {
                        this[prioritized[i].unit](units[prioritized[i].unit])
                    }
                } else {
                    units = normalizeUnits(units);
                    if (isFunction(this[units])) {
                        return this[units](value)
                    }
                }
                return this
            }

            function mod(n, x) {
                return (n % x + x) % x
            }
            var indexOf;
            if (Array.prototype.indexOf) {
                indexOf = Array.prototype.indexOf
            } else {
                indexOf = function(o) {
                    var i;
                    for (i = 0; i < this.length; ++i) {
                        if (this[i] === o) {
                            return i
                        }
                    }
                    return -1
                }
            }

            function daysInMonth(year, month) {
                if (isNaN(year) || isNaN(month)) {
                    return NaN
                }
                var modMonth = mod(month, 12);
                year += (month - modMonth) / 12;
                return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2
            }
            addFormatToken("M", ["MM", 2], "Mo", function() {
                return this.month() + 1
            });
            addFormatToken("MMM", 0, 0, function(format) {
                return this.localeData().monthsShort(this, format)
            });
            addFormatToken("MMMM", 0, 0, function(format) {
                return this.localeData().months(this, format)
            });
            addUnitAlias("month", "M");
            addUnitPriority("month", 8);
            addRegexToken("M", match1to2);
            addRegexToken("MM", match1to2, match2);
            addRegexToken("MMM", function(isStrict, locale) {
                return locale.monthsShortRegex(isStrict)
            });
            addRegexToken("MMMM", function(isStrict, locale) {
                return locale.monthsRegex(isStrict)
            });
            addParseToken(["M", "MM"], function(input, array) {
                array[MONTH] = toInt(input) - 1
            });
            addParseToken(["MMM", "MMMM"], function(input, array, config, token) {
                var month = config._locale.monthsParse(input, token, config._strict);
                if (month != null) {
                    array[MONTH] = month
                } else {
                    getParsingFlags(config).invalidMonth = input
                }
            });
            var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
            var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split("_");

            function localeMonths(m, format) {
                if (!m) {
                    return isArray(this._months) ? this._months : this._months["standalone"]
                }
                return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? "format" : "standalone"][m.month()]
            }
            var defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");

            function localeMonthsShort(m, format) {
                if (!m) {
                    return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"]
                }
                return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? "format" : "standalone"][m.month()]
            }

            function handleStrictParse(monthName, format, strict) {
                var i, ii, mom, llc = monthName.toLocaleLowerCase();
                if (!this._monthsParse) {
                    this._monthsParse = [];
                    this._longMonthsParse = [];
                    this._shortMonthsParse = [];
                    for (i = 0; i < 12; ++i) {
                        mom = createUTC([2e3, i]);
                        this._shortMonthsParse[i] = this.monthsShort(mom, "").toLocaleLowerCase();
                        this._longMonthsParse[i] = this.months(mom, "").toLocaleLowerCase()
                    }
                }
                if (strict) {
                    if (format === "MMM") {
                        ii = indexOf.call(this._shortMonthsParse, llc);
                        return ii !== -1 ? ii : null
                    } else {
                        ii = indexOf.call(this._longMonthsParse, llc);
                        return ii !== -1 ? ii : null
                    }
                } else {
                    if (format === "MMM") {
                        ii = indexOf.call(this._shortMonthsParse, llc);
                        if (ii !== -1) {
                            return ii
                        }
                        ii = indexOf.call(this._longMonthsParse, llc);
                        return ii !== -1 ? ii : null
                    } else {
                        ii = indexOf.call(this._longMonthsParse, llc);
                        if (ii !== -1) {
                            return ii
                        }
                        ii = indexOf.call(this._shortMonthsParse, llc);
                        return ii !== -1 ? ii : null
                    }
                }
            }

            function localeMonthsParse(monthName, format, strict) {
                var i, mom, regex;
                if (this._monthsParseExact) {
                    return handleStrictParse.call(this, monthName, format, strict)
                }
                if (!this._monthsParse) {
                    this._monthsParse = [];
                    this._longMonthsParse = [];
                    this._shortMonthsParse = []
                }
                for (i = 0; i < 12; i++) {
                    mom = createUTC([2e3, i]);
                    if (strict && !this._longMonthsParse[i]) {
                        this._longMonthsParse[i] = new RegExp("^" + this.months(mom, "").replace(".", "") + "$", "i");
                        this._shortMonthsParse[i] = new RegExp("^" + this.monthsShort(mom, "").replace(".", "") + "$", "i")
                    }
                    if (!strict && !this._monthsParse[i]) {
                        regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
                        this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i")
                    }
                    if (strict && format === "MMMM" && this._longMonthsParse[i].test(monthName)) {
                        return i
                    } else if (strict && format === "MMM" && this._shortMonthsParse[i].test(monthName)) {
                        return i
                    } else if (!strict && this._monthsParse[i].test(monthName)) {
                        return i
                    }
                }
            }

            function setMonth(mom, value) {
                var dayOfMonth;
                if (!mom.isValid()) {
                    return mom
                }
                if (typeof value === "string") {
                    if (/^\d+$/.test(value)) {
                        value = toInt(value)
                    } else {
                        value = mom.localeData().monthsParse(value);
                        if (!isNumber(value)) {
                            return mom
                        }
                    }
                }
                dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
                mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth);
                return mom
            }

            function getSetMonth(value) {
                if (value != null) {
                    setMonth(this, value);
                    hooks.updateOffset(this, true);
                    return this
                } else {
                    return get(this, "Month")
                }
            }

            function getDaysInMonth() {
                return daysInMonth(this.year(), this.month())
            }
            var defaultMonthsShortRegex = matchWord;

            function monthsShortRegex(isStrict) {
                if (this._monthsParseExact) {
                    if (!hasOwnProp(this, "_monthsRegex")) {
                        computeMonthsParse.call(this)
                    }
                    if (isStrict) {
                        return this._monthsShortStrictRegex
                    } else {
                        return this._monthsShortRegex
                    }
                } else {
                    if (!hasOwnProp(this, "_monthsShortRegex")) {
                        this._monthsShortRegex = defaultMonthsShortRegex
                    }
                    return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex
                }
            }
            var defaultMonthsRegex = matchWord;

            function monthsRegex(isStrict) {
                if (this._monthsParseExact) {
                    if (!hasOwnProp(this, "_monthsRegex")) {
                        computeMonthsParse.call(this)
                    }
                    if (isStrict) {
                        return this._monthsStrictRegex
                    } else {
                        return this._monthsRegex
                    }
                } else {
                    if (!hasOwnProp(this, "_monthsRegex")) {
                        this._monthsRegex = defaultMonthsRegex
                    }
                    return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex
                }
            }

            function computeMonthsParse() {
                function cmpLenRev(a, b) {
                    return b.length - a.length
                }
                var shortPieces = [],
                    longPieces = [],
                    mixedPieces = [],
                    i, mom;
                for (i = 0; i < 12; i++) {
                    mom = createUTC([2e3, i]);
                    shortPieces.push(this.monthsShort(mom, ""));
                    longPieces.push(this.months(mom, ""));
                    mixedPieces.push(this.months(mom, ""));
                    mixedPieces.push(this.monthsShort(mom, ""))
                }
                shortPieces.sort(cmpLenRev);
                longPieces.sort(cmpLenRev);
                mixedPieces.sort(cmpLenRev);
                for (i = 0; i < 12; i++) {
                    shortPieces[i] = regexEscape(shortPieces[i]);
                    longPieces[i] = regexEscape(longPieces[i])
                }
                for (i = 0; i < 24; i++) {
                    mixedPieces[i] = regexEscape(mixedPieces[i])
                }
                this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
                this._monthsShortRegex = this._monthsRegex;
                this._monthsStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
                this._monthsShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i")
            }

            function createDate(y, m, d, h, M, s, ms) {
                var date = new Date(y, m, d, h, M, s, ms);
                if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
                    date.setFullYear(y)
                }
                return date
            }

            function createUTCDate(y) {
                var date = new Date(Date.UTC.apply(null, arguments));
                if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
                    date.setUTCFullYear(y)
                }
                return date
            }

            function firstWeekOffset(year, dow, doy) {
                var fwd = 7 + dow - doy,
                    fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
                return -fwdlw + fwd - 1
            }

            function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
                var localWeekday = (7 + weekday - dow) % 7,
                    weekOffset = firstWeekOffset(year, dow, doy),
                    dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
                    resYear, resDayOfYear;
                if (dayOfYear <= 0) {
                    resYear = year - 1;
                    resDayOfYear = daysInYear(resYear) + dayOfYear
                } else if (dayOfYear > daysInYear(year)) {
                    resYear = year + 1;
                    resDayOfYear = dayOfYear - daysInYear(year)
                } else {
                    resYear = year;
                    resDayOfYear = dayOfYear
                }
                return {
                    year: resYear,
                    dayOfYear: resDayOfYear
                }
            }

            function weekOfYear(mom, dow, doy) {
                var weekOffset = firstWeekOffset(mom.year(), dow, doy),
                    week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
                    resWeek, resYear;
                if (week < 1) {
                    resYear = mom.year() - 1;
                    resWeek = week + weeksInYear(resYear, dow, doy)
                } else if (week > weeksInYear(mom.year(), dow, doy)) {
                    resWeek = week - weeksInYear(mom.year(), dow, doy);
                    resYear = mom.year() + 1
                } else {
                    resYear = mom.year();
                    resWeek = week
                }
                return {
                    week: resWeek,
                    year: resYear
                }
            }

            function weeksInYear(year, dow, doy) {
                var weekOffset = firstWeekOffset(year, dow, doy),
                    weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
                return (daysInYear(year) - weekOffset + weekOffsetNext) / 7
            }
            addFormatToken("w", ["ww", 2], "wo", "week");
            addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
            addUnitAlias("week", "w");
            addUnitAlias("isoWeek", "W");
            addUnitPriority("week", 5);
            addUnitPriority("isoWeek", 5);
            addRegexToken("w", match1to2);
            addRegexToken("ww", match1to2, match2);
            addRegexToken("W", match1to2);
            addRegexToken("WW", match1to2, match2);
            addWeekParseToken(["w", "ww", "W", "WW"], function(input, week, config, token) {
                week[token.substr(0, 1)] = toInt(input)
            });

            function localeWeek(mom) {
                return weekOfYear(mom, this._week.dow, this._week.doy).week
            }
            var defaultLocaleWeek = {
                dow: 0,
                doy: 6
            };

            function localeFirstDayOfWeek() {
                return this._week.dow
            }

            function localeFirstDayOfYear() {
                return this._week.doy
            }

            function getSetWeek(input) {
                var week = this.localeData().week(this);
                return input == null ? week : this.add((input - week) * 7, "d")
            }

            function getSetISOWeek(input) {
                var week = weekOfYear(this, 1, 4).week;
                return input == null ? week : this.add((input - week) * 7, "d")
            }
            addFormatToken("d", 0, "do", "day");
            addFormatToken("dd", 0, 0, function(format) {
                return this.localeData().weekdaysMin(this, format)
            });
            addFormatToken("ddd", 0, 0, function(format) {
                return this.localeData().weekdaysShort(this, format)
            });
            addFormatToken("dddd", 0, 0, function(format) {
                return this.localeData().weekdays(this, format)
            });
            addFormatToken("e", 0, 0, "weekday");
            addFormatToken("E", 0, 0, "isoWeekday");
            addUnitAlias("day", "d");
            addUnitAlias("weekday", "e");
            addUnitAlias("isoWeekday", "E");
            addUnitPriority("day", 11);
            addUnitPriority("weekday", 11);
            addUnitPriority("isoWeekday", 11);
            addRegexToken("d", match1to2);
            addRegexToken("e", match1to2);
            addRegexToken("E", match1to2);
            addRegexToken("dd", function(isStrict, locale) {
                return locale.weekdaysMinRegex(isStrict)
            });
            addRegexToken("ddd", function(isStrict, locale) {
                return locale.weekdaysShortRegex(isStrict)
            });
            addRegexToken("dddd", function(isStrict, locale) {
                return locale.weekdaysRegex(isStrict)
            });
            addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config, token) {
                var weekday = config._locale.weekdaysParse(input, token, config._strict);
                if (weekday != null) {
                    week.d = weekday
                } else {
                    getParsingFlags(config).invalidWeekday = input
                }
            });
            addWeekParseToken(["d", "e", "E"], function(input, week, config, token) {
                week[token] = toInt(input)
            });

            function parseWeekday(input, locale) {
                if (typeof input !== "string") {
                    return input
                }
                if (!isNaN(input)) {
                    return parseInt(input, 10)
                }
                input = locale.weekdaysParse(input);
                if (typeof input === "number") {
                    return input
                }
                return null
            }

            function parseIsoWeekday(input, locale) {
                if (typeof input === "string") {
                    return locale.weekdaysParse(input) % 7 || 7
                }
                return isNaN(input) ? null : input
            }
            var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_");

            function localeWeekdays(m, format) {
                if (!m) {
                    return isArray(this._weekdays) ? this._weekdays : this._weekdays["standalone"]
                }
                return isArray(this._weekdays) ? this._weekdays[m.day()] : this._weekdays[this._weekdays.isFormat.test(format) ? "format" : "standalone"][m.day()]
            }
            var defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_");

            function localeWeekdaysShort(m) {
                return m ? this._weekdaysShort[m.day()] : this._weekdaysShort
            }
            var defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_");

            function localeWeekdaysMin(m) {
                return m ? this._weekdaysMin[m.day()] : this._weekdaysMin
            }

            function handleStrictParse$1(weekdayName, format, strict) {
                var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
                if (!this._weekdaysParse) {
                    this._weekdaysParse = [];
                    this._shortWeekdaysParse = [];
                    this._minWeekdaysParse = [];
                    for (i = 0; i < 7; ++i) {
                        mom = createUTC([2e3, 1]).day(i);
                        this._minWeekdaysParse[i] = this.weekdaysMin(mom, "").toLocaleLowerCase();
                        this._shortWeekdaysParse[i] = this.weekdaysShort(mom, "").toLocaleLowerCase();
                        this._weekdaysParse[i] = this.weekdays(mom, "").toLocaleLowerCase()
                    }
                }
                if (strict) {
                    if (format === "dddd") {
                        ii = indexOf.call(this._weekdaysParse, llc);
                        return ii !== -1 ? ii : null
                    } else if (format === "ddd") {
                        ii = indexOf.call(this._shortWeekdaysParse, llc);
                        return ii !== -1 ? ii : null
                    } else {
                        ii = indexOf.call(this._minWeekdaysParse, llc);
                        return ii !== -1 ? ii : null
                    }
                } else {
                    if (format === "dddd") {
                        ii = indexOf.call(this._weekdaysParse, llc);
                        if (ii !== -1) {
                            return ii
                        }
                        ii = indexOf.call(this._shortWeekdaysParse, llc);
                        if (ii !== -1) {
                            return ii
                        }
                        ii = indexOf.call(this._minWeekdaysParse, llc);
                        return ii !== -1 ? ii : null
                    } else if (format === "ddd") {
                        ii = indexOf.call(this._shortWeekdaysParse, llc);
                        if (ii !== -1) {
                            return ii
                        }
                        ii = indexOf.call(this._weekdaysParse, llc);
                        if (ii !== -1) {
                            return ii
                        }
                        ii = indexOf.call(this._minWeekdaysParse, llc);
                        return ii !== -1 ? ii : null
                    } else {
                        ii = indexOf.call(this._minWeekdaysParse, llc);
                        if (ii !== -1) {
                            return ii
                        }
                        ii = indexOf.call(this._weekdaysParse, llc);
                        if (ii !== -1) {
                            return ii
                        }
                        ii = indexOf.call(this._shortWeekdaysParse, llc);
                        return ii !== -1 ? ii : null
                    }
                }
            }

            function localeWeekdaysParse(weekdayName, format, strict) {
                var i, mom, regex;
                if (this._weekdaysParseExact) {
                    return handleStrictParse$1.call(this, weekdayName, format, strict)
                }
                if (!this._weekdaysParse) {
                    this._weekdaysParse = [];
                    this._minWeekdaysParse = [];
                    this._shortWeekdaysParse = [];
                    this._fullWeekdaysParse = []
                }
                for (i = 0; i < 7; i++) {
                    mom = createUTC([2e3, 1]).day(i);
                    if (strict && !this._fullWeekdaysParse[i]) {
                        this._fullWeekdaysParse[i] = new RegExp("^" + this.weekdays(mom, "").replace(".", "\\.?") + "$", "i");
                        this._shortWeekdaysParse[i] = new RegExp("^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$", "i");
                        this._minWeekdaysParse[i] = new RegExp("^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$", "i")
                    }
                    if (!this._weekdaysParse[i]) {
                        regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
                        this._weekdaysParse[i] = new RegExp(regex.replace(".", ""), "i")
                    }
                    if (strict && format === "dddd" && this._fullWeekdaysParse[i].test(weekdayName)) {
                        return i
                    } else if (strict && format === "ddd" && this._shortWeekdaysParse[i].test(weekdayName)) {
                        return i
                    } else if (strict && format === "dd" && this._minWeekdaysParse[i].test(weekdayName)) {
                        return i
                    } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                        return i
                    }
                }
            }

            function getSetDayOfWeek(input) {
                if (!this.isValid()) {
                    return input != null ? this : NaN
                }
                var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
                if (input != null) {
                    input = parseWeekday(input, this.localeData());
                    return this.add(input - day, "d")
                } else {
                    return day
                }
            }

            function getSetLocaleDayOfWeek(input) {
                if (!this.isValid()) {
                    return input != null ? this : NaN
                }
                var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
                return input == null ? weekday : this.add(input - weekday, "d")
            }

            function getSetISODayOfWeek(input) {
                if (!this.isValid()) {
                    return input != null ? this : NaN
                }
                if (input != null) {
                    var weekday = parseIsoWeekday(input, this.localeData());
                    return this.day(this.day() % 7 ? weekday : weekday - 7)
                } else {
                    return this.day() || 7
                }
            }
            var defaultWeekdaysRegex = matchWord;

            function weekdaysRegex(isStrict) {
                if (this._weekdaysParseExact) {
                    if (!hasOwnProp(this, "_weekdaysRegex")) {
                        computeWeekdaysParse.call(this)
                    }
                    if (isStrict) {
                        return this._weekdaysStrictRegex
                    } else {
                        return this._weekdaysRegex
                    }
                } else {
                    if (!hasOwnProp(this, "_weekdaysRegex")) {
                        this._weekdaysRegex = defaultWeekdaysRegex
                    }
                    return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex
                }
            }
            var defaultWeekdaysShortRegex = matchWord;

            function weekdaysShortRegex(isStrict) {
                if (this._weekdaysParseExact) {
                    if (!hasOwnProp(this, "_weekdaysRegex")) {
                        computeWeekdaysParse.call(this)
                    }
                    if (isStrict) {
                        return this._weekdaysShortStrictRegex
                    } else {
                        return this._weekdaysShortRegex
                    }
                } else {
                    if (!hasOwnProp(this, "_weekdaysShortRegex")) {
                        this._weekdaysShortRegex = defaultWeekdaysShortRegex
                    }
                    return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex
                }
            }
            var defaultWeekdaysMinRegex = matchWord;

            function weekdaysMinRegex(isStrict) {
                if (this._weekdaysParseExact) {
                    if (!hasOwnProp(this, "_weekdaysRegex")) {
                        computeWeekdaysParse.call(this)
                    }
                    if (isStrict) {
                        return this._weekdaysMinStrictRegex
                    } else {
                        return this._weekdaysMinRegex
                    }
                } else {
                    if (!hasOwnProp(this, "_weekdaysMinRegex")) {
                        this._weekdaysMinRegex = defaultWeekdaysMinRegex
                    }
                    return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex
                }
            }

            function computeWeekdaysParse() {
                function cmpLenRev(a, b) {
                    return b.length - a.length
                }
                var minPieces = [],
                    shortPieces = [],
                    longPieces = [],
                    mixedPieces = [],
                    i, mom, minp, shortp, longp;
                for (i = 0; i < 7; i++) {
                    mom = createUTC([2e3, 1]).day(i);
                    minp = this.weekdaysMin(mom, "");
                    shortp = this.weekdaysShort(mom, "");
                    longp = this.weekdays(mom, "");
                    minPieces.push(minp);
                    shortPieces.push(shortp);
                    longPieces.push(longp);
                    mixedPieces.push(minp);
                    mixedPieces.push(shortp);
                    mixedPieces.push(longp)
                }
                minPieces.sort(cmpLenRev);
                shortPieces.sort(cmpLenRev);
                longPieces.sort(cmpLenRev);
                mixedPieces.sort(cmpLenRev);
                for (i = 0; i < 7; i++) {
                    shortPieces[i] = regexEscape(shortPieces[i]);
                    longPieces[i] = regexEscape(longPieces[i]);
                    mixedPieces[i] = regexEscape(mixedPieces[i])
                }
                this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
                this._weekdaysShortRegex = this._weekdaysRegex;
                this._weekdaysMinRegex = this._weekdaysRegex;
                this._weekdaysStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
                this._weekdaysShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
                this._weekdaysMinStrictRegex = new RegExp("^(" + minPieces.join("|") + ")", "i")
            }

            function hFormat() {
                return this.hours() % 12 || 12
            }

            function kFormat() {
                return this.hours() || 24
            }
            addFormatToken("H", ["HH", 2], 0, "hour");
            addFormatToken("h", ["hh", 2], 0, hFormat);
            addFormatToken("k", ["kk", 2], 0, kFormat);
            addFormatToken("hmm", 0, 0, function() {
                return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2)
            });
            addFormatToken("hmmss", 0, 0, function() {
                return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2)
            });
            addFormatToken("Hmm", 0, 0, function() {
                return "" + this.hours() + zeroFill(this.minutes(), 2)
            });
            addFormatToken("Hmmss", 0, 0, function() {
                return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2)
            });

            function meridiem(token, lowercase) {
                addFormatToken(token, 0, 0, function() {
                    return this.localeData().meridiem(this.hours(), this.minutes(), lowercase)
                })
            }
            meridiem("a", true);
            meridiem("A", false);
            addUnitAlias("hour", "h");
            addUnitPriority("hour", 13);

            function matchMeridiem(isStrict, locale) {
                return locale._meridiemParse
            }
            addRegexToken("a", matchMeridiem);
            addRegexToken("A", matchMeridiem);
            addRegexToken("H", match1to2);
            addRegexToken("h", match1to2);
            addRegexToken("k", match1to2);
            addRegexToken("HH", match1to2, match2);
            addRegexToken("hh", match1to2, match2);
            addRegexToken("kk", match1to2, match2);
            addRegexToken("hmm", match3to4);
            addRegexToken("hmmss", match5to6);
            addRegexToken("Hmm", match3to4);
            addRegexToken("Hmmss", match5to6);
            addParseToken(["H", "HH"], HOUR);
            addParseToken(["k", "kk"], function(input, array, config) {
                var kInput = toInt(input);
                array[HOUR] = kInput === 24 ? 0 : kInput
            });
            addParseToken(["a", "A"], function(input, array, config) {
                config._isPm = config._locale.isPM(input);
                config._meridiem = input
            });
            addParseToken(["h", "hh"], function(input, array, config) {
                array[HOUR] = toInt(input);
                getParsingFlags(config).bigHour = true
            });
            addParseToken("hmm", function(input, array, config) {
                var pos = input.length - 2;
                array[HOUR] = toInt(input.substr(0, pos));
                array[MINUTE] = toInt(input.substr(pos));
                getParsingFlags(config).bigHour = true
            });
            addParseToken("hmmss", function(input, array, config) {
                var pos1 = input.length - 4;
                var pos2 = input.length - 2;
                array[HOUR] = toInt(input.substr(0, pos1));
                array[MINUTE] = toInt(input.substr(pos1, 2));
                array[SECOND] = toInt(input.substr(pos2));
                getParsingFlags(config).bigHour = true
            });
            addParseToken("Hmm", function(input, array, config) {
                var pos = input.length - 2;
                array[HOUR] = toInt(input.substr(0, pos));
                array[MINUTE] = toInt(input.substr(pos))
            });
            addParseToken("Hmmss", function(input, array, config) {
                var pos1 = input.length - 4;
                var pos2 = input.length - 2;
                array[HOUR] = toInt(input.substr(0, pos1));
                array[MINUTE] = toInt(input.substr(pos1, 2));
                array[SECOND] = toInt(input.substr(pos2))
            });

            function localeIsPM(input) {
                return (input + "").toLowerCase().charAt(0) === "p"
            }
            var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;

            function localeMeridiem(hours, minutes, isLower) {
                if (hours > 11) {
                    return isLower ? "pm" : "PM"
                } else {
                    return isLower ? "am" : "AM"
                }
            }
            var getSetHour = makeGetSet("Hours", true);
            var baseConfig = {
                calendar: defaultCalendar,
                longDateFormat: defaultLongDateFormat,
                invalidDate: defaultInvalidDate,
                ordinal: defaultOrdinal,
                dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
                relativeTime: defaultRelativeTime,
                months: defaultLocaleMonths,
                monthsShort: defaultLocaleMonthsShort,
                week: defaultLocaleWeek,
                weekdays: defaultLocaleWeekdays,
                weekdaysMin: defaultLocaleWeekdaysMin,
                weekdaysShort: defaultLocaleWeekdaysShort,
                meridiemParse: defaultLocaleMeridiemParse
            };
            var locales = {};
            var localeFamilies = {};
            var globalLocale;

            function normalizeLocale(key) {
                return key ? key.toLowerCase().replace("_", "-") : key
            }

            function chooseLocale(names) {
                var i = 0,
                    j, next, locale, split;
                while (i < names.length) {
                    split = normalizeLocale(names[i]).split("-");
                    j = split.length;
                    next = normalizeLocale(names[i + 1]);
                    next = next ? next.split("-") : null;
                    while (j > 0) {
                        locale = loadLocale(split.slice(0, j).join("-"));
                        if (locale) {
                            return locale
                        }
                        if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                            break
                        }
                        j--
                    }
                    i++
                }
                return globalLocale
            }

            function loadLocale(name) {
                var oldLocale = null;
                if (!locales[name] && typeof module !== "undefined" && module && module.exports) {
                    try {
                        oldLocale = globalLocale._abbr;
                        var aliasedRequire = require;
                        aliasedRequire("./locale/" + name);
                        getSetGlobalLocale(oldLocale)
                    } catch (e) {}
                }
                return locales[name]
            }

            function getSetGlobalLocale(key, values) {
                var data;
                if (key) {
                    if (isUndefined(values)) {
                        data = getLocale(key)
                    } else {
                        data = defineLocale(key, values)
                    }
                    if (data) {
                        globalLocale = data
                    } else {
                        if (typeof console !== "undefined" && console.warn) {
                            console.warn("Locale " + key + " not found. Did you forget to load it?")
                        }
                    }
                }
                return globalLocale._abbr
            }

            function defineLocale(name, config) {
                if (config !== null) {
                    var locale, parentConfig = baseConfig;
                    config.abbr = name;
                    if (locales[name] != null) {
                        deprecateSimple("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change " + "an existing locale. moment.defineLocale(localeName, " + "config) should only be used for creating a new locale " + "See http://momentjs.com/guides/#/warnings/define-locale/ for more info.");
                        parentConfig = locales[name]._config
                    } else if (config.parentLocale != null) {
                        if (locales[config.parentLocale] != null) {
                            parentConfig = locales[config.parentLocale]._config
                        } else {
                            locale = loadLocale(config.parentLocale);
                            if (locale != null) {
                                parentConfig = locale._config
                            } else {
                                if (!localeFamilies[config.parentLocale]) {
                                    localeFamilies[config.parentLocale] = []
                                }
                                localeFamilies[config.parentLocale].push({
                                    name: name,
                                    config: config
                                });
                                return null
                            }
                        }
                    }
                    locales[name] = new Locale(mergeConfigs(parentConfig, config));
                    if (localeFamilies[name]) {
                        localeFamilies[name].forEach(function(x) {
                            defineLocale(x.name, x.config)
                        })
                    }
                    getSetGlobalLocale(name);
                    return locales[name]
                } else {
                    delete locales[name];
                    return null
                }
            }

            function updateLocale(name, config) {
                if (config != null) {
                    var locale, tmpLocale, parentConfig = baseConfig;
                    tmpLocale = loadLocale(name);
                    if (tmpLocale != null) {
                        parentConfig = tmpLocale._config
                    }
                    config = mergeConfigs(parentConfig, config);
                    locale = new Locale(config);
                    locale.parentLocale = locales[name];
                    locales[name] = locale;
                    getSetGlobalLocale(name)
                } else {
                    if (locales[name] != null) {
                        if (locales[name].parentLocale != null) {
                            locales[name] = locales[name].parentLocale
                        } else if (locales[name] != null) {
                            delete locales[name]
                        }
                    }
                }
                return locales[name]
            }

            function getLocale(key) {
                var locale;
                if (key && key._locale && key._locale._abbr) {
                    key = key._locale._abbr
                }
                if (!key) {
                    return globalLocale
                }
                if (!isArray(key)) {
                    locale = loadLocale(key);
                    if (locale) {
                        return locale
                    }
                    key = [key]
                }
                return chooseLocale(key)
            }

            function listLocales() {
                return keys(locales)
            }

            function checkOverflow(m) {
                var overflow;
                var a = m._a;
                if (a && getParsingFlags(m).overflow === -2) {
                    overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
                    if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                        overflow = DATE
                    }
                    if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                        overflow = WEEK
                    }
                    if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                        overflow = WEEKDAY
                    }
                    getParsingFlags(m).overflow = overflow
                }
                return m
            }

            function defaults(a, b, c) {
                if (a != null) {
                    return a
                }
                if (b != null) {
                    return b
                }
                return c
            }

            function currentDateArray(config) {
                var nowValue = new Date(hooks.now());
                if (config._useUTC) {
                    return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()]
                }
                return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()]
            }

            function configFromArray(config) {
                var i, date, input = [],
                    currentDate, expectedWeekday, yearToUse;
                if (config._d) {
                    return
                }
                currentDate = currentDateArray(config);
                if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
                    dayOfYearFromWeekInfo(config)
                }
                if (config._dayOfYear != null) {
                    yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
                    if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                        getParsingFlags(config)._overflowDayOfYear = true
                    }
                    date = createUTCDate(yearToUse, 0, config._dayOfYear);
                    config._a[MONTH] = date.getUTCMonth();
                    config._a[DATE] = date.getUTCDate()
                }
                for (i = 0; i < 3 && config._a[i] == null; ++i) {
                    config._a[i] = input[i] = currentDate[i]
                }
                for (; i < 7; i++) {
                    config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i]
                }
                if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
                    config._nextDay = true;
                    config._a[HOUR] = 0
                }
                config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
                expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
                if (config._tzm != null) {
                    config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm)
                }
                if (config._nextDay) {
                    config._a[HOUR] = 24
                }
                if (config._w && typeof config._w.d !== "undefined" && config._w.d !== expectedWeekday) {
                    getParsingFlags(config).weekdayMismatch = true
                }
            }

            function dayOfYearFromWeekInfo(config) {
                var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;
                w = config._w;
                if (w.GG != null || w.W != null || w.E != null) {
                    dow = 1;
                    doy = 4;
                    weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
                    week = defaults(w.W, 1);
                    weekday = defaults(w.E, 1);
                    if (weekday < 1 || weekday > 7) {
                        weekdayOverflow = true
                    }
                } else {
                    dow = config._locale._week.dow;
                    doy = config._locale._week.doy;
                    var curWeek = weekOfYear(createLocal(), dow, doy);
                    weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
                    week = defaults(w.w, curWeek.week);
                    if (w.d != null) {
                        weekday = w.d;
                        if (weekday < 0 || weekday > 6) {
                            weekdayOverflow = true
                        }
                    } else if (w.e != null) {
                        weekday = w.e + dow;
                        if (w.e < 0 || w.e > 6) {
                            weekdayOverflow = true
                        }
                    } else {
                        weekday = dow
                    }
                }
                if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
                    getParsingFlags(config)._overflowWeeks = true
                } else if (weekdayOverflow != null) {
                    getParsingFlags(config)._overflowWeekday = true
                } else {
                    temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
                    config._a[YEAR] = temp.year;
                    config._dayOfYear = temp.dayOfYear
                }
            }
            var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
            var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
            var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
            var isoDates = [
                ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
                ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
                ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
                ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
                ["YYYY-DDD", /\d{4}-\d{3}/],
                ["YYYY-MM", /\d{4}-\d\d/, false],
                ["YYYYYYMMDD", /[+-]\d{10}/],
                ["YYYYMMDD", /\d{8}/],
                ["GGGG[W]WWE", /\d{4}W\d{3}/],
                ["GGGG[W]WW", /\d{4}W\d{2}/, false],
                ["YYYYDDD", /\d{7}/]
            ];
            var isoTimes = [
                ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
                ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
                ["HH:mm:ss", /\d\d:\d\d:\d\d/],
                ["HH:mm", /\d\d:\d\d/],
                ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
                ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
                ["HHmmss", /\d\d\d\d\d\d/],
                ["HHmm", /\d\d\d\d/],
                ["HH", /\d\d/]
            ];
            var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

            function configFromISO(config) {
                var i, l, string = config._i,
                    match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
                    allowTime, dateFormat, timeFormat, tzFormat;
                if (match) {
                    getParsingFlags(config).iso = true;
                    for (i = 0, l = isoDates.length; i < l; i++) {
                        if (isoDates[i][1].exec(match[1])) {
                            dateFormat = isoDates[i][0];
                            allowTime = isoDates[i][2] !== false;
                            break
                        }
                    }
                    if (dateFormat == null) {
                        config._isValid = false;
                        return
                    }
                    if (match[3]) {
                        for (i = 0, l = isoTimes.length; i < l; i++) {
                            if (isoTimes[i][1].exec(match[3])) {
                                timeFormat = (match[2] || " ") + isoTimes[i][0];
                                break
                            }
                        }
                        if (timeFormat == null) {
                            config._isValid = false;
                            return
                        }
                    }
                    if (!allowTime && timeFormat != null) {
                        config._isValid = false;
                        return
                    }
                    if (match[4]) {
                        if (tzRegex.exec(match[4])) {
                            tzFormat = "Z"
                        } else {
                            config._isValid = false;
                            return
                        }
                    }
                    config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
                    configFromStringAndFormat(config)
                } else {
                    config._isValid = false
                }
            }
            var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

            function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
                var result = [untruncateYear(yearStr), defaultLocaleMonthsShort.indexOf(monthStr), parseInt(dayStr, 10), parseInt(hourStr, 10), parseInt(minuteStr, 10)];
                if (secondStr) {
                    result.push(parseInt(secondStr, 10))
                }
                return result
            }

            function untruncateYear(yearStr) {
                var year = parseInt(yearStr, 10);
                if (year <= 49) {
                    return 2e3 + year
                } else if (year <= 999) {
                    return 1900 + year
                }
                return year
            }

            function preprocessRFC2822(s) {
                return s.replace(/\([^)]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "")
            }

            function checkWeekday(weekdayStr, parsedInput, config) {
                if (weekdayStr) {
                    var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                        weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
                    if (weekdayProvided !== weekdayActual) {
                        getParsingFlags(config).weekdayMismatch = true;
                        config._isValid = false;
                        return false
                    }
                }
                return true
            }
            var obsOffsets = {
                UT: 0,
                GMT: 0,
                EDT: -4 * 60,
                EST: -5 * 60,
                CDT: -5 * 60,
                CST: -6 * 60,
                MDT: -6 * 60,
                MST: -7 * 60,
                PDT: -7 * 60,
                PST: -8 * 60
            };

            function calculateOffset(obsOffset, militaryOffset, numOffset) {
                if (obsOffset) {
                    return obsOffsets[obsOffset]
                } else if (militaryOffset) {
                    return 0
                } else {
                    var hm = parseInt(numOffset, 10);
                    var m = hm % 100,
                        h = (hm - m) / 100;
                    return h * 60 + m
                }
            }

            function configFromRFC2822(config) {
                var match = rfc2822.exec(preprocessRFC2822(config._i));
                if (match) {
                    var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
                    if (!checkWeekday(match[1], parsedArray, config)) {
                        return
                    }
                    config._a = parsedArray;
                    config._tzm = calculateOffset(match[8], match[9], match[10]);
                    config._d = createUTCDate.apply(null, config._a);
                    config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
                    getParsingFlags(config).rfc2822 = true
                } else {
                    config._isValid = false
                }
            }

            function configFromString(config) {
                var matched = aspNetJsonRegex.exec(config._i);
                if (matched !== null) {
                    config._d = new Date(+matched[1]);
                    return
                }
                configFromISO(config);
                if (config._isValid === false) {
                    delete config._isValid
                } else {
                    return
                }
                configFromRFC2822(config);
                if (config._isValid === false) {
                    delete config._isValid
                } else {
                    return
                }
                hooks.createFromInputFallback(config)
            }
            hooks.createFromInputFallback = deprecate("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), " + "which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are " + "discouraged and will be removed in an upcoming major release. Please refer to " + "http://momentjs.com/guides/#/warnings/js-date/ for more info.", function(config) {
                config._d = new Date(config._i + (config._useUTC ? " UTC" : ""))
            });
            hooks.ISO_8601 = function() {};
            hooks.RFC_2822 = function() {};

            function configFromStringAndFormat(config) {
                if (config._f === hooks.ISO_8601) {
                    configFromISO(config);
                    return
                }
                if (config._f === hooks.RFC_2822) {
                    configFromRFC2822(config);
                    return
                }
                config._a = [];
                getParsingFlags(config).empty = true;
                var string = "" + config._i,
                    i, parsedInput, tokens, token, skipped, stringLength = string.length,
                    totalParsedInputLength = 0;
                tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
                for (i = 0; i < tokens.length; i++) {
                    token = tokens[i];
                    parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
                    if (parsedInput) {
                        skipped = string.substr(0, string.indexOf(parsedInput));
                        if (skipped.length > 0) {
                            getParsingFlags(config).unusedInput.push(skipped)
                        }
                        string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                        totalParsedInputLength += parsedInput.length
                    }
                    if (formatTokenFunctions[token]) {
                        if (parsedInput) {
                            getParsingFlags(config).empty = false
                        } else {
                            getParsingFlags(config).unusedTokens.push(token)
                        }
                        addTimeToArrayFromToken(token, parsedInput, config)
                    } else if (config._strict && !parsedInput) {
                        getParsingFlags(config).unusedTokens.push(token)
                    }
                }
                getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
                if (string.length > 0) {
                    getParsingFlags(config).unusedInput.push(string)
                }
                if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
                    getParsingFlags(config).bigHour = undefined
                }
                getParsingFlags(config).parsedDateParts = config._a.slice(0);
                getParsingFlags(config).meridiem = config._meridiem;
                config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
                configFromArray(config);
                checkOverflow(config)
            }

            function meridiemFixWrap(locale, hour, meridiem) {
                var isPm;
                if (meridiem == null) {
                    return hour
                }
                if (locale.meridiemHour != null) {
                    return locale.meridiemHour(hour, meridiem)
                } else if (locale.isPM != null) {
                    isPm = locale.isPM(meridiem);
                    if (isPm && hour < 12) {
                        hour += 12
                    }
                    if (!isPm && hour === 12) {
                        hour = 0
                    }
                    return hour
                } else {
                    return hour
                }
            }

            function configFromStringAndArray(config) {
                var tempConfig, bestMoment, scoreToBeat, i, currentScore;
                if (config._f.length === 0) {
                    getParsingFlags(config).invalidFormat = true;
                    config._d = new Date(NaN);
                    return
                }
                for (i = 0; i < config._f.length; i++) {
                    currentScore = 0;
                    tempConfig = copyConfig({}, config);
                    if (config._useUTC != null) {
                        tempConfig._useUTC = config._useUTC
                    }
                    tempConfig._f = config._f[i];
                    configFromStringAndFormat(tempConfig);
                    if (!isValid(tempConfig)) {
                        continue
                    }
                    currentScore += getParsingFlags(tempConfig).charsLeftOver;
                    currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
                    getParsingFlags(tempConfig).score = currentScore;
                    if (scoreToBeat == null || currentScore < scoreToBeat) {
                        scoreToBeat = currentScore;
                        bestMoment = tempConfig
                    }
                }
                extend(config, bestMoment || tempConfig)
            }

            function configFromObject(config) {
                if (config._d) {
                    return
                }
                var i = normalizeObjectUnits(config._i);
                config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function(obj) {
                    return obj && parseInt(obj, 10)
                });
                configFromArray(config)
            }

            function createFromConfig(config) {
                var res = new Moment(checkOverflow(prepareConfig(config)));
                if (res._nextDay) {
                    res.add(1, "d");
                    res._nextDay = undefined
                }
                return res
            }

            function prepareConfig(config) {
                var input = config._i,
                    format = config._f;
                config._locale = config._locale || getLocale(config._l);
                if (input === null || format === undefined && input === "") {
                    return createInvalid({
                        nullInput: true
                    })
                }
                if (typeof input === "string") {
                    config._i = input = config._locale.preparse(input)
                }
                if (isMoment(input)) {
                    return new Moment(checkOverflow(input))
                } else if (isDate(input)) {
                    config._d = input
                } else if (isArray(format)) {
                    configFromStringAndArray(config)
                } else if (format) {
                    configFromStringAndFormat(config)
                } else {
                    configFromInput(config)
                }
                if (!isValid(config)) {
                    config._d = null
                }
                return config
            }

            function configFromInput(config) {
                var input = config._i;
                if (isUndefined(input)) {
                    config._d = new Date(hooks.now())
                } else if (isDate(input)) {
                    config._d = new Date(input.valueOf())
                } else if (typeof input === "string") {
                    configFromString(config)
                } else if (isArray(input)) {
                    config._a = map(input.slice(0), function(obj) {
                        return parseInt(obj, 10)
                    });
                    configFromArray(config)
                } else if (isObject(input)) {
                    configFromObject(config)
                } else if (isNumber(input)) {
                    config._d = new Date(input)
                } else {
                    hooks.createFromInputFallback(config)
                }
            }

            function createLocalOrUTC(input, format, locale, strict, isUTC) {
                var c = {};
                if (locale === true || locale === false) {
                    strict = locale;
                    locale = undefined
                }
                if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
                    input = undefined
                }
                c._isAMomentObject = true;
                c._useUTC = c._isUTC = isUTC;
                c._l = locale;
                c._i = input;
                c._f = format;
                c._strict = strict;
                return createFromConfig(c)
            }

            function createLocal(input, format, locale, strict) {
                return createLocalOrUTC(input, format, locale, strict, false)
            }
            var prototypeMin = deprecate("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                    return other < this ? this : other
                } else {
                    return createInvalid()
                }
            });
            var prototypeMax = deprecate("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                    return other > this ? this : other
                } else {
                    return createInvalid()
                }
            });

            function pickBy(fn, moments) {
                var res, i;
                if (moments.length === 1 && isArray(moments[0])) {
                    moments = moments[0]
                }
                if (!moments.length) {
                    return createLocal()
                }
                res = moments[0];
                for (i = 1; i < moments.length; ++i) {
                    if (!moments[i].isValid() || moments[i][fn](res)) {
                        res = moments[i]
                    }
                }
                return res
            }

            function min() {
                var args = [].slice.call(arguments, 0);
                return pickBy("isBefore", args)
            }

            function max() {
                var args = [].slice.call(arguments, 0);
                return pickBy("isAfter", args)
            }
            var now = function() {
                return Date.now ? Date.now() : +new Date
            };
            var ordering = ["year", "quarter", "month", "week", "day", "hour", "minute", "second", "millisecond"];

            function isDurationValid(m) {
                for (var key in m) {
                    if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                        return false
                    }
                }
                var unitHasDecimal = false;
                for (var i = 0; i < ordering.length; ++i) {
                    if (m[ordering[i]]) {
                        if (unitHasDecimal) {
                            return false
                        }
                        if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                            unitHasDecimal = true
                        }
                    }
                }
                return true
            }

            function isValid$1() {
                return this._isValid
            }

            function createInvalid$1() {
                return createDuration(NaN)
            }

            function Duration(duration) {
                var normalizedInput = normalizeObjectUnits(duration),
                    years = normalizedInput.year || 0,
                    quarters = normalizedInput.quarter || 0,
                    months = normalizedInput.month || 0,
                    weeks = normalizedInput.week || 0,
                    days = normalizedInput.day || 0,
                    hours = normalizedInput.hour || 0,
                    minutes = normalizedInput.minute || 0,
                    seconds = normalizedInput.second || 0,
                    milliseconds = normalizedInput.millisecond || 0;
                this._isValid = isDurationValid(normalizedInput);
                this._milliseconds = +milliseconds + seconds * 1e3 + minutes * 6e4 + hours * 1e3 * 60 * 60;
                this._days = +days + weeks * 7;
                this._months = +months + quarters * 3 + years * 12;
                this._data = {};
                this._locale = getLocale();
                this._bubble()
            }

            function isDuration(obj) {
                return obj instanceof Duration
            }

            function absRound(number) {
                if (number < 0) {
                    return Math.round(-1 * number) * -1
                } else {
                    return Math.round(number)
                }
            }

            function offset(token, separator) {
                addFormatToken(token, 0, 0, function() {
                    var offset = this.utcOffset();
                    var sign = "+";
                    if (offset < 0) {
                        offset = -offset;
                        sign = "-"
                    }
                    return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2)
                })
            }
            offset("Z", ":");
            offset("ZZ", "");
            addRegexToken("Z", matchShortOffset);
            addRegexToken("ZZ", matchShortOffset);
            addParseToken(["Z", "ZZ"], function(input, array, config) {
                config._useUTC = true;
                config._tzm = offsetFromString(matchShortOffset, input)
            });
            var chunkOffset = /([\+\-]|\d\d)/gi;

            function offsetFromString(matcher, string) {
                var matches = (string || "").match(matcher);
                if (matches === null) {
                    return null
                }
                var chunk = matches[matches.length - 1] || [];
                var parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
                var minutes = +(parts[1] * 60) + toInt(parts[2]);
                return minutes === 0 ? 0 : parts[0] === "+" ? minutes : -minutes
            }

            function cloneWithOffset(input, model) {
                var res, diff;
                if (model._isUTC) {
                    res = model.clone();
                    diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
                    res._d.setTime(res._d.valueOf() + diff);
                    hooks.updateOffset(res, false);
                    return res
                } else {
                    return createLocal(input).local()
                }
            }

            function getDateOffset(m) {
                return -Math.round(m._d.getTimezoneOffset() / 15) * 15
            }
            hooks.updateOffset = function() {};

            function getSetOffset(input, keepLocalTime, keepMinutes) {
                var offset = this._offset || 0,
                    localAdjust;
                if (!this.isValid()) {
                    return input != null ? this : NaN
                }
                if (input != null) {
                    if (typeof input === "string") {
                        input = offsetFromString(matchShortOffset, input);
                        if (input === null) {
                            return this
                        }
                    } else if (Math.abs(input) < 16 && !keepMinutes) {
                        input = input * 60
                    }
                    if (!this._isUTC && keepLocalTime) {
                        localAdjust = getDateOffset(this)
                    }
                    this._offset = input;
                    this._isUTC = true;
                    if (localAdjust != null) {
                        this.add(localAdjust, "m")
                    }
                    if (offset !== input) {
                        if (!keepLocalTime || this._changeInProgress) {
                            addSubtract(this, createDuration(input - offset, "m"), 1, false)
                        } else if (!this._changeInProgress) {
                            this._changeInProgress = true;
                            hooks.updateOffset(this, true);
                            this._changeInProgress = null
                        }
                    }
                    return this
                } else {
                    return this._isUTC ? offset : getDateOffset(this)
                }
            }

            function getSetZone(input, keepLocalTime) {
                if (input != null) {
                    if (typeof input !== "string") {
                        input = -input
                    }
                    this.utcOffset(input, keepLocalTime);
                    return this
                } else {
                    return -this.utcOffset()
                }
            }

            function setOffsetToUTC(keepLocalTime) {
                return this.utcOffset(0, keepLocalTime)
            }

            function setOffsetToLocal(keepLocalTime) {
                if (this._isUTC) {
                    this.utcOffset(0, keepLocalTime);
                    this._isUTC = false;
                    if (keepLocalTime) {
                        this.subtract(getDateOffset(this), "m")
                    }
                }
                return this
            }

            function setOffsetToParsedOffset() {
                if (this._tzm != null) {
                    this.utcOffset(this._tzm, false, true)
                } else if (typeof this._i === "string") {
                    var tZone = offsetFromString(matchOffset, this._i);
                    if (tZone != null) {
                        this.utcOffset(tZone)
                    } else {
                        this.utcOffset(0, true)
                    }
                }
                return this
            }

            function hasAlignedHourOffset(input) {
                if (!this.isValid()) {
                    return false
                }
                input = input ? createLocal(input).utcOffset() : 0;
                return (this.utcOffset() - input) % 60 === 0
            }

            function isDaylightSavingTime() {
                return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset()
            }

            function isDaylightSavingTimeShifted() {
                if (!isUndefined(this._isDSTShifted)) {
                    return this._isDSTShifted
                }
                var c = {};
                copyConfig(c, this);
                c = prepareConfig(c);
                if (c._a) {
                    var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
                    this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0
                } else {
                    this._isDSTShifted = false
                }
                return this._isDSTShifted
            }

            function isLocal() {
                return this.isValid() ? !this._isUTC : false
            }

            function isUtcOffset() {
                return this.isValid() ? this._isUTC : false
            }

            function isUtc() {
                return this.isValid() ? this._isUTC && this._offset === 0 : false
            }
            var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;
            var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

            function createDuration(input, key) {
                var duration = input,
                    match = null,
                    sign, ret, diffRes;
                if (isDuration(input)) {
                    duration = {
                        ms: input._milliseconds,
                        d: input._days,
                        M: input._months
                    }
                } else if (isNumber(input)) {
                    duration = {};
                    if (key) {
                        duration[key] = input
                    } else {
                        duration.milliseconds = input
                    }
                } else if (!!(match = aspNetRegex.exec(input))) {
                    sign = match[1] === "-" ? -1 : 1;
                    duration = {
                        y: 0,
                        d: toInt(match[DATE]) * sign,
                        h: toInt(match[HOUR]) * sign,
                        m: toInt(match[MINUTE]) * sign,
                        s: toInt(match[SECOND]) * sign,
                        ms: toInt(absRound(match[MILLISECOND] * 1e3)) * sign
                    }
                } else if (!!(match = isoRegex.exec(input))) {
                    sign = match[1] === "-" ? -1 : match[1] === "+" ? 1 : 1;
                    duration = {
                        y: parseIso(match[2], sign),
                        M: parseIso(match[3], sign),
                        w: parseIso(match[4], sign),
                        d: parseIso(match[5], sign),
                        h: parseIso(match[6], sign),
                        m: parseIso(match[7], sign),
                        s: parseIso(match[8], sign)
                    }
                } else if (duration == null) {
                    duration = {}
                } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
                    diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
                    duration = {};
                    duration.ms = diffRes.milliseconds;
                    duration.M = diffRes.months
                }
                ret = new Duration(duration);
                if (isDuration(input) && hasOwnProp(input, "_locale")) {
                    ret._locale = input._locale
                }
                return ret
            }
            createDuration.fn = Duration.prototype;
            createDuration.invalid = createInvalid$1;

            function parseIso(inp, sign) {
                var res = inp && parseFloat(inp.replace(",", "."));
                return (isNaN(res) ? 0 : res) * sign
            }

            function positiveMomentsDifference(base, other) {
                var res = {
                    milliseconds: 0,
                    months: 0
                };
                res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
                if (base.clone().add(res.months, "M").isAfter(other)) {
                    --res.months
                }
                res.milliseconds = +other - +base.clone().add(res.months, "M");
                return res
            }

            function momentsDifference(base, other) {
                var res;
                if (!(base.isValid() && other.isValid())) {
                    return {
                        milliseconds: 0,
                        months: 0
                    }
                }
                other = cloneWithOffset(other, base);
                if (base.isBefore(other)) {
                    res = positiveMomentsDifference(base, other)
                } else {
                    res = positiveMomentsDifference(other, base);
                    res.milliseconds = -res.milliseconds;
                    res.months = -res.months
                }
                return res
            }

            function createAdder(direction, name) {
                return function(val, period) {
                    var dur, tmp;
                    if (period !== null && !isNaN(+period)) {
                        deprecateSimple(name, "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). " + "See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.");
                        tmp = val;
                        val = period;
                        period = tmp
                    }
                    val = typeof val === "string" ? +val : val;
                    dur = createDuration(val, period);
                    addSubtract(this, dur, direction);
                    return this
                }
            }

            function addSubtract(mom, duration, isAdding, updateOffset) {
                var milliseconds = duration._milliseconds,
                    days = absRound(duration._days),
                    months = absRound(duration._months);
                if (!mom.isValid()) {
                    return
                }
                updateOffset = updateOffset == null ? true : updateOffset;
                if (months) {
                    setMonth(mom, get(mom, "Month") + months * isAdding)
                }
                if (days) {
                    set$1(mom, "Date", get(mom, "Date") + days * isAdding)
                }
                if (milliseconds) {
                    mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding)
                }
                if (updateOffset) {
                    hooks.updateOffset(mom, days || months)
                }
            }
            var add = createAdder(1, "add");
            var subtract = createAdder(-1, "subtract");

            function getCalendarFormat(myMoment, now) {
                var diff = myMoment.diff(now, "days", true);
                return diff < -6 ? "sameElse" : diff < -1 ? "lastWeek" : diff < 0 ? "lastDay" : diff < 1 ? "sameDay" : diff < 2 ? "nextDay" : diff < 7 ? "nextWeek" : "sameElse"
            }

            function calendar$1(time, formats) {
                var now = time || createLocal(),
                    sod = cloneWithOffset(now, this).startOf("day"),
                    format = hooks.calendarFormat(this, sod) || "sameElse";
                var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
                return this.format(output || this.localeData().calendar(format, this, createLocal(now)))
            }

            function clone() {
                return new Moment(this)
            }

            function isAfter(input, units) {
                var localInput = isMoment(input) ? input : createLocal(input);
                if (!(this.isValid() && localInput.isValid())) {
                    return false
                }
                units = normalizeUnits(!isUndefined(units) ? units : "millisecond");
                if (units === "millisecond") {
                    return this.valueOf() > localInput.valueOf()
                } else {
                    return localInput.valueOf() < this.clone().startOf(units).valueOf()
                }
            }

            function isBefore(input, units) {
                var localInput = isMoment(input) ? input : createLocal(input);
                if (!(this.isValid() && localInput.isValid())) {
                    return false
                }
                units = normalizeUnits(!isUndefined(units) ? units : "millisecond");
                if (units === "millisecond") {
                    return this.valueOf() < localInput.valueOf()
                } else {
                    return this.clone().endOf(units).valueOf() < localInput.valueOf()
                }
            }

            function isBetween(from, to, units, inclusivity) {
                inclusivity = inclusivity || "()";
                return (inclusivity[0] === "(" ? this.isAfter(from, units) : !this.isBefore(from, units)) && (inclusivity[1] === ")" ? this.isBefore(to, units) : !this.isAfter(to, units))
            }

            function isSame(input, units) {
                var localInput = isMoment(input) ? input : createLocal(input),
                    inputMs;
                if (!(this.isValid() && localInput.isValid())) {
                    return false
                }
                units = normalizeUnits(units || "millisecond");
                if (units === "millisecond") {
                    return this.valueOf() === localInput.valueOf()
                } else {
                    inputMs = localInput.valueOf();
                    return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf()
                }
            }

            function isSameOrAfter(input, units) {
                return this.isSame(input, units) || this.isAfter(input, units)
            }

            function isSameOrBefore(input, units) {
                return this.isSame(input, units) || this.isBefore(input, units)
            }

            function diff(input, units, asFloat) {
                var that, zoneDelta, output;
                if (!this.isValid()) {
                    return NaN
                }
                that = cloneWithOffset(input, this);
                if (!that.isValid()) {
                    return NaN
                }
                zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
                units = normalizeUnits(units);
                switch (units) {
                    case "year":
                        output = monthDiff(this, that) / 12;
                        break;
                    case "month":
                        output = monthDiff(this, that);
                        break;
                    case "quarter":
                        output = monthDiff(this, that) / 3;
                        break;
                    case "second":
                        output = (this - that) / 1e3;
                        break;
                    case "minute":
                        output = (this - that) / 6e4;
                        break;
                    case "hour":
                        output = (this - that) / 36e5;
                        break;
                    case "day":
                        output = (this - that - zoneDelta) / 864e5;
                        break;
                    case "week":
                        output = (this - that - zoneDelta) / 6048e5;
                        break;
                    default:
                        output = this - that
                }
                return asFloat ? output : absFloor(output)
            }

            function monthDiff(a, b) {
                var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
                    anchor = a.clone().add(wholeMonthDiff, "months"),
                    anchor2, adjust;
                if (b - anchor < 0) {
                    anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
                    adjust = (b - anchor) / (anchor - anchor2)
                } else {
                    anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
                    adjust = (b - anchor) / (anchor2 - anchor)
                }
                return -(wholeMonthDiff + adjust) || 0
            }
            hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
            hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";

            function toString() {
                return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")
            }

            function toISOString(keepOffset) {
                if (!this.isValid()) {
                    return null
                }
                var utc = keepOffset !== true;
                var m = utc ? this.clone().utc() : this;
                if (m.year() < 0 || m.year() > 9999) {
                    return formatMoment(m, utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ")
                }
                if (isFunction(Date.prototype.toISOString)) {
                    if (utc) {
                        return this.toDate().toISOString()
                    } else {
                        return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m, "Z"))
                    }
                }
                return formatMoment(m, utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ")
            }

            function inspect() {
                if (!this.isValid()) {
                    return "moment.invalid(/* " + this._i + " */)"
                }
                var func = "moment";
                var zone = "";
                if (!this.isLocal()) {
                    func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
                    zone = "Z"
                }
                var prefix = "[" + func + '("]';
                var year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
                var datetime = "-MM-DD[T]HH:mm:ss.SSS";
                var suffix = zone + '[")]';
                return this.format(prefix + year + datetime + suffix)
            }

            function format(inputString) {
                if (!inputString) {
                    inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat
                }
                var output = formatMoment(this, inputString);
                return this.localeData().postformat(output)
            }

            function from(time, withoutSuffix) {
                if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
                    return createDuration({
                        to: this,
                        from: time
                    }).locale(this.locale()).humanize(!withoutSuffix)
                } else {
                    return this.localeData().invalidDate()
                }
            }

            function fromNow(withoutSuffix) {
                return this.from(createLocal(), withoutSuffix)
            }

            function to(time, withoutSuffix) {
                if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
                    return createDuration({
                        from: this,
                        to: time
                    }).locale(this.locale()).humanize(!withoutSuffix)
                } else {
                    return this.localeData().invalidDate()
                }
            }

            function toNow(withoutSuffix) {
                return this.to(createLocal(), withoutSuffix)
            }

            function locale(key) {
                var newLocaleData;
                if (key === undefined) {
                    return this._locale._abbr
                } else {
                    newLocaleData = getLocale(key);
                    if (newLocaleData != null) {
                        this._locale = newLocaleData
                    }
                    return this
                }
            }
            var lang = deprecate("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function(key) {
                if (key === undefined) {
                    return this.localeData()
                } else {
                    return this.locale(key)
                }
            });

            function localeData() {
                return this._locale
            }

            function startOf(units) {
                units = normalizeUnits(units);
                switch (units) {
                    case "year":
                        this.month(0);
                    case "quarter":
                    case "month":
                        this.date(1);
                    case "week":
                    case "isoWeek":
                    case "day":
                    case "date":
                        this.hours(0);
                    case "hour":
                        this.minutes(0);
                    case "minute":
                        this.seconds(0);
                    case "second":
                        this.milliseconds(0)
                }
                if (units === "week") {
                    this.weekday(0)
                }
                if (units === "isoWeek") {
                    this.isoWeekday(1)
                }
                if (units === "quarter") {
                    this.month(Math.floor(this.month() / 3) * 3)
                }
                return this
            }

            function endOf(units) {
                units = normalizeUnits(units);
                if (units === undefined || units === "millisecond") {
                    return this
                }
                if (units === "date") {
                    units = "day"
                }
                return this.startOf(units).add(1, units === "isoWeek" ? "week" : units).subtract(1, "ms")
            }

            function valueOf() {
                return this._d.valueOf() - (this._offset || 0) * 6e4
            }

            function unix() {
                return Math.floor(this.valueOf() / 1e3)
            }

            function toDate() {
                return new Date(this.valueOf())
            }

            function toArray() {
                var m = this;
                return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()]
            }

            function toObject() {
                var m = this;
                return {
                    years: m.year(),
                    months: m.month(),
                    date: m.date(),
                    hours: m.hours(),
                    minutes: m.minutes(),
                    seconds: m.seconds(),
                    milliseconds: m.milliseconds()
                }
            }

            function toJSON() {
                return this.isValid() ? this.toISOString() : null
            }

            function isValid$2() {
                return isValid(this)
            }

            function parsingFlags() {
                return extend({}, getParsingFlags(this))
            }

            function invalidAt() {
                return getParsingFlags(this).overflow
            }

            function creationData() {
                return {
                    input: this._i,
                    format: this._f,
                    locale: this._locale,
                    isUTC: this._isUTC,
                    strict: this._strict
                }
            }
            addFormatToken(0, ["gg", 2], 0, function() {
                return this.weekYear() % 100
            });
            addFormatToken(0, ["GG", 2], 0, function() {
                return this.isoWeekYear() % 100
            });

            function addWeekYearFormatToken(token, getter) {
                addFormatToken(0, [token, token.length], 0, getter)
            }
            addWeekYearFormatToken("gggg", "weekYear");
            addWeekYearFormatToken("ggggg", "weekYear");
            addWeekYearFormatToken("GGGG", "isoWeekYear");
            addWeekYearFormatToken("GGGGG", "isoWeekYear");
            addUnitAlias("weekYear", "gg");
            addUnitAlias("isoWeekYear", "GG");
            addUnitPriority("weekYear", 1);
            addUnitPriority("isoWeekYear", 1);
            addRegexToken("G", matchSigned);
            addRegexToken("g", matchSigned);
            addRegexToken("GG", match1to2, match2);
            addRegexToken("gg", match1to2, match2);
            addRegexToken("GGGG", match1to4, match4);
            addRegexToken("gggg", match1to4, match4);
            addRegexToken("GGGGG", match1to6, match6);
            addRegexToken("ggggg", match1to6, match6);
            addWeekParseToken(["gggg", "ggggg", "GGGG", "GGGGG"], function(input, week, config, token) {
                week[token.substr(0, 2)] = toInt(input)
            });
            addWeekParseToken(["gg", "GG"], function(input, week, config, token) {
                week[token] = hooks.parseTwoDigitYear(input)
            });

            function getSetWeekYear(input) {
                return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy)
            }

            function getSetISOWeekYear(input) {
                return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4)
            }

            function getISOWeeksInYear() {
                return weeksInYear(this.year(), 1, 4)
            }

            function getWeeksInYear() {
                var weekInfo = this.localeData()._week;
                return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy)
            }

            function getSetWeekYearHelper(input, week, weekday, dow, doy) {
                var weeksTarget;
                if (input == null) {
                    return weekOfYear(this, dow, doy).year
                } else {
                    weeksTarget = weeksInYear(input, dow, doy);
                    if (week > weeksTarget) {
                        week = weeksTarget
                    }
                    return setWeekAll.call(this, input, week, weekday, dow, doy)
                }
            }

            function setWeekAll(weekYear, week, weekday, dow, doy) {
                var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
                    date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
                this.year(date.getUTCFullYear());
                this.month(date.getUTCMonth());
                this.date(date.getUTCDate());
                return this
            }
            addFormatToken("Q", 0, "Qo", "quarter");
            addUnitAlias("quarter", "Q");
            addUnitPriority("quarter", 7);
            addRegexToken("Q", match1);
            addParseToken("Q", function(input, array) {
                array[MONTH] = (toInt(input) - 1) * 3
            });

            function getSetQuarter(input) {
                return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3)
            }
            addFormatToken("D", ["DD", 2], "Do", "date");
            addUnitAlias("date", "D");
            addUnitPriority("date", 9);
            addRegexToken("D", match1to2);
            addRegexToken("DD", match1to2, match2);
            addRegexToken("Do", function(isStrict, locale) {
                return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient
            });
            addParseToken(["D", "DD"], DATE);
            addParseToken("Do", function(input, array) {
                array[DATE] = toInt(input.match(match1to2)[0])
            });
            var getSetDayOfMonth = makeGetSet("Date", true);
            addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
            addUnitAlias("dayOfYear", "DDD");
            addUnitPriority("dayOfYear", 4);
            addRegexToken("DDD", match1to3);
            addRegexToken("DDDD", match3);
            addParseToken(["DDD", "DDDD"], function(input, array, config) {
                config._dayOfYear = toInt(input)
            });

            function getSetDayOfYear(input) {
                var dayOfYear = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1;
                return input == null ? dayOfYear : this.add(input - dayOfYear, "d")
            }
            addFormatToken("m", ["mm", 2], 0, "minute");
            addUnitAlias("minute", "m");
            addUnitPriority("minute", 14);
            addRegexToken("m", match1to2);
            addRegexToken("mm", match1to2, match2);
            addParseToken(["m", "mm"], MINUTE);
            var getSetMinute = makeGetSet("Minutes", false);
            addFormatToken("s", ["ss", 2], 0, "second");
            addUnitAlias("second", "s");
            addUnitPriority("second", 15);
            addRegexToken("s", match1to2);
            addRegexToken("ss", match1to2, match2);
            addParseToken(["s", "ss"], SECOND);
            var getSetSecond = makeGetSet("Seconds", false);
            addFormatToken("S", 0, 0, function() {
                return ~~(this.millisecond() / 100)
            });
            addFormatToken(0, ["SS", 2], 0, function() {
                return ~~(this.millisecond() / 10)
            });
            addFormatToken(0, ["SSS", 3], 0, "millisecond");
            addFormatToken(0, ["SSSS", 4], 0, function() {
                return this.millisecond() * 10
            });
            addFormatToken(0, ["SSSSS", 5], 0, function() {
                return this.millisecond() * 100
            });
            addFormatToken(0, ["SSSSSS", 6], 0, function() {
                return this.millisecond() * 1e3
            });
            addFormatToken(0, ["SSSSSSS", 7], 0, function() {
                return this.millisecond() * 1e4
            });
            addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
                return this.millisecond() * 1e5
            });
            addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
                return this.millisecond() * 1e6
            });
            addUnitAlias("millisecond", "ms");
            addUnitPriority("millisecond", 16);
            addRegexToken("S", match1to3, match1);
            addRegexToken("SS", match1to3, match2);
            addRegexToken("SSS", match1to3, match3);
            var token;
            for (token = "SSSS"; token.length <= 9; token += "S") {
                addRegexToken(token, matchUnsigned)
            }

            function parseMs(input, array) {
                array[MILLISECOND] = toInt(("0." + input) * 1e3)
            }
            for (token = "S"; token.length <= 9; token += "S") {
                addParseToken(token, parseMs)
            }
            var getSetMillisecond = makeGetSet("Milliseconds", false);
            addFormatToken("z", 0, 0, "zoneAbbr");
            addFormatToken("zz", 0, 0, "zoneName");

            function getZoneAbbr() {
                return this._isUTC ? "UTC" : ""
            }

            function getZoneName() {
                return this._isUTC ? "Coordinated Universal Time" : ""
            }
            var proto = Moment.prototype;
            proto.add = add;
            proto.calendar = calendar$1;
            proto.clone = clone;
            proto.diff = diff;
            proto.endOf = endOf;
            proto.format = format;
            proto.from = from;
            proto.fromNow = fromNow;
            proto.to = to;
            proto.toNow = toNow;
            proto.get = stringGet;
            proto.invalidAt = invalidAt;
            proto.isAfter = isAfter;
            proto.isBefore = isBefore;
            proto.isBetween = isBetween;
            proto.isSame = isSame;
            proto.isSameOrAfter = isSameOrAfter;
            proto.isSameOrBefore = isSameOrBefore;
            proto.isValid = isValid$2;
            proto.lang = lang;
            proto.locale = locale;
            proto.localeData = localeData;
            proto.max = prototypeMax;
            proto.min = prototypeMin;
            proto.parsingFlags = parsingFlags;
            proto.set = stringSet;
            proto.startOf = startOf;
            proto.subtract = subtract;
            proto.toArray = toArray;
            proto.toObject = toObject;
            proto.toDate = toDate;
            proto.toISOString = toISOString;
            proto.inspect = inspect;
            proto.toJSON = toJSON;
            proto.toString = toString;
            proto.unix = unix;
            proto.valueOf = valueOf;
            proto.creationData = creationData;
            proto.year = getSetYear;
            proto.isLeapYear = getIsLeapYear;
            proto.weekYear = getSetWeekYear;
            proto.isoWeekYear = getSetISOWeekYear;
            proto.quarter = proto.quarters = getSetQuarter;
            proto.month = getSetMonth;
            proto.daysInMonth = getDaysInMonth;
            proto.week = proto.weeks = getSetWeek;
            proto.isoWeek = proto.isoWeeks = getSetISOWeek;
            proto.weeksInYear = getWeeksInYear;
            proto.isoWeeksInYear = getISOWeeksInYear;
            proto.date = getSetDayOfMonth;
            proto.day = proto.days = getSetDayOfWeek;
            proto.weekday = getSetLocaleDayOfWeek;
            proto.isoWeekday = getSetISODayOfWeek;
            proto.dayOfYear = getSetDayOfYear;
            proto.hour = proto.hours = getSetHour;
            proto.minute = proto.minutes = getSetMinute;
            proto.second = proto.seconds = getSetSecond;
            proto.millisecond = proto.milliseconds = getSetMillisecond;
            proto.utcOffset = getSetOffset;
            proto.utc = setOffsetToUTC;
            proto.local = setOffsetToLocal;
            proto.parseZone = setOffsetToParsedOffset;
            proto.hasAlignedHourOffset = hasAlignedHourOffset;
            proto.isDST = isDaylightSavingTime;
            proto.isLocal = isLocal;
            proto.isUtcOffset = isUtcOffset;
            proto.isUtc = isUtc;
            proto.isUTC = isUtc;
            proto.zoneAbbr = getZoneAbbr;
            proto.zoneName = getZoneName;
            proto.dates = deprecate("dates accessor is deprecated. Use date instead.", getSetDayOfMonth);
            proto.months = deprecate("months accessor is deprecated. Use month instead", getSetMonth);
            proto.years = deprecate("years accessor is deprecated. Use year instead", getSetYear);
            proto.zone = deprecate("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/", getSetZone);
            proto.isDSTShifted = deprecate("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information", isDaylightSavingTimeShifted);

            function createUnix(input) {
                return createLocal(input * 1e3)
            }

            function createInZone() {
                return createLocal.apply(null, arguments).parseZone()
            }

            function preParsePostFormat(string) {
                return string
            }
            var proto$1 = Locale.prototype;
            proto$1.calendar = calendar;
            proto$1.longDateFormat = longDateFormat;
            proto$1.invalidDate = invalidDate;
            proto$1.ordinal = ordinal;
            proto$1.preparse = preParsePostFormat;
            proto$1.postformat = preParsePostFormat;
            proto$1.relativeTime = relativeTime;
            proto$1.pastFuture = pastFuture;
            proto$1.set = set;
            proto$1.months = localeMonths;
            proto$1.monthsShort = localeMonthsShort;
            proto$1.monthsParse = localeMonthsParse;
            proto$1.monthsRegex = monthsRegex;
            proto$1.monthsShortRegex = monthsShortRegex;
            proto$1.week = localeWeek;
            proto$1.firstDayOfYear = localeFirstDayOfYear;
            proto$1.firstDayOfWeek = localeFirstDayOfWeek;
            proto$1.weekdays = localeWeekdays;
            proto$1.weekdaysMin = localeWeekdaysMin;
            proto$1.weekdaysShort = localeWeekdaysShort;
            proto$1.weekdaysParse = localeWeekdaysParse;
            proto$1.weekdaysRegex = weekdaysRegex;
            proto$1.weekdaysShortRegex = weekdaysShortRegex;
            proto$1.weekdaysMinRegex = weekdaysMinRegex;
            proto$1.isPM = localeIsPM;
            proto$1.meridiem = localeMeridiem;

            function get$1(format, index, field, setter) {
                var locale = getLocale();
                var utc = createUTC().set(setter, index);
                return locale[field](utc, format)
            }

            function listMonthsImpl(format, index, field) {
                if (isNumber(format)) {
                    index = format;
                    format = undefined
                }
                format = format || "";
                if (index != null) {
                    return get$1(format, index, field, "month")
                }
                var i;
                var out = [];
                for (i = 0; i < 12; i++) {
                    out[i] = get$1(format, i, field, "month")
                }
                return out
            }

            function listWeekdaysImpl(localeSorted, format, index, field) {
                if (typeof localeSorted === "boolean") {
                    if (isNumber(format)) {
                        index = format;
                        format = undefined
                    }
                    format = format || ""
                } else {
                    format = localeSorted;
                    index = format;
                    localeSorted = false;
                    if (isNumber(format)) {
                        index = format;
                        format = undefined
                    }
                    format = format || ""
                }
                var locale = getLocale(),
                    shift = localeSorted ? locale._week.dow : 0;
                if (index != null) {
                    return get$1(format, (index + shift) % 7, field, "day")
                }
                var i;
                var out = [];
                for (i = 0; i < 7; i++) {
                    out[i] = get$1(format, (i + shift) % 7, field, "day")
                }
                return out
            }

            function listMonths(format, index) {
                return listMonthsImpl(format, index, "months")
            }

            function listMonthsShort(format, index) {
                return listMonthsImpl(format, index, "monthsShort")
            }

            function listWeekdays(localeSorted, format, index) {
                return listWeekdaysImpl(localeSorted, format, index, "weekdays")
            }

            function listWeekdaysShort(localeSorted, format, index) {
                return listWeekdaysImpl(localeSorted, format, index, "weekdaysShort")
            }

            function listWeekdaysMin(localeSorted, format, index) {
                return listWeekdaysImpl(localeSorted, format, index, "weekdaysMin")
            }
            getSetGlobalLocale("en", {
                dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
                ordinal: function(number) {
                    var b = number % 10,
                        output = toInt(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
                    return number + output
                }
            });
            hooks.lang = deprecate("moment.lang is deprecated. Use moment.locale instead.", getSetGlobalLocale);
            hooks.langData = deprecate("moment.langData is deprecated. Use moment.localeData instead.", getLocale);
            var mathAbs = Math.abs;

            function abs() {
                var data = this._data;
                this._milliseconds = mathAbs(this._milliseconds);
                this._days = mathAbs(this._days);
                this._months = mathAbs(this._months);
                data.milliseconds = mathAbs(data.milliseconds);
                data.seconds = mathAbs(data.seconds);
                data.minutes = mathAbs(data.minutes);
                data.hours = mathAbs(data.hours);
                data.months = mathAbs(data.months);
                data.years = mathAbs(data.years);
                return this
            }

            function addSubtract$1(duration, input, value, direction) {
                var other = createDuration(input, value);
                duration._milliseconds += direction * other._milliseconds;
                duration._days += direction * other._days;
                duration._months += direction * other._months;
                return duration._bubble()
            }

            function add$1(input, value) {
                return addSubtract$1(this, input, value, 1)
            }

            function subtract$1(input, value) {
                return addSubtract$1(this, input, value, -1)
            }

            function absCeil(number) {
                if (number < 0) {
                    return Math.floor(number)
                } else {
                    return Math.ceil(number)
                }
            }

            function bubble() {
                var milliseconds = this._milliseconds;
                var days = this._days;
                var months = this._months;
                var data = this._data;
                var seconds, minutes, hours, years, monthsFromDays;
                if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
                    milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
                    days = 0;
                    months = 0
                }
                data.milliseconds = milliseconds % 1e3;
                seconds = absFloor(milliseconds / 1e3);
                data.seconds = seconds % 60;
                minutes = absFloor(seconds / 60);
                data.minutes = minutes % 60;
                hours = absFloor(minutes / 60);
                data.hours = hours % 24;
                days += absFloor(hours / 24);
                monthsFromDays = absFloor(daysToMonths(days));
                months += monthsFromDays;
                days -= absCeil(monthsToDays(monthsFromDays));
                years = absFloor(months / 12);
                months %= 12;
                data.days = days;
                data.months = months;
                data.years = years;
                return this
            }

            function daysToMonths(days) {
                return days * 4800 / 146097
            }

            function monthsToDays(months) {
                return months * 146097 / 4800
            }

            function as(units) {
                if (!this.isValid()) {
                    return NaN
                }
                var days;
                var months;
                var milliseconds = this._milliseconds;
                units = normalizeUnits(units);
                if (units === "month" || units === "year") {
                    days = this._days + milliseconds / 864e5;
                    months = this._months + daysToMonths(days);
                    return units === "month" ? months : months / 12
                } else {
                    days = this._days + Math.round(monthsToDays(this._months));
                    switch (units) {
                        case "week":
                            return days / 7 + milliseconds / 6048e5;
                        case "day":
                            return days + milliseconds / 864e5;
                        case "hour":
                            return days * 24 + milliseconds / 36e5;
                        case "minute":
                            return days * 1440 + milliseconds / 6e4;
                        case "second":
                            return days * 86400 + milliseconds / 1e3;
                        case "millisecond":
                            return Math.floor(days * 864e5) + milliseconds;
                        default:
                            throw new Error("Unknown unit " + units)
                    }
                }
            }

            function valueOf$1() {
                if (!this.isValid()) {
                    return NaN
                }
                return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6
            }

            function makeAs(alias) {
                return function() {
                    return this.as(alias)
                }
            }
            var asMilliseconds = makeAs("ms");
            var asSeconds = makeAs("s");
            var asMinutes = makeAs("m");
            var asHours = makeAs("h");
            var asDays = makeAs("d");
            var asWeeks = makeAs("w");
            var asMonths = makeAs("M");
            var asYears = makeAs("y");

            function clone$1() {
                return createDuration(this)
            }

            function get$2(units) {
                units = normalizeUnits(units);
                return this.isValid() ? this[units + "s"]() : NaN
            }

            function makeGetter(name) {
                return function() {
                    return this.isValid() ? this._data[name] : NaN
                }
            }
            var milliseconds = makeGetter("milliseconds");
            var seconds = makeGetter("seconds");
            var minutes = makeGetter("minutes");
            var hours = makeGetter("hours");
            var days = makeGetter("days");
            var months = makeGetter("months");
            var years = makeGetter("years");

            function weeks() {
                return absFloor(this.days() / 7)
            }
            var round = Math.round;
            var thresholds = {
                ss: 44,
                s: 45,
                m: 45,
                h: 22,
                d: 26,
                M: 11
            };

            function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
                return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture)
            }

            function relativeTime$1(posNegDuration, withoutSuffix, locale) {
                var duration = createDuration(posNegDuration).abs();
                var seconds = round(duration.as("s"));
                var minutes = round(duration.as("m"));
                var hours = round(duration.as("h"));
                var days = round(duration.as("d"));
                var months = round(duration.as("M"));
                var years = round(duration.as("y"));
                var a = seconds <= thresholds.ss && ["s", seconds] || seconds < thresholds.s && ["ss", seconds] || minutes <= 1 && ["m"] || minutes < thresholds.m && ["mm", minutes] || hours <= 1 && ["h"] || hours < thresholds.h && ["hh", hours] || days <= 1 && ["d"] || days < thresholds.d && ["dd", days] || months <= 1 && ["M"] || months < thresholds.M && ["MM", months] || years <= 1 && ["y"] || ["yy", years];
                a[2] = withoutSuffix;
                a[3] = +posNegDuration > 0;
                a[4] = locale;
                return substituteTimeAgo.apply(null, a)
            }

            function getSetRelativeTimeRounding(roundingFunction) {
                if (roundingFunction === undefined) {
                    return round
                }
                if (typeof roundingFunction === "function") {
                    round = roundingFunction;
                    return true
                }
                return false
            }

            function getSetRelativeTimeThreshold(threshold, limit) {
                if (thresholds[threshold] === undefined) {
                    return false
                }
                if (limit === undefined) {
                    return thresholds[threshold]
                }
                thresholds[threshold] = limit;
                if (threshold === "s") {
                    thresholds.ss = limit - 1
                }
                return true
            }

            function humanize(withSuffix) {
                if (!this.isValid()) {
                    return this.localeData().invalidDate()
                }
                var locale = this.localeData();
                var output = relativeTime$1(this, !withSuffix, locale);
                if (withSuffix) {
                    output = locale.pastFuture(+this, output)
                }
                return locale.postformat(output)
            }
            var abs$1 = Math.abs;

            function sign(x) {
                return (x > 0) - (x < 0) || +x
            }

            function toISOString$1() {
                if (!this.isValid()) {
                    return this.localeData().invalidDate()
                }
                var seconds = abs$1(this._milliseconds) / 1e3;
                var days = abs$1(this._days);
                var months = abs$1(this._months);
                var minutes, hours, years;
                minutes = absFloor(seconds / 60);
                hours = absFloor(minutes / 60);
                seconds %= 60;
                minutes %= 60;
                years = absFloor(months / 12);
                months %= 12;
                var Y = years;
                var M = months;
                var D = days;
                var h = hours;
                var m = minutes;
                var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, "") : "";
                var total = this.asSeconds();
                if (!total) {
                    return "P0D"
                }
                var totalSign = total < 0 ? "-" : "";
                var ymSign = sign(this._months) !== sign(total) ? "-" : "";
                var daysSign = sign(this._days) !== sign(total) ? "-" : "";
                var hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";
                return totalSign + "P" + (Y ? ymSign + Y + "Y" : "") + (M ? ymSign + M + "M" : "") + (D ? daysSign + D + "D" : "") + (h || m || s ? "T" : "") + (h ? hmsSign + h + "H" : "") + (m ? hmsSign + m + "M" : "") + (s ? hmsSign + s + "S" : "")
            }
            var proto$2 = Duration.prototype;
            proto$2.isValid = isValid$1;
            proto$2.abs = abs;
            proto$2.add = add$1;
            proto$2.subtract = subtract$1;
            proto$2.as = as;
            proto$2.asMilliseconds = asMilliseconds;
            proto$2.asSeconds = asSeconds;
            proto$2.asMinutes = asMinutes;
            proto$2.asHours = asHours;
            proto$2.asDays = asDays;
            proto$2.asWeeks = asWeeks;
            proto$2.asMonths = asMonths;
            proto$2.asYears = asYears;
            proto$2.valueOf = valueOf$1;
            proto$2._bubble = bubble;
            proto$2.clone = clone$1;
            proto$2.get = get$2;
            proto$2.milliseconds = milliseconds;
            proto$2.seconds = seconds;
            proto$2.minutes = minutes;
            proto$2.hours = hours;
            proto$2.days = days;
            proto$2.weeks = weeks;
            proto$2.months = months;
            proto$2.years = years;
            proto$2.humanize = humanize;
            proto$2.toISOString = toISOString$1;
            proto$2.toString = toISOString$1;
            proto$2.toJSON = toISOString$1;
            proto$2.locale = locale;
            proto$2.localeData = localeData;
            proto$2.toIsoString = deprecate("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", toISOString$1);
            proto$2.lang = lang;
            addFormatToken("X", 0, 0, "unix");
            addFormatToken("x", 0, 0, "valueOf");
            addRegexToken("x", matchSigned);
            addRegexToken("X", matchTimestamp);
            addParseToken("X", function(input, array, config) {
                config._d = new Date(parseFloat(input, 10) * 1e3)
            });
            addParseToken("x", function(input, array, config) {
                config._d = new Date(toInt(input))
            });
            hooks.version = "2.22.2";
            setHookCallback(createLocal);
            hooks.fn = proto;
            hooks.min = min;
            hooks.max = max;
            hooks.now = now;
            hooks.utc = createUTC;
            hooks.unix = createUnix;
            hooks.months = listMonths;
            hooks.isDate = isDate;
            hooks.locale = getSetGlobalLocale;
            hooks.invalid = createInvalid;
            hooks.duration = createDuration;
            hooks.isMoment = isMoment;
            hooks.weekdays = listWeekdays;
            hooks.parseZone = createInZone;
            hooks.localeData = getLocale;
            hooks.isDuration = isDuration;
            hooks.monthsShort = listMonthsShort;
            hooks.weekdaysMin = listWeekdaysMin;
            hooks.defineLocale = defineLocale;
            hooks.updateLocale = updateLocale;
            hooks.locales = listLocales;
            hooks.weekdaysShort = listWeekdaysShort;
            hooks.normalizeUnits = normalizeUnits;
            hooks.relativeTimeRounding = getSetRelativeTimeRounding;
            hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
            hooks.calendarFormat = getCalendarFormat;
            hooks.prototype = proto;
            hooks.HTML5_FMT = {
                DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
                DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
                DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
                DATE: "YYYY-MM-DD",
                TIME: "HH:mm",
                TIME_SECONDS: "HH:mm:ss",
                TIME_MS: "HH:mm:ss.SSS",
                WEEK: "YYYY-[W]WW",
                MONTH: "YYYY-MM"
            };
            return hooks
        })
    }, {}],
    388: [function(require, module, exports) {
        (function(global) {
            ! function(global) {
                "use strict";
                var Op = Object.prototype;
                var hasOwn = Op.hasOwnProperty;
                var undefined;
                var $Symbol = typeof Symbol === "function" ? Symbol : {};
                var iteratorSymbol = $Symbol.iterator || "@@iterator";
                var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
                var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
                var inModule = typeof module === "object";
                var runtime = global.regeneratorRuntime;
                if (runtime) {
                    if (inModule) {
                        module.exports = runtime
                    }
                    return
                }
                runtime = global.regeneratorRuntime = inModule ? module.exports : {};

                function wrap(innerFn, outerFn, self, tryLocsList) {
                    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
                    var generator = Object.create(protoGenerator.prototype);
                    var context = new Context(tryLocsList || []);
                    generator._invoke = makeInvokeMethod(innerFn, self, context);
                    return generator
                }
                runtime.wrap = wrap;

                function tryCatch(fn, obj, arg) {
                    try {
                        return {
                            type: "normal",
                            arg: fn.call(obj, arg)
                        }
                    } catch (err) {
                        return {
                            type: "throw",
                            arg: err
                        }
                    }
                }
                var GenStateSuspendedStart = "suspendedStart";
                var GenStateSuspendedYield = "suspendedYield";
                var GenStateExecuting = "executing";
                var GenStateCompleted = "completed";
                var ContinueSentinel = {};

                function Generator() {}

                function GeneratorFunction() {}

                function GeneratorFunctionPrototype() {}
                var IteratorPrototype = {};
                IteratorPrototype[iteratorSymbol] = function() {
                    return this
                };
                var getProto = Object.getPrototypeOf;
                var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
                if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
                    IteratorPrototype = NativeIteratorPrototype
                }
                var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
                GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
                GeneratorFunctionPrototype.constructor = GeneratorFunction;
                GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

                function defineIteratorMethods(prototype) {
                    ["next", "throw", "return"].forEach(function(method) {
                        prototype[method] = function(arg) {
                            return this._invoke(method, arg)
                        }
                    })
                }
                runtime.isGeneratorFunction = function(genFun) {
                    var ctor = typeof genFun === "function" && genFun.constructor;
                    return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false
                };
                runtime.mark = function(genFun) {
                    if (Object.setPrototypeOf) {
                        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype)
                    } else {
                        genFun.__proto__ = GeneratorFunctionPrototype;
                        if (!(toStringTagSymbol in genFun)) {
                            genFun[toStringTagSymbol] = "GeneratorFunction"
                        }
                    }
                    genFun.prototype = Object.create(Gp);
                    return genFun
                };
                runtime.awrap = function(arg) {
                    return {
                        __await: arg
                    }
                };

                function AsyncIterator(generator) {
                    function invoke(method, arg, resolve, reject) {
                        var record = tryCatch(generator[method], generator, arg);
                        if (record.type === "throw") {
                            reject(record.arg)
                        } else {
                            var result = record.arg;
                            var value = result.value;
                            if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
                                return Promise.resolve(value.__await).then(function(value) {
                                    invoke("next", value, resolve, reject)
                                }, function(err) {
                                    invoke("throw", err, resolve, reject)
                                })
                            }
                            return Promise.resolve(value).then(function(unwrapped) {
                                result.value = unwrapped;
                                resolve(result)
                            }, reject)
                        }
                    }
                    if (typeof global.process === "object" && global.process.domain) {
                        invoke = global.process.domain.bind(invoke)
                    }
                    var previousPromise;

                    function enqueue(method, arg) {
                        function callInvokeWithMethodAndArg() {
                            return new Promise(function(resolve, reject) {
                                invoke(method, arg, resolve, reject)
                            })
                        }
                        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg()
                    }
                    this._invoke = enqueue
                }
                defineIteratorMethods(AsyncIterator.prototype);
                AsyncIterator.prototype[asyncIteratorSymbol] = function() {
                    return this
                };
                runtime.AsyncIterator = AsyncIterator;
                runtime.async = function(innerFn, outerFn, self, tryLocsList) {
                    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
                    return runtime.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
                        return result.done ? result.value : iter.next()
                    })
                };

                function makeInvokeMethod(innerFn, self, context) {
                    var state = GenStateSuspendedStart;
                    return function invoke(method, arg) {
                        if (state === GenStateExecuting) {
                            throw new Error("Generator is already running")
                        }
                        if (state === GenStateCompleted) {
                            if (method === "throw") {
                                throw arg
                            }
                            return doneResult()
                        }
                        context.method = method;
                        context.arg = arg;
                        while (true) {
                            var delegate = context.delegate;
                            if (delegate) {
                                var delegateResult = maybeInvokeDelegate(delegate, context);
                                if (delegateResult) {
                                    if (delegateResult === ContinueSentinel) continue;
                                    return delegateResult
                                }
                            }
                            if (context.method === "next") {
                                context.sent = context._sent = context.arg
                            } else if (context.method === "throw") {
                                if (state === GenStateSuspendedStart) {
                                    state = GenStateCompleted;
                                    throw context.arg
                                }
                                context.dispatchException(context.arg)
                            } else if (context.method === "return") {
                                context.abrupt("return", context.arg)
                            }
                            state = GenStateExecuting;
                            var record = tryCatch(innerFn, self, context);
                            if (record.type === "normal") {
                                state = context.done ? GenStateCompleted : GenStateSuspendedYield;
                                if (record.arg === ContinueSentinel) {
                                    continue
                                }
                                return {
                                    value: record.arg,
                                    done: context.done
                                }
                            } else if (record.type === "throw") {
                                state = GenStateCompleted;
                                context.method = "throw";
                                context.arg = record.arg
                            }
                        }
                    }
                }

                function maybeInvokeDelegate(delegate, context) {
                    var method = delegate.iterator[context.method];
                    if (method === undefined) {
                        context.delegate = null;
                        if (context.method === "throw") {
                            if (delegate.iterator.return) {
                                context.method = "return";
                                context.arg = undefined;
                                maybeInvokeDelegate(delegate, context);
                                if (context.method === "throw") {
                                    return ContinueSentinel
                                }
                            }
                            context.method = "throw";
                            context.arg = new TypeError("The iterator does not provide a 'throw' method")
                        }
                        return ContinueSentinel
                    }
                    var record = tryCatch(method, delegate.iterator, context.arg);
                    if (record.type === "throw") {
                        context.method = "throw";
                        context.arg = record.arg;
                        context.delegate = null;
                        return ContinueSentinel
                    }
                    var info = record.arg;
                    if (!info) {
                        context.method = "throw";
                        context.arg = new TypeError("iterator result is not an object");
                        context.delegate = null;
                        return ContinueSentinel
                    }
                    if (info.done) {
                        context[delegate.resultName] = info.value;
                        context.next = delegate.nextLoc;
                        if (context.method !== "return") {
                            context.method = "next";
                            context.arg = undefined
                        }
                    } else {
                        return info
                    }
                    context.delegate = null;
                    return ContinueSentinel
                }
                defineIteratorMethods(Gp);
                Gp[toStringTagSymbol] = "Generator";
                Gp[iteratorSymbol] = function() {
                    return this
                };
                Gp.toString = function() {
                    return "[object Generator]"
                };

                function pushTryEntry(locs) {
                    var entry = {
                        tryLoc: locs[0]
                    };
                    if (1 in locs) {
                        entry.catchLoc = locs[1]
                    }
                    if (2 in locs) {
                        entry.finallyLoc = locs[2];
                        entry.afterLoc = locs[3]
                    }
                    this.tryEntries.push(entry)
                }

                function resetTryEntry(entry) {
                    var record = entry.completion || {};
                    record.type = "normal";
                    delete record.arg;
                    entry.completion = record
                }

                function Context(tryLocsList) {
                    this.tryEntries = [{
                        tryLoc: "root"
                    }];
                    tryLocsList.forEach(pushTryEntry, this);
                    this.reset(true)
                }
                runtime.keys = function(object) {
                    var keys = [];
                    for (var key in object) {
                        keys.push(key)
                    }
                    keys.reverse();
                    return function next() {
                        while (keys.length) {
                            var key = keys.pop();
                            if (key in object) {
                                next.value = key;
                                next.done = false;
                                return next
                            }
                        }
                        next.done = true;
                        return next
                    }
                };

                function values(iterable) {
                    if (iterable) {
                        var iteratorMethod = iterable[iteratorSymbol];
                        if (iteratorMethod) {
                            return iteratorMethod.call(iterable)
                        }
                        if (typeof iterable.next === "function") {
                            return iterable
                        }
                        if (!isNaN(iterable.length)) {
                            var i = -1,
                                next = function next() {
                                    while (++i < iterable.length) {
                                        if (hasOwn.call(iterable, i)) {
                                            next.value = iterable[i];
                                            next.done = false;
                                            return next
                                        }
                                    }
                                    next.value = undefined;
                                    next.done = true;
                                    return next
                                };
                            return next.next = next
                        }
                    }
                    return {
                        next: doneResult
                    }
                }
                runtime.values = values;

                function doneResult() {
                    return {
                        value: undefined,
                        done: true
                    }
                }
                Context.prototype = {
                    constructor: Context,
                    reset: function(skipTempReset) {
                        this.prev = 0;
                        this.next = 0;
                        this.sent = this._sent = undefined;
                        this.done = false;
                        this.delegate = null;
                        this.method = "next";
                        this.arg = undefined;
                        this.tryEntries.forEach(resetTryEntry);
                        if (!skipTempReset) {
                            for (var name in this) {
                                if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                                    this[name] = undefined
                                }
                            }
                        }
                    },
                    stop: function() {
                        this.done = true;
                        var rootEntry = this.tryEntries[0];
                        var rootRecord = rootEntry.completion;
                        if (rootRecord.type === "throw") {
                            throw rootRecord.arg
                        }
                        return this.rval
                    },
                    dispatchException: function(exception) {
                        if (this.done) {
                            throw exception
                        }
                        var context = this;

                        function handle(loc, caught) {
                            record.type = "throw";
                            record.arg = exception;
                            context.next = loc;
                            if (caught) {
                                context.method = "next";
                                context.arg = undefined
                            }
                            return !!caught
                        }
                        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                            var entry = this.tryEntries[i];
                            var record = entry.completion;
                            if (entry.tryLoc === "root") {
                                return handle("end")
                            }
                            if (entry.tryLoc <= this.prev) {
                                var hasCatch = hasOwn.call(entry, "catchLoc");
                                var hasFinally = hasOwn.call(entry, "finallyLoc");
                                if (hasCatch && hasFinally) {
                                    if (this.prev < entry.catchLoc) {
                                        return handle(entry.catchLoc, true)
                                    } else if (this.prev < entry.finallyLoc) {
                                        return handle(entry.finallyLoc)
                                    }
                                } else if (hasCatch) {
                                    if (this.prev < entry.catchLoc) {
                                        return handle(entry.catchLoc, true)
                                    }
                                } else if (hasFinally) {
                                    if (this.prev < entry.finallyLoc) {
                                        return handle(entry.finallyLoc)
                                    }
                                } else {
                                    throw new Error("try statement without catch or finally")
                                }
                            }
                        }
                    },
                    abrupt: function(type, arg) {
                        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                            var entry = this.tryEntries[i];
                            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                                var finallyEntry = entry;
                                break
                            }
                        }
                        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
                            finallyEntry = null
                        }
                        var record = finallyEntry ? finallyEntry.completion : {};
                        record.type = type;
                        record.arg = arg;
                        if (finallyEntry) {
                            this.method = "next";
                            this.next = finallyEntry.finallyLoc;
                            return ContinueSentinel
                        }
                        return this.complete(record)
                    },
                    complete: function(record, afterLoc) {
                        if (record.type === "throw") {
                            throw record.arg
                        }
                        if (record.type === "break" || record.type === "continue") {
                            this.next = record.arg
                        } else if (record.type === "return") {
                            this.rval = this.arg = record.arg;
                            this.method = "return";
                            this.next = "end"
                        } else if (record.type === "normal" && afterLoc) {
                            this.next = afterLoc
                        }
                        return ContinueSentinel
                    },
                    finish: function(finallyLoc) {
                        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                            var entry = this.tryEntries[i];
                            if (entry.finallyLoc === finallyLoc) {
                                this.complete(entry.completion, entry.afterLoc);
                                resetTryEntry(entry);
                                return ContinueSentinel
                            }
                        }
                    },
                    catch: function(tryLoc) {
                        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                            var entry = this.tryEntries[i];
                            if (entry.tryLoc === tryLoc) {
                                var record = entry.completion;
                                if (record.type === "throw") {
                                    var thrown = record.arg;
                                    resetTryEntry(entry)
                                }
                                return thrown
                            }
                        }
                        throw new Error("illegal catch attempt")
                    },
                    delegateYield: function(iterable, resultName, nextLoc) {
                        this.delegate = {
                            iterator: values(iterable),
                            resultName: resultName,
                            nextLoc: nextLoc
                        };
                        if (this.method === "next") {
                            this.arg = undefined
                        }
                        return ContinueSentinel
                    }
                }
            }(typeof global === "object" ? global : typeof window === "object" ? window : typeof self === "object" ? self : this)
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {}],
    389: [function(require, module, exports) {
        "use strict";
        var jQueryDeferred = require("jquery-deferred");
        var jQueryParam = require("jquery-param");
        var jqueryFunction = function jqueryFunction(subject) {
            var events = subject.events || {};
            if (subject && subject === subject.window) return {
                0: subject,
                load: function load(handler) {
                    return subject.addEventListener("load", handler, false)
                },
                bind: function bind(event, handler) {
                    return subject.addEventListener(event, handler, false)
                },
                unbind: function unbind(event, handler) {
                    return subject.removeEventListener(event, handler, false)
                }
            };
            return {
                0: subject,
                unbind: function unbind(event, handler) {
                    var handlers = events[event] || [];
                    if (handler) {
                        var idx = handlers.indexOf(handler);
                        if (idx !== -1) handlers.splice(idx, 1)
                    } else handlers = [];
                    events[event] = handlers;
                    subject.events = events
                },
                bind: function bind(event, handler) {
                    var current = events[event] || [];
                    events[event] = current.concat(handler);
                    subject.events = events
                },
                triggerHandler: function triggerHandler(event, args) {
                    var _this = this;
                    var handlers = events[event] || [];
                    handlers.forEach(function(fn) {
                        if (args && args[0] && args[0].type === undefined) {
                            args = [{
                                type: event
                            }].concat(args || [])
                        } else {
                            args = args || []
                        }
                        fn.apply(_this, args)
                    })
                }
            }
        };
        var xhr = function xhr() {
            try {
                return new window.XMLHttpRequest
            } catch (e) {}
        };
        var ajax = function ajax(options) {
            var request = xhr();
            request.onreadystatechange = function() {
                if (request.readyState !== 4) {
                    return
                }
                if (request.status === 200 && !request._hasError) {
                    options.success && options.success(JSON.parse(request.responseText))
                } else {
                    options.error && options.error(request)
                }
            };
            request.open(options.type, options.url);
            request.setRequestHeader("content-type", options.contentType);
            request.send(options.data.data && "data=" + options.data.data);
            return {
                abort: function abort(reason) {
                    return request.abort(reason)
                }
            }
        };
        module.exports = jQueryDeferred.extend(jqueryFunction, jQueryDeferred, {
            defaultAjaxHeaders: null,
            ajax: ajax,
            inArray: function inArray(arr, item) {
                return arr.indexOf(item) !== -1
            },
            trim: function trim(str) {
                return str && str.trim()
            },
            isEmptyObject: function isEmptyObject(obj) {
                return !obj || Object.keys(obj).length === 0
            },
            makeArray: function makeArray(arr) {
                return [].slice.call(arr, 0)
            },
            param: function param(obj) {
                return jQueryParam(obj)
            },
            support: {
                cors: function() {
                    var xhrObj = xhr();
                    return !!xhrObj && "withCredentials" in xhrObj
                }()
            }
        })
    }, {
        "jquery-deferred": 382,
        "jquery-param": 386
    }],
    390: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
            return typeof obj
        } : function(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj
        };
        var jQueryShim = require("./jQueryShim");
        (function($, window, undefined) {
            var resources = {
                nojQuery: "jQuery was not found. Please ensure jQuery is referenced before the SignalR client JavaScript file.",
                noTransportOnInit: "No transport could be initialized successfully. Try specifying a different transport or none at all for auto initialization.",
                errorOnNegotiate: "Error during negotiation request.",
                stoppedWhileLoading: "The connection was stopped during page load.",
                stoppedWhileNegotiating: "The connection was stopped during the negotiate request.",
                errorParsingNegotiateResponse: "Error parsing negotiate response.",
                errorDuringStartRequest: "Error during start request. Stopping the connection.",
                stoppedDuringStartRequest: "The connection was stopped during the start request.",
                errorParsingStartResponse: "Error parsing start response: '{0}'. Stopping the connection.",
                invalidStartResponse: "Invalid start response: '{0}'. Stopping the connection.",
                protocolIncompatible: "You are using a version of the client that isn't compatible with the server. Client version {0}, server version {1}.",
                sendFailed: "Send failed.",
                parseFailed: "Failed at parsing response: {0}",
                longPollFailed: "Long polling request failed.",
                eventSourceFailedToConnect: "EventSource failed to connect.",
                eventSourceError: "Error raised by EventSource",
                webSocketClosed: "WebSocket closed.",
                pingServerFailedInvalidResponse: "Invalid ping response when pinging server: '{0}'.",
                pingServerFailed: "Failed to ping server.",
                pingServerFailedStatusCode: "Failed to ping server.  Server responded with status code {0}, stopping the connection.",
                pingServerFailedParse: "Failed to parse ping server response, stopping the connection.",
                noConnectionTransport: "Connection is in an invalid state, there is no transport active.",
                webSocketsInvalidState: "The Web Socket transport is in an invalid state, transitioning into reconnecting.",
                reconnectTimeout: "Couldn't reconnect within the configured timeout of {0} ms, disconnecting.",
                reconnectWindowTimeout: "The client has been inactive since {0} and it has exceeded the inactivity timeout of {1} ms. Stopping the connection."
            };
            if (typeof $ !== "function") {
                throw new Error(resources.nojQuery)
            }
            var _signalR, _connection, _pageLoaded = window.document.readyState === "complete",
                _pageWindow = $(window),
                _negotiateAbortText = "__Negotiate Aborted__",
                events = {
                    onStart: "onStart",
                    onStarting: "onStarting",
                    onReceived: "onReceived",
                    onError: "onError",
                    onConnectionSlow: "onConnectionSlow",
                    onReconnecting: "onReconnecting",
                    onReconnect: "onReconnect",
                    onStateChanged: "onStateChanged",
                    onDisconnect: "onDisconnect"
                },
                ajaxDefaults = {
                    processData: true,
                    timeout: null,
                    async: true,
                    global: false,
                    cache: false
                },
                _log = function _log(msg, logging) {
                    if (logging === false) {
                        return
                    }
                    var m;
                    if (typeof window.console === "undefined") {
                        return
                    }
                    m = "[" + (new Date).toTimeString() + "] SignalR: " + msg;
                    if (window.console.debug) {
                        window.console.debug(m)
                    } else if (window.console.log) {
                        window.console.log(m)
                    }
                },
                changeState = function changeState(connection, expectedState, newState) {
                    if (expectedState === connection.state) {
                        connection.state = newState;
                        $(connection).triggerHandler(events.onStateChanged, [{
                            oldState: expectedState,
                            newState: newState
                        }]);
                        return true
                    }
                    return false
                },
                isDisconnecting = function isDisconnecting(connection) {
                    return connection.state === _signalR.connectionState.disconnected
                },
                supportsKeepAlive = function supportsKeepAlive(connection) {
                    return connection._.keepAliveData.activated && connection.transport.supportsKeepAlive(connection)
                },
                configureStopReconnectingTimeout = function configureStopReconnectingTimeout(connection) {
                    var stopReconnectingTimeout, onReconnectTimeout;
                    if (!connection._.configuredStopReconnectingTimeout) {
                        onReconnectTimeout = function onReconnectTimeout(connection) {
                            var message = _signalR._.format(_signalR.resources.reconnectTimeout, connection.disconnectTimeout);
                            connection.log(message);
                            $(connection).triggerHandler(events.onError, [_signalR._.error(message, "TimeoutException")]);
                            connection.stop(false, false)
                        };
                        connection.reconnecting(function() {
                            var connection = this;
                            if (connection.state === _signalR.connectionState.reconnecting) {
                                stopReconnectingTimeout = window.setTimeout(function() {
                                    onReconnectTimeout(connection)
                                }, connection.disconnectTimeout)
                            }
                        });
                        connection.stateChanged(function(data) {
                            if (data.oldState === _signalR.connectionState.reconnecting) {
                                window.clearTimeout(stopReconnectingTimeout)
                            }
                        });
                        connection._.configuredStopReconnectingTimeout = true
                    }
                };
            _signalR = function signalR(url, qs, logging) {
                return new _signalR.fn.init(url, qs, logging)
            };
            _signalR._ = {
                defaultContentType: "application/x-www-form-urlencoded; charset=UTF-8",
                ieVersion: function() {
                    var version, matches;
                    if (window.navigator.appName === "Microsoft Internet Explorer") {
                        matches = /MSIE ([0-9]+\.[0-9]+)/.exec(window.navigator.userAgent);
                        if (matches) {
                            version = window.parseFloat(matches[1])
                        }
                    }
                    return version
                }(),
                error: function error(message, source, context) {
                    var e = new Error(message);
                    e.source = source;
                    if (typeof context !== "undefined") {
                        e.context = context
                    }
                    return e
                },
                transportError: function transportError(message, transport, source, context) {
                    var e = this.error(message, source, context);
                    e.transport = transport ? transport.name : undefined;
                    return e
                },
                format: function format() {
                    var s = arguments[0];
                    for (var i = 0; i < arguments.length - 1; i++) {
                        s = s.replace("{" + i + "}", arguments[i + 1])
                    }
                    return s
                },
                firefoxMajorVersion: function firefoxMajorVersion(userAgent) {
                    var matches = userAgent.match(/Firefox\/(\d+)/);
                    if (!matches || !matches.length || matches.length < 2) {
                        return 0
                    }
                    return parseInt(matches[1], 10)
                },
                configurePingInterval: function configurePingInterval(connection) {
                    var config = connection._.config,
                        onFail = function onFail(error) {
                            $(connection).triggerHandler(events.onError, [error])
                        };
                    if (config && !connection._.pingIntervalId && config.pingInterval) {
                        connection._.pingIntervalId = window.setInterval(function() {
                            _signalR.transports._logic.pingServer(connection).fail(onFail)
                        }, config.pingInterval)
                    }
                }
            };
            _signalR.events = events;
            _signalR.resources = resources;
            _signalR.ajaxDefaults = ajaxDefaults;
            _signalR.changeState = changeState;
            _signalR.isDisconnecting = isDisconnecting;
            _signalR.connectionState = {
                connecting: 0,
                connected: 1,
                reconnecting: 2,
                disconnected: 4
            };
            _signalR.hub = {
                start: function start() {
                    throw new Error("SignalR: Error loading hubs. Ensure your hubs reference is correct, e.g. <script src='/signalr/js'><\/script>.")
                }
            };
            if (typeof _pageWindow.on == "function") {
                _pageWindow.on("load", function() {
                    _pageLoaded = true
                })
            } else {
                _pageWindow.load(function() {
                    _pageLoaded = true
                })
            }

            function validateTransport(requestedTransport, connection) {
                if ($.isArray(requestedTransport)) {
                    for (var i = requestedTransport.length - 1; i >= 0; i--) {
                        var transport = requestedTransport[i];
                        if ($.type(transport) !== "string" || !_signalR.transports[transport]) {
                            connection.log("Invalid transport: " + transport + ", removing it from the transports list.");
                            requestedTransport.splice(i, 1)
                        }
                    }
                    if (requestedTransport.length === 0) {
                        connection.log("No transports remain within the specified transport array.");
                        requestedTransport = null
                    }
                } else if (!_signalR.transports[requestedTransport] && requestedTransport !== "auto") {
                    connection.log("Invalid transport: " + requestedTransport.toString() + ".");
                    requestedTransport = null
                } else if (requestedTransport === "auto" && _signalR._.ieVersion <= 8) {
                    return ["longPolling"]
                }
                return requestedTransport
            }

            function getDefaultPort(protocol) {
                if (protocol === "http:") {
                    return 80
                } else if (protocol === "https:") {
                    return 443
                }
            }

            function addDefaultPort(protocol, url) {
                if (url.match(/:\d+$/)) {
                    return url
                } else {
                    return url + ":" + getDefaultPort(protocol)
                }
            }

            function ConnectingMessageBuffer(connection, drainCallback) {
                var that = this,
                    buffer = [];
                that.tryBuffer = function(message) {
                    if (connection.state === $.signalR.connectionState.connecting) {
                        buffer.push(message);
                        return true
                    }
                    return false
                };
                that.drain = function() {
                    if (connection.state === $.signalR.connectionState.connected) {
                        while (buffer.length > 0) {
                            drainCallback(buffer.shift())
                        }
                    }
                };
                that.clear = function() {
                    buffer = []
                }
            }
            _signalR.fn = _signalR.prototype = {
                init: function init(url, qs, logging) {
                    var $connection = $(this);
                    this.url = url;
                    this.qs = qs;
                    this.lastError = null;
                    this._ = {
                        keepAliveData: {},
                        connectingMessageBuffer: new ConnectingMessageBuffer(this, function(message) {
                            $connection.triggerHandler(events.onReceived, [message])
                        }),
                        lastMessageAt: (new Date).getTime(),
                        lastActiveAt: (new Date).getTime(),
                        beatInterval: 5e3,
                        beatHandle: null,
                        totalTransportConnectTimeout: 0
                    };
                    if (typeof logging === "boolean") {
                        this.logging = logging
                    }
                },
                _parseResponse: function _parseResponse(response) {
                    var that = this;
                    if (!response) {
                        return response
                    } else if (typeof response === "string") {
                        return that.json.parse(response)
                    } else {
                        return response
                    }
                },
                _originalJson: window.JSON,
                json: window.JSON,
                isCrossDomain: function isCrossDomain(url, against) {
                    var link;
                    url = $.trim(url);
                    against = against || window.location;
                    if (url.indexOf("http") !== 0) {
                        return false
                    }
                    link = window.document.createElement("a");
                    link.href = url;
                    return link.protocol + addDefaultPort(link.protocol, link.host) !== against.protocol + addDefaultPort(against.protocol, against.host)
                },
                ajaxDataType: "text",
                contentType: "application/json; charset=UTF-8",
                logging: false,
                state: _signalR.connectionState.disconnected,
                clientProtocol: "1.5",
                reconnectDelay: 2e3,
                transportConnectTimeout: 0,
                disconnectTimeout: 3e4,
                reconnectWindow: 3e4,
                keepAliveWarnAt: 2 / 3,
                start: function start(options, callback) {
                    var connection = this,
                        config = {
                            pingInterval: 3e5,
                            waitForPageLoad: true,
                            transport: "auto",
                            jsonp: false
                        },
                        _initialize, deferred = connection._deferral || $.Deferred(),
                        parser = window.document.createElement("a");
                    connection.lastError = null;
                    connection._deferral = deferred;
                    if (!connection.json) {
                        throw new Error("SignalR: No JSON parser found. Please ensure json2.js is referenced before the SignalR.js file if you need to support clients without native JSON parsing support, e.g. IE<8.")
                    }
                    if ($.type(options) === "function") {
                        callback = options
                    } else if ($.type(options) === "object") {
                        $.extend(config, options);
                        if ($.type(config.callback) === "function") {
                            callback = config.callback
                        }
                    }
                    config.transport = validateTransport(config.transport, connection);
                    if (!config.transport) {
                        throw new Error("SignalR: Invalid transport(s) specified, aborting start.")
                    }
                    connection._.config = config;
                    if (!_pageLoaded && config.waitForPageLoad === true) {
                        connection._.deferredStartHandler = function() {
                            connection.start(options, callback)
                        };
                        _pageWindow.bind("load", connection._.deferredStartHandler);
                        return deferred.promise()
                    }
                    if (connection.state === _signalR.connectionState.connecting) {
                        return deferred.promise()
                    } else if (changeState(connection, _signalR.connectionState.disconnected, _signalR.connectionState.connecting) === false) {
                        deferred.resolve(connection);
                        return deferred.promise()
                    }
                    configureStopReconnectingTimeout(connection);
                    parser.href = connection.url;
                    if (!parser.protocol || parser.protocol === ":") {
                        connection.protocol = window.document.location.protocol;
                        connection.host = parser.host || window.document.location.host
                    } else {
                        connection.protocol = parser.protocol;
                        connection.host = parser.host
                    }
                    connection.baseUrl = connection.protocol + "//" + connection.host;
                    connection.wsProtocol = connection.protocol === "https:" ? "wss://" : "ws://";
                    if (config.transport === "auto" && config.jsonp === true) {
                        config.transport = "longPolling"
                    }
                    if (connection.url.indexOf("//") === 0) {
                        connection.url = window.location.protocol + connection.url;
                        connection.log("Protocol relative URL detected, normalizing it to '" + connection.url + "'.")
                    }
                    if (this.isCrossDomain(connection.url)) {
                        connection.log("Auto detected cross domain url.");
                        if (config.transport === "auto") {
                            config.transport = ["webSockets", "serverSentEvents", "longPolling"]
                        }
                        if (typeof config.withCredentials === "undefined") {
                            config.withCredentials = true
                        }
                        if (!config.jsonp) {
                            config.jsonp = !$.support.cors;
                            if (config.jsonp) {
                                connection.log("Using jsonp because this browser doesn't support CORS.")
                            }
                        }
                        connection.contentType = _signalR._.defaultContentType
                    }
                    connection.withCredentials = config.withCredentials;
                    connection.ajaxDataType = config.jsonp ? "jsonp" : "text";
                    $(connection).bind(events.onStart, function(e, data) {
                        if ($.type(callback) === "function") {
                            callback.call(connection)
                        }
                        deferred.resolve(connection)
                    });
                    connection._.initHandler = _signalR.transports._logic.initHandler(connection);
                    _initialize = function initialize(transports, index) {
                        var noTransportError = _signalR._.error(resources.noTransportOnInit);
                        index = index || 0;
                        if (index >= transports.length) {
                            if (index === 0) {
                                connection.log("No transports supported by the server were selected.")
                            } else if (index === 1) {
                                connection.log("No fallback transports were selected.")
                            } else {
                                connection.log("Fallback transports exhausted.")
                            }
                            $(connection).triggerHandler(events.onError, [noTransportError]);
                            deferred.reject(noTransportError);
                            connection.stop();
                            return
                        }
                        if (connection.state === _signalR.connectionState.disconnected) {
                            return
                        }
                        var transportName = transports[index],
                            transport = _signalR.transports[transportName],
                            onFallback = function onFallback() {
                                _initialize(transports, index + 1)
                            };
                        connection.transport = transport;
                        try {
                            connection._.initHandler.start(transport, function() {
                                var isFirefox11OrGreater = _signalR._.firefoxMajorVersion(window.navigator.userAgent) >= 11,
                                    asyncAbort = !!connection.withCredentials && isFirefox11OrGreater;
                                connection.log("The start request succeeded. Transitioning to the connected state.");
                                if (supportsKeepAlive(connection)) {
                                    _signalR.transports._logic.monitorKeepAlive(connection)
                                }
                                _signalR.transports._logic.startHeartbeat(connection);
                                _signalR._.configurePingInterval(connection);
                                if (!changeState(connection, _signalR.connectionState.connecting, _signalR.connectionState.connected)) {
                                    connection.log("WARNING! The connection was not in the connecting state.")
                                }
                                connection._.connectingMessageBuffer.drain();
                                $(connection).triggerHandler(events.onStart);
                                _pageWindow.bind("unload", function() {
                                    connection.log("Window unloading, stopping the connection.");
                                    connection.stop(asyncAbort)
                                });
                                if (isFirefox11OrGreater) {
                                    _pageWindow.bind("beforeunload", function() {
                                        window.setTimeout(function() {
                                            connection.stop(asyncAbort)
                                        }, 0)
                                    })
                                }
                            }, onFallback)
                        } catch (error) {
                            connection.log(transport.name + " transport threw '" + error.message + "' when attempting to start.");
                            onFallback()
                        }
                    };
                    var url = connection.url + "/negotiate",
                        onFailed = function onFailed(error, connection) {
                            var err = _signalR._.error(resources.errorOnNegotiate, error, connection._.negotiateRequest);
                            $(connection).triggerHandler(events.onError, err);
                            deferred.reject(err);
                            connection.stop()
                        };
                    $(connection).triggerHandler(events.onStarting);
                    url = _signalR.transports._logic.prepareQueryString(connection, url);
                    connection.log("Negotiating with '" + url + "'.");
                    connection._.negotiateRequest = _signalR.transports._logic.ajax(connection, {
                        url: url,
                        error: function error(_error, statusText) {
                            if (statusText !== _negotiateAbortText) {
                                onFailed(_error, connection)
                            } else {
                                deferred.reject(_signalR._.error(resources.stoppedWhileNegotiating, null, connection._.negotiateRequest))
                            }
                        },
                        success: function success(result) {
                            var res, keepAliveData, protocolError, transports = [],
                                supportedTransports = [];
                            try {
                                res = connection._parseResponse(result)
                            } catch (error) {
                                onFailed(_signalR._.error(resources.errorParsingNegotiateResponse, error), connection);
                                return
                            }
                            keepAliveData = connection._.keepAliveData;
                            connection.appRelativeUrl = res.Url;
                            connection.id = res.ConnectionId;
                            connection.token = res.ConnectionToken;
                            connection.webSocketServerUrl = res.WebSocketServerUrl;
                            connection._.pollTimeout = res.ConnectionTimeout * 1e3 + 1e4;
                            connection.disconnectTimeout = res.DisconnectTimeout * 1e3;
                            connection._.totalTransportConnectTimeout = connection.transportConnectTimeout + res.TransportConnectTimeout * 1e3;
                            if (res.KeepAliveTimeout) {
                                keepAliveData.activated = true;
                                keepAliveData.timeout = res.KeepAliveTimeout * 1e3;
                                keepAliveData.timeoutWarning = keepAliveData.timeout * connection.keepAliveWarnAt;
                                connection._.beatInterval = (keepAliveData.timeout - keepAliveData.timeoutWarning) / 3
                            } else {
                                keepAliveData.activated = false
                            }
                            connection.reconnectWindow = connection.disconnectTimeout + (keepAliveData.timeout || 0);
                            if (!res.ProtocolVersion || res.ProtocolVersion !== connection.clientProtocol) {
                                protocolError = _signalR._.error(_signalR._.format(resources.protocolIncompatible, connection.clientProtocol, res.ProtocolVersion));
                                $(connection).triggerHandler(events.onError, [protocolError]);
                                deferred.reject(protocolError);
                                return
                            }
                            $.each(_signalR.transports, function(key) {
                                if (key.indexOf("_") === 0 || key === "webSockets" && !res.TryWebSockets) {
                                    return true
                                }
                                supportedTransports.push(key)
                            });
                            if ($.isArray(config.transport)) {
                                $.each(config.transport, function(_, transport) {
                                    if ($.inArray(transport, supportedTransports) >= 0) {
                                        transports.push(transport)
                                    }
                                })
                            } else if (config.transport === "auto") {
                                transports = supportedTransports
                            } else if ($.inArray(config.transport, supportedTransports) >= 0) {
                                transports.push(config.transport)
                            }
                            _initialize(transports)
                        }
                    });
                    return deferred.promise()
                },
                starting: function starting(callback) {
                    var connection = this;
                    $(connection).bind(events.onStarting, function(e, data) {
                        callback.call(connection)
                    });
                    return connection
                },
                send: function send(data) {
                    var connection = this;
                    if (connection.state === _signalR.connectionState.disconnected) {
                        throw new Error("SignalR: Connection must be started before data can be sent. Call .start() before .send()")
                    }
                    if (connection.state === _signalR.connectionState.connecting) {
                        throw new Error("SignalR: Connection has not been fully initialized. Use .start().done() or .start().fail() to run logic after the connection has started.")
                    }
                    connection.transport.send(connection, data);
                    return connection
                },
                received: function received(callback) {
                    var connection = this;
                    $(connection).bind(events.onReceived, function(e, data) {
                        callback.call(connection, data)
                    });
                    return connection
                },
                stateChanged: function stateChanged(callback) {
                    var connection = this;
                    $(connection).bind(events.onStateChanged, function(e, data) {
                        callback.call(connection, data)
                    });
                    return connection
                },
                error: function error(callback) {
                    var connection = this;
                    $(connection).bind(events.onError, function(e, errorData, sendData) {
                        connection.lastError = errorData;
                        callback.call(connection, errorData, sendData)
                    });
                    return connection
                },
                disconnected: function disconnected(callback) {
                    var connection = this;
                    $(connection).bind(events.onDisconnect, function(e, data) {
                        callback.call(connection)
                    });
                    return connection
                },
                connectionSlow: function connectionSlow(callback) {
                    var connection = this;
                    $(connection).bind(events.onConnectionSlow, function(e, data) {
                        callback.call(connection)
                    });
                    return connection
                },
                reconnecting: function reconnecting(callback) {
                    var connection = this;
                    $(connection).bind(events.onReconnecting, function(e, data) {
                        callback.call(connection)
                    });
                    return connection
                },
                reconnected: function reconnected(callback) {
                    var connection = this;
                    $(connection).bind(events.onReconnect, function(e, data) {
                        callback.call(connection)
                    });
                    return connection
                },
                stop: function stop(async, notifyServer) {
                    var connection = this,
                        deferral = connection._deferral;
                    if (connection._.deferredStartHandler) {
                        _pageWindow.unbind("load", connection._.deferredStartHandler)
                    }
                    delete connection._.config;
                    delete connection._.deferredStartHandler;
                    if (!_pageLoaded && (!connection._.config || connection._.config.waitForPageLoad === true)) {
                        connection.log("Stopping connection prior to negotiate.");
                        if (deferral) {
                            deferral.reject(_signalR._.error(resources.stoppedWhileLoading))
                        }
                        return
                    }
                    if (connection.state === _signalR.connectionState.disconnected) {
                        return
                    }
                    connection.log("Stopping connection.");
                    window.clearTimeout(connection._.beatHandle);
                    window.clearInterval(connection._.pingIntervalId);
                    if (connection.transport) {
                        connection.transport.stop(connection);
                        if (notifyServer !== false) {
                            connection.transport.abort(connection, async)
                        }
                        if (supportsKeepAlive(connection)) {
                            _signalR.transports._logic.stopMonitoringKeepAlive(connection)
                        }
                        connection.transport = null
                    }
                    if (connection._.negotiateRequest) {
                        connection._.negotiateRequest.abort(_negotiateAbortText);
                        delete connection._.negotiateRequest
                    }
                    if (connection._.initHandler) {
                        connection._.initHandler.stop()
                    }
                    delete connection._deferral;
                    delete connection.messageId;
                    delete connection.groupsToken;
                    delete connection.id;
                    delete connection._.pingIntervalId;
                    delete connection._.lastMessageAt;
                    delete connection._.lastActiveAt;
                    connection._.connectingMessageBuffer.clear();
                    changeState(connection, connection.state, _signalR.connectionState.disconnected);
                    $(connection).triggerHandler(events.onDisconnect);
                    return connection
                },
                log: function log(msg) {
                    _log(msg, this.logging)
                }
            };
            _signalR.fn.init.prototype = _signalR.fn;
            _signalR.noConflict = function() {
                if ($.connection === _signalR) {
                    $.connection = _connection
                }
                return _signalR
            };
            if ($.connection) {
                _connection = $.connection
            }
            $.connection = $.signalR = _signalR
        })(jQueryShim, window);
        (function($, window, undefined) {
            var signalR = $.signalR,
                events = $.signalR.events,
                changeState = $.signalR.changeState,
                startAbortText = "__Start Aborted__",
                transportLogic;
            signalR.transports = {};

            function beat(connection) {
                if (connection._.keepAliveData.monitoring) {
                    checkIfAlive(connection)
                }
                if (transportLogic.markActive(connection)) {
                    connection._.beatHandle = window.setTimeout(function() {
                        beat(connection)
                    }, connection._.beatInterval)
                }
            }

            function checkIfAlive(connection) {
                var keepAliveData = connection._.keepAliveData,
                    timeElapsed;
                if (connection.state === signalR.connectionState.connected) {
                    timeElapsed = (new Date).getTime() - connection._.lastMessageAt;
                    if (timeElapsed >= keepAliveData.timeout) {
                        connection.log("Keep alive timed out.  Notifying transport that connection has been lost.");
                        connection.transport.lostConnection(connection)
                    } else if (timeElapsed >= keepAliveData.timeoutWarning) {
                        if (!keepAliveData.userNotified) {
                            connection.log("Keep alive has been missed, connection may be dead/slow.");
                            $(connection).triggerHandler(events.onConnectionSlow);
                            keepAliveData.userNotified = true
                        }
                    } else {
                        keepAliveData.userNotified = false
                    }
                }
            }

            function getAjaxUrl(connection, path) {
                var url = connection.url + path;
                if (connection.transport) {
                    url += "?transport=" + connection.transport.name
                }
                return transportLogic.prepareQueryString(connection, url)
            }

            function InitHandler(connection) {
                this.connection = connection;
                this.startRequested = false;
                this.startCompleted = false;
                this.connectionStopped = false
            }
            InitHandler.prototype = {
                start: function start(transport, onSuccess, onFallback) {
                    var that = this,
                        connection = that.connection,
                        failCalled = false;
                    if (that.startRequested || that.connectionStopped) {
                        connection.log("WARNING! " + transport.name + " transport cannot be started. Initialization ongoing or completed.");
                        return
                    }
                    connection.log(transport.name + " transport starting.");
                    transport.start(connection, function() {
                        if (!failCalled) {
                            that.initReceived(transport, onSuccess)
                        }
                    }, function(error) {
                        if (!failCalled) {
                            failCalled = true;
                            that.transportFailed(transport, error, onFallback)
                        }
                        return !that.startCompleted || that.connectionStopped
                    });
                    that.transportTimeoutHandle = window.setTimeout(function() {
                        if (!failCalled) {
                            failCalled = true;
                            connection.log(transport.name + " transport timed out when trying to connect.");
                            that.transportFailed(transport, undefined, onFallback)
                        }
                    }, connection._.totalTransportConnectTimeout)
                },
                stop: function stop() {
                    this.connectionStopped = true;
                    window.clearTimeout(this.transportTimeoutHandle);
                    signalR.transports._logic.tryAbortStartRequest(this.connection)
                },
                initReceived: function initReceived(transport, onSuccess) {
                    var that = this,
                        connection = that.connection;
                    if (that.startRequested) {
                        connection.log("WARNING! The client received multiple init messages.");
                        return
                    }
                    if (that.connectionStopped) {
                        return
                    }
                    that.startRequested = true;
                    window.clearTimeout(that.transportTimeoutHandle);
                    connection.log(transport.name + " transport connected. Initiating start request.");
                    signalR.transports._logic.ajaxStart(connection, function() {
                        that.startCompleted = true;
                        onSuccess()
                    })
                },
                transportFailed: function transportFailed(transport, error, onFallback) {
                    var connection = this.connection,
                        deferred = connection._deferral,
                        wrappedError;
                    if (this.connectionStopped) {
                        return
                    }
                    window.clearTimeout(this.transportTimeoutHandle);
                    if (!this.startRequested) {
                        transport.stop(connection);
                        connection.log(transport.name + " transport failed to connect. Attempting to fall back.");
                        onFallback()
                    } else if (!this.startCompleted) {
                        wrappedError = signalR._.error(signalR.resources.errorDuringStartRequest, error);
                        connection.log(transport.name + " transport failed during the start request. Stopping the connection.");
                        $(connection).triggerHandler(events.onError, [wrappedError]);
                        if (deferred) {
                            deferred.reject(wrappedError)
                        }
                        connection.stop()
                    } else {}
                }
            };
            transportLogic = signalR.transports._logic = {
                ajax: function ajax(connection, options) {
                    return $.ajax($.extend(true, {}, $.signalR.ajaxDefaults, {
                        type: "GET",
                        data: {},
                        xhrFields: {
                            withCredentials: connection.withCredentials
                        },
                        contentType: connection.contentType,
                        dataType: connection.ajaxDataType
                    }, options))
                },
                pingServer: function pingServer(connection) {
                    var url, xhr, deferral = $.Deferred();
                    if (connection.transport) {
                        url = connection.url + "/ping";
                        url = transportLogic.addQs(url, connection.qs);
                        xhr = transportLogic.ajax(connection, {
                            url: url,
                            success: function success(result) {
                                var data;
                                try {
                                    data = connection._parseResponse(result)
                                } catch (error) {
                                    deferral.reject(signalR._.transportError(signalR.resources.pingServerFailedParse, connection.transport, error, xhr));
                                    connection.stop();
                                    return
                                }
                                if (data.Response === "pong") {
                                    deferral.resolve()
                                } else {
                                    deferral.reject(signalR._.transportError(signalR._.format(signalR.resources.pingServerFailedInvalidResponse, result), connection.transport, null, xhr))
                                }
                            },
                            error: function error(_error2) {
                                if (_error2.status === 401 || _error2.status === 403) {
                                    deferral.reject(signalR._.transportError(signalR._.format(signalR.resources.pingServerFailedStatusCode, _error2.status), connection.transport, _error2, xhr));
                                    connection.stop()
                                } else {
                                    deferral.reject(signalR._.transportError(signalR.resources.pingServerFailed, connection.transport, _error2, xhr))
                                }
                            }
                        })
                    } else {
                        deferral.reject(signalR._.transportError(signalR.resources.noConnectionTransport, connection.transport))
                    }
                    return deferral.promise()
                },
                prepareQueryString: function prepareQueryString(connection, url) {
                    var preparedUrl;
                    preparedUrl = transportLogic.addQs(url, "clientProtocol=" + connection.clientProtocol);
                    preparedUrl = transportLogic.addQs(preparedUrl, connection.qs);
                    if (connection.token) {
                        preparedUrl += "&connectionToken=" + window.encodeURIComponent(connection.token)
                    }
                    if (connection.data) {
                        preparedUrl += "&connectionData=" + window.encodeURIComponent(connection.data)
                    }
                    return preparedUrl
                },
                addQs: function addQs(url, qs) {
                    var appender = url.indexOf("?") !== -1 ? "&" : "?",
                        firstChar;
                    if (!qs) {
                        return url
                    }
                    if ((typeof qs === "undefined" ? "undefined" : _typeof(qs)) === "object") {
                        return url + appender + $.param(qs)
                    }
                    if (typeof qs === "string") {
                        firstChar = qs.charAt(0);
                        if (firstChar === "?" || firstChar === "&") {
                            appender = ""
                        }
                        return url + appender + qs
                    }
                    throw new Error("Query string property must be either a string or object.")
                },
                getUrl: function getUrl(connection, transport, reconnecting, poll, ajaxPost) {
                    var baseUrl = transport === "webSockets" ? "" : connection.baseUrl,
                        url = baseUrl + connection.appRelativeUrl,
                        qs = "transport=" + transport;
                    if (!ajaxPost && connection.groupsToken) {
                        qs += "&groupsToken=" + window.encodeURIComponent(connection.groupsToken)
                    }
                    if (!reconnecting) {
                        url += "/connect"
                    } else {
                        if (poll) {
                            url += "/poll"
                        } else {
                            url += "/reconnect"
                        }
                        if (!ajaxPost && connection.messageId) {
                            qs += "&messageId=" + window.encodeURIComponent(connection.messageId)
                        }
                    }
                    url += "?" + qs;
                    url = transportLogic.prepareQueryString(connection, url);
                    if (!ajaxPost) {
                        url += "&tid=" + Math.floor(Math.random() * 11)
                    }
                    return url
                },
                maximizePersistentResponse: function maximizePersistentResponse(minPersistentResponse) {
                    return {
                        MessageId: minPersistentResponse.C,
                        Messages: minPersistentResponse.M,
                        Initialized: typeof minPersistentResponse.S !== "undefined" ? true : false,
                        ShouldReconnect: typeof minPersistentResponse.T !== "undefined" ? true : false,
                        LongPollDelay: minPersistentResponse.L,
                        GroupsToken: minPersistentResponse.G
                    }
                },
                updateGroups: function updateGroups(connection, groupsToken) {
                    if (groupsToken) {
                        connection.groupsToken = groupsToken
                    }
                },
                stringifySend: function stringifySend(connection, message) {
                    if (typeof message === "string" || typeof message === "undefined" || message === null) {
                        return message
                    }
                    return connection.json.stringify(message)
                },
                ajaxSend: function ajaxSend(connection, data) {
                    var payload = transportLogic.stringifySend(connection, data),
                        url = getAjaxUrl(connection, "/send"),
                        xhr, onFail = function onFail(error, connection) {
                            $(connection).triggerHandler(events.onError, [signalR._.transportError(signalR.resources.sendFailed, connection.transport, error, xhr), data])
                        };
                    xhr = transportLogic.ajax(connection, {
                        url: url,
                        type: connection.ajaxDataType === "jsonp" ? "GET" : "POST",
                        contentType: signalR._.defaultContentType,
                        data: {
                            data: payload
                        },
                        success: function success(result) {
                            var res;
                            if (result) {
                                try {
                                    res = connection._parseResponse(result)
                                } catch (error) {
                                    onFail(error, connection);
                                    connection.stop();
                                    return
                                }
                                transportLogic.triggerReceived(connection, res)
                            }
                        },
                        error: function error(_error3, textStatus) {
                            if (textStatus === "abort" || textStatus === "parsererror") {
                                return
                            }
                            onFail(_error3, connection)
                        }
                    });
                    return xhr
                },
                ajaxAbort: function ajaxAbort(connection, async) {
                    if (typeof connection.transport === "undefined") {
                        return
                    }
                    async = typeof async ==="undefined" ? true : async;
                    var url = getAjaxUrl(connection, "/abort");
                    transportLogic.ajax(connection, {
                        url: url,
                        async: async,
                        timeout: 1e3,
                        type: "POST"
                    });
                    connection.log("Fired ajax abort async = " + async +".")
                },
                ajaxStart: function ajaxStart(connection, onSuccess) {
                    var rejectDeferred = function rejectDeferred(error) {
                            var deferred = connection._deferral;
                            if (deferred) {
                                deferred.reject(error)
                            }
                        },
                        triggerStartError = function triggerStartError(error) {
                            connection.log("The start request failed. Stopping the connection.");
                            $(connection).triggerHandler(events.onError, [error]);
                            rejectDeferred(error);
                            connection.stop()
                        };
                    connection._.startRequest = transportLogic.ajax(connection, {
                        url: getAjaxUrl(connection, "/start"),
                        success: function success(result, statusText, xhr) {
                            var data;
                            try {
                                data = connection._parseResponse(result)
                            } catch (error) {
                                triggerStartError(signalR._.error(signalR._.format(signalR.resources.errorParsingStartResponse, result), error, xhr));
                                return
                            }
                            if (data.Response === "started") {
                                onSuccess()
                            } else {
                                triggerStartError(signalR._.error(signalR._.format(signalR.resources.invalidStartResponse, result), null, xhr))
                            }
                        },
                        error: function error(xhr, statusText, _error4) {
                            if (statusText !== startAbortText) {
                                triggerStartError(signalR._.error(signalR.resources.errorDuringStartRequest, _error4, xhr))
                            } else {
                                connection.log("The start request aborted because connection.stop() was called.");
                                rejectDeferred(signalR._.error(signalR.resources.stoppedDuringStartRequest, null, xhr))
                            }
                        }
                    })
                },
                tryAbortStartRequest: function tryAbortStartRequest(connection) {
                    if (connection._.startRequest) {
                        connection._.startRequest.abort(startAbortText);
                        delete connection._.startRequest
                    }
                },
                tryInitialize: function tryInitialize(connection, persistentResponse, onInitialized) {
                    if (persistentResponse.Initialized && onInitialized) {
                        onInitialized()
                    } else if (persistentResponse.Initialized) {
                        connection.log("WARNING! The client received an init message after reconnecting.")
                    }
                },
                triggerReceived: function triggerReceived(connection, data) {
                    if (!connection._.connectingMessageBuffer.tryBuffer(data)) {
                        $(connection).triggerHandler(events.onReceived, [data])
                    }
                },
                processMessages: function processMessages(connection, minData, onInitialized) {
                    var data;
                    transportLogic.markLastMessage(connection);
                    if (minData) {
                        data = transportLogic.maximizePersistentResponse(minData);
                        transportLogic.updateGroups(connection, data.GroupsToken);
                        if (data.MessageId) {
                            connection.messageId = data.MessageId
                        }
                        if (data.Messages) {
                            $.each(data.Messages, function(index, message) {
                                transportLogic.triggerReceived(connection, message)
                            });
                            transportLogic.tryInitialize(connection, data, onInitialized)
                        }
                    }
                },
                monitorKeepAlive: function monitorKeepAlive(connection) {
                    var keepAliveData = connection._.keepAliveData;
                    if (!keepAliveData.monitoring) {
                        keepAliveData.monitoring = true;
                        transportLogic.markLastMessage(connection);
                        connection._.keepAliveData.reconnectKeepAliveUpdate = function() {
                            transportLogic.markLastMessage(connection)
                        };
                        $(connection).bind(events.onReconnect, connection._.keepAliveData.reconnectKeepAliveUpdate);
                        connection.log("Now monitoring keep alive with a warning timeout of " + keepAliveData.timeoutWarning + ", keep alive timeout of " + keepAliveData.timeout + " and disconnecting timeout of " + connection.disconnectTimeout)
                    } else {
                        connection.log("Tried to monitor keep alive but it's already being monitored.")
                    }
                },
                stopMonitoringKeepAlive: function stopMonitoringKeepAlive(connection) {
                    var keepAliveData = connection._.keepAliveData;
                    if (keepAliveData.monitoring) {
                        keepAliveData.monitoring = false;
                        $(connection).unbind(events.onReconnect, connection._.keepAliveData.reconnectKeepAliveUpdate);
                        connection._.keepAliveData = {};
                        connection.log("Stopping the monitoring of the keep alive.")
                    }
                },
                startHeartbeat: function startHeartbeat(connection) {
                    connection._.lastActiveAt = (new Date).getTime();
                    beat(connection)
                },
                markLastMessage: function markLastMessage(connection) {
                    connection._.lastMessageAt = (new Date).getTime()
                },
                markActive: function markActive(connection) {
                    if (transportLogic.verifyLastActive(connection)) {
                        connection._.lastActiveAt = (new Date).getTime();
                        return true
                    }
                    return false
                },
                isConnectedOrReconnecting: function isConnectedOrReconnecting(connection) {
                    return connection.state === signalR.connectionState.connected || connection.state === signalR.connectionState.reconnecting
                },
                ensureReconnectingState: function ensureReconnectingState(connection) {
                    if (changeState(connection, signalR.connectionState.connected, signalR.connectionState.reconnecting) === true) {
                        $(connection).triggerHandler(events.onReconnecting)
                    }
                    return connection.state === signalR.connectionState.reconnecting
                },
                clearReconnectTimeout: function clearReconnectTimeout(connection) {
                    if (connection && connection._.reconnectTimeout) {
                        window.clearTimeout(connection._.reconnectTimeout);
                        delete connection._.reconnectTimeout
                    }
                },
                verifyLastActive: function verifyLastActive(connection) {
                    if ((new Date).getTime() - connection._.lastActiveAt >= connection.reconnectWindow) {
                        var message = signalR._.format(signalR.resources.reconnectWindowTimeout, new Date(connection._.lastActiveAt), connection.reconnectWindow);
                        connection.log(message);
                        $(connection).triggerHandler(events.onError, [signalR._.error(message, "TimeoutException")]);
                        connection.stop(false, false);
                        return false
                    }
                    return true
                },
                reconnect: function reconnect(connection, transportName) {
                    var transport = signalR.transports[transportName];
                    if (transportLogic.isConnectedOrReconnecting(connection) && !connection._.reconnectTimeout) {
                        if (!transportLogic.verifyLastActive(connection)) {
                            return
                        }
                        connection._.reconnectTimeout = window.setTimeout(function() {
                            if (!transportLogic.verifyLastActive(connection)) {
                                return
                            }
                            transport.stop(connection);
                            if (transportLogic.ensureReconnectingState(connection)) {
                                connection.log(transportName + " reconnecting.");
                                transport.start(connection)
                            }
                        }, connection.reconnectDelay)
                    }
                },
                handleParseFailure: function handleParseFailure(connection, result, error, onFailed, context) {
                    var wrappedError = signalR._.transportError(signalR._.format(signalR.resources.parseFailed, result), connection.transport, error, context);
                    if (onFailed && onFailed(wrappedError)) {
                        connection.log("Failed to parse server response while attempting to connect.")
                    } else {
                        $(connection).triggerHandler(events.onError, [wrappedError]);
                        connection.stop()
                    }
                },
                initHandler: function initHandler(connection) {
                    return new InitHandler(connection)
                },
                foreverFrame: {
                    count: 0,
                    connections: {}
                }
            }
        })(jQueryShim, window);
        (function($, window, undefined) {
            var signalR = $.signalR,
                events = $.signalR.events,
                changeState = $.signalR.changeState,
                transportLogic = signalR.transports._logic;
            signalR.transports.webSockets = {
                name: "webSockets",
                supportsKeepAlive: function supportsKeepAlive() {
                    return true
                },
                send: function send(connection, data) {
                    var payload = transportLogic.stringifySend(connection, data);
                    try {
                        connection.socket.send(payload)
                    } catch (ex) {
                        $(connection).triggerHandler(events.onError, [signalR._.transportError(signalR.resources.webSocketsInvalidState, connection.transport, ex, connection.socket), data])
                    }
                },
                start: function start(connection, onSuccess, onFailed) {
                    var url, opened = false,
                        that = this,
                        reconnecting = !onSuccess,
                        $connection = $(connection);
                    if (!window.WebSocket) {
                        onFailed();
                        return
                    }
                    if (!connection.socket) {
                        if (connection.webSocketServerUrl) {
                            url = connection.webSocketServerUrl
                        } else {
                            url = connection.wsProtocol + connection.host
                        }
                        url += transportLogic.getUrl(connection, this.name, reconnecting);
                        connection.log("Connecting to websocket endpoint '" + url + "'.");
                        connection.socket = new window.WebSocket(url);
                        connection.socket.onopen = function() {
                            opened = true;
                            connection.log("Websocket opened.");
                            transportLogic.clearReconnectTimeout(connection);
                            if (changeState(connection, signalR.connectionState.reconnecting, signalR.connectionState.connected) === true) {
                                $connection.triggerHandler(events.onReconnect)
                            }
                        };
                        connection.socket.onclose = function(event) {
                            var error;
                            if (this === connection.socket) {
                                if (opened && typeof event.wasClean !== "undefined" && event.wasClean === false) {
                                    error = signalR._.transportError(signalR.resources.webSocketClosed, connection.transport, event);
                                    connection.log("Unclean disconnect from websocket: " + (event.reason || "[no reason given]."))
                                } else {
                                    connection.log("Websocket closed.")
                                }
                                if (!onFailed || !onFailed(error)) {
                                    if (error) {
                                        $(connection).triggerHandler(events.onError, [error])
                                    }
                                    that.reconnect(connection)
                                }
                            }
                        };
                        connection.socket.onmessage = function(event) {
                            var data;
                            try {
                                data = connection._parseResponse(event.data)
                            } catch (error) {
                                transportLogic.handleParseFailure(connection, event.data, error, onFailed, event);
                                return
                            }
                            if (data) {
                                if ($.isEmptyObject(data) || data.M) {
                                    transportLogic.processMessages(connection, data, onSuccess)
                                } else {
                                    transportLogic.triggerReceived(connection, data)
                                }
                            }
                        }
                    }
                },
                reconnect: function reconnect(connection) {
                    transportLogic.reconnect(connection, this.name)
                },
                lostConnection: function lostConnection(connection) {
                    this.reconnect(connection)
                },
                stop: function stop(connection) {
                    transportLogic.clearReconnectTimeout(connection);
                    if (connection.socket) {
                        connection.log("Closing the Websocket.");
                        connection.socket.close();
                        connection.socket = null
                    }
                },
                abort: function abort(connection, async) {
                    transportLogic.ajaxAbort(connection, async)
                }
            }
        })(jQueryShim, window);
        (function($, window, undefined) {
            var signalR = $.signalR,
                events = $.signalR.events,
                changeState = $.signalR.changeState,
                transportLogic = signalR.transports._logic,
                clearReconnectAttemptTimeout = function clearReconnectAttemptTimeout(connection) {
                    window.clearTimeout(connection._.reconnectAttemptTimeoutHandle);
                    delete connection._.reconnectAttemptTimeoutHandle
                };
            signalR.transports.serverSentEvents = {
                name: "serverSentEvents",
                supportsKeepAlive: function supportsKeepAlive() {
                    return true
                },
                timeOut: 3e3,
                start: function start(connection, onSuccess, onFailed) {
                    var that = this,
                        opened = false,
                        $connection = $(connection),
                        reconnecting = !onSuccess,
                        url;
                    if (connection.eventSource) {
                        connection.log("The connection already has an event source. Stopping it.");
                        connection.stop()
                    }
                    if (!window.EventSource) {
                        if (onFailed) {
                            connection.log("This browser doesn't support SSE.");
                            onFailed()
                        }
                        return
                    }
                    url = transportLogic.getUrl(connection, this.name, reconnecting);
                    try {
                        connection.log("Attempting to connect to SSE endpoint '" + url + "'.");
                        connection.eventSource = new window.EventSource(url, {
                            withCredentials: connection.withCredentials
                        })
                    } catch (e) {
                        connection.log("EventSource failed trying to connect with error " + e.Message + ".");
                        if (onFailed) {
                            onFailed()
                        } else {
                            $connection.triggerHandler(events.onError, [signalR._.transportError(signalR.resources.eventSourceFailedToConnect, connection.transport, e)]);
                            if (reconnecting) {
                                that.reconnect(connection)
                            }
                        }
                        return
                    }
                    if (reconnecting) {
                        connection._.reconnectAttemptTimeoutHandle = window.setTimeout(function() {
                            if (opened === false) {
                                if (connection.eventSource.readyState !== window.EventSource.OPEN) {
                                    that.reconnect(connection)
                                }
                            }
                        }, that.timeOut)
                    }
                    connection.eventSource.addEventListener("open", function(e) {
                        connection.log("EventSource connected.");
                        clearReconnectAttemptTimeout(connection);
                        transportLogic.clearReconnectTimeout(connection);
                        if (opened === false) {
                            opened = true;
                            if (changeState(connection, signalR.connectionState.reconnecting, signalR.connectionState.connected) === true) {
                                $connection.triggerHandler(events.onReconnect)
                            }
                        }
                    }, false);
                    connection.eventSource.addEventListener("message", function(e) {
                        var res;
                        if (e.data === "initialized") {
                            return
                        }
                        try {
                            res = connection._parseResponse(e.data)
                        } catch (error) {
                            transportLogic.handleParseFailure(connection, e.data, error, onFailed, e);
                            return
                        }
                        transportLogic.processMessages(connection, res, onSuccess)
                    }, false);
                    connection.eventSource.addEventListener("error", function(e) {
                        var error = signalR._.transportError(signalR.resources.eventSourceError, connection.transport, e);
                        if (this !== connection.eventSource) {
                            return
                        }
                        if (onFailed && onFailed(error)) {
                            return
                        }
                        connection.log("EventSource readyState: " + connection.eventSource.readyState + ".");
                        if (e.eventPhase === window.EventSource.CLOSED) {
                            connection.log("EventSource reconnecting due to the server connection ending.");
                            that.reconnect(connection)
                        } else {
                            connection.log("EventSource error.");
                            $connection.triggerHandler(events.onError, [error])
                        }
                    }, false)
                },
                reconnect: function reconnect(connection) {
                    transportLogic.reconnect(connection, this.name)
                },
                lostConnection: function lostConnection(connection) {
                    this.reconnect(connection)
                },
                send: function send(connection, data) {
                    transportLogic.ajaxSend(connection, data)
                },
                stop: function stop(connection) {
                    clearReconnectAttemptTimeout(connection);
                    transportLogic.clearReconnectTimeout(connection);
                    if (connection && connection.eventSource) {
                        connection.log("EventSource calling close().");
                        connection.eventSource.close();
                        connection.eventSource = null;
                        delete connection.eventSource
                    }
                },
                abort: function abort(connection, async) {
                    transportLogic.ajaxAbort(connection, async)
                }
            }
        })(jQueryShim, window);
        (function($, window, undefined) {
            var signalR = $.signalR,
                events = $.signalR.events,
                changeState = $.signalR.changeState,
                transportLogic = signalR.transports._logic,
                createFrame = function createFrame() {
                    var frame = window.document.createElement("iframe");
                    frame.setAttribute("style", "position:absolute;top:0;left:0;width:0;height:0;visibility:hidden;");
                    return frame
                },
                loadPreventer = function() {
                    var loadingFixIntervalId = null,
                        loadingFixInterval = 1e3,
                        attachedTo = 0;
                    return {
                        prevent: function prevent() {
                            if (signalR._.ieVersion <= 8) {
                                if (attachedTo === 0) {
                                    loadingFixIntervalId = window.setInterval(function() {
                                        var tempFrame = createFrame();
                                        window.document.body.appendChild(tempFrame);
                                        window.document.body.removeChild(tempFrame);
                                        tempFrame = null
                                    }, loadingFixInterval)
                                }
                                attachedTo++
                            }
                        },
                        cancel: function cancel() {
                            if (attachedTo === 1) {
                                window.clearInterval(loadingFixIntervalId)
                            }
                            if (attachedTo > 0) {
                                attachedTo--
                            }
                        }
                    }
                }();
            signalR.transports.foreverFrame = {
                name: "foreverFrame",
                supportsKeepAlive: function supportsKeepAlive() {
                    return true
                },
                iframeClearThreshold: 50,
                start: function start(connection, onSuccess, onFailed) {
                    var that = this,
                        frameId = transportLogic.foreverFrame.count += 1,
                        url, frame = createFrame(),
                        frameLoadHandler = function frameLoadHandler() {
                            connection.log("Forever frame iframe finished loading and is no longer receiving messages.");
                            if (!onFailed || !onFailed()) {
                                that.reconnect(connection)
                            }
                        };
                    if (window.EventSource) {
                        if (onFailed) {
                            connection.log("Forever Frame is not supported by SignalR on browsers with SSE support.");
                            onFailed()
                        }
                        return
                    }
                    frame.setAttribute("data-signalr-connection-id", connection.id);
                    loadPreventer.prevent();
                    url = transportLogic.getUrl(connection, this.name);
                    url += "&frameId=" + frameId;
                    window.document.documentElement.appendChild(frame);
                    connection.log("Binding to iframe's load event.");
                    if (frame.addEventListener) {
                        frame.addEventListener("load", frameLoadHandler, false)
                    } else if (frame.attachEvent) {
                        frame.attachEvent("onload", frameLoadHandler)
                    }
                    frame.src = url;
                    transportLogic.foreverFrame.connections[frameId] = connection;
                    connection.frame = frame;
                    connection.frameId = frameId;
                    if (onSuccess) {
                        connection.onSuccess = function() {
                            connection.log("Iframe transport started.");
                            onSuccess()
                        }
                    }
                },
                reconnect: function reconnect(connection) {
                    var that = this;
                    if (transportLogic.isConnectedOrReconnecting(connection) && transportLogic.verifyLastActive(connection)) {
                        window.setTimeout(function() {
                            if (!transportLogic.verifyLastActive(connection)) {
                                return
                            }
                            if (connection.frame && transportLogic.ensureReconnectingState(connection)) {
                                var frame = connection.frame,
                                    src = transportLogic.getUrl(connection, that.name, true) + "&frameId=" + connection.frameId;
                                connection.log("Updating iframe src to '" + src + "'.");
                                frame.src = src
                            }
                        }, connection.reconnectDelay)
                    }
                },
                lostConnection: function lostConnection(connection) {
                    this.reconnect(connection)
                },
                send: function send(connection, data) {
                    transportLogic.ajaxSend(connection, data)
                },
                receive: function receive(connection, data) {
                    var cw, body, response;
                    if (connection.json !== connection._originalJson) {
                        data = connection._originalJson.stringify(data)
                    }
                    response = connection._parseResponse(data);
                    transportLogic.processMessages(connection, response, connection.onSuccess);
                    if (connection.state === $.signalR.connectionState.connected) {
                        connection.frameMessageCount = (connection.frameMessageCount || 0) + 1;
                        if (connection.frameMessageCount > signalR.transports.foreverFrame.iframeClearThreshold) {
                            connection.frameMessageCount = 0;
                            cw = connection.frame.contentWindow || connection.frame.contentDocument;
                            if (cw && cw.document && cw.document.body) {
                                body = cw.document.body;
                                while (body.firstChild) {
                                    body.removeChild(body.firstChild)
                                }
                            }
                        }
                    }
                },
                stop: function stop(connection) {
                    var cw = null;
                    loadPreventer.cancel();
                    if (connection.frame) {
                        if (connection.frame.stop) {
                            connection.frame.stop()
                        } else {
                            try {
                                cw = connection.frame.contentWindow || connection.frame.contentDocument;
                                if (cw.document && cw.document.execCommand) {
                                    cw.document.execCommand("Stop")
                                }
                            } catch (e) {
                                connection.log("Error occurred when stopping foreverFrame transport. Message = " + e.message + ".")
                            }
                        }
                        if (connection.frame.parentNode === window.document.body) {
                            window.document.body.removeChild(connection.frame)
                        }
                        delete transportLogic.foreverFrame.connections[connection.frameId];
                        connection.frame = null;
                        connection.frameId = null;
                        delete connection.frame;
                        delete connection.frameId;
                        delete connection.onSuccess;
                        delete connection.frameMessageCount;
                        connection.log("Stopping forever frame.")
                    }
                },
                abort: function abort(connection, async) {
                    transportLogic.ajaxAbort(connection, async)
                },
                getConnection: function getConnection(id) {
                    return transportLogic.foreverFrame.connections[id]
                },
                started: function started(connection) {
                    if (changeState(connection, signalR.connectionState.reconnecting, signalR.connectionState.connected) === true) {
                        $(connection).triggerHandler(events.onReconnect)
                    }
                }
            }
        })(jQueryShim, window);
        (function($, window, undefined) {
            var signalR = $.signalR,
                events = $.signalR.events,
                changeState = $.signalR.changeState,
                isDisconnecting = $.signalR.isDisconnecting,
                transportLogic = signalR.transports._logic;
            signalR.transports.longPolling = {
                name: "longPolling",
                supportsKeepAlive: function supportsKeepAlive() {
                    return false
                },
                reconnectDelay: 3e3,
                start: function start(connection, onSuccess, onFailed) {
                    var that = this,
                        _fireConnect = function fireConnect() {
                            _fireConnect = $.noop;
                            connection.log("LongPolling connected.");
                            if (onSuccess) {
                                onSuccess()
                            } else {
                                connection.log("WARNING! The client received an init message after reconnecting.")
                            }
                        },
                        tryFailConnect = function tryFailConnect(error) {
                            if (onFailed(error)) {
                                connection.log("LongPolling failed to connect.");
                                return true
                            }
                            return false
                        },
                        privateData = connection._,
                        reconnectErrors = 0,
                        fireReconnected = function fireReconnected(instance) {
                            window.clearTimeout(privateData.reconnectTimeoutId);
                            privateData.reconnectTimeoutId = null;
                            if (changeState(instance, signalR.connectionState.reconnecting, signalR.connectionState.connected) === true) {
                                instance.log("Raising the reconnect event");
                                $(instance).triggerHandler(events.onReconnect)
                            }
                        },
                        maxFireReconnectedTimeout = 36e5;
                    if (connection.pollXhr) {
                        connection.log("Polling xhr requests already exists, aborting.");
                        connection.stop()
                    }
                    connection.messageId = null;
                    privateData.reconnectTimeoutId = null;
                    privateData.pollTimeoutId = window.setTimeout(function() {
                        (function poll(instance, raiseReconnect) {
                            var messageId = instance.messageId,
                                connect = messageId === null,
                                reconnecting = !connect,
                                polling = !raiseReconnect,
                                url = transportLogic.getUrl(instance, that.name, reconnecting, polling, true),
                                postData = {};
                            if (instance.messageId) {
                                postData.messageId = instance.messageId
                            }
                            if (instance.groupsToken) {
                                postData.groupsToken = instance.groupsToken
                            }
                            if (isDisconnecting(instance) === true) {
                                return
                            }
                            connection.log("Opening long polling request to '" + url + "'.");
                            instance.pollXhr = transportLogic.ajax(connection, {
                                xhrFields: {
                                    onprogress: function onprogress() {
                                        transportLogic.markLastMessage(connection)
                                    }
                                },
                                url: url,
                                type: "POST",
                                contentType: signalR._.defaultContentType,
                                data: postData,
                                timeout: connection._.pollTimeout,
                                success: function success(result) {
                                    var minData, delay = 0,
                                        data, shouldReconnect;
                                    connection.log("Long poll complete.");
                                    reconnectErrors = 0;
                                    try {
                                        minData = connection._parseResponse(result)
                                    } catch (error) {
                                        transportLogic.handleParseFailure(instance, result, error, tryFailConnect, instance.pollXhr);
                                        return
                                    }
                                    if (privateData.reconnectTimeoutId !== null) {
                                        fireReconnected(instance)
                                    }
                                    if (minData) {
                                        data = transportLogic.maximizePersistentResponse(minData)
                                    }
                                    transportLogic.processMessages(instance, minData, _fireConnect);
                                    if (data && $.type(data.LongPollDelay) === "number") {
                                        delay = data.LongPollDelay
                                    }
                                    if (isDisconnecting(instance) === true) {
                                        return
                                    }
                                    shouldReconnect = data && data.ShouldReconnect;
                                    if (shouldReconnect) {
                                        if (!transportLogic.ensureReconnectingState(instance)) {
                                            return
                                        }
                                    }
                                    if (delay > 0) {
                                        privateData.pollTimeoutId = window.setTimeout(function() {
                                            poll(instance, shouldReconnect)
                                        }, delay)
                                    } else {
                                        poll(instance, shouldReconnect)
                                    }
                                },
                                error: function error(data, textStatus) {
                                    var error = signalR._.transportError(signalR.resources.longPollFailed, connection.transport, data, instance.pollXhr);
                                    window.clearTimeout(privateData.reconnectTimeoutId);
                                    privateData.reconnectTimeoutId = null;
                                    if (textStatus === "abort") {
                                        connection.log("Aborted xhr request.");
                                        return
                                    }
                                    if (!tryFailConnect(error)) {
                                        reconnectErrors++;
                                        if (connection.state !== signalR.connectionState.reconnecting) {
                                            connection.log("An error occurred using longPolling. Status = " + textStatus + ".  Response = " + data.responseText + ".");
                                            $(instance).triggerHandler(events.onError, [error])
                                        }
                                        if ((connection.state === signalR.connectionState.connected || connection.state === signalR.connectionState.reconnecting) && !transportLogic.verifyLastActive(connection)) {
                                            return
                                        }
                                        if (!transportLogic.ensureReconnectingState(instance)) {
                                            return
                                        }
                                        privateData.pollTimeoutId = window.setTimeout(function() {
                                            poll(instance, true)
                                        }, that.reconnectDelay)
                                    }
                                }
                            });
                            if (reconnecting && raiseReconnect === true) {
                                privateData.reconnectTimeoutId = window.setTimeout(function() {
                                    fireReconnected(instance)
                                }, Math.min(1e3 * (Math.pow(2, reconnectErrors) - 1), maxFireReconnectedTimeout))
                            }
                        })(connection)
                    }, 250)
                },
                lostConnection: function lostConnection(connection) {
                    if (connection.pollXhr) {
                        connection.pollXhr.abort("lostConnection")
                    }
                },
                send: function send(connection, data) {
                    transportLogic.ajaxSend(connection, data)
                },
                stop: function stop(connection) {
                    window.clearTimeout(connection._.pollTimeoutId);
                    window.clearTimeout(connection._.reconnectTimeoutId);
                    delete connection._.pollTimeoutId;
                    delete connection._.reconnectTimeoutId;
                    if (connection.pollXhr) {
                        connection.pollXhr.abort();
                        connection.pollXhr = null;
                        delete connection.pollXhr
                    }
                },
                abort: function abort(connection, async) {
                    transportLogic.ajaxAbort(connection, async)
                }
            }
        })(jQueryShim, window);
        (function($, window, undefined) {
            var eventNamespace = ".hubProxy",
                signalR = $.signalR;

            function makeEventName(event) {
                return event + eventNamespace
            }

            function map(arr, fun, thisp) {
                var i, length = arr.length,
                    result = [];
                for (i = 0; i < length; i += 1) {
                    if (arr.hasOwnProperty(i)) {
                        result[i] = fun.call(thisp, arr[i], i, arr)
                    }
                }
                return result
            }

            function getArgValue(a) {
                return $.isFunction(a) ? null : $.type(a) === "undefined" ? null : a
            }

            function hasMembers(obj) {
                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        return true
                    }
                }
                return false
            }

            function clearInvocationCallbacks(connection, error) {
                var callbacks = connection._.invocationCallbacks,
                    callback;
                if (hasMembers(callbacks)) {
                    connection.log("Clearing hub invocation callbacks with error: " + error + ".")
                }
                connection._.invocationCallbackId = 0;
                delete connection._.invocationCallbacks;
                connection._.invocationCallbacks = {};
                for (var callbackId in callbacks) {
                    callback = callbacks[callbackId];
                    callback.method.call(callback.scope, {
                        E: error
                    })
                }
            }

            function hubProxy(hubConnection, hubName) {
                return new hubProxy.fn.init(hubConnection, hubName)
            }
            hubProxy.fn = hubProxy.prototype = {
                init: function init(connection, hubName) {
                    this.state = {};
                    this.connection = connection;
                    this.hubName = hubName;
                    this._ = {
                        callbackMap: {}
                    }
                },
                constructor: hubProxy,
                hasSubscriptions: function hasSubscriptions() {
                    return hasMembers(this._.callbackMap)
                },
                on: function on(eventName, callback) {
                    var that = this,
                        callbackMap = that._.callbackMap;
                    eventName = eventName.toLowerCase();
                    if (!callbackMap[eventName]) {
                        callbackMap[eventName] = {}
                    }
                    callbackMap[eventName][callback] = function(e, data) {
                        callback.apply(that, data)
                    };
                    $(that).bind(makeEventName(eventName), callbackMap[eventName][callback]);
                    return that
                },
                off: function off(eventName, callback) {
                    var that = this,
                        callbackMap = that._.callbackMap,
                        callbackSpace;
                    eventName = eventName.toLowerCase();
                    callbackSpace = callbackMap[eventName];
                    if (callbackSpace) {
                        if (callbackSpace[callback]) {
                            $(that).unbind(makeEventName(eventName), callbackSpace[callback]);
                            delete callbackSpace[callback];
                            if (!hasMembers(callbackSpace)) {
                                delete callbackMap[eventName]
                            }
                        } else if (!callback) {
                            $(that).unbind(makeEventName(eventName));
                            delete callbackMap[eventName]
                        }
                    }
                    return that
                },
                invoke: function invoke(methodName) {
                    var that = this,
                        connection = that.connection,
                        args = $.makeArray(arguments).slice(1),
                        argValues = map(args, getArgValue),
                        data = {
                            H: that.hubName,
                            M: methodName,
                            A: argValues,
                            I: connection._.invocationCallbackId
                        },
                        d = $.Deferred(),
                        callback = function callback(minResult) {
                            var result = that._maximizeHubResponse(minResult),
                                source, error;
                            $.extend(that.state, result.State);
                            if (result.Progress) {
                                if (d.notifyWith) {
                                    d.notifyWith(that, [result.Progress.Data])
                                } else if (!connection._.progressjQueryVersionLogged) {
                                    connection.log("A hub method invocation progress update was received but the version of jQuery in use (" + $.prototype.jquery + ") does not support progress updates. Upgrade to jQuery 1.7+ to receive progress notifications.");
                                    connection._.progressjQueryVersionLogged = true
                                }
                            } else if (result.Error) {
                                if (result.StackTrace) {
                                    connection.log(result.Error + "\n" + result.StackTrace + ".")
                                }
                                source = result.IsHubException ? "HubException" : "Exception";
                                error = signalR._.error(result.Error, source);
                                error.data = result.ErrorData;
                                connection.log(that.hubName + "." + methodName + " failed to execute. Error: " + error.message);
                                d.rejectWith(that, [error])
                            } else {
                                connection.log("Invoked " + that.hubName + "." + methodName);
                                d.resolveWith(that, [result.Result])
                            }
                        };
                    connection._.invocationCallbacks[connection._.invocationCallbackId.toString()] = {
                        scope: that,
                        method: callback
                    };
                    connection._.invocationCallbackId += 1;
                    if (!$.isEmptyObject(that.state)) {
                        data.S = that.state
                    }
                    connection.log("Invoking " + that.hubName + "." + methodName);
                    connection.send(data);
                    return d.promise()
                },
                _maximizeHubResponse: function _maximizeHubResponse(minHubResponse) {
                    return {
                        State: minHubResponse.S,
                        Result: minHubResponse.R,
                        Progress: minHubResponse.P ? {
                            Id: minHubResponse.P.I,
                            Data: minHubResponse.P.D
                        } : null,
                        Id: minHubResponse.I,
                        IsHubException: minHubResponse.H,
                        Error: minHubResponse.E,
                        StackTrace: minHubResponse.T,
                        ErrorData: minHubResponse.D
                    }
                }
            };
            hubProxy.fn.init.prototype = hubProxy.fn;

            function hubConnection(url, options) {
                var settings = {
                    qs: null,
                    logging: false,
                    useDefaultPath: true
                };
                $.extend(settings, options);
                if (!url || settings.useDefaultPath) {
                    url = (url || "") + "/signalr"
                }
                return new hubConnection.fn.init(url, settings)
            }
            hubConnection.fn = hubConnection.prototype = $.connection();
            hubConnection.fn.init = function(url, options) {
                var settings = {
                        qs: null,
                        logging: false,
                        useDefaultPath: true
                    },
                    connection = this;
                $.extend(settings, options);
                $.signalR.fn.init.call(connection, url, settings.qs, settings.logging);
                connection.proxies = {};
                connection._.invocationCallbackId = 0;
                connection._.invocationCallbacks = {};
                connection.received(function(minData) {
                    var data, proxy, dataCallbackId, callback, hubName, eventName;
                    if (!minData) {
                        return
                    }
                    if (typeof minData.P !== "undefined") {
                        dataCallbackId = minData.P.I.toString();
                        callback = connection._.invocationCallbacks[dataCallbackId];
                        if (callback) {
                            callback.method.call(callback.scope, minData)
                        }
                    } else if (typeof minData.I !== "undefined") {
                        dataCallbackId = minData.I.toString();
                        callback = connection._.invocationCallbacks[dataCallbackId];
                        if (callback) {
                            connection._.invocationCallbacks[dataCallbackId] = null;
                            delete connection._.invocationCallbacks[dataCallbackId];
                            callback.method.call(callback.scope, minData)
                        }
                    } else {
                        data = this._maximizeClientHubInvocation(minData);
                        connection.log("Triggering client hub event '" + data.Method + "' on hub '" + data.Hub + "'.");
                        hubName = data.Hub.toLowerCase();
                        eventName = data.Method.toLowerCase();
                        proxy = this.proxies[hubName];
                        $.extend(proxy.state, data.State);
                        $(proxy).triggerHandler(makeEventName(eventName), [data.Args])
                    }
                });
                connection.error(function(errData, origData) {
                    var callbackId, callback;
                    if (!origData) {
                        return
                    }
                    callbackId = origData.I;
                    callback = connection._.invocationCallbacks[callbackId];
                    if (callback) {
                        connection._.invocationCallbacks[callbackId] = null;
                        delete connection._.invocationCallbacks[callbackId];
                        callback.method.call(callback.scope, {
                            E: errData
                        })
                    }
                });
                connection.reconnecting(function() {
                    if (connection.transport && connection.transport.name === "webSockets") {
                        clearInvocationCallbacks(connection, "Connection started reconnecting before invocation result was received.")
                    }
                });
                connection.disconnected(function() {
                    clearInvocationCallbacks(connection, "Connection was disconnected before invocation result was received.")
                })
            };
            hubConnection.fn._maximizeClientHubInvocation = function(minClientHubInvocation) {
                return {
                    Hub: minClientHubInvocation.H,
                    Method: minClientHubInvocation.M,
                    Args: minClientHubInvocation.A,
                    State: minClientHubInvocation.S
                }
            };
            hubConnection.fn._registerSubscribedHubs = function() {
                var connection = this;
                if (!connection._subscribedToHubs) {
                    connection._subscribedToHubs = true;
                    connection.starting(function() {
                        var subscribedHubs = [];
                        $.each(connection.proxies, function(key) {
                            if (this.hasSubscriptions()) {
                                subscribedHubs.push({
                                    name: key
                                });
                                connection.log("Client subscribed to hub '" + key + "'.")
                            }
                        });
                        if (subscribedHubs.length === 0) {
                            connection.log("No hubs have been subscribed to.  The client will not receive data from hubs.  To fix, declare at least one client side function prior to connection start for each hub you wish to subscribe to.")
                        }
                        connection.data = connection.json.stringify(subscribedHubs)
                    })
                }
            };
            hubConnection.fn.createHubProxy = function(hubName) {
                hubName = hubName.toLowerCase();
                var proxy = this.proxies[hubName];
                if (!proxy) {
                    proxy = hubProxy(this, hubName);
                    this.proxies[hubName] = proxy
                }
                this._registerSubscribedHubs();
                return proxy
            };
            hubConnection.fn.init.prototype = hubConnection.fn;
            $.hubConnection = hubConnection
        })(jQueryShim, window);
        (function($, undefined) {
            $.signalR.version = "2.2.1"
        })(jQueryShim);
        var hubConnection = exports.hubConnection = jQueryShim.hubConnection;
        var signalR = exports.signalR = jQueryShim.signalR
    }, {
        "./jQueryShim": 389
    }],
    391: [function(require, module, exports) {
        (function(self) {
            "use strict";
            if (self.fetch) {
                return
            }
            var support = {
                searchParams: "URLSearchParams" in self,
                iterable: "Symbol" in self && "iterator" in Symbol,
                blob: "FileReader" in self && "Blob" in self && function() {
                    try {
                        new Blob;
                        return true
                    } catch (e) {
                        return false
                    }
                }(),
                formData: "FormData" in self,
                arrayBuffer: "ArrayBuffer" in self
            };
            if (support.arrayBuffer) {
                var viewClasses = ["[object Int8Array]", "[object Uint8Array]", "[object Uint8ClampedArray]", "[object Int16Array]", "[object Uint16Array]", "[object Int32Array]", "[object Uint32Array]", "[object Float32Array]", "[object Float64Array]"];
                var isDataView = function(obj) {
                    return obj && DataView.prototype.isPrototypeOf(obj)
                };
                var isArrayBufferView = ArrayBuffer.isView || function(obj) {
                    return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
                }
            }

            function normalizeName(name) {
                if (typeof name !== "string") {
                    name = String(name)
                }
                if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
                    throw new TypeError("Invalid character in header field name")
                }
                return name.toLowerCase()
            }

            function normalizeValue(value) {
                if (typeof value !== "string") {
                    value = String(value)
                }
                return value
            }

            function iteratorFor(items) {
                var iterator = {
                    next: function() {
                        var value = items.shift();
                        return {
                            done: value === undefined,
                            value: value
                        }
                    }
                };
                if (support.iterable) {
                    iterator[Symbol.iterator] = function() {
                        return iterator
                    }
                }
                return iterator
            }

            function Headers(headers) {
                this.map = {};
                if (headers instanceof Headers) {
                    headers.forEach(function(value, name) {
                        this.append(name, value)
                    }, this)
                } else if (Array.isArray(headers)) {
                    headers.forEach(function(header) {
                        this.append(header[0], header[1])
                    }, this)
                } else if (headers) {
                    Object.getOwnPropertyNames(headers).forEach(function(name) {
                        this.append(name, headers[name])
                    }, this)
                }
            }
            Headers.prototype.append = function(name, value) {
                name = normalizeName(name);
                value = normalizeValue(value);
                var oldValue = this.map[name];
                this.map[name] = oldValue ? oldValue + "," + value : value
            };
            Headers.prototype["delete"] = function(name) {
                delete this.map[normalizeName(name)]
            };
            Headers.prototype.get = function(name) {
                name = normalizeName(name);
                return this.has(name) ? this.map[name] : null
            };
            Headers.prototype.has = function(name) {
                return this.map.hasOwnProperty(normalizeName(name))
            };
            Headers.prototype.set = function(name, value) {
                this.map[normalizeName(name)] = normalizeValue(value)
            };
            Headers.prototype.forEach = function(callback, thisArg) {
                for (var name in this.map) {
                    if (this.map.hasOwnProperty(name)) {
                        callback.call(thisArg, this.map[name], name, this)
                    }
                }
            };
            Headers.prototype.keys = function() {
                var items = [];
                this.forEach(function(value, name) {
                    items.push(name)
                });
                return iteratorFor(items)
            };
            Headers.prototype.values = function() {
                var items = [];
                this.forEach(function(value) {
                    items.push(value)
                });
                return iteratorFor(items)
            };
            Headers.prototype.entries = function() {
                var items = [];
                this.forEach(function(value, name) {
                    items.push([name, value])
                });
                return iteratorFor(items)
            };
            if (support.iterable) {
                Headers.prototype[Symbol.iterator] = Headers.prototype.entries
            }

            function consumed(body) {
                if (body.bodyUsed) {
                    return Promise.reject(new TypeError("Already read"))
                }
                body.bodyUsed = true
            }

            function fileReaderReady(reader) {
                return new Promise(function(resolve, reject) {
                    reader.onload = function() {
                        resolve(reader.result)
                    };
                    reader.onerror = function() {
                        reject(reader.error)
                    }
                })
            }

            function readBlobAsArrayBuffer(blob) {
                var reader = new FileReader;
                var promise = fileReaderReady(reader);
                reader.readAsArrayBuffer(blob);
                return promise
            }

            function readBlobAsText(blob) {
                var reader = new FileReader;
                var promise = fileReaderReady(reader);
                reader.readAsText(blob);
                return promise
            }

            function readArrayBufferAsText(buf) {
                var view = new Uint8Array(buf);
                var chars = new Array(view.length);
                for (var i = 0; i < view.length; i++) {
                    chars[i] = String.fromCharCode(view[i])
                }
                return chars.join("")
            }

            function bufferClone(buf) {
                if (buf.slice) {
                    return buf.slice(0)
                } else {
                    var view = new Uint8Array(buf.byteLength);
                    view.set(new Uint8Array(buf));
                    return view.buffer
                }
            }

            function Body() {
                this.bodyUsed = false;
                this._initBody = function(body) {
                    this._bodyInit = body;
                    if (!body) {
                        this._bodyText = ""
                    } else if (typeof body === "string") {
                        this._bodyText = body
                    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
                        this._bodyBlob = body
                    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
                        this._bodyFormData = body
                    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                        this._bodyText = body.toString()
                    } else if (support.arrayBuffer && support.blob && isDataView(body)) {
                        this._bodyArrayBuffer = bufferClone(body.buffer);
                        this._bodyInit = new Blob([this._bodyArrayBuffer])
                    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
                        this._bodyArrayBuffer = bufferClone(body)
                    } else {
                        throw new Error("unsupported BodyInit type")
                    }
                    if (!this.headers.get("content-type")) {
                        if (typeof body === "string") {
                            this.headers.set("content-type", "text/plain;charset=UTF-8")
                        } else if (this._bodyBlob && this._bodyBlob.type) {
                            this.headers.set("content-type", this._bodyBlob.type)
                        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                            this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8")
                        }
                    }
                };
                if (support.blob) {
                    this.blob = function() {
                        var rejected = consumed(this);
                        if (rejected) {
                            return rejected
                        }
                        if (this._bodyBlob) {
                            return Promise.resolve(this._bodyBlob)
                        } else if (this._bodyArrayBuffer) {
                            return Promise.resolve(new Blob([this._bodyArrayBuffer]))
                        } else if (this._bodyFormData) {
                            throw new Error("could not read FormData body as blob")
                        } else {
                            return Promise.resolve(new Blob([this._bodyText]))
                        }
                    };
                    this.arrayBuffer = function() {
                        if (this._bodyArrayBuffer) {
                            return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
                        } else {
                            return this.blob().then(readBlobAsArrayBuffer)
                        }
                    }
                }
                this.text = function() {
                    var rejected = consumed(this);
                    if (rejected) {
                        return rejected
                    }
                    if (this._bodyBlob) {
                        return readBlobAsText(this._bodyBlob)
                    } else if (this._bodyArrayBuffer) {
                        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
                    } else if (this._bodyFormData) {
                        throw new Error("could not read FormData body as text")
                    } else {
                        return Promise.resolve(this._bodyText)
                    }
                };
                if (support.formData) {
                    this.formData = function() {
                        return this.text().then(decode)
                    }
                }
                this.json = function() {
                    return this.text().then(JSON.parse)
                };
                return this
            }
            var methods = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];

            function normalizeMethod(method) {
                var upcased = method.toUpperCase();
                return methods.indexOf(upcased) > -1 ? upcased : method
            }

            function Request(input, options) {
                options = options || {};
                var body = options.body;
                if (input instanceof Request) {
                    if (input.bodyUsed) {
                        throw new TypeError("Already read")
                    }
                    this.url = input.url;
                    this.credentials = input.credentials;
                    if (!options.headers) {
                        this.headers = new Headers(input.headers)
                    }
                    this.method = input.method;
                    this.mode = input.mode;
                    if (!body && input._bodyInit != null) {
                        body = input._bodyInit;
                        input.bodyUsed = true
                    }
                } else {
                    this.url = String(input)
                }
                this.credentials = options.credentials || this.credentials || "omit";
                if (options.headers || !this.headers) {
                    this.headers = new Headers(options.headers)
                }
                this.method = normalizeMethod(options.method || this.method || "GET");
                this.mode = options.mode || this.mode || null;
                this.referrer = null;
                if ((this.method === "GET" || this.method === "HEAD") && body) {
                    throw new TypeError("Body not allowed for GET or HEAD requests")
                }
                this._initBody(body)
            }
            Request.prototype.clone = function() {
                return new Request(this, {
                    body: this._bodyInit
                })
            };

            function decode(body) {
                var form = new FormData;
                body.trim().split("&").forEach(function(bytes) {
                    if (bytes) {
                        var split = bytes.split("=");
                        var name = split.shift().replace(/\+/g, " ");
                        var value = split.join("=").replace(/\+/g, " ");
                        form.append(decodeURIComponent(name), decodeURIComponent(value))
                    }
                });
                return form
            }

            function parseHeaders(rawHeaders) {
                var headers = new Headers;
                var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
                preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
                    var parts = line.split(":");
                    var key = parts.shift().trim();
                    if (key) {
                        var value = parts.join(":").trim();
                        headers.append(key, value)
                    }
                });
                return headers
            }
            Body.call(Request.prototype);

            function Response(bodyInit, options) {
                if (!options) {
                    options = {}
                }
                this.type = "default";
                this.status = options.status === undefined ? 200 : options.status;
                this.ok = this.status >= 200 && this.status < 300;
                this.statusText = "statusText" in options ? options.statusText : "OK";
                this.headers = new Headers(options.headers);
                this.url = options.url || "";
                this._initBody(bodyInit)
            }
            Body.call(Response.prototype);
            Response.prototype.clone = function() {
                return new Response(this._bodyInit, {
                    status: this.status,
                    statusText: this.statusText,
                    headers: new Headers(this.headers),
                    url: this.url
                })
            };
            Response.error = function() {
                var response = new Response(null, {
                    status: 0,
                    statusText: ""
                });
                response.type = "error";
                return response
            };
            var redirectStatuses = [301, 302, 303, 307, 308];
            Response.redirect = function(url, status) {
                if (redirectStatuses.indexOf(status) === -1) {
                    throw new RangeError("Invalid status code")
                }
                return new Response(null, {
                    status: status,
                    headers: {
                        location: url
                    }
                })
            };
            self.Headers = Headers;
            self.Request = Request;
            self.Response = Response;
            self.fetch = function(input, init) {
                return new Promise(function(resolve, reject) {
                    var request = new Request(input, init);
                    var xhr = new XMLHttpRequest;
                    xhr.onload = function() {
                        var options = {
                            status: xhr.status,
                            statusText: xhr.statusText,
                            headers: parseHeaders(xhr.getAllResponseHeaders() || "")
                        };
                        options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
                        var body = "response" in xhr ? xhr.response : xhr.responseText;
                        resolve(new Response(body, options))
                    };
                    xhr.onerror = function() {
                        reject(new TypeError("Network request failed"))
                    };
                    xhr.ontimeout = function() {
                        reject(new TypeError("Network request failed"))
                    };
                    xhr.open(request.method, request.url, true);
                    if (request.credentials === "include") {
                        xhr.withCredentials = true
                    } else if (request.credentials === "omit") {
                        xhr.withCredentials = false
                    }
                    if ("responseType" in xhr && support.blob) {
                        xhr.responseType = "blob"
                    }
                    request.headers.forEach(function(value, name) {
                        xhr.setRequestHeader(name, value)
                    });
                    xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit)
                })
            };
            self.fetch.polyfill = true
        })(typeof self !== "undefined" ? self : this)
    }, {}],
    392: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.DailyRetentionGame = undefined;
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _data = require("widgets/data");
        var _data2 = _interopRequireDefault(_data);
        var _events = require("components/events");

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var DailyRetentionGame = exports.DailyRetentionGame = function(_DataWidget) {
            _inherits(DailyRetentionGame, _DataWidget);

            function DailyRetentionGame() {
                _classCallCheck(this, DailyRetentionGame);
                var _this = _possibleConstructorReturn(this, (DailyRetentionGame.__proto__ || Object.getPrototypeOf(DailyRetentionGame)).call(this));
                _this.loginModalEl = document.body.querySelector('[data-modal-id="loginModal"]');
                _this.loadingSpinner = document.body.querySelector(".load-spinner");
                var gameDataEl = document.body.querySelector("[data-game-id][data-host-url][data-game-aspect-ratio]");
                if (gameDataEl) {
                    _this.gameData = {
                        hostUrl: gameDataEl.dataset.hostUrl,
                        gameId: gameDataEl.dataset.gameId,
                        gameWidthNumerator: gameDataEl.dataset.gameAspectRatio.split(":")[0],
                        gameHeightNumerator: gameDataEl.dataset.gameAspectRatio.split(":")[1]
                    };
                    _this.resizeElement(_this.loadingSpinner)
                }
                if (document.documentElement.classList.contains("authenticated")) {
                    _this.gameData.gameToken = _this.getGameToken();
                    _this.gameIframe = document.body.querySelector(".js-daily-retention-game-iframe");
                    if (_this.gameIframe) {
                        _this.launchGame();
                        window.addEventListener("resize", function() {
                            return _this.resizeElement.bind(_this, _this.gameIframe)
                        })
                    }
                } else {
                    (0, _events.broadcast)("show:modal", _this.loginModalEl, _this.loginModalEl)
                }
                return _this
            }
            _createClass(DailyRetentionGame, [{
                key: "resizeElement",
                value: function resizeElement(element) {
                    var resizeEl = element;
                    if (this.gameData.gameHeightNumerator && this.gameData.gameWidthNumerator) {
                        var elementHeight = element.offsetWidth / this.gameData.gameWidthNumerator * this.gameData.gameHeightNumerator;
                        resizeEl.style.height = elementHeight + "px"
                    }
                }
            }, {
                key: "getGameToken",
                value: function getGameToken() {
                    var tokenEl = document.body.querySelector("#gms-gaming-token");
                    if (tokenEl.value && tokenEl.value === "%%{Player::GamingToken}") {
                        return undefined
                    }
                    return tokenEl.value
                }
            }, {
                key: "buildGameUrl",
                value: function buildGameUrl() {
                    var _this2 = this;
                    return new Promise(function(resolve, reject) {
                        var gameData = _this2.gameData;
                        if (gameData.gameId && gameData.hostUrl && gameData.gameToken) {
                            var callUrl = "/api/games/" + gameData.gameId;
                            _this2.fetch(callUrl).then(function(success) {
                                if (success.hasOwnProperty("launchCode") && success.launchCode) {
                                    gameData.gameName = success.launchCode;
                                    resolve("" + gameData.hostUrl + gameData.gameName + "?token=" + gameData.gameToken)
                                }
                            }, function(errors) {
                                return reject(errors)
                            })
                        } else {
                            var errors = Object.keys(_this2.gameData).filter(function(key) {
                                return !_this2.gameData[key]
                            });
                            reject(errors)
                        }
                    })
                }
            }, {
                key: "launchGame",
                value: function launchGame() {
                    var _this3 = this;
                    this.buildGameUrl().then(function(success) {
                        _this3.gameIframe.addEventListener("load", function() {
                            _this3.gameIframe.dataset.state = "loaded";
                            _this3.gameIframe.classList.remove("hide");
                            _this3.resizeElement(_this3.gameIframe)
                        });
                        _this3.gameIframe.src = success
                    }, function(error) {
                        _this3.handleErrors(error)
                    })
                }
            }, {
                key: "handleErrors",
                value: function handleErrors() {
                    (0, _events.broadcast)("notification:error", undefined, "Ooops something went wrong, please try again")
                }
            }]);
            return DailyRetentionGame
        }(_data2.default);
        exports.default = DailyRetentionGame
    }, {
        "components/events": 2,
        "widgets/data": 22
    }],
    393: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _data = require("widgets/data");
        var _data2 = _interopRequireDefault(_data);
        var _events = require("components/events");
        var _memoizeFetch = require("helpers/memoize-fetch");
        var _memoizeFetch2 = _interopRequireDefault(_memoizeFetch);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i]
                }
                return arr2
            } else {
                return Array.from(arr)
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var _class = function(_DataWidget) {
            _inherits(_class, _DataWidget);

            function _class() {
                _classCallCheck(this, _class);
                var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));
                (0, _memoizeFetch2.default)("/api/bonuses?take=1000&includeUnclaimable=true").then(function(response) {
                    _this.eligibleBonuses = [].concat(_toConsumableArray(new Set(response.map(function(bonus) {
                        return bonus.id.toString()
                    }))));
                    _this.claimableBonuses = [].concat(_toConsumableArray(new Set(response.filter(function(bonus) {
                        return bonus.canBeClaimed || bonus.bonusType === "Content"
                    }).map(function(bonus) {
                        return bonus.id.toString()
                    }))));
                    document.body.dataset.eligibleBonuses = _this.eligibleBonuses;
                    document.body.dataset.claimableBonuses = _this.claimableBonuses;
                    _this.actionElements(_this.eligibleBonuses);
                    _this.actionElements(_this.claimableBonuses);
                    [].concat(_toConsumableArray(document.querySelectorAll(".associated-bonus-container"))).forEach(function(containerNode) {
                        containerNode.classList.remove("associated-bonus-container")
                    })
                }).catch(function(error) {
                    throw error
                });
                return _this
            }
            _createClass(_class, [{
                key: "actionElements",
                value: function actionElements(bonuses) {
                    var pageElements = [].concat(_toConsumableArray(document.querySelectorAll("[data-associated-bonus-id]")));
                    var idsToAction = pageElements.map(function(element) {
                        return element.getAttribute("data-associated-bonus-id")
                    }).filter(function(bonusId) {
                        return !bonuses.includes(bonusId)
                    });
                    pageElements.forEach(function(nodeElem) {
                        if (!idsToAction.includes(nodeElem.getAttribute("data-associated-bonus-id"))) return;
                        var actions = nodeElem.getAttribute("data-associated-bonus-id-action") ? nodeElem.getAttribute("data-associated-bonus-id-action").split(",") : ["delete"];
                        for (var i = 0; i < actions.length; i++) {
                            switch (actions[i]) {
                                case "broadcast":
                                    (0, _events.broadcast)("bonusEligibility:action", undefined, nodeElem);
                                    break;
                                case "delete":
                                    nodeElem.parentNode.removeChild(nodeElem);
                                    break;
                                default:
                                    throw new Error("Unsupported action:", actions[i])
                            }
                        }
                    })
                }
            }]);
            return _class
        }(_data2.default);
        exports.default = _class;
        module.exports = exports["default"]
    }, {
        "components/events": 2,
        "helpers/memoize-fetch": 13,
        "widgets/data": 22
    }],
    394: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _closestParentElement = require("helpers/closest-parent-element");
        var _closestParentElement2 = _interopRequireDefault(_closestParentElement);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        exports.default = function() {
            document.body.addEventListener("change", function(_ref) {
                var target = _ref.target;
                var source = (0, _closestParentElement2.default)(target, "[data-concatenate]");
                if (!source) return;
                var concatTarget = document.querySelector(source.dataset.concatenate);
                concatTarget.saved = concatTarget.saved || {};
                concatTarget.saved[source.id] = source.value;
                var concatValue = concatTarget.dataset.format;
                for (var prop in concatTarget.saved) {
                    if (concatTarget.saved.hasOwnProperty(prop)) {
                        concatValue = concatValue.replace(prop, concatTarget.saved[prop])
                    }
                }
                concatTarget.value = concatValue
            })
        };
        module.exports = exports["default"]
    }, {
        "helpers/closest-parent-element": 8
    }],
    395: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _events = require("components/events");

        function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i]
                }
                return arr2
            } else {
                return Array.from(arr)
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var _class = function _class(element) {
            var _this = this;
            _classCallCheck(this, _class);
            this.element = element;
            this.firstTab = this.element.querySelector(".js-custom-tabs-tab");
            if (this.firstTab) this.firstTab.classList.add("active");
            this.filterPanes = [].concat(_toConsumableArray(this.element.querySelectorAll("[data-filter-tab-content]")));
            this.element.addEventListener("click", function(e) {
                if (!e.target.dataset.filterTab) return;
                var selectedPane = _this.filterPanes.find(function(pane) {
                    return pane.dataset.filterTabContent === e.target.dataset.filterTab
                });
                _this.filterPanes.forEach(function(pane) {
                    return pane.classList.add("hide")
                });
                selectedPane.classList.remove("hide");
                (0, _events.broadcast)("tabChange:" + selectedPane.dataset.filterTabContent)
            })
        };
        exports.default = _class;
        module.exports = exports["default"]
    }, {
        "components/events": 2
    }],
    396: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _smoothScroll = require("../helpers/smooth-scroll");
        var _smoothScroll2 = _interopRequireDefault(_smoothScroll);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var GameSlider = function() {
            function GameSlider(sliderContainerEl) {
                _classCallCheck(this, GameSlider);
                var isIEOrEdge = navigator.userAgent.search("Trident") > -1 || navigator.userAgent.search("Edge") > -1;
                this.sliderContainerEl = sliderContainerEl;
                this.sliderEl = this.sliderContainerEl.querySelector(".js-game-slider");
                this.gameTile = this.sliderEl.querySelector(".js-game-item");
                if (isIEOrEdge) {
                    this.sliderEl.classList.remove("snap")
                }
                this.attachListeners()
            }
            _createClass(GameSlider, [{
                key: "attachListeners",
                value: function attachListeners() {
                    this.sliderEl.addEventListener("scroll", this.scrollCheck.bind(this), false);
                    this.sliderContainerEl.addEventListener("click", this.scrollButtonHandler.bind(this))
                }
            }, {
                key: "scrollCheck",
                value: function scrollCheck() {
                    var maxScroll = this.sliderEl.scrollWidth - this.sliderEl.clientWidth;
                    var canScrollRight = this.sliderEl.scrollLeft < maxScroll;
                    var canScrollLeft = this.sliderEl.scrollLeft > 0;
                    if (this.canScrollLeft !== canScrollLeft) {
                        this.canScrollLeft = canScrollLeft;
                        this.sliderContainerEl.setAttribute("data-can-scroll-left", this.canScrollLeft)
                    }
                    if (this.canScrollRight !== canScrollRight) {
                        this.canScrollRight = canScrollRight;
                        this.sliderContainerEl.setAttribute("data-can-scroll-right", this.canScrollRight)
                    }
                }
            }, {
                key: "scrollButtonHandler",
                value: function scrollButtonHandler(e) {
                    var scrollIncrement = this.gameTile.clientWidth;
                    var targetClassList = e.target.classList;
                    if (!targetClassList.contains("slider-btn")) return;
                    var scrollAmount = targetClassList.contains("scroll-left-btn") ? -scrollIncrement : scrollIncrement;
                    var scrollToAmount = this.sliderEl.scrollLeft + scrollAmount;
                    (0, _smoothScroll2.default)(this.sliderEl.scrollLeft, scrollToAmount, this.sliderEl, true)
                }
            }]);
            return GameSlider
        }();
        exports.default = GameSlider;
        module.exports = exports["default"]
    }, {
        "../helpers/smooth-scroll": 406
    }],
    397: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _slicedToArray = function() {
            function sliceIterator(arr, i) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = undefined;
                try {
                    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                        _arr.push(_s.value);
                        if (i && _arr.length === i) break
                    }
                } catch (err) {
                    _d = true;
                    _e = err
                } finally {
                    try {
                        if (!_n && _i["return"]) _i["return"]()
                    } finally {
                        if (_d) throw _e
                    }
                }
                return _arr
            }
            return function(arr, i) {
                if (Array.isArray(arr)) {
                    return arr
                } else if (Symbol.iterator in Object(arr)) {
                    return sliceIterator(arr, i)
                } else {
                    throw new TypeError("Invalid attempt to destructure non-iterable instance")
                }
            }
        }();
        exports.default = function() {
            var blockUrls = ["/users/account/requestforgottenpassword", "/users/account/lostpassword", "/profile/edit", "/user/profile/edit", "/forgotten-pin", "/reset-pin"];
            var urlPath = window.location.pathname.toLowerCase();
            if (blockUrls.indexOf(urlPath) !== -1) return;
            var windowUrlMeta = document.querySelector('meta[name="livechat-window-url"]');
            var windowTitleMeta = document.querySelector('meta[name="livechat-window-title"]');
            var windowParamsMeta = document.querySelector('meta[name="livechat-window-parameters"]');
            var metaprops = [windowUrlMeta, windowTitleMeta, windowParamsMeta];
            if (metaprops.every(function(metaprop) {
                    return metaprop
                })) {
                var _metaprops$map = metaprops.map(function(prop) {
                        return prop.content
                    }),
                    _metaprops$map2 = _slicedToArray(_metaprops$map, 3),
                    windowUrl = _metaprops$map2[0],
                    windowTitle = _metaprops$map2[1],
                    windowParams = _metaprops$map2[2];
                document.addEventListener("click", function(e) {
                    if (e.target.id && e.target.id.includes("liveagent_button")) {
                        if (e.target.dataset.livechatWindowUrl && e.target.dataset.livechatWindowTitle && e.target.dataset.livechatWindowParameters) {
                            window.open(e.target.dataset.livechatWindowUrl, e.target.dataset.livechatWindowTitle, e.target.dataset.livechatWindowParameters)
                        } else {
                            window.open(windowUrl, windowTitle, windowParams)
                        }
                    }
                })
            } else {
                console.log("Some (or all) of the meta tags holding the Livechat config are missing from the document head.")
            }
        };
        module.exports = exports["default"]
    }, {}],
    398: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.NotificationListener = undefined;
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _signalrNoJquery = require("signalr-no-jquery");
        var _events = require("components/events");

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var NotificationListener = exports.NotificationListener = function() {
            function NotificationListener() {
                _classCallCheck(this, NotificationListener)
            }
            _createClass(NotificationListener, null, [{
                key: "initSocket",
                value: function initSocket(connectionUrl, token) {
                    if (!token || !connectionUrl) return;
                    if (window.hasOwnProperty("connection") && window.connection) return;
                    window.connection = (0, _signalrNoJquery.hubConnection)(connectionUrl);
                    var hubProxy = window.connection.createHubProxy("notificationsHub");
                    window.connection.qs = {
                        token: token
                    };
                    hubProxy.on("notify", function(type, body) {
                        console.log("Bede Notification", type);
                        (0, _events.broadcast)("bedeNotification:" + type, undefined, {
                            type: type,
                            body: body
                        })
                    });
                    window.connection.start().done(function() {
                        console.log("connected to bede notifications")
                    }).fail(function(error) {
                        console.log(error)
                    })
                }
            }]);
            return NotificationListener
        }()
    }, {
        "components/events": 2,
        "signalr-no-jquery": 390
    }],
    399: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _closestParentElement = require("helpers/closest-parent-element");
        var _closestParentElement2 = _interopRequireDefault(_closestParentElement);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        var passwordReveal = function passwordReveal() {
            document.querySelector("body").addEventListener("click", function(e) {
                if (e.target.dataset && e.target.dataset.passwordRevealButton) {
                    var inputContainer = (0, _closestParentElement2.default)(e.target, ".password-reveal-container");
                    var input = inputContainer.querySelector("[data-password-reveal-input]");
                    var passwordVisible = inputContainer.getAttribute("data-password-visible") === "true";
                    input.type = input.type === "password" ? "text" : "password";
                    if (e.target.classList.contains("js-icon-toggle-password")) {
                        inputContainer.setAttribute("data-password-visible", !passwordVisible)
                    } else {
                        var target = e.target;
                        target.innerHTML = target.innerHTML === "Hide" ? "Show" : "Hide"
                    }
                }
            })
        };
        exports.default = passwordReveal;
        module.exports = exports["default"]
    }, {
        "helpers/closest-parent-element": 8
    }],
    400: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i]
                }
                return arr2
            } else {
                return Array.from(arr)
            }
        }
        exports.default = function() {
            var doubleClickElements = [].concat(_toConsumableArray(document.querySelectorAll("[data-prevent-double-click]")));
            if (!doubleClickElements.length) return;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;
            try {
                for (var _iterator = doubleClickElements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var el = _step.value;
                    el.addEventListener("touchend", function(e) {
                        if (!e.target) return;
                        if (e.target.href) window.location = e.target.href
                    })
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return()
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError
                    }
                }
            }
        };
        module.exports = exports["default"]
    }, {}],
    401: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _events = require("components/events");
        var _parentElement = require("helpers/parent-element");
        var _parentElement2 = _interopRequireDefault(_parentElement);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i]
                }
                return arr2
            } else {
                return Array.from(arr)
            }
        }
        exports.default = function() {
            (0, _events.subscribe)("bonusEligibility:action", function(el) {
                var slide = (0, _parentElement2.default)(el, "cycle-slide");
                if (!slide) return;
                if (slide.classList.contains("cycle-sentinel")) return;
                var slider = (0, _parentElement2.default)(slide, "cycle-slideshow");
                $(slider).cycle("remove", slide.getAttribute("data-slide-index"));
                if ($(slider).data("cycle.opts").slideCount === 0) {
                    slider.classList.add("hide");
                    return
                }
                var slides = [].concat(_toConsumableArray(slider.querySelectorAll("[data-slide-index]:not(.cycle-sentinel)")));
                for (var i = 0; i < slides.length; i++) {
                    slides[i].setAttribute("data-slide-index", i)
                }
                $(slider).cycle("goto", 0)
            })
        };
        module.exports = exports["default"]
    }, {
        "components/events": 2,
        "helpers/parent-element": 14
    }],
    402: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var StickyNavBar = function StickyNavBar() {
            var _this = this;
            _classCallCheck(this, StickyNavBar);
            this.menubar = document.querySelector(".menubar");
            this.menubarMobile = document.querySelector(".header");
            this.headerControls = document.querySelector(".header-controls");
            this.headerNavigation = document.querySelector(".header-navigation");
            this.searchBox = document.querySelector(".search-container");
            this.siteBody = document.querySelector(".site-body");
            this.stickyNavClass = document.getElementsByClassName("sticky-nav-bar");
            this.removeClassTop = 0;
            this.cookiesNotif = document.querySelector(".cookie-message-block");
            this.authed = document.querySelector(".authenticated");
            this.currentScrollTop = 0;
            this.prevScrollTop = 0;
            this.gameTilesWrapper = document.querySelector(".js-games-tiles-wrapper");
            window.addEventListener("scroll", function() {
                _this.currentScrollTop = document.documentElement.scrollTop || document.body.scrollTop;
                var windowWidth = window.innerWidth;
                var favPlaySelected = document.querySelector(".control-panel-button-wrapper.selected");
                var favPlayOpen = document.querySelector(".header-controls-dropdown.open");
                if (favPlaySelected && favPlayOpen) {
                    favPlaySelected.classList.remove("selected");
                    favPlayOpen.classList.remove("open")
                }
                if (_this.authed && windowWidth <= 500) {
                    _this.removeClassTop = 70 + _this.cookiesNotif.clientHeight
                } else if (_this.authed && windowWidth > 500 && windowWidth <= 725) {
                    _this.removeClassTop = 83 + _this.cookiesNotif.clientHeight
                } else if (_this.authed && windowWidth > 725 && windowWidth <= 960) {
                    _this.removeClassTop = 110 + _this.cookiesNotif.clientHeight
                } else if (windowWidth <= 725) {
                    _this.removeClassTop = 1 + _this.cookiesNotif.clientHeight
                } else if (windowWidth > 725) {
                    _this.removeClassTop = 120 + _this.cookiesNotif.clientHeight
                }
                if ((!_this.gameTilesWrapper || !_this.gameTilesWrapper.classList.contains("loading")) && _this.prevScrollTop > _this.currentScrollTop && !(_this.currentScrollTop <= _this.removeClassTop)) {
                    _this.menubar.classList.add("sticky-nav-bar");
                    _this.menubarMobile.classList.add("sticky-nav-bar");
                    _this.headerControls.classList.add("sticky-nav-bar");
                    _this.headerNavigation.classList.add("sticky-nav-bar");
                    _this.searchBox.classList.add("sticky-nav-bar");
                    _this.siteBody.classList.add("sticky-nav-bar");
                    _this.menubar.classList.remove("scroll-up");
                    _this.menubarMobile.classList.remove("scroll-up");
                    _this.headerControls.classList.remove("scroll-up");
                    _this.headerNavigation.classList.remove("scroll-up");
                    _this.searchBox.classList.remove("scroll-up");
                    _this.siteBody.classList.remove("scroll-up")
                } else if (_this.prevScrollTop < _this.currentScrollTop && _this.currentScrollTop > _this.removeClassTop && _this.stickyNavClass.length) {
                    _this.menubar.classList.add("scroll-up");
                    _this.menubarMobile.classList.add("scroll-up");
                    _this.headerControls.classList.add("scroll-up");
                    _this.headerNavigation.classList.add("scroll-up");
                    _this.searchBox.classList.add("scroll-up");
                    _this.siteBody.classList.add("scroll-up")
                } else if (_this.prevScrollTop <= _this.removeClassTop) {
                    _this.menubar.classList.remove("sticky-nav-bar");
                    _this.menubarMobile.classList.remove("sticky-nav-bar");
                    _this.headerControls.classList.remove("sticky-nav-bar");
                    _this.headerNavigation.classList.remove("sticky-nav-bar");
                    _this.searchBox.classList.remove("sticky-nav-bar");
                    _this.siteBody.classList.remove("sticky-nav-bar")
                }
                _this.prevScrollTop = _this.currentScrollTop;
                if (_this.prevScrollTop <= 0) {
                    _this.menubar.classList.remove("sticky-nav-bar");
                    _this.menubarMobile.classList.remove("sticky-nav-bar");
                    _this.headerControls.classList.remove("sticky-nav-bar");
                    _this.headerNavigation.classList.remove("sticky-nav-bar");
                    _this.searchBox.classList.remove("sticky-nav-bar");
                    _this.siteBody.classList.remove("sticky-nav-bar")
                }
                var iOSDevice = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
                var activeElement = document.activeElement;
                if (iOSDevice && activeElement.id !== "search-field") {
                    $(document).trigger("clearSearch")
                } else if (!iOSDevice) {
                    $(document).trigger("clearSearch")
                }
            })
        };
        exports.default = StickyNavBar;
        module.exports = exports["default"]
    }, {}],
    403: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _rules = require("components/validation/rules");
        var _rules2 = _interopRequireDefault(_rules);
        var _parentElement = require("helpers/parent-element");
        var _parentElement2 = _interopRequireDefault(_parentElement);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i]
                }
                return arr2
            } else {
                return Array.from(arr)
            }
        }
        var controlsList = ["input", "select", "textarea", "radio", "checkbox"];

        function dateValid(day, month, year) {
            var isLeap = function isLeap(y) {
                return y % 400 === 0 || y % 100 !== 0 && y % 4 === 0
            };
            if ([4, 6, 9, 11].includes(month) && day === 31) {
                return false
            } else if (isLeap(year) && month === 2 && day > 29) {
                return false
            } else if (!isLeap(year) && month === 2 && day > 28) {
                return false
            }
            return true
        }
        exports.default = function() {
            var toggleActiveClass = function toggleActiveClass(formControl, forceGroupActive) {
                var isActive = false;
                if (formControl.dataset.group) {
                    isActive = forceGroupActive || _rules2.default.groupHasValues(formControl)
                } else if (formControl.type.toLowerCase() === "checkbox") {
                    isActive = formControl.checked || !formControl.checkValidity()
                } else {
                    isActive = formControl.value || !formControl.checkValidity()
                }
                if (isActive) {
                    (0, _parentElement2.default)(formControl, "input-container").classList.add("active");
                    formControl.classList.add("active")
                } else {
                    formControl.classList.remove("active")
                }
            };
            var toggleInvalidClass = function toggleInvalidClass(formControl, formControlValid, groupValid) {
                var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
                if (formControlValid) {
                    formControl.classList.remove("invalid");
                    formControl.classList.add("valid")
                } else {
                    formControl.classList.remove("valid");
                    formControl.classList.add("invalid")
                }
                if (!opts.loopingThroughGroup) {
                    var inputContainerValid = formControl.dataset.group ? groupValid : formControlValid;
                    if (inputContainerValid) {
                        (0, _parentElement2.default)(formControl, "input-container").classList.remove("invalid");
                        (0, _parentElement2.default)(formControl, "input-container").classList.add("valid")
                    } else {
                        (0, _parentElement2.default)(formControl, "input-container").classList.remove("valid");
                        (0, _parentElement2.default)(formControl, "input-container").classList.add("invalid")
                    }
                }
            };
            var isFormControlValid = function isFormControlValid(formControl) {
                var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                var formControlValid = true;
                if (formControl.getAttribute("type") !== "hidden") {
                    var inputContainer = (0, _parentElement2.default)(formControl, "input-container");
                    var groupValid = false;
                    if (!formControl.checkValidity()) {
                        formControlValid = false
                    } else {
                        for (var attr in formControl.dataset) {
                            if (attr === "group" && !opts.loopingThroughGroup) {
                                var inputGroup = (0, _parentElement2.default)(formControl, "input-group");
                                if (formControl.dataset.group === "dob-select") {
                                    var _ref = [inputGroup.getElementsByClassName("dob-day")[0], inputGroup.getElementsByClassName("dob-month")[0], inputGroup.getElementsByClassName("dob-year")[0]],
                                        day = _ref[0],
                                        month = _ref[1],
                                        year = _ref[2];
                                    groupValid = [day, month, year].every(function(control) {
                                        return control.value
                                    }) && dateValid(+day.value, +month.value, +year.value)
                                } else {
                                    var group = Array.from(inputGroup.getElementsByClassName(formControl.dataset.group));
                                    groupValid = group.every(function(control) {
                                        return isFormControlValid(control, {
                                            loopingThroughGroup: true
                                        })
                                    })
                                }
                            } else if (attr !== "checkapivalue" && attr !== "checkapivaluepost" && typeof _rules2.default[attr] === "function") {
                                if (!_rules2.default[attr](formControl.dataset[attr], formControl)) {
                                    formControlValid = false;
                                    break
                                }
                            }
                        }
                    }
                    if (formControlValid && formControl.getAttribute("type") === "radio") {
                        var radioName = formControl.getAttribute("name");
                        var allRadios = [].concat(_toConsumableArray(document.querySelectorAll('[name="' + radioName + '"]')));
                        var _iteratorNormalCompletion = true;
                        var _didIteratorError = false;
                        var _iteratorError = undefined;
                        try {
                            for (var _iterator = allRadios[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                var radio = _step.value;
                                toggleInvalidClass(radio, true, true)
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return()
                                }
                            } finally {
                                if (_didIteratorError) {
                                    throw _iteratorError
                                }
                            }
                        }
                    }
                    if (formControlValid && formControl.dataset.checkapivalue) {
                        formControl.classList.add("pending");
                        inputContainer.classList.add("pending");
                        _rules2.default.checkapivalue(formControl.dataset.checkapivalue, formControl).then(function(response) {
                            formControl.classList.remove("pending");
                            inputContainer.classList.remove("pending");
                            toggleInvalidClass(formControl, response, groupValid, opts)
                        })
                    }
                    if (formControlValid && formControl.dataset.checkapivaluepost) {
                        formControl.classList.add("pending");
                        inputContainer.classList.add("pending");
                        _rules2.default.checkapivaluepost(formControl.dataset.checkapivaluepost, formControl).then(function(response) {
                            formControl.classList.remove("pending");
                            inputContainer.classList.remove("pending");
                            toggleInvalidClass(formControl, response, groupValid, opts)
                        })
                    } else {
                        toggleInvalidClass(formControl, formControlValid, groupValid, opts)
                    }
                }
                return formControlValid
            };
            var isInputElement = function isInputElement(el) {
                return el.tagName.match(/^(input|select|textarea)$/i)
            };
            var formControlValidation = function formControlValidation(e) {
                var formControl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : e.target;
                if (isInputElement(formControl)) {
                    toggleActiveClass(formControl, e.forceGroupActive);
                    return isFormControlValid(formControl)
                }
                return true
            };
            var isFormValid = function isFormValid(form) {
                var isValid = true;
                var controls = form.hasOwnProperty("elements") ? form.elements : form.querySelectorAll(controlsList.join());
                var _arr = [].concat(_toConsumableArray(controls));
                for (var _i = 0; _i < _arr.length; _i++) {
                    var element = _arr[_i];
                    var elInvalid = element.classList.contains("invalid");
                    var elPending = element.classList.contains("pending");
                    if (elInvalid || elPending) {
                        isValid = false
                    } else if (!element.classList.contains("active")) {
                        if (element.getAttribute("type") !== "hidden" && !formControlValidation({
                                forceGroupActive: true
                            }, element)) {
                            isValid = false
                        }
                    }
                }
                return isValid
            };
            var formTags = [].concat(_toConsumableArray(document.getElementsByTagName("form")));
            var formBehaviours = [].concat(_toConsumableArray(document.querySelectorAll('[data-behaviour="form"]')));
            var forms = formTags.concat(formBehaviours);
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;
            try {
                var _loop = function _loop() {
                    var form = _step2.value;
                    if (form.dataset.validate && typeof form.isValid === "undefined") {
                        form.isValid = function() {
                            return isFormValid(form)
                        };
                        form.addEventListener("change", formControlValidation);
                        form.addEventListener("input", formControlValidation);
                        form.addEventListener("keyup", function(e) {
                            var char = String.fromCharCode(e.which);
                            if (/[a-z\d\b]/i.test(char)) {
                                formControlValidation(e)
                            }
                        });
                        form.addEventListener("submit", function(e) {
                            e.preventDefault()
                        });
                        form.addEventListener("click", function(e) {
                            if (e.target.type && e.target.type.toLowerCase() === "submit") {
                                form.isValid()
                            }
                        });
                        var controls = form.hasOwnProperty("elements") ? form.elements : form.querySelectorAll(controlsList.join());
                        var _arr2 = [].concat(_toConsumableArray(controls));
                        for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
                            var element = _arr2[_i2];
                            if (!element.dataset.group) {
                                if (isInputElement(element)) {
                                    element.addEventListener("blur", formControlValidation)
                                }
                            }
                        }
                        var _arr3 = [].concat(_toConsumableArray(form.getElementsByClassName("input-group")));
                        for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
                            var group = _arr3[_i3];
                            var inputs = [].concat(_toConsumableArray(group.querySelectorAll("select,input")));
                            inputs.forEach(function(input) {
                                return input.addEventListener("blur", function() {
                                    formControlValidation({
                                        forceGroupActive: true
                                    }, input)
                                })
                            })
                        }
                    }
                };
                for (var _iterator2 = forms[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    _loop()
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return()
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2
                    }
                }
            }
        };
        module.exports = exports["default"]
    }, {
        "components/validation/rules": 404,
        "helpers/parent-element": 14
    }],
    404: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _parentElement = require("helpers/parent-element");
        var _parentElement2 = _interopRequireDefault(_parentElement);
        var _dispatchEvent = require("helpers/dispatchEvent");
        var _dispatchEvent2 = _interopRequireDefault(_dispatchEvent);
        var _fetch = require("helpers/fetch");
        var _fetch2 = _interopRequireDefault(_fetch);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i]
                }
                return arr2
            } else {
                return Array.from(arr)
            }
        }
        exports.default = {
            checkapivalue: function checkapivalue(api, formControl) {
                if (formControl.checkValidity()) {
                    return (0, _fetch2.default)(window.location.origin + api + encodeURIComponent(formControl.value)).then(function(response) {
                        return response === false
                    })
                }
                return void 0
            },
            triggerChange: function triggerChange(confirmID, formControl) {
                var idArray = confirmID.split(",");
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;
                try {
                    for (var _iterator = idArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var id = _step.value;
                        var passedField = false;
                        var confirm = document.getElementById(id);
                        var inputArray = [].concat(_toConsumableArray(document.querySelectorAll("select,input")));
                        var _iteratorNormalCompletion2 = true;
                        var _didIteratorError2 = false;
                        var _iteratorError2 = undefined;
                        try {
                            for (var _iterator2 = inputArray[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                var input = _step2.value;
                                if (input === confirm) {
                                    passedField = true;
                                    break
                                } else if (input === formControl) {
                                    passedField = false;
                                    break
                                }
                            }
                        } catch (err) {
                            _didIteratorError2 = true;
                            _iteratorError2 = err
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                    _iterator2.return()
                                }
                            } finally {
                                if (_didIteratorError2) {
                                    throw _iteratorError2
                                }
                            }
                        }
                        if (confirm.value.length || passedField === true) {
                            (0, _dispatchEvent2.default)("change", confirm)
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return()
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError
                        }
                    }
                }
                return true
            },
            confirmed: function confirmed(confirmedID, formControl) {
                var isEqual = formControl.value === document.getElementById(confirmedID).value;
                return isEqual
            },
            min: function min(_min, formControl) {
                return parseFloat(formControl.value) > parseFloat(_min)
            },
            max: function max(_max, formControl) {
                return parseFloat(formControl.value) <= parseFloat(_max)
            },
            groupHasValues: function groupHasValues(formControl) {
                var inputGroup = (0, _parentElement2.default)(formControl, "input-group");
                var group = Array.from(inputGroup.getElementsByClassName(formControl.dataset.group));
                var allInputsHaveValues = group.every(function(control) {
                    return control.value
                });
                return allInputsHaveValues
            },
            minlengthdelay: function minlengthdelay(min, formControl, e) {
                if (formControl.value.length < min) {
                    if (e.type === "blur" || e.type === "change") return false;
                    return null
                }
                return true
            },
            maxlength: function maxlength(maxLength, formControl) {
                return formControl.value.length <= maxLength
            },
            checkapivaluepost: function checkapivaluepost(api, formControl) {
                if (formControl.checkValidity()) {
                    var data = {};
                    data[formControl.id.toLowerCase()] = formControl.value;
                    var options = {
                        method: "post",
                        body: JSON.stringify(data)
                    };
                    return (0, _fetch2.default)(window.location.origin + api, options).then(function(response) {
                        return response.status !== 204
                    }).catch(function(err) {
                        return err.response.status === 404
                    })
                }
                return void 0
            },
            checkpreviousvalues: function checkpreviousvalues(previousValues, formControl) {
                return previousValues.split(",").indexOf(formControl.value) === -1
            }
        };
        module.exports = exports["default"]
    }, {
        "helpers/dispatchEvent": 405,
        "helpers/fetch": 12,
        "helpers/parent-element": 14
    }],
    405: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = function(eventType, element) {
            var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            var eventOpts = Object.assign({
                bubbles: true,
                cancelable: eventType === "click"
            }, opts);
            if (typeof Event === "function") {
                element.dispatchEvent(new Event(eventType, eventOpts))
            } else {
                var event = document.createEvent("Event");
                event.initEvent(eventType, eventOpts.bubbles, eventOpts.cancelable);
                element.dispatchEvent(event)
            }
        };
        module.exports = exports["default"]
    }, {}],
    406: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var smoothScroll = function smoothScroll(positionStart, positionEnd, scrollElement) {
            var scrollHorizontal = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
            var scrollDirection = scrollHorizontal ? "scrollLeft" : "scrollTop";
            var amountToScroll = positionEnd - positionStart;
            var scrollIncrement = 5;
            var isIEOrEdge = navigator.userAgent.search("Trident") > -1 || navigator.userAgent.search("Edge") > -1;
            var scroll = function scroll(count) {
                var scrollEl = scrollElement;
                scrollEl[scrollDirection] = count;
                if (scrollEl[scrollDirection] === 0) {
                    scrollEl[scrollDirection] = count
                }
            };
            var scrollBy = function scrollBy(amount) {
                var interval = 100;
                var scrollPositive = amount > 0;
                if (scrollPositive) {
                    var _loop = function _loop(scrollCount) {
                        setTimeout(function() {
                            return scroll(scrollCount)
                        }, interval);
                        interval += 5
                    };
                    for (var scrollCount = positionStart; scrollCount <= positionEnd; scrollCount += scrollIncrement) {
                        _loop(scrollCount)
                    }
                } else {
                    var _loop2 = function _loop2(scrollCount) {
                        setTimeout(function() {
                            return scroll(scrollCount)
                        }, interval);
                        interval += 5
                    };
                    for (var scrollCount = positionStart; scrollCount >= positionEnd; scrollCount -= scrollIncrement) {
                        _loop2(scrollCount)
                    }
                }
            };
            if (isIEOrEdge) {
                window.requestAnimationFrame(function() {
                    return scrollBy(amountToScroll)
                })
            } else {
                window.requestAnimationFrame(function() {
                    var scrollOptions = {
                        behavior: "smooth",
                        top: scrollHorizontal ? scrollElement.scrollTop : positionEnd,
                        left: scrollHorizontal ? positionEnd : scrollElement.scrollLeft
                    };
                    scrollElement.scrollTo(scrollOptions)
                })
            }
        };
        exports.default = smoothScroll;
        module.exports = exports["default"]
    }, {}],
    407: [function(require, module, exports) {
        "use strict";
        require("babel-polyfill");
        require("ima.js-babel6-polyfill");
        require("whatwg-fetch");
        var _elementDataset = require("element-dataset");
        var _elementDataset2 = _interopRequireDefault(_elementDataset);
        var _modals = require("components/modals");
        var _modals2 = _interopRequireDefault(_modals);
        var _form = require("components/validation/form");
        var _form2 = _interopRequireDefault(_form);
        var _preventDoubleClick = require("./components/preventDoubleClick");
        var _preventDoubleClick2 = _interopRequireDefault(_preventDoubleClick);
        var _login = require("widgets/login");
        var _login2 = _interopRequireDefault(_login);
        var _pendingWithdrawals = require("widgets/cashier/pendingWithdrawals");
        var _pendingWithdrawals2 = _interopRequireDefault(_pendingWithdrawals);
        var _deposit = require("widgets/cashier/deposit");
        var _deposit2 = _interopRequireDefault(_deposit);
        var _bonusInfo = require("widgets/cashier/bonus-info");
        var _bonusInfo2 = _interopRequireDefault(_bonusInfo);
        var _factory = require("widgets/factory");
        var _factory2 = _interopRequireDefault(_factory);
        var _selfExclusion = require("widgets/compliance/self-exclusion");
        var _selfExclusion2 = _interopRequireDefault(_selfExclusion);
        var _takeABreak = require("widgets/compliance/take-a-break");
        var _takeABreak2 = _interopRequireDefault(_takeABreak);
        var _realityCheck = require("widgets/compliance/reality-check");
        var _realityCheck2 = _interopRequireDefault(_realityCheck);
        var _classToggle = require("components/class-toggle");
        var _classToggle2 = _interopRequireDefault(_classToggle);
        var _concatInputs = require("components/concat-inputs");
        var _concatInputs2 = _interopRequireDefault(_concatInputs);
        var _reveal = require("components/reveal");
        var _reveal2 = _interopRequireDefault(_reveal);
        var _notifications = require("components/notifications");
        var _notifications2 = _interopRequireDefault(_notifications);
        var _queryStringNotifications = require("components/query-string-notifications");
        var _queryStringNotifications2 = _interopRequireDefault(_queryStringNotifications);
        var _registerServiceWorker = require("components/register-service-worker");
        var _registerServiceWorker2 = _interopRequireDefault(_registerServiceWorker);
        var _transactionHistory = require("widgets/transaction-history");
        var _transactionHistory2 = _interopRequireDefault(_transactionHistory);
        var _marketingPreferences = require("widgets/marketing-preferences");
        var _marketingPreferences2 = _interopRequireDefault(_marketingPreferences);
        var _playerFundProtection = require("widgets/player-fund-protection");
        var _playerFundProtection2 = _interopRequireDefault(_playerFundProtection);
        var _demoPlayService = require("services/demoPlayService");
        var _demoPlayService2 = _interopRequireDefault(_demoPlayService);
        var _livechat = require("components/livechat");
        var _livechat2 = _interopRequireDefault(_livechat);
        var _sliderEligibility = require("components/sliderEligibility");
        var _sliderEligibility2 = _interopRequireDefault(_sliderEligibility);
        var _dailyRetentionGame = require("Widgets/daily-retention-game");
        var _dailyRetentionGame2 = _interopRequireDefault(_dailyRetentionGame);
        var _dailyRetentionBanner = require("widgets/daily-retention-banner");
        var _filterTabs = require("components/filterTabs");
        var _filterTabs2 = _interopRequireDefault(_filterTabs);
        var _bingoScheduleSlider = require("widgets/bingo-schedule-slider");
        var _bingoScheduleSlider2 = _interopRequireDefault(_bingoScheduleSlider);
        var _bonusEligibility = require("components/bonus-eligibility");
        var _bonusEligibility2 = _interopRequireDefault(_bonusEligibility);
        var _passwordReset = require("widgets/password-reset");
        var _passwordReset2 = _interopRequireDefault(_passwordReset);
        var _requestResetPassword = require("widgets/request-reset-password");
        var _requestResetPassword2 = _interopRequireDefault(_requestResetPassword);
        var _requestUsernameReminder = require("widgets/request-username-reminder");
        var _requestUsernameReminder2 = _interopRequireDefault(_requestUsernameReminder);
        var _notificationListener = require("components/notificationListener");
        var _registrationState = require("./services/registration-state.service");
        var _targetedBonusRedirect = require("widgets/targeted-bonus-redirect");
        var _targetedBonusRedirect2 = _interopRequireDefault(_targetedBonusRedirect);
        var _oneClickBonusClaim = require("widgets/one-click-bonus-claim");
        var _oneClickBonusClaim2 = _interopRequireDefault(_oneClickBonusClaim);
        var _gameSlider = require("components/game-slider");
        var _gameSlider2 = _interopRequireDefault(_gameSlider);
        var _passwordReveal = require("components/password-reveal");
        var _passwordReveal2 = _interopRequireDefault(_passwordReveal);
        var _bingoAdvanceTickets = require("widgets/bingo-advance-tickets");
        var _bingoAdvanceTickets2 = _interopRequireDefault(_bingoAdvanceTickets);
        var _bingoAdvancePurchase = require("widgets/bingo-advance-purchase");
        var _bingoAdvancePurchase2 = _interopRequireDefault(_bingoAdvancePurchase);
        var _dailyJackpotBanner = require("widgets/daily-jackpot-banner");
        var _activePromotions = require("widgets/active-promotions");
        var _activePromotions2 = _interopRequireDefault(_activePromotions);
        var _stickyNavBar = require("components/sticky-nav-bar");
        var _stickyNavBar2 = _interopRequireDefault(_stickyNavBar);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }
        window.demoPlayService = new _demoPlayService2.default;
        (0, _elementDataset2.default)();
        var registrationStateService = new _registrationState.RegistrationStateService;
        registrationStateService.listenOnElement(window);
        document.addEventListener("DOMContentLoaded", function() {
            var connectionUrl = document.body.dataset.connectionUrl;
            var token = document.body.dataset.token;
            (0, _passwordReveal2.default)();
            _notificationListener.NotificationListener.initSocket(connectionUrl, token);
            registrationStateService.updateDocRegState();
            (0, _modals2.default)();
            (0, _form2.default)();
            _factory2.default.attach(".js-login", _login2.default);
            (0, _classToggle2.default)();
            (0, _notifications2.default)({
                closable: true
            });
            (0, _reveal2.default)();
            (0, _queryStringNotifications2.default)();
            (0, _preventDoubleClick2.default)();
            (0, _registerServiceWorker2.default)("meccabingo");
            (0, _concatInputs2.default)();
            window.demoPlayService.showButtons();
            window.demoPlayService.watchForGames(document.body).then(function() {
                window.demoPlayService.showButtons()
            });
            (0, _livechat2.default)();
            (0, _sliderEligibility2.default)();
            _factory2.default.attach(".js-slider-container", _gameSlider2.default);
            _factory2.default.attach(".js-jackpot-banner-widget", _dailyJackpotBanner.DailyJackpotBanner);
            _factory2.default.attach(".js-self-exclusion", _selfExclusion2.default);
            _factory2.default.attach(".js-player-fund-protection", _playerFundProtection2.default);
            _factory2.default.attach(".js-take-a-break", _takeABreak2.default);
            _factory2.default.attach(".js-reality-checks", _realityCheck2.default);
            _factory2.default.attach(".js-transaction-history", _transactionHistory2.default);
            _factory2.default.attach(".js-daily-retention-game", _dailyRetentionGame2.default);
            _factory2.default.attach(".js-daily-retention-banner", _dailyRetentionBanner.DailyRetentionBanner);
            _factory2.default.attach(".js-filter-tabs", _filterTabs2.default);
            _factory2.default.attach(".js-bingo-schedule-slider", _bingoScheduleSlider2.default);
            _factory2.default.attach(".js-bingo-advance-tickets", _bingoAdvanceTickets2.default);
            _factory2.default.attach(".js-bingo-advance-purchase", _bingoAdvancePurchase2.default);
            _factory2.default.attach(".js-password-reset", _passwordReset2.default);
            _factory2.default.attach(".js-request-reset-password", _requestResetPassword2.default);
            _factory2.default.attach(".js-request-username-reminder", _requestUsernameReminder2.default);
            _factory2.default.attach(".js-marketing-preferences", _marketingPreferences2.default);
            _factory2.default.attach(".js-targeted-bonus-redirect-settings", _targetedBonusRedirect2.default);
            _factory2.default.attach(".js-pending-withdrawals", _pendingWithdrawals2.default);
            _factory2.default.attach(".js-cashier-iframe", _deposit2.default);
            _factory2.default.attach(".js-cashier-deposit-bonus", _bonusInfo2.default);
            _factory2.default.attach("body", _bonusEligibility2.default);
            _factory2.default.attach(".js-promotion-one-click-claim", _oneClickBonusClaim2.default);
            _factory2.default.attach(".js-active-promotions", _activePromotions2.default);
            _factory2.default.attach(".js-sticky-nav-bar", _stickyNavBar2.default)
        })
    }, {
        "./components/preventDoubleClick": 400,
        "./services/registration-state.service": 409,
        "Widgets/daily-retention-game": 392,
        "babel-polyfill": 26,
        "components/bonus-eligibility": 393,
        "components/class-toggle": 1,
        "components/concat-inputs": 394,
        "components/filterTabs": 395,
        "components/game-slider": 396,
        "components/livechat": 397,
        "components/modals": 3,
        "components/notificationListener": 398,
        "components/notifications": 4,
        "components/password-reveal": 399,
        "components/query-string-notifications": 5,
        "components/register-service-worker": 6,
        "components/reveal": 7,
        "components/sliderEligibility": 401,
        "components/sticky-nav-bar": 402,
        "components/validation/form": 403,
        "element-dataset": 380,
        "ima.js-babel6-polyfill": 381,
        "services/demoPlayService": 408,
        "whatwg-fetch": 391,
        "widgets/active-promotions": 410,
        "widgets/bingo-advance-purchase": 411,
        "widgets/bingo-advance-tickets": 412,
        "widgets/bingo-schedule-slider": 413,
        "widgets/cashier/bonus-info": 414,
        "widgets/cashier/deposit": 415,
        "widgets/cashier/pendingWithdrawals": 416,
        "widgets/compliance/reality-check": 417,
        "widgets/compliance/self-exclusion": 20,
        "widgets/compliance/take-a-break": 21,
        "widgets/daily-jackpot-banner": 418,
        "widgets/daily-retention-banner": 419,
        "widgets/factory": 23,
        "widgets/login": 421,
        "widgets/marketing-preferences": 422,
        "widgets/one-click-bonus-claim": 423,
        "widgets/password-reset": 424,
        "widgets/player-fund-protection": 25,
        "widgets/request-reset-password": 425,
        "widgets/request-username-reminder": 426,
        "widgets/targeted-bonus-redirect": 427,
        "widgets/transaction-history": 428
    }],
    408: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _fetch = require("helpers/fetch");
        var _fetch2 = _interopRequireDefault(_fetch);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i]
                }
                return arr2
            } else {
                return Array.from(arr)
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var DemoPlayService = function() {
            function DemoPlayService() {
                _classCallCheck(this, DemoPlayService);
                this._localStoragePropertyName = "demoPlayData";
                this.getPlayerDemoPlayData();
                this.hideIfIneligible()
            }
            _createClass(DemoPlayService, [{
                key: "getPlayerID",
                value: function getPlayerID() {
                    var _this = this;
                    return new Promise(function(resolve, reject) {
                        if (_this.hasOwnProperty("_playerId") && _this._playerId) {
                            resolve(_this._playerId)
                        } else if (_this._playerIdEl && _this._playerIdEl.hasAttribute("data-player-id") && _this._playerIdEl.dataset.playerId !== "%%{Player::ID}") {
                            _this._playerIdEl = document.querySelector("[data-player-id]");
                            _this._playerId = _this._playerIdEl.dataset.playerId;
                            resolve(_this._playerId)
                        } else {
                            (0, _fetch2.default)("/api/Lobby/PlayerToken").then(function(response) {
                                if (response && response.hasOwnProperty("UserId") && response.UserId) {
                                    resolve(response.UserId)
                                } else {
                                    reject("demo play - No authorised user")
                                }
                            }, function(error) {
                                console.log(error)
                            })
                        }
                    })
                }
            }, {
                key: "resetDemoPlayData",
                value: function resetDemoPlayData(playerId) {
                    var _this2 = this;
                    var reset = function reset(playerId) {
                        if (_this2._demoPlayData[playerId] > 1) {
                            _this2._demoPlayData[playerId] = 0;
                            localStorage.setItem(_this2._localStoragePropertyName, JSON.stringify(_this2._demoPlayData))
                        }
                    };
                    if (playerId) {
                        reset(playerId)
                    } else {
                        this.getPlayerID().then(function(playerId) {
                            reset(playerId)
                        })
                    }
                }
            }, {
                key: "getPlayerDemoPlayData",
                value: function getPlayerDemoPlayData() {
                    var _this3 = this;
                    this._demoPlayData = JSON.parse(localStorage.getItem("demoPlayData")) || {};
                    this.getPlayerID().then(function(playerId) {
                        if (!_this3._demoPlayData[playerId]) {
                            _this3._demoPlayData[playerId] = 0
                        }
                    })
                }
            }, {
                key: "incrementPlayCount",
                value: function incrementPlayCount() {
                    var _this4 = this;
                    return this.getPlayerID().then(function(playerId) {
                        _this4.getPlayerDemoPlayData();
                        if (!_this4._demoPlayData[playerId]) {
                            _this4._demoPlayData[playerId] = 1
                        } else {
                            ++_this4._demoPlayData[playerId]
                        }
                        localStorage.setItem(_this4._localStoragePropertyName, JSON.stringify(_this4._demoPlayData))
                    })
                }
            }, {
                key: "getButtons",
                value: function getButtons() {
                    this._demoBtns = [].concat(_toConsumableArray(document.querySelectorAll(".game-item-action-btn.demo, .game-identifires-cta.demo")));
                    this._playBtns = [].concat(_toConsumableArray(document.querySelectorAll(".game-item-action-btn:not(.demo), .game-identifires-cta:not(.demo)")))
                }
            }, {
                key: "watchForGames",
                value: function watchForGames(el) {
                    return new Promise(function(resolve, reject) {
                        var observerCallback = function observerCallback(mutationsList, observer) {
                            var gamesAdded = mutationsList.some(function(mutation) {
                                if (!mutation.addedNodes.length) return false;
                                return [].concat(_toConsumableArray(mutation.addedNodes)).some(function(node) {
                                    return node.classList && node.classList.contains("js-game-item")
                                })
                            });
                            if (gamesAdded) {
                                resolve("Games added")
                            }
                        };
                        var observer = new MutationObserver(observerCallback);
                        var config = {
                            attributes: false,
                            childList: true,
                            subtree: true,
                            attributeOldValue: false
                        };
                        observer.observe(el, config)
                    })
                }
            }, {
                key: "showButtons",
                value: function showButtons(callback, callbackArg) {
                    var _this5 = this;
                    this.getButtons();
                    this.getPlayerID().then(function(success) {
                        _this5._playerId = success
                    }).finally(function() {
                        if (_this5._demoBtns && _this5._demoBtns.length || _this5._playBtns && _this5._playBtns.length) {
                            _this5._playBtns.forEach(function(playBtn) {
                                return playBtn.parentNode.classList.add("visible")
                            });
                            if (!_this5._demoPlayData[_this5._playerId] || _this5._demoPlayData[_this5._playerId] < 2) {
                                _this5._demoBtns.forEach(function(demoPlayBtn) {
                                    return demoPlayBtn.parentNode.classList.add("visible")
                                })
                            }
                        }
                        if (callback) {
                            callback(callbackArg)
                        }
                    })
                }
            }, {
                key: "hideIfIneligible",
                value: function hideIfIneligible() {
                    var _this6 = this;
                    this.getButtons();
                    this.getPlayerDemoPlayData();
                    this.getPlayerID().then(function(playerId) {
                        if (_this6._demoPlayData[playerId] > 1) {
                            _this6._demoBtns.forEach(function(demoPlayBtn) {
                                var demoPlayParentClassList = demoPlayBtn.parentNode.classList;
                                demoPlayParentClassList.remove("visible");
                                demoPlayParentClassList.add("hidden")
                            })
                        }
                    })
                }
            }]);
            return DemoPlayService
        }();
        exports.default = DemoPlayService;
        module.exports = exports["default"]
    }, {
        "helpers/fetch": 12
    }],
    409: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var RegistrationStateService = exports.RegistrationStateService = function() {
            function RegistrationStateService() {
                _classCallCheck(this, RegistrationStateService)
            }
            _createClass(RegistrationStateService, [{
                key: "listenOnElement",
                value: function listenOnElement(element) {
                    var _this = this;
                    element.addEventListener("registration-success", function() {
                        _this.setRegState(true)
                    })
                }
            }, {
                key: "setRegState",
                value: function setRegState() {
                    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                    this.hasRegistered = state;
                    localStorage.setItem("hasRegistered", JSON.parse(this.hasRegistered));
                    this.updateDocRegState()
                }
            }, {
                key: "getRegState",
                value: function getRegState() {
                    var hasRegistered = localStorage.getItem("hasRegistered");
                    this.hasRegistered = hasRegistered ? JSON.parse(hasRegistered) : false
                }
            }, {
                key: "updateDocRegState",
                value: function updateDocRegState() {
                    if (!this.hasRegistered) {
                        this.getRegState()
                    }
                    document.body.setAttribute("data-prior-registration", this.hasRegistered)
                }
            }]);
            return RegistrationStateService
        }()
    }, {}],
    410: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _data = require("widgets/data");
        var _data2 = _interopRequireDefault(_data);
        var _fetch = require("helpers/fetch");
        var _fetch2 = _interopRequireDefault(_fetch);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i]
                }
                return arr2
            } else {
                return Array.from(arr)
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var _class = function(_DataWidget) {
            _inherits(_class, _DataWidget);

            function _class() {
                _classCallCheck(this, _class);
                var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));
                (0, _fetch2.default)("/api/Bonuses/History?pageNumber=1&BonusStatuses=PartQualified").then(function(response) {
                    _this.currentPageNumber = response.PageNumber;
                    _this.nextPageNumber = response.PageNumber + 1;
                    _this.totalPages = response.TotalPages;
                    _this.allPromotionHistory = response.Items;
                    _this.fetchedUrls = [];
                    if (_this.currentPageNumber < _this.totalPages) {
                        _this.getMorePages()
                    } else {
                        _this.getPartQualifiedBonusIds()
                    }
                }).catch(function(error) {
                    throw error
                });
                return _this
            }
            _createClass(_class, [{
                key: "getMorePages",
                value: function getMorePages() {
                    var _this2 = this;
                    for (var i = this.nextPageNumber; i <= this.totalPages; i++) {
                        if (this.nextPageNumber < 20) {
                            this.fetchedUrls.push((0, _fetch2.default)("/api/Bonuses/History?pageNumber=" + this.nextPageNumber + "\n        &BonusStatuses=PartQualified"));
                            this.nextPageNumber++
                        }
                    }
                    Promise.all(this.fetchedUrls).then(function(data) {
                        for (var a = 0; a < data.length; a++) {
                            for (var b = 0; b < data[a].Items.length; b++) {
                                _this2.allPromotionHistory.push(data[a].Items[b])
                            }
                        }
                    }).then(function() {
                        _this2.getPartQualifiedBonusIds()
                    }).catch(function(error) {
                        throw error
                    })
                }
            }, {
                key: "getPartQualifiedBonusIds",
                value: function getPartQualifiedBonusIds() {
                    var partQualifiedPromotions = [].concat(_toConsumableArray(new Set(this.allPromotionHistory.map(function(bonus) {
                        return bonus.bonusId.toString()
                    }))));
                    document.body.dataset.activePromotions = partQualifiedPromotions;
                    this.actionElements(partQualifiedPromotions)
                }
            }, {
                key: "actionElements",
                value: function actionElements(bonuses) {
                    var pageElementsWithIds = [].concat(_toConsumableArray(document.querySelectorAll("[data-associated-active-promo-id]")));
                    var allPageElements = [].concat(_toConsumableArray(document.querySelectorAll(".js-active-promotion-item")));
                    var idsToAction = pageElementsWithIds.map(function(element) {
                        return element.getAttribute("data-associated-active-promo-id")
                    }).filter(function(bonusId) {
                        return !bonuses.includes(bonusId)
                    });
                    pageElementsWithIds.forEach(function(nodeElem) {
                        if (idsToAction.includes(nodeElem.getAttribute("data-associated-active-promo-id"))) {
                            nodeElem.parentNode.removeChild(nodeElem)
                        }
                    });
                    allPageElements.forEach(function(nodeElem) {
                        if (!nodeElem.hasAttribute("data-associated-active-promo-id")) {
                            nodeElem.parentNode.removeChild(nodeElem)
                        }
                    });
                    this.checkforBlankPage()
                }
            }, {
                key: "checkforBlankPage",
                value: function checkforBlankPage() {
                    if (document.body.contains(document.querySelector(".js-active-promo-no-promotions"))) {
                        this.showContainer()
                    } else if (!document.body.contains(document.querySelector(".js-active-promotion-item"))) {
                        var noPromoMessage = document.createElement("p");
                        noPromoMessage.className = "text-center";
                        noPromoMessage.innerText = "You have no active promotions.";
                        document.querySelector(".js-active-promo-container").appendChild(noPromoMessage);
                        this.showContainer()
                    } else {
                        this.showContainer()
                    }
                }
            }, {
                key: "showContainer",
                value: function showContainer() {
                    [].concat(_toConsumableArray(document.querySelectorAll(".associated-bonus-container"))).forEach(function(containerNode) {
                        containerNode.classList.remove("associated-bonus-container")
                    })
                }
            }]);
            return _class
        }(_data2.default);
        exports.default = _class;
        module.exports = exports["default"]
    }, {
        "helpers/fetch": 12,
        "widgets/data": 22
    }],
    411: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);
            if (desc === undefined) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                    return undefined
                } else {
                    return get(parent, property, receiver)
                }
            } else if ("value" in desc) {
                return desc.value
            } else {
                var getter = desc.get;
                if (getter === undefined) {
                    return undefined
                }
                return getter.call(receiver)
            }
        };
        var _form = require("widgets/form");
        var _form2 = _interopRequireDefault(_form);
        var _encode = require("helpers/encode");
        var _encode2 = _interopRequireDefault(_encode);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i]
                }
                return arr2
            } else {
                return Array.from(arr)
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var _class = function(_FormWidget) {
            _inherits(_class, _FormWidget);

            function _class() {
                _classCallCheck(this, _class);
                return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments))
            }
            _createClass(_class, [{
                key: "setup",
                value: function setup() {
                    _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "setup", this).call(this);
                    this.container = this.element.querySelector(".js-btp-container");
                    this.ticketAmount = this.element.querySelector("#ticketAmount");
                    this.quantitySelector = this.element.querySelector(".js-ticket-quantity-selector");
                    this.quantityBtns = [].concat(_toConsumableArray(this.quantitySelector.querySelectorAll("[data-ticket-quantity], [data-ticket-modifier]")));
                    this.calculatorReset = this.element.querySelector(".js-calculator-reset");
                    this.ticketPrice = this.element.querySelector(".js-ticket-price");
                    this.ticketAmountTotal = this.element.querySelector(".js-ticket-amount");
                    this.totalCost = this.element.querySelector("#total-cost");
                    this.maxTickets = this.element.querySelector(".js-avp-max-cards");
                    this.responseContainer = this.element.querySelector(".js-response-container");
                    this.responseText = this.responseContainer.querySelector(".js-response-text");
                    this.closeBtn = this.element.querySelector(".close");
                    this.closeOverlay = document.querySelector(".overlay")
                }
            }, {
                key: "getUrl",
                value: function getUrl() {
                    return this.element.getAttribute("data-purchase-advanced-tickets-url")
                }
            }, {
                key: "getMethod",
                value: function getMethod() {
                    return this.element.getAttribute("data-action")
                }
            }, {
                key: "getHeaders",
                value: function getHeaders() {
                    return new Headers({
                        "Content-Type": "application/x-www-form-urlencoded"
                    })
                }
            }, {
                key: "getBody",
                value: function getBody() {
                    var obj = {
                        GameName: this.element.getAttribute("data-game-name"),
                        Currency: this.element.getAttribute("data-currency"),
                        NumberOfCards: this.ticketAmount.innerHTML,
                        TicketsAlreadyPurchased: this.element.getAttribute("data-tickets-bought"),
                        ScheduleId: this.element.getAttribute("data-schedule-id"),
                        TotalPrice: this.totalCost.innerHTML.replace(/[^0-9]+/g, "")
                    };
                    return (0, _encode2.default)(obj)
                }
            }, {
                key: "listen",
                value: function listen() {
                    var _this2 = this;
                    this.submitButton.addEventListener("click", function(ev) {
                        ev.preventDefault();
                        _this2.submitButton.setAttribute("disabled", "disabled");
                        _this2.submitForm()
                    });
                    this.closeBtn.addEventListener("click", function() {
                        var reloadPage = _this2.responseContainer.getAttribute("data-reload-required");
                        if (reloadPage === "true") {
                            window.location.reload()
                        }
                    });
                    this.closeOverlay.addEventListener("click", function() {
                        var reloadPage = _this2.responseContainer.getAttribute("data-reload-required");
                        if (reloadPage === "true") {
                            window.location.reload()
                        }
                    });
                    this.quantitySelector.addEventListener("click", function(e) {
                        var quantity = parseInt(_this2.ticketAmount.innerHTML, 10);
                        var maxTickets = parseInt(_this2.maxTickets.innerHTML, 10) - parseInt(_this2.element.getAttribute("data-tickets-bought"), 10);
                        if (maxTickets <= 1) return;
                        if (e.target.hasAttribute("data-ticket-quantity")) {
                            quantity = e.target.getAttribute("data-ticket-quantity")
                        } else if (e.target.hasAttribute("data-ticket-modifier")) {
                            quantity += parseInt(e.target.getAttribute("data-ticket-modifier"), 10)
                        }
                        if (quantity <= 0) {
                            quantity = 1
                        } else if (quantity > maxTickets) {
                            quantity = maxTickets
                        }
                        _this2.ticketAmount.innerHTML = quantity;
                        _this2.setTicketQuantityStates()
                    });
                    this.calculatorReset.addEventListener("click", function() {
                        _this2.ticketAmount.innerHTML = 1;
                        _this2.setTicketQuantityStates()
                    })
                }
            }, {
                key: "setTicketQuantityStates",
                value: function setTicketQuantityStates() {
                    var quantity = parseInt(this.ticketAmount.innerHTML, 10);
                    var maxTickets = parseInt(this.maxTickets.innerHTML, 10);
                    if (quantity > 1) {
                        this.calculatorReset.removeAttribute("disabled")
                    } else if (quantity <= 1) {
                        this.calculatorReset.setAttribute("disabled", "disabled")
                    }
                    this.quantityBtns.forEach(function(btn) {
                        btn.classList.remove("active");
                        if (btn.hasAttribute("data-ticket-modifier")) {
                            var _buttonValue = parseInt(btn.getAttribute("data-ticket-modifier"), 10);
                            if (quantity === 1 && _buttonValue === -1) {
                                btn.setAttribute("disabled", "disabled")
                            } else if (quantity === maxTickets && _buttonValue === +1) {
                                btn.setAttribute("disabled", "disabled")
                            } else {
                                btn.removeAttribute("disabled")
                            }
                            return
                        }
                        var buttonValue = parseInt(btn.getAttribute("data-ticket-quantity"), 10);
                        if (buttonValue === quantity) {
                            btn.classList.add("active")
                        } else if (buttonValue > maxTickets) {
                            btn.setAttribute("disabled", "disabled")
                        }
                    });
                    var totalVal = this.ticketPrice.getAttribute("data-ticket-price") * quantity;
                    this.totalCost.innerHTML = totalVal > 100 ? "&pound;" + (totalVal / 100).toFixed(2) : totalVal + "p"
                }
            }, {
                key: "handleSuccess",
                value: function handleSuccess() {
                    this.responseText.innerHTML = "You successfully purchased tickets";
                    this.responseContainer.classList.remove("hide");
                    this.container.classList.add("hide");
                    this.submitButton.innerHTML = this.submitText;
                    this.submitButton.removeAttribute("disabled")
                }
            }, {
                key: "handleErrors",
                value: function handleErrors(err) {
                    var _this3 = this;
                    err.response.json().then(function(response) {
                        _this3.responseContainer.setAttribute("data-reload-required", response.errors[0].code === "ApiUnauthorized");
                        _this3.responseText.innerHTML = response.errors[0].code !== "ApiUnauthorized" ? response.errors[0].detail : "You have been logged out. Please log in and try again.";
                        _this3.responseContainer.classList.remove("hide");
                        _this3.container.classList.add("hide");
                        _this3.submitButton.innerHTML = _this3.submitText;
                        _this3.submitButton.removeAttribute("disabled")
                    })
                }
            }]);
            return _class
        }(_form2.default);
        exports.default = _class;
        module.exports = exports["default"]
    }, {
        "helpers/encode": 11,
        "widgets/form": 420
    }],
    412: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _data = require("widgets/data");
        var _data2 = _interopRequireDefault(_data);
        var _parentElement = require("helpers/parent-element");
        var _parentElement2 = _interopRequireDefault(_parentElement);
        var _events = require("components/events");

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i]
                }
                return arr2
            } else {
                return Array.from(arr)
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var _class = function(_DataWidget) {
            _inherits(_class, _DataWidget);

            function _class(element) {
                _classCallCheck(this, _class);
                var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));
                _this.element = element;
                _this.avpModal = document.querySelector('[data-modal-id="' + _this.element.getAttribute("data-target") + '"]');
                _this.container = _this.avpModal.querySelector(".js-btp-container");
                _this.responseContainer = _this.avpModal.querySelector(".js-response-container");
                _this.responseText = _this.responseContainer.querySelector(".js-response-text");
                _this.listen();
                return _this
            }
            _createClass(_class, [{
                key: "listen",
                value: function listen() {
                    var _this2 = this;
                    this.element.addEventListener("click", function(e) {
                        if (!e.target.classList.contains("js-avp-bingo-btn")) return;
                        var bingoGameItem = (0, _parentElement2.default)(e.target, "js-game-item");
                        var getAdvancedTicketsUrl = bingoGameItem.getAttribute("data-get-advanced-tickets-url");
                        _this2.fetch(getAdvancedTicketsUrl).then(function(response) {
                            _this2.updateModal(response);
                            (0, _events.broadcast)("show:modal", _this2.avpModal, _this2.avpModal)
                        }).catch(function(err) {
                            return _this2.handleErrors(err)
                        })
                    })
                }
            }, {
                key: "handleErrors",
                value: function handleErrors(err) {
                    var _this3 = this;
                    err.response.json().then(function(response) {
                        _this3.responseContainer.setAttribute("data-reload-required", response.errors[0].code === "ApiUnauthorized");
                        _this3.updateModalContainerState(response.errors[0].code !== "ApiUnauthorized" ? response.errors[0].detail : "You have been logged out. Please log in and try again.");
                        (0, _events.broadcast)("show:modal", _this3.avpModal, _this3.avpModal)
                    })
                }
            }, {
                key: "updateModal",
                value: function updateModal(bingoGame) {
                    var date = moment(bingoGame.StartTime).format("ddd Do MMMM [at] HH:mm");
                    var prizeAmount = bingoGame.PrizeInitialAmounts[0].Amount / 100;
                    var ticketPrice = bingoGame.DefaultCardPrice > 100 ? "&pound;" + (bingoGame.DefaultCardPrice / 100).toFixed(2) : bingoGame.DefaultCardPrice + "p";
                    this.avpModal.querySelector(".js-avp-room-name").innerHTML = bingoGame.RoomName;
                    this.avpModal.querySelector(".js-avp-game-title").innerHTML = bingoGame.GameTitle;
                    this.avpModal.querySelector(".js-avp-start-time").innerHTML = date;
                    this.avpModal.querySelector(".js-avp-prize").innerHTML = prizeAmount;
                    this.avpModal.querySelector(".js-avp-tickets").innerHTML = bingoGame.TicketsPurchased;
                    this.avpModal.querySelector(".js-avp-max-cards").innerHTML = bingoGame.MaxCards;
                    this.avpModal.querySelector(".js-avp-card-price").innerHTML = ticketPrice;
                    this.avpModal.querySelector("#total-cost").innerHTML = ticketPrice;
                    this.avpModal.setAttribute("data-game-name", bingoGame.GameName);
                    this.avpModal.setAttribute("data-schedule-id", bingoGame.ScheduleId);
                    this.avpModal.setAttribute("data-ticket-price", bingoGame.DefaultCardPrice);
                    this.avpModal.setAttribute("data-tickets-bought", bingoGame.TicketsPurchased);
                    this.avpModal.querySelector(".js-ticket-price").setAttribute("data-ticket-price", bingoGame.DefaultCardPrice);
                    this.avpModal.querySelector("#ticketAmount").innerHTML = bingoGame.MaxCards - bingoGame.TicketsPurchased >= 1 ? 1 : 0;
                    this.updateModalButtons(bingoGame);
                    this.updateModalContainerState()
                }
            }, {
                key: "updateModalContainerState",
                value: function updateModalContainerState(err) {
                    if (err) {
                        this.responseText.innerHTML = err;
                        this.responseContainer.classList.remove("hide");
                        this.container.classList.add("hide")
                    } else {
                        this.container.classList.remove("hide");
                        this.responseContainer.classList.add("hide")
                    }
                }
            }, {
                key: "updateModalButtons",
                value: function updateModalButtons(bingoGame) {
                    this.ticketQuantityBtns = [].concat(_toConsumableArray(this.avpModal.querySelectorAll("[data-ticket-quantity], [data-ticket-modifier], [data-ticket-reset]")));
                    var maxTickets = bingoGame.MaxCards - bingoGame.TicketsPurchased;
                    if (maxTickets === 0) {
                        this.avpModal.querySelector("[data-submit]").setAttribute("disabled", "disabled")
                    } else {
                        this.avpModal.querySelector("[data-submit]").removeAttribute("disabled")
                    }
                    this.ticketQuantityBtns.forEach(function(button) {
                        var btn = button;
                        btn.classList.remove("active");
                        if (btn.hasAttribute("data-ticket-modifier")) {
                            var _buttonValue = parseInt(btn.getAttribute("data-ticket-modifier"), 10);
                            if (_buttonValue === -1) {
                                btn.setAttribute("disabled", "disabled")
                            } else if (maxTickets <= 1 && _buttonValue === +1) {
                                btn.setAttribute("disabled", "disabled")
                            } else {
                                btn.removeAttribute("disabled")
                            }
                            return
                        }
                        if (btn.hasAttribute("data-ticket-reset")) {
                            btn.setAttribute("disabled", "disabled");
                            return
                        }
                        if (btn.hasAttribute("data-max-ticket-quantity")) {
                            var lastButtonCards = bingoGame.MaxCards > 36 ? bingoGame.MaxCards : 72;
                            btn.innerHTML = lastButtonCards;
                            btn.setAttribute("data-ticket-quantity", lastButtonCards)
                        }
                        var buttonValue = parseInt(btn.getAttribute("data-ticket-quantity"), 10);
                        if (buttonValue === 1) {
                            btn.classList.add("active")
                        }
                        if (buttonValue > maxTickets) {
                            btn.setAttribute("disabled", "disabled")
                        } else {
                            btn.removeAttribute("disabled")
                        }
                    })
                }
            }]);
            return _class
        }(_data2.default);
        exports.default = _class;
        module.exports = exports["default"]
    }, {
        "components/events": 2,
        "helpers/parent-element": 14,
        "widgets/data": 22
    }],
    413: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
            return typeof obj
        } : function(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj
        };
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _data = require("widgets/data");
        var _data2 = _interopRequireDefault(_data);
        var _events = require("components/events");

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i]
                }
                return arr2
            } else {
                return Array.from(arr)
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var _class = function(_DataWidget) {
            _inherits(_class, _DataWidget);

            function _class(element) {
                _classCallCheck(this, _class);
                var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));
                _this.element = element;
                _this.userIsAuthed = document.documentElement.classList.contains("authenticated");
                _this.scheduleData = {};
                _this.updateSchedule();
                (0, _events.subscribe)("tabChange:Schedule", function() {
                    return _this.updateSchedule()
                });
                return _this
            }
            _createClass(_class, [{
                key: "getBody",
                value: function getBody() {
                    var date = new Date;
                    date.setHours(date.getHours() + 1);
                    return JSON.stringify({
                        BingoRooms: [],
                        Prices: [],
                        Prizes: [],
                        ExcludeGames: this.getExcludedGames(),
                        StartTimeUtc: (new Date).toISOString(),
                        EndTimeUtc: date.toISOString(),
                        PageSize: 12,
                        StartPosition: 0
                    })
                }
            }, {
                key: "getExcludedGames",
                value: function getExcludedGames() {
                    var lobbyGamesElement = this.element.parentElement.querySelector(".js-bingo-row");
                    if (!lobbyGamesElement) return [];
                    var excludedGames = [].concat(_toConsumableArray(lobbyGamesElement.querySelectorAll(".js-game-item"))).slice(0, lobbyGamesElement.dataset.bingoItemsCount).map(function(el) {
                        return {
                            RoomName: el.dataset.bingoItemRoom,
                            BingoGame: el.dataset.bingoItemGame,
                            ScheduleId: el.dataset.bingoItemScheduleId
                        }
                    });
                    return excludedGames
                }
            }, {
                key: "updateSchedule",
                value: function updateSchedule() {
                    var _this2 = this;
                    this.getScheduleData().then(function() {
                        _this2.setScheduleView();
                        setTimeout(function() {
                            _this2.updateSchedule()
                        }, 6e5)
                    }).catch(function(error) {
                        throw error
                    })
                }
            }, {
                key: "handleErrors",
                value: function handleErrors(error) {
                    throw error
                }
            }, {
                key: "setScheduleView",
                value: function setScheduleView() {
                    this.element.innerHTML = this.buildScheduleView(this.scheduleData)
                }
            }, {
                key: "getScheduleData",
                value: function getScheduleData() {
                    var _this3 = this;
                    return this.fetch("/api/startedbingoschedule/post", {
                        method: "post"
                    }).then(function(response) {
                        _this3.scheduleData = response
                    })
                }
            }, {
                key: "buildScheduleView",
                value: function buildScheduleView(scheduleData) {
                    return scheduleData.Items.map(this.buildBingoItem.bind(this)).join("")
                }
            }, {
                key: "buildBingoItem",
                value: function buildBingoItem(itemData) {
                    var startTime = new Date(itemData.StartTime);
                    var startTimeMins = startTime.getMinutes().toString();
                    var startTimeString = startTime.getHours() + ":" + (startTimeMins.length < 2 ? "0" + startTimeMins : "" + startTimeMins);
                    var room = window.MECCABINGO_MINI_SCHEDULE.ROOMS.find(function(scheduleRoom) {
                        return scheduleRoom.ProviderName === itemData.BingoScheduleItem.RoomName
                    });
                    return !room ? "" : '\n      <section class="js-game-item bingo-item slider-game"\n        data-bingo-item-start="' + itemData.StartTime + '"\n        data-bingo-item-start-utc="' + itemData.StartTime + '"\n        data-bingo-item-room="' + itemData.BingoScheduleItem.RoomName + '"\n        data-bingo-item-game="' + itemData.BingoScheduleItem.BingoGame + '"\n        data-bingo-item-schedule-id="' + itemData.BingoScheduleItem.ScheduleId + '"\n        data-get-advanced-tickets-url="/api/advancedtickets/get?schedulerId=' + itemData.BingoScheduleItem.ScheduleId + "&roomName=" + itemData.BingoScheduleItem.RoomName.replace(/ /g, "+") + '"\n        style="">\n        <div class="js-game-item-img-container game-item-img-container">\n\n            ' + (room && itemData ? this.buildBingoItemImg(itemData, room) : "") + "\n\n            " + (room ? this.buildRoomCategory(room) : "") + '\n\n        </div>\n        <div class="js-game-item-details game-item-details slider-game-item-details">\n          <p class="game-item-title slider-game-item-title game-item-title-home">\n            <strong>' + room.RoomName + '</strong>\n          </p>\n          <div class="bingo-item-timer-wrapper">\n              <div class="bingo-item-timer-container">\n                  <div class="bingo-item-timer-total"></div>\n                  <div class="js-bingo-item-timer-progress bingo-item-timer-progress" style="width: 29.3333%;"></div>\n              </div>\n              <div class="js-bingo-item-timer-left bingo-item-timer-progress-text">Starting at ' + startTimeString + '</div>\n          </div>\n\n          <div class="game-item-price-container">\n            <div class="game-details-part slider-game-details-part game-item-price-wrapper">\n              <span class="game-item-price-lbl">Price:</span>\n              <span class="game-item-price-value">\n                ' + itemData.FormatedPrice + '\n              </span>\n            </div>\n            <div class="game-details-part game-item-price-wrapper game-item-prize-wrapper">\n              <span class="game-item-price-lbl">Prize:</span>\n              <span class="game-item-price-value">\n                  ' + itemData.FormatedPrize + '\n              </span>\n            </div>\n          </div>\n\n          <div class="game-item-actions-container1 slider-game-item-actions-container">\n            ' + (itemData.JoinRoom && itemData.JoinRoom.NeedRendering ? this.buildActionsContainer1(itemData) : "") + '\n          </div>\n        </div>\n\n        <ul class="game-item-actions-container2 game-flex">\n          <li class="game-details-part">\n            <a class="' + (this.userIsAuthed ? "js-favorite-action " : "") + '\n              game-favourite-link game-item-action-link favorite-element"\n             href="#"\n             data-favorite-id="' + room.RoomName + '"\n             data-favorite-class=\'selected\'\n             data-favorite-type="room"\n             ' + (!this.userIsAuthed ? 'data-target="loginModal" data-toggle="modal"' : "") + '>\n               <i class="sprite shared-favourite"></i>\n             </a>\n          </li>\n          <li class="game-details-part mr-4">\n            <button class="btn avp-bingo-btn ' + (this.userIsAuthed ? "js-avp-bingo-btn" : "") + '"\n            ' + (!this.userIsAuthed ? 'data-target="loginModal" data-toggle="modal"' : "") + '>\n              Buy\n            </button>\n          </li>\n          <li class="game-details-part">\n            <a class="game-info-link game-item-action-link" href="' + room.RoomDetailsLink.Url + '">\n                <i class="sprite shared-more-info-ico"></i>\n            </a>\n          </li>\n        </ul>\n      </section>'
                }
            }, {
                key: "buildBingoItemImg",
                value: function buildBingoItemImg(itemData) {
                    var room = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    var joinRoom = itemData.JoinRoom;
                    joinRoom.ClassName = "js-open-in-popup btn c-franklin-book game-item-action-btn";
                    joinRoom.Text = '<img class="game-item-img game-img-responsive js-bingo-login" src="' + (room.RoomImage || "") + '"/>';
                    return '<a class="btn c-franklin-book game-item-action-btn" href="/bingo">\n      ' + joinRoom.Text + "\n    </a>"
                }
            }, {
                key: "buildRoomCategory",
                value: function buildRoomCategory(room) {
                    return '\n      <span class="bingo-item-type-link">\n          <i class="sprite bingo-type-is-' + room.RoomCategory.Value + '-new"></i>\n      </span>\n    '
                }
            }, {
                key: "buildActionsContainer1",
                value: function buildActionsContainer1(itemData) {
                    var joinRoom = itemData.JoinRoom;
                    joinRoom.ClassName = "btn c-franklin-book game-item-action-btn js-open-in-popup";
                    joinRoom.Attributes = "rel=nofollow";
                    return '<div class="game-details-part slider-game-details-part">\n        ' + this.generateAdvancedLink(joinRoom) + "\n      </div>\n    "
                }
            }, {
                key: "generateAdvancedLink",
                value: function generateAdvancedLink(options) {
                    if ((typeof options === "undefined" ? "undefined" : _typeof(options)) !== "object" || !options.Action && !options.Url) {
                        return ""
                    }
                    switch (options.LinkType) {
                        case "Popup":
                            return '\n          <a\n            onclick="' + (options.Action || "javascript:void(0);") + '"\n            href="' + (options.Url || "javascript:void(0);") + '"\n            class="js-open-in-popup ' + options.ClassName + '"\n            rel="nofollow"\n            title="' + options.Title + '" ' + options.Attributes + ">" + options.Text + "\n          </a>";
                        case "NewWindow":
                            return '\n          <a\n            onclick="' + (options.Action || "javascript:void(0);") + '"\n            href="' + (options.Url || "javascript:void(0);") + '"\n            target="_blank" class="' + options.ClassName + '"\n            rel="nofollow"\n            title="' + options.Title + '" ' + options.Attributes + ">" + options.Text + "\n          </a>";
                        default:
                            return '\n          <a\n            onclick="' + (options.Action || "javascript:void(0);") + '"\n            href="' + (options.Url || "javascript:void(0);") + '"\n            class="' + options.ClassName + '"\n            rel="nofollow"\n            title="' + options.Title + '" ' + options.Attributes + ">" + options.Text + "\n          </a>"
                    }
                }
            }]);
            return _class
        }(_data2.default);
        exports.default = _class;
        module.exports = exports["default"]
    }, {
        "components/events": 2,
        "widgets/data": 22
    }],
    414: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _data = require("widgets/data");
        var _data2 = _interopRequireDefault(_data);
        var _events = require("components/events");

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var _class = function(_DataWidget) {
            _inherits(_class, _DataWidget);

            function _class(element) {
                _classCallCheck(this, _class);
                var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));
                _this.element = element;
                if (element.dataset.hasBonusCode === "True") {
                    _this.fetch(element.dataset.bonusUrl).then(function(res) {
                        _this.renderBonus(res)
                    }).catch(function() {
                        _this.element.setAttribute("data-state", "loaded");
                        (0, _events.broadcast)("cashierDeposit:show", undefined, "")
                    })
                } else if (element.dataset.hasDeposited !== "True") {
                    _this.fetch(element.dataset.firstDepositUrl).then(function(res) {
                        if (res.length && res.length >= 1) {
                            _this.renderBonus(res[0])
                        } else {
                            _this.element.setAttribute("data-state", "loaded");
                            (0, _events.broadcast)("cashierDeposit:show", undefined, "")
                        }
                    }).catch(function() {
                        _this.element.setAttribute("data-state", "loaded");
                        (0, _events.broadcast)("cashierDeposit:show", undefined, "")
                    })
                } else {
                    _this.element.setAttribute("data-state", "loaded");
                    (0, _events.broadcast)("cashierDeposit:show", undefined, "")
                }
                element.addEventListener("click", function(e) {
                    if (e.target.classList.contains("js-bonus-accept")) {
                        (0,
                            _events.broadcast)("cashierDeposit:show", undefined, _this.element.dataset.promoCode);
                        _this.element.classList.add("hide")
                    } else if (e.target.classList.contains("js-bonus-decline")) {
                        (0, _events.broadcast)("cashierDeposit:show", undefined, "");
                        _this.element.classList.add("hide")
                    }
                });
                return _this
            }
            _createClass(_class, [{
                key: "renderBonus",
                value: function renderBonus(bonus) {
                    if (!bonus || !bonus.title || !bonus.description || !bonus.termsAndConditions || !bonus.promoCode) {
                        this.element.setAttribute("data-state", "loaded");
                        (0, _events.broadcast)("cashierDeposit:show", undefined, "");
                        return
                    }
                    this.element.querySelector(".js-bonus-title").innerText = bonus.title;
                    this.element.querySelector(".js-bonus-description").innerText = bonus.description;
                    this.element.querySelector(".js-bonus-terms").innerText = bonus.termsAndConditions;
                    this.element.setAttribute("data-promo-code", bonus.promoCode);
                    this.element.setAttribute("data-state", "loaded");
                    this.element.classList.remove("hide")
                }
            }]);
            return _class
        }(_data2.default);
        exports.default = _class;
        module.exports = exports["default"]
    }, {
        "components/events": 2,
        "widgets/data": 22
    }],
    415: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);
            if (desc === undefined) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                    return undefined
                } else {
                    return get(parent, property, receiver)
                }
            } else if ("value" in desc) {
                return desc.value
            } else {
                var getter = desc.get;
                if (getter === undefined) {
                    return undefined
                }
                return getter.call(receiver)
            }
        };
        var _data = require("widgets/data");
        var _data2 = _interopRequireDefault(_data);
        var _events = require("components/events");

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var _class = function(_DataWidget) {
            _inherits(_class, _DataWidget);

            function _class(element) {
                _classCallCheck(this, _class);
                var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));
                _this.depositEl = element;
                _this.iframe = element.querySelector("iframe");
                if (_this.depositEl.dataset.quickDeposit === "true") {
                    _this.fetch();
                    return _possibleConstructorReturn(_this)
                }
                _this.safechargeNotificationRecieved = false;
                _this.bedeNotificationRecieved = false;
                _this.overideFlag = false;
                _this.redirectTimer = null;
                _this.checkRedirectStatus = _this.checkRedirectStatus.bind(_this);
                _this.listen();
                return _this
            }
            _createClass(_class, [{
                key: "listen",
                value: function listen() {
                    var _this2 = this;
                    window.addEventListener("message", function(e) {
                        if (e.origin === "https://ppp-test.safecharge.com" || e.origin === "https://secure.safecharge.com") {
                            if (e.data === '"success"') {
                                _this2.depositEl.setAttribute("data-state", "redirecting");
                                _this2.safechargeNotificationRecieved = true;
                                window.utag_data.depositStatus = "success";
                                _this2.checkRedirectStatus()
                            }
                            var data = JSON.parse(e.data);
                            if (data.action && data.action === "resizeHeight") _this2.iframe.setAttribute("height", data.payload + "px");
                            else if (data.resizeIframe) _this2.iframe.setAttribute("height", data.resizeIframe + "px")
                        }
                    });
                    this.iframe.onload = function() {
                        if (_this2.depositEl.dataset.state === "redirecting") return;
                        _this2.depositEl.setAttribute("data-state", "loaded");
                        if (document.documentElement.classList.contains("mobile")) {
                            var contentMain = document.querySelector(".content-main");
                            contentMain.setAttribute("data-fullscreen", "true");
                            document.body.classList.add("fullscreen-deposit")
                        }
                    };
                    (0, _events.subscribe)("cashierDeposit:show", function(bonusCode) {
                        _this2.depositEl.setAttribute("data-state", "loading");
                        _this2.depositEl.setAttribute("data-bonus-code", bonusCode);
                        _this2.fetch()
                    });
                    (0, _events.subscribe)("bedeNotification:safe-change-push-notification", function(notificationData) {
                        try {
                            window.tUtil.trackDeposit(notificationData)
                        } catch (err) {
                            console.log("\n\nBede Notification Service: Deposit tracking error: " + err)
                        }
                        if (!notificationData.body) return;
                        var notificationBody = JSON.parse(notificationData.body);
                        var utag_data = window.utag_data;
                        utag_data.deposit = utag_data.deposit || {};
                        utag_data.depositAmount = notificationBody.DepositAmount;
                        utag_data.deposit_count = notificationBody.DepositCount;
                        utag_data.deposit.timestamp = notificationBody.DepositTimestamp;
                        utag_data.firstTimeDeposit = notificationBody.FirstTimeDeposit;
                        utag_data.purchaseId = notificationBody.PurchaseId;
                        utag_data.player_id = document.body.dataset.playerId;
                        _this2.bedeNotificationRecieved = true;
                        if (!_this2.overideFlag) _this2.checkRedirectStatus()
                    })
                }
            }, {
                key: "fetch",
                value: function fetch() {
                    var _this3 = this;
                    _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "fetch", this).call(this, "/api/cashier/deposit", {
                        method: "post"
                    }).then(function(response) {
                        if (_this3.depositEl.dataset.quickDeposit === "true") {
                            window.location = response.iFrameUrl
                        } else {
                            _this3.iframe.src = response.iFrameUrl
                        }
                    }).catch(function(err) {
                        _this3.depositEl.setAttribute("data-state", "error");
                        _this3.handleErrors(err)
                    })
                }
            }, {
                key: "getBody",
                value: function getBody() {
                    return JSON.stringify({
                        bonusCode: this.depositEl.dataset.bonusCode,
                        quickDeposit: this.depositEl.dataset.quickDeposit
                    })
                }
            }, {
                key: "displayErrors",
                value: function displayErrors(errors) {
                    var errorsArray = typeof errors === "string" ? [errors] : errors;
                    var errorFragment = document.createDocumentFragment();
                    errorsArray.forEach(function(error) {
                        var errorSpan = document.createElement("span");
                        errorSpan.classList.add("error");
                        errorSpan.innerHTML = error;
                        errorFragment.appendChild(errorSpan)
                    });
                    var loader = this.depositEl.parentElement.querySelector(".js-load-spinner");
                    loader.querySelector(".error").classList.add("hide");
                    loader.appendChild(errorFragment)
                }
            }, {
                key: "handleErrors",
                value: function handleErrors(err) {
                    var _this4 = this;
                    var contentType = err.response.headers.get("content-type");
                    if (contentType && contentType.includes("application/json")) {
                        err.response.json().then(function(response) {
                            var key = function() {
                                if (response.Errors) return "Errors";
                                if (response.errors) return "errors";
                                return ""
                            }();
                            if (key && response[key]) {
                                var errors = response[key].map(function(e) {
                                    return e.title || e.Message
                                });
                                _this4.displayErrors(errors);
                                document.body.querySelector(".deposit-limit-link").classList.add("hide")
                            } else if (response.Message) {
                                (0, _events.broadcast)("notification:error", undefined, response.Message)
                            } else {
                                (0, _events.broadcast)("notification:error", undefined, "Sorry, an unexpected error occurred. Please try again later.")
                            }
                        })
                    } else {
                        (0, _events.broadcast)("notification:error", undefined, "Sorry, an unexpected error occurred. Please try again later.")
                    }
                }
            }, {
                key: "checkRedirectStatus",
                value: function checkRedirectStatus() {
                    if (this.safechargeNotificationRecieved && this.bedeNotificationRecieved) {
                        clearTimeout(this.redirectTimer);
                        this.redirect()
                    } else if (this.safechargeNotificationRecieved && !this.bedeNotificationRecieved) {
                        if (!this.overideFlag) {
                            this.redirectTimer = setTimeout(this.checkRedirectStatus, 3e3);
                            this.overideFlag = true
                        } else {
                            clearTimeout(this.redirectTimer);
                            this.redirect()
                        }
                    }
                }
            }, {
                key: "redirect",
                value: function redirect() {
                    window.location = this.depositEl.dataset.returnUrl || "/"
                }
            }]);
            return _class
        }(_data2.default);
        exports.default = _class;
        module.exports = exports["default"]
    }, {
        "components/events": 2,
        "widgets/data": 22
    }],
    416: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _data = require("widgets/data");
        var _data2 = _interopRequireDefault(_data);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var _class = function(_DataWidget) {
            _inherits(_class, _DataWidget);

            function _class(element) {
                _classCallCheck(this, _class);
                var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));
                _this.el = element;
                _this.fetch(_this.el.dataset.url).then(function(res) {
                    if (res.count === "0" && _this.el.dataset.hideIfNone) return;
                    _this.el.classList.remove("hide");
                    _this.el.querySelector(".js-amount-available").innerHTML = parseFloat(res.total).toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, "$1,")
                });
                return _this
            }
            return _class
        }(_data2.default);
        exports.default = _class;
        module.exports = exports["default"]
    }, {
        "widgets/data": 22
    }],
    417: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);
            if (desc === undefined) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                    return undefined
                } else {
                    return get(parent, property, receiver)
                }
            } else if ("value" in desc) {
                return desc.value
            } else {
                var getter = desc.get;
                if (getter === undefined) {
                    return undefined
                }
                return getter.call(receiver)
            }
        };
        var _form = require("widgets/form");
        var _form2 = _interopRequireDefault(_form);
        var _events = require("components/events");
        var _fetch = require("helpers/fetch");
        var _fetch2 = _interopRequireDefault(_fetch);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var RealityCheck = function(_FormWidget) {
            _inherits(RealityCheck, _FormWidget);

            function RealityCheck() {
                _classCallCheck(this, RealityCheck);
                return _possibleConstructorReturn(this, (RealityCheck.__proto__ || Object.getPrototypeOf(RealityCheck)).apply(this, arguments))
            }
            _createClass(RealityCheck, [{
                key: "setup",
                value: function setup() {
                    _get(RealityCheck.prototype.__proto__ || Object.getPrototypeOf(RealityCheck.prototype), "setup", this).call(this);
                    this.realityList = this.element.querySelector(".js-select-reality-checks");
                    this.successMessage = this.element.dataset.successMessage;
                    this.failureMessage = this.element.dataset.errorMessage;
                    this.showInterval()
                }
            }, {
                key: "showInterval",
                value: function showInterval() {
                    var _this2 = this;
                    (0, _fetch2.default)(this.getUrl()).then(function(response) {
                        _this2.realityList.value = _this2.currentValue = response
                    }).catch(function(err) {
                        if (!err.response.status === "404") {
                            _this2.handleErrors(err)
                        }
                    })
                }
            }, {
                key: "listen",
                value: function listen() {
                    var _this3 = this;
                    this.submitButton.addEventListener("click", function(ev) {
                        if (_this3.realityList.value === "Choose reminder") {
                            (0, _events.broadcast)("notification:error", undefined, "Please select a reminder");
                            return
                        }
                        _this3.submitButton.setAttribute("disabled", "disabled");
                        ev.preventDefault();
                        _this3.submitForm()
                    })
                }
            }, {
                key: "handleSuccess",
                value: function handleSuccess() {
                    (0, _events.broadcast)("notification:success", undefined, this.successMessage);
                    this.submitButton.innerHTML = this.submitText;
                    this.submitButton.removeAttribute("disabled")
                }
            }, {
                key: "handleErrors",
                value: function handleErrors() {
                    (0, _events.broadcast)("notification:error", undefined, this.failureMessage);
                    this.submitButton.innerHTML = this.submitText;
                    this.submitButton.removeAttribute("disabled")
                }
            }]);
            return RealityCheck
        }(_form2.default);
        exports.default = RealityCheck;
        module.exports = exports["default"]
    }, {
        "components/events": 2,
        "helpers/fetch": 12,
        "widgets/form": 420
    }],
    418: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.DailyJackpotBanner = undefined;
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _fetch = require("helpers/fetch");
        var _fetch2 = _interopRequireDefault(_fetch);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var CounterElement = function() {
            function CounterElement(ancestor, selector) {
                _classCallCheck(this, CounterElement);
                this.DOMelement = ancestor.querySelector(selector)
            }
            _createClass(CounterElement, [{
                key: "updateValue",
                value: function updateValue(newValue) {
                    this.DOMelement.innerText = newValue
                }
            }]);
            return CounterElement
        }();
        var DailyJackpotBanner = exports.DailyJackpotBanner = function() {
            function DailyJackpotBanner(widgetEl) {
                _classCallCheck(this, DailyJackpotBanner);
                this.displayCheck = this.displayCheck.bind(this);
                this.widgetEl = widgetEl;
                var widgetJackpotEl = this.widgetEl.querySelector(".banner-jackpot-container");
                var widgetCounterEl = this.widgetEl.querySelector(".banner-counter-container");
                this.jackpotAmount = undefined;
                this.jackpotAmountEl = widgetJackpotEl.querySelector(".banner-jackpot-amount");
                this.counter = {
                    hours: new CounterElement(widgetCounterEl, ".banner-counter-hours-container .banner-hours"),
                    mins: new CounterElement(widgetCounterEl, ".banner-counter-mins-container .banner-mins"),
                    secs: new CounterElement(widgetCounterEl, ".banner-counter-secs-container .banner-secs")
                };
                this.jackpotWon = false;
                this.displayCheck();
                this.initCounter()
            }
            _createClass(DailyJackpotBanner, [{
                key: "displayCheck",
                value: function displayCheck() {
                    var now = moment();
                    var displayTime = moment().hour(20).minute(0).second(0).millisecond(0);
                    var timeDiff = moment(displayTime).toDate() - moment(now).toDate();
                    if (timeDiff > 0) {
                        setInterval(this.displayCheck.bind(this), timeDiff)
                    } else {
                        this.initBanner()
                    }
                }
            }, {
                key: "updateCounter",
                value: function updateCounter() {
                    var now = moment();
                    var midnight = moment().endOf("day");
                    var timeDiff = moment.utc(moment(midnight, "DD/MM/YYYY HH:mm:ss").diff(moment(now, "DD/MM/YYYY HH:mm:ss")));
                    this.counter.hours.updateValue(timeDiff.format("HH"));
                    this.counter.mins.updateValue(timeDiff.format("mm"));
                    this.counter.secs.updateValue(timeDiff.format("ss"))
                }
            }, {
                key: "initCounter",
                value: function initCounter() {
                    this.updateCounter();
                    setInterval(this.updateCounter.bind(this), 1e3)
                }
            }, {
                key: "getJackpot",
                value: function getJackpot() {
                    return (0, _fetch2.default)("https://feed-rank.tgp.cash/jackpots").then(function(response) {
                        var jackpot = response.result.jackpots[0].pots[1];
                        var result = {
                            jackpotAmount: "£" + jackpot.amount,
                            jackpotWon: jackpot.state !== "active"
                        };
                        return result
                    }).catch(function(error) {
                        throw error
                    })
                }
            }, {
                key: "updateJackpotAmount",
                value: function updateJackpotAmount() {
                    var _this = this;
                    return this.getJackpot().then(function(response) {
                        _this.jackpotAmountEl.innerText = _this.jackpotAmount = response.jackpotAmount;
                        _this.jackpotWon = response.jackpotWon;
                        var showBanner = _this.jackpotAmount && !_this.jackpotWon;
                        _this.widgetEl.setAttribute("data-ease-in", showBanner);
                        _this.widgetEl.setAttribute("data-visible", showBanner);
                        if (!showBanner) clearInterval(_this.updateJackpotTimer)
                    })
                }
            }, {
                key: "initBanner",
                value: function initBanner() {
                    this.updateJackpotAmount();
                    this.updateJackpotTimer = setInterval(this.updateJackpotAmount.bind(this), 3e4)
                }
            }]);
            return DailyJackpotBanner
        }()
    }, {
        "helpers/fetch": 12
    }],
    419: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.DailyRetentionBanner = undefined;
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _events = require("components/events");

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var DailyRetentionBanner = exports.DailyRetentionBanner = function() {
            function DailyRetentionBanner(widgetEl) {
                var _this = this;
                _classCallCheck(this, DailyRetentionBanner);
                this.widgetEl = widgetEl;
                this.gamePageUrl = this.getGamePageUrl();
                this.loginModalEl = document.body.querySelector('[data-modal-id="loginModal"]');
                this.loginFormEl = this.loginModalEl.querySelector(".js-login");
                this.widgetEl.addEventListener("click", function(e) {
                    _this.handleBannerClick(e)
                })
            }
            _createClass(DailyRetentionBanner, [{
                key: "resetLoginRedirectUrl",
                value: function resetLoginRedirectUrl() {
                    if (this.loginFormEl.hasAttribute("data-return-url")) {
                        this.loginFormEl.dataset.returnUrl = this.oldLoginRedirectUrl
                    }(0, _events.unsubscribe)("hide:modal", "drgHideModalListener", this.loginModalEl)
                }
            }, {
                key: "handleBannerClick",
                value: function handleBannerClick(event) {
                    event.preventDefault();
                    (0, _events.subscribe)("hide:modal", this.resetLoginRedirectUrl, "drgHideModalListener", this.loginModalEl, this);
                    if (document.documentElement.classList.contains("authenticated")) {
                        window.location.href = this.gamePageUrl
                    } else {
                        this.setLoginRedirectUrl(this.gamePageUrl);
                        (0, _events.broadcast)("show:modal", this.loginModalEl, this.loginModalEl)
                    }
                }
            }, {
                key: "getGamePageUrl",
                value: function getGamePageUrl() {
                    var widgetElParent = this.widgetEl.parentElement;
                    return widgetElParent.tagName.toLowerCase() === "a" && widgetElParent.href
                }
            }, {
                key: "setLoginRedirectUrl",
                value: function setLoginRedirectUrl(redirectUrl) {
                    if (redirectUrl && this.loginFormEl.hasAttribute("data-return-url")) {
                        this.oldLoginRedirectUrl = this.loginFormEl.dataset.returnUrl;
                        this.loginFormEl.dataset.returnUrl = redirectUrl
                    }
                }
            }]);
            return DailyRetentionBanner
        }()
    }, {
        "components/events": 2
    }],
    420: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _serializeForm = require("helpers/serialize-form");
        var _serializeForm2 = _interopRequireDefault(_serializeForm);
        var _events = require("components/events");
        var _data = require("widgets/data");
        var _data2 = _interopRequireDefault(_data);
        var _dispatchEvent = require("helpers/dispatchEvent");
        var _dispatchEvent2 = _interopRequireDefault(_dispatchEvent);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i]
                }
                return arr2
            } else {
                return Array.from(arr)
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var FormWidget = function(_DataWidget) {
            _inherits(FormWidget, _DataWidget);

            function FormWidget(element) {
                _classCallCheck(this, FormWidget);
                var _this = _possibleConstructorReturn(this, (FormWidget.__proto__ || Object.getPrototypeOf(FormWidget)).call(this));
                _this.element = element;
                if (_this.element) {
                    _this.initialise()
                }
                return _this
            }
            _createClass(FormWidget, [{
                key: "initialise",
                value: function initialise() {
                    this.setup();
                    this.listen()
                }
            }, {
                key: "setup",
                value: function setup() {
                    this.opts = this.element.dataset;
                    this.messages = this.messages || {};
                    this.messages.genericError = this.opts.messageGenericError || "Error please try again later";
                    this.submitButton = this.element.querySelector("[data-submit]");
                    this.clearButton = this.element.querySelector("[data-clear]");
                    this.hasValidation = this.opts.hasOwnProperty("validate") ? this.opts.validate.toLowerCase() === "true" : false;
                    this.submitText = this.submitButton.innerHTML
                }
            }, {
                key: "getUrl",
                value: function getUrl() {
                    return this.element.getAttribute("action") || null
                }
            }, {
                key: "getMethod",
                value: function getMethod() {
                    return this.element.getAttribute("method").toLowerCase() || "get"
                }
            }, {
                key: "getBody",
                value: function getBody() {
                    return JSON.stringify((0, _serializeForm2.default)(this.element))
                }
            }, {
                key: "getElement",
                value: function getElement() {
                    return this.element
                }
            }, {
                key: "listen",
                value: function listen() {
                    var _this2 = this;
                    this.submitButton.addEventListener("click", function(ev) {
                        ev.preventDefault();
                        if (_this2.hasValidation) {
                            if (_this2.element.isValid()) {
                                _this2.submitForm()
                            } else {}
                        } else {
                            _this2.submitForm()
                        }
                    });
                    if (this.clearButton) {
                        this.clearButton.addEventListener("click", function(ev) {
                            ev.preventDefault();
                            var _arr = [].concat(_toConsumableArray(_this2.element.querySelectorAll("[type=text], [type=password]")));
                            for (var _i = 0; _i < _arr.length; _i++) {
                                var textInput = _arr[_i];
                                if (!textInput.hidden) {
                                    textInput.value = "";
                                    (0, _dispatchEvent2.default)("change", textInput)
                                }
                            }
                        })
                    }
                }
            }, {
                key: "submitForm",
                value: function submitForm() {
                    var _this3 = this;
                    this.submitMsg = this.submitButton.dataset.message;
                    this.submitButton.innerHTML = this.submitMsg || "Loading";
                    this.fetch().then(function(response) {
                        return _this3.handleSuccess(response)
                    }).catch(function(err) {
                        return _this3.handleErrors(err)
                    })
                }
            }, {
                key: "handleSuccess",
                value: function handleSuccess() {
                    this.submitButton.innerHTML = this.submitText
                }
            }, {
                key: "handleErrors",
                value: function handleErrors(err) {
                    var _this4 = this;
                    this.submitButton.innerHTML = this.submitText;
                    err.response.json().then(function(response) {
                        var key = function() {
                            if (response.Errors) return "Errors";
                            if (response.errors) return "errors";
                            return ""
                        }();
                        if (key && response[key]) {
                            var errors = response[key].map(function(e) {
                                return e.Message
                            });
                            var _iteratorNormalCompletion = true;
                            var _didIteratorError = false;
                            var _iteratorError = undefined;
                            try {
                                for (var _iterator = errors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                    var error = _step.value;
                                    (0, _events.broadcast)("notification:error", undefined, error)
                                }
                            } catch (err) {
                                _didIteratorError = true;
                                _iteratorError = err
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion && _iterator.return) {
                                        _iterator.return()
                                    }
                                } finally {
                                    if (_didIteratorError) {
                                        throw _iteratorError
                                    }
                                }
                            }
                        } else if (response.Message) {
                            (0, _events.broadcast)("notification:error", undefined, response.Message)
                        } else {
                            (0, _events.broadcast)("notification:error", undefined, _this4.messages.genericError)
                        }
                    })
                }
            }]);
            return FormWidget
        }(_data2.default);
        exports.default = FormWidget;
        module.exports = exports["default"]
    }, {
        "components/events": 2,
        "helpers/dispatchEvent": 405,
        "helpers/serialize-form": 17,
        "widgets/data": 22
    }],
    421: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);
            if (desc === undefined) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                    return undefined
                } else {
                    return get(parent, property, receiver)
                }
            } else if ("value" in desc) {
                return desc.value
            } else {
                var getter = desc.get;
                if (getter === undefined) {
                    return undefined
                }
                return getter.call(receiver)
            }
        };
        var _login = require("@bedegaming/casinotoolkit/src/scripts/widgets/login");
        var _login2 = _interopRequireDefault(_login);
        var _cookies = require("helpers/cookies");
        var _cookies2 = _interopRequireDefault(_cookies);
        var _fetch = require("helpers/fetch");
        var _fetch2 = _interopRequireDefault(_fetch);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Login = function(_CTLogin) {
            _inherits(Login, _CTLogin);

            function Login() {
                _classCallCheck(this, Login);
                return _possibleConstructorReturn(this, (Login.__proto__ || Object.getPrototypeOf(Login)).apply(this, arguments))
            }
            _createClass(Login, [{
                key: "setup",
                value: function setup() {
                    var _this2 = this;
                    _get(Login.prototype.__proto__ || Object.getPrototypeOf(Login.prototype), "setup", this).call(this);
                    this.recaptcha = this.element.querySelector("[data-sitekey]");
                    this.rememberMeControl = this.element.querySelector('[name="remember"]');
                    this.usernameControl = this.element.querySelector('[name="username"]');
                    this.liveChatMessage = this.element.querySelector(".live-chat-message");
                    this.errorsContainer = this.element.querySelector(".js-login-errors-container");
                    if (this.recaptcha) {
                        var recaptchaCallback = function recaptchaCallback(g) {
                            _this2.recaptchaInstance = g.render(_this2.recaptcha, {
                                sitekey: _this2.recaptcha.dataset.sitekey,
                                theme: "light",
                                size: "invisible",
                                callback: function callback(response) {
                                    return _this2.recaptchaCallback(response)
                                }
                            })
                        };
                        window.recaptchaInstances.push(recaptchaCallback)
                    }
                    var rememberMe = (0, _cookies2.default)("rememberMe");
                    this.usernameControl.value = rememberMe || "";
                    this.rememberMeControl.checked = rememberMe
                }
            }, {
                key: "submitForm",
                value: function submitForm() {
                    this.submitButton.addEventListener("click", function(ev) {
                        ev.preventDefault()
                    });
                    if (this.recaptcha) {
                        window.grecaptcha.execute(this.recaptchaInstance)
                    } else {
                        this.resetErrors();
                        _get(Login.prototype.__proto__ || Object.getPrototypeOf(Login.prototype), "submitForm", this).call(this)
                    }
                    if (this.rememberMeControl.checked) {
                        (0, _cookies2.default)("rememberMe", this.usernameControl.value)
                    }
                }
            }, {
                key: "recaptchaCallback",
                value: function recaptchaCallback(response) {
                    this.element.querySelector('[name="Response"]').value = response;
                    this.resetErrors();
                    _get(Login.prototype.__proto__ || Object.getPrototypeOf(Login.prototype), "submitForm", this).call(this)
                }
            }, {
                key: "handleErrors",
                value: function handleErrors(err) {
                    var _this3 = this;
                    this.submitButton.innerHTML = this.submitText;
                    this.liveChatMessage.classList.remove("hidden");
                    if (this.recaptcha) {
                        window.grecaptcha.reset(this.recaptchaInstance)
                    }
                    err.response.json().then(function(res) {
                        var _iteratorNormalCompletion = true;
                        var _didIteratorError = false;
                        var _iteratorError = undefined;
                        try {
                            for (var _iterator = res.errors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                var error = _step.value;
                                if (error.code === 404) {
                                    _this3.appendError(_this3.messages.notFound)
                                } else if (error.code === "ExpiredTerms") {
                                    var expiredTerms = document.createElement("input");
                                    expiredTerms.setAttribute("type", "hidden");
                                    expiredTerms.setAttribute("name", "agreeTerms");
                                    expiredTerms.setAttribute("value", "true");
                                    _this3.element.querySelector(".login-inputs").appendChild(expiredTerms);
                                    var oldTitle = _this3.element.parentNode.querySelector("h2");
                                    var newTitle = document.createElement("h4");
                                    newTitle.innerHTML = "Important Account Information";
                                    _this3.element.parentNode.replaceChild(newTitle, oldTitle);
                                    _this3.element.parentNode.querySelector("[data-submit-terms=true]").addEventListener("click", function(e) {
                                        e.preventDefault();
                                        var btn = e.target;
                                        btn.innerHTML = "Loading";
                                        _this3.element.querySelector("[type=submit]").click()
                                    });
                                    _this3.element.classList.add("hide");
                                    _this3.element.parentNode.querySelector(".terms").classList.remove("hide")
                                } else if (error.code === "SignInError") {
                                    (function() {
                                        var loginFormWrapper = document.querySelector(".js-suspended-error-wrap");
                                        var accountLockedWrapper = document.querySelector(".js-login-error-suspended-screen");
                                        var usernamefromForm = document.querySelector("#loginUsername").value;
                                        var localPlayerData = JSON.parse(localStorage.getItem("localAttemptsData"));
                                        var customErrorMessages = ["Login attempt unsuccessful. Try again.", "Final login attempt."];
                                        if (localPlayerData) {
                                            localPlayerData.forEach(function(player, index) {
                                                if (player.username === usernamefromForm) {
                                                    localPlayerData[index].failed_attempts += 1;
                                                    switch (player.failed_attempts) {
                                                        case 1:
                                                            _this3.appendError(customErrorMessages[0]);
                                                            _this3.changeResetLinks();
                                                            break;
                                                        case 2:
                                                        case 3:
                                                            _this3.appendError("<strong>Having Trouble?</strong>" + '<p><a class="login-links" href="/forgotten-password">Reset your password</a> or request a ' + '<a class="login-links" href="/forgotten-username">username reminder</a>' + " to prevent your account being locked.</p>");
                                                            _this3.changeResetLinks();
                                                            break;
                                                        case 4:
                                                            _this3.appendError("<strong>Having Trouble?</strong>" + '<p><a class="login-links" href="/forgotten-password">Reset your password</a> or request a ' + '<a class="login-links" href="/forgotten-username">username reminder</a>' + " to prevent your account being locked.</p>" + ("<p>" + customErrorMessages[1] + "</p>"));
                                                            _this3.changeResetLinks();
                                                            break;
                                                        case 5:
                                                            loginFormWrapper.classList.add("hidden");
                                                            accountLockedWrapper.classList.remove("hidden");
                                                            break;
                                                        default:
                                                            if (player.failed_attempts >= 3) {
                                                                loginFormWrapper.classList.add("hidden");
                                                                accountLockedWrapper.classList.remove("hidden")
                                                            }
                                                            break
                                                    }
                                                    localStorage.setItem("localAttemptsData", JSON.stringify(localPlayerData))
                                                } else {
                                                    if (localPlayerData.some(function(user) {
                                                            return user.username === usernamefromForm
                                                        })) {} else {
                                                        localPlayerData.push({
                                                            username: usernamefromForm,
                                                            failed_attempts: 1
                                                        });
                                                        localStorage.setItem("localAttemptsData", JSON.stringify(localPlayerData));
                                                        _this3.appendError(customErrorMessages[0]);
                                                        _this3.changeResetLinks()
                                                    }
                                                }
                                            })
                                        } else {
                                            var playerDataToSave = [{
                                                username: usernamefromForm,
                                                failed_attempts: 1
                                            }];
                                            localStorage.setItem("localAttemptsData", JSON.stringify(playerDataToSave));
                                            _this3.appendError(customErrorMessages[0]);
                                            _this3.changeResetLinks()
                                        }
                                    })()
                                } else {
                                    _this3.appendError(error.title)
                                }
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return()
                                }
                            } finally {
                                if (_didIteratorError) {
                                    throw _iteratorError
                                }
                            }
                        }
                    })
                }
            }, {
                key: "resetAttempts",
                value: function resetAttempts() {
                    var localPlayerData = JSON.parse(localStorage.getItem("localAttemptsData"));
                    var usernamefromForm = document.querySelector("#loginUsername").value;
                    if (localPlayerData) {
                        localPlayerData.forEach(function(player, index) {
                            if (player.username === usernamefromForm) {
                                localPlayerData[index].failed_attempts = 0;
                                localStorage.setItem("localAttemptsData", JSON.stringify(localPlayerData))
                            }
                        })
                    }
                }
            }, {
                key: "resetErrors",
                value: function resetErrors() {
                    while (this.errorsContainer.firstChild) {
                        this.errorsContainer.removeChild(this.errorsContainer.firstChild)
                    }
                }
            }, {
                key: "appendError",
                value: function appendError(err) {
                    var errorElement = document.createElement("div");
                    errorElement.classList.add("login-error-container");
                    errorElement.innerHTML = '<div class="red-circle"><span class="i-position">i</span></div>\n      <div class="error-margin">' + err + "</div>";
                    this.errorsContainer.appendChild(errorElement)
                }
            }, {
                key: "changeResetLinks",
                value: function changeResetLinks() {
                    var plainResetLinks = document.querySelector(".js-login-reset-links-container");
                    var buttonResetLinks = document.querySelector(".js-login-reset-button-container");
                    var buttonLiveChatLink = document.querySelector(".js-button-live-chat-message");
                    plainResetLinks.classList.add("hidden");
                    buttonResetLinks.classList.remove("hidden");
                    buttonLiveChatLink.classList.remove("hidden")
                }
            }, {
                key: "handleSuccess",
                value: function handleSuccess() {
                    var _this4 = this;
                    this.resetErrors();
                    window.demoPlayService.resetDemoPlayData();
                    this.resetAttempts();
                    if (typeof window.dataLayer !== "undefined") {
                        (0, _fetch2.default)("/api/Lobby/PlayerToken").then(function(response) {
                            if (response) {
                                window.dataLayer.push({
                                    BedePlayerId: response.UserId,
                                    event: "login"
                                })
                            }
                            _this4.changeLocation()
                        })
                    } else {
                        this.changeLocation()
                    }
                    var event = void 0;
                    if (typeof Event === "function") {
                        event = new Event("registration-success")
                    } else {
                        event = document.createEvent("Event");
                        event.initEvent("registration-success", true, true)
                    }
                    window.dispatchEvent(event)
                }
            }, {
                key: "changeLocation",
                value: function changeLocation() {
                    var destination = window.location.href;
                    if (this.inheritRedirectUrl) {
                        destination = this.opts.returnUrl
                    }
                    if (!destination || window.location.href.toUpperCase() === destination.toUpperCase()) {
                        window.location.reload()
                    } else {
                        window.location.href = destination
                    }
                }
            }]);
            return Login
        }(_login2.default);
        exports.default = Login;
        module.exports = exports["default"]
    }, {
        "@bedegaming/casinotoolkit/src/scripts/widgets/login": 24,
        "helpers/cookies": 9,
        "helpers/fetch": 12
    }],
    422: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);
            if (desc === undefined) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                    return undefined
                } else {
                    return get(parent, property, receiver)
                }
            } else if ("value" in desc) {
                return desc.value
            } else {
                var getter = desc.get;
                if (getter === undefined) {
                    return undefined
                }
                return getter.call(receiver)
            }
        };
        var _form = require("widgets/form");
        var _form2 = _interopRequireDefault(_form);
        var _memoizeFetch = require("helpers/memoize-fetch");
        var _memoizeFetch2 = _interopRequireDefault(_memoizeFetch);
        var _events = require("components/events");

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i]
                }
                return arr2
            } else {
                return Array.from(arr)
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var MarketingPreferences = function(_FormWidget) {
            _inherits(MarketingPreferences, _FormWidget);

            function MarketingPreferences() {
                _classCallCheck(this, MarketingPreferences);
                return _possibleConstructorReturn(this, (MarketingPreferences.__proto__ || Object.getPrototypeOf(MarketingPreferences)).apply(this, arguments))
            }
            _createClass(MarketingPreferences, [{
                key: "setup",
                value: function setup() {
                    var _this2 = this;
                    _get(MarketingPreferences.prototype.__proto__ || Object.getPrototypeOf(MarketingPreferences.prototype), "setup", this).call(this);
                    this.inputs = [].concat(_toConsumableArray(this.element.querySelectorAll("input"))).reduce(function(acc, el) {
                        acc[el.name] = el;
                        return acc
                    }, {});
                    (0, _memoizeFetch2.default)("/api/personaldetailswidget/getpersonaldetails").then(function(response) {
                        _this2.inputs.email.checked = response.MarketingOptInEmail;
                        _this2.inputs.sms.checked = response.MarketingOptInSms;
                        _this2.inputs.telephone.checked = response.MarketingOptInTelephone;
                        _this2.inputs.post.checked = response.MarketingOptInPost
                    })
                }
            }, {
                key: "getBody",
                value: function getBody() {
                    return JSON.stringify({
                        email: this.inputs.email.checked,
                        sms: this.inputs.sms.checked,
                        telephone: this.inputs.telephone.checked,
                        post: this.inputs.post.checked
                    })
                }
            }, {
                key: "handleSuccess",
                value: function handleSuccess() {
                    _get(MarketingPreferences.prototype.__proto__ || Object.getPrototypeOf(MarketingPreferences.prototype), "handleSuccess", this).call(this);
                    (0, _events.broadcast)("notification:success", undefined, "Your marketing preferences have been updated.")
                }
            }]);
            return MarketingPreferences
        }(_form2.default);
        exports.default = MarketingPreferences;
        module.exports = exports["default"]
    }, {
        "components/events": 2,
        "helpers/memoize-fetch": 13,
        "widgets/form": 420
    }],
    423: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _data = require("widgets/data");
        var _data2 = _interopRequireDefault(_data);
        var _memoizeFetch = require("helpers/memoize-fetch");
        var _memoizeFetch2 = _interopRequireDefault(_memoizeFetch);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i]
                }
                return arr2
            } else {
                return Array.from(arr)
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var _class = function(_DataWidget) {
            _inherits(_class, _DataWidget);

            function _class() {
                _classCallCheck(this, _class);
                var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));
                _this.optInButtons = [].concat(_toConsumableArray(document.querySelectorAll(".js-promo-opt-in-btn")));
                _this.depositButtons = [].concat(_toConsumableArray(document.querySelectorAll(".js-promo-deposit-btn")));
                _this.instantClaimButtons = [].concat(_toConsumableArray(document.querySelectorAll(".js-instant-promo-claim-btn")));
                _this.pageElements = [].concat(_toConsumableArray(document.querySelectorAll("[data-associated-claim-bonus-id]")));
                _this.isOptInPromotion = false;
                _this.isInstantPromotion = false;
                _this.isDepositPromotion = false;
                _this.allClaimButtons = [_this.optInButtons, _this.instantClaimButtons, _this.depositButtons];
                _this.supportedBonusTypes = ["OptIn", "Instant", "Deposit"];
                _this.depositButton = document.querySelector(".js-promotions-container");
                _this.depositOKButton = document.querySelector(".js-deposit-url");
                _this.promotionGameContainer = document.querySelector(".js-promo-detail-game-tile-container");
                (0, _memoizeFetch2.default)("/api/bonuses?take=1000&includeUnclaimable=true").then(function(response) {
                    _this.eligibleBonusesWithPromoCode = [].concat(_toConsumableArray(new Set(response.filter(function(bonus) {
                        return bonus
                    }).map(function(bonus) {
                        return {
                            bonus_id: bonus.id.toString(),
                            promo_code: bonus.promoCode,
                            bonus_type: bonus.bonusType,
                            bonus_claimable: bonus.canBeClaimed,
                            bonus_title: bonus.title
                        }
                    }))));
                    _this.appendPromoCode();
                    if (document.documentElement.classList.contains("detail-promotion")) {
                        _this.showClaimBtns()
                    }
                }).catch(function(error) {
                    throw error
                });
                if (document.documentElement.classList.contains("authenticated")) {
                    document.addEventListener("click", function(e) {
                        if (e.target.classList.contains("js-one-click-claim-btn") && e.target.dataset.promoCode && !e.target.classList.contains("js-promo-deposit-btn")) {
                            e.preventDefault();
                            _this.claimBonus(e.target)
                        }
                        if (e.target.classList.contains("js-promo-opted-in-btn")) {
                            e.preventDefault()
                        }
                    })
                } else {
                    _this.setupLoginModal(_this.allClaimButtons);
                    document.addEventListener("click", function(e) {
                        if (document.documentElement.classList.contains("detail-promotion") || document.querySelectorAll(".js-promotions-page")) {
                            window.promotionReturnURL = document.URL
                        }
                        if (e.target.classList.contains("js-one-click-claim-btn") && e.target.dataset.target) {
                            e.preventDefault();
                            window.scrollTo(0, 0)
                        }
                    })
                }
                return _this
            }
            _createClass(_class, [{
                key: "appendPromoCode",
                value: function appendPromoCode() {
                    var _this2 = this;
                    this.eligibleBonusesWithPromoCode.forEach(function(bonus) {
                        if (bonus.bonus_type === "OptIn") {
                            _this2.pageElements.forEach(function(element) {
                                if (element.getAttribute("data-associated-claim-bonus-id") === bonus.bonus_id) {
                                    var button = element.querySelector(".js-promo-opt-in-btn");
                                    if (button !== null) {
                                        button.setAttribute("data-promo-code", bonus.promo_code);
                                        button.classList.remove("hidden");
                                        _this2.isOptInPromotion = true
                                    }
                                }
                            })
                        }
                        if (bonus.bonus_type === "Instant") {
                            _this2.pageElements.forEach(function(element) {
                                if (element.getAttribute("data-associated-claim-bonus-id") === bonus.bonus_id) {
                                    var button = element.querySelector(".js-instant-promo-claim-btn");
                                    if (button !== null) {
                                        button.setAttribute("data-promo-code", bonus.promo_code);
                                        button.classList.remove("hidden");
                                        _this2.isInstantPromotion = true
                                    }
                                }
                            })
                        }
                        if (bonus.bonus_type === "Deposit") {
                            _this2.pageElements.forEach(function(element) {
                                if (element.getAttribute("data-associated-claim-bonus-id") === bonus.bonus_id) {
                                    var button = element.querySelector(".js-promo-deposit-btn");
                                    if (button !== null) {
                                        button.setAttribute("href", "/deposit?PromoCode=" + bonus.promo_code + "&ReturnUrl=" + window.location.pathname);
                                        button.classList.remove("hidden");
                                        _this2.isDepositPromotion = true
                                    }
                                }
                            })
                        }
                    })
                }
            }, {
                key: "claimBonus",
                value: function claimBonus(clickedButton) {
                    var _this3 = this;
                    if (clickedButton.getAttribute("data-promo-code") !== null) {
                        var claimBonusBtn = clickedButton;
                        var claimBonusBtnParent = claimBonusBtn.parentElement;
                        var claimedBonusBtn = claimBonusBtnParent.querySelector(".js-promo-opted-in-btn");
                        var optedInRemove = document.querySelector(".optedin-remove");
                        this.fetch("/api/bonuses/activate/" + claimBonusBtn.getAttribute("data-promo-code"), {
                            method: "PATCH"
                        }).then(function(response) {
                            if (response.ok) {
                                claimBonusBtn.classList.add("hidden");
                                claimedBonusBtn.classList.remove("hidden");
                                if (document.documentElement.classList.contains("detail-promotion")) {
                                    optedInRemove.classList.add("hidden");
                                    _this3.promotionGameContainer.classList.remove("hidden");
                                    var SlideContainerWidth = _this3.promotionGameContainer.querySelector(".js-slider-container").clientWidth;
                                    var GameTileWidth = _this3.promotionGameContainer.querySelector(".js-game-item").clientWidth * _this3.promotionGameContainer.querySelectorAll(".js-game-item").length;
                                    if (SlideContainerWidth > GameTileWidth) {
                                        _this3.promotionGameContainer.querySelector(".js-slider-btn-container").classList.add("hide")
                                    }
                                }
                            }
                        }).catch(function(error) {
                            throw error
                        })
                    }
                }
            }, {
                key: "showClaimBtns",
                value: function showClaimBtns() {
                    var _this4 = this;
                    var detailsEligibility = document.querySelector(".js-promo-detail-eligibilty-wrapper");
                    if (detailsEligibility !== null) {
                        var promoType = document.querySelector(".promo-custom-btn").getAttribute("data-has-promo-type");
                        this.eligibleBonusesWithPromoCode.forEach(function(bonus) {
                            if (_this4.supportedBonusTypes.includes(bonus.bonus_type) && bonus.bonus_claimable) {
                                _this4.pageElements.forEach(function(element) {
                                    if (element.getAttribute("data-associated-claim-bonus-id") === bonus.bonus_id) {
                                        document.querySelector(".promo-optin-btn").classList.remove("hidden")
                                    }
                                })
                            } else if (_this4.supportedBonusTypes.includes(bonus.bonus_type) && !bonus.bonus_claimable) {
                                _this4.pageElements.forEach(function(element) {
                                    if (element.getAttribute("data-associated-claim-bonus-id") === bonus.bonus_id) {
                                        document.querySelector(".promo-custom-btn").classList.add("hidden")
                                    }
                                })
                            }
                        });
                        if (!this.isOptInPromotion && !this.isInstantPromotion && !this.isDepositPromotion && promoType === "true") {
                            document.querySelector(".promo-custom-btn").classList.remove("hidden")
                        }
                    }
                }
            }, {
                key: "setupLoginModal",
                value: function setupLoginModal(allClaimButtons) {
                    allClaimButtons.forEach(function(buttonGroup) {
                        buttonGroup.forEach(function(oneClickClaimButton) {
                            oneClickClaimButton.setAttribute("data-target", "loginModal");
                            oneClickClaimButton.setAttribute("data-toggle", "modal")
                        })
                    })
                }
            }]);
            return _class
        }(_data2.default);
        exports.default = _class;
        module.exports = exports["default"]
    }, {
        "helpers/memoize-fetch": 13,
        "widgets/data": 22
    }],
    424: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _form = require("widgets/form");
        var _form2 = _interopRequireDefault(_form);
        var _events = require("components/events");
        var _dispatchEvent = require("helpers/dispatchEvent");
        var _dispatchEvent2 = _interopRequireDefault(_dispatchEvent);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i]
                }
                return arr2
            } else {
                return Array.from(arr)
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var PasswordReset = function(_FormWidget) {
            _inherits(PasswordReset, _FormWidget);

            function PasswordReset(element) {
                _classCallCheck(this, PasswordReset);
                var _this = _possibleConstructorReturn(this, (PasswordReset.__proto__ || Object.getPrototypeOf(PasswordReset)).call(this, element));
                if (element) {
                    _this.defaultErrorMsg = element.dataset.defaultErrorMsg
                }
                return _this
            }
            _createClass(PasswordReset, [{
                key: "getMethod",
                value: function getMethod() {
                    return "put"
                }
            }, {
                key: "listen",
                value: function listen() {
                    var _this2 = this;
                    this.submitButton.addEventListener("click", function(ev) {
                        ev.preventDefault();
                        _this2.submitForm();
                        document.querySelector("[data-submit=submit-btn]").setAttribute("disabled", "")
                    });
                    if (this.clearButton) {
                        this.clearButton.addEventListener("click", function(ev) {
                            ev.preventDefault();
                            var _arr = [].concat(_toConsumableArray(_this2.element.querySelectorAll("[type=text], [type=password]")));
                            for (var _i = 0; _i < _arr.length; _i++) {
                                var textInput = _arr[_i];
                                if (!textInput.hidden) {
                                    textInput.value = "";
                                    (0, _dispatchEvent2.default)("change", textInput)
                                }
                            }
                        })
                    }
                }
            }, {
                key: "handleSuccess",
                value: function handleSuccess() {
                    document.querySelector('[data-target="loginModal"]').click();
                    document.querySelector('[data-id="reset-success"]').classList.remove("hide");
                    document.querySelector('[data-modal-id="loginModal"] .close').addEventListener("click", function() {
                        location.assign("/")
                    });
                    var notifErrorBtn = document.querySelector(".notification--error button");
                    if (notifErrorBtn) {
                        notifErrorBtn.click()
                    }
                }
            }, {
                key: "handleErrors",
                value: function handleErrors() {
                    this.submitButton.innerHTML = this.submitText;
                    (0, _events.broadcast)("notification:error", undefined, this.defaultErrorMsg);
                    document.querySelector("[data-submit=submit-btn]").removeAttribute("disabled")
                }
            }]);
            return PasswordReset
        }(_form2.default);
        exports.default = PasswordReset;
        module.exports = exports["default"]
    }, {
        "components/events": 2,
        "helpers/dispatchEvent": 405,
        "widgets/form": 420
    }],
    425: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _form = require("widgets/form");
        var _form2 = _interopRequireDefault(_form);
        var _events = require("components/events");

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var RequestResetPassword = function(_FormWidget) {
            _inherits(RequestResetPassword, _FormWidget);

            function RequestResetPassword(element) {
                _classCallCheck(this, RequestResetPassword);
                var _this = _possibleConstructorReturn(this, (RequestResetPassword.__proto__ || Object.getPrototypeOf(RequestResetPassword)).call(this, element));
                if (element) {
                    _this.responseContainer = document.querySelector("[data-id=" + element.dataset.responseContainer + "]");
                    _this.defaultErrorMsg = element.dataset.defaultErrorMsg
                }
                return _this
            }
            _createClass(RequestResetPassword, [{
                key: "getMethod",
                value: function getMethod() {
                    return "post"
                }
            }, {
                key: "listen",
                value: function listen() {
                    var _this2 = this;
                    this.submitButton.addEventListener("click", function(ev) {
                        ev.preventDefault();
                        _this2.submitForm();
                        _this2.submitButton.setAttribute("disabled", "disabled")
                    })
                }
            }, {
                key: "handleSuccess",
                value: function handleSuccess() {
                    this.element.classList.add("hide");
                    this.responseContainer.querySelector(".js-reset-success").classList.remove("hide");
                    var notifErrorBtn = document.querySelector(".notification--error button");
                    if (notifErrorBtn) {
                        notifErrorBtn.click()
                    }
                }
            }, {
                key: "handleErrors",
                value: function handleErrors() {
                    this.submitButton.innerHTML = this.submitText;
                    (0, _events.broadcast)("notification:error", undefined, this.defaultErrorMsg);
                    this.submitButton.removeAttribute("disabled")
                }
            }]);
            return RequestResetPassword
        }(_form2.default);
        exports.default = RequestResetPassword;
        module.exports = exports["default"]
    }, {
        "components/events": 2,
        "widgets/form": 420
    }],
    426: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _form = require("widgets/form");
        var _form2 = _interopRequireDefault(_form);
        var _events = require("components/events");

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var RequestUsernameReminder = function(_FormWidget) {
            _inherits(RequestUsernameReminder, _FormWidget);

            function RequestUsernameReminder(element) {
                _classCallCheck(this, RequestUsernameReminder);
                var _this = _possibleConstructorReturn(this, (RequestUsernameReminder.__proto__ || Object.getPrototypeOf(RequestUsernameReminder)).call(this, element));
                if (element) {
                    _this.responseContainer = document.querySelector("[data-id=" + element.dataset.responseContainer + "]");
                    _this.defaultErrorMsg = element.dataset.defaultErrorMsg
                }
                return _this
            }
            _createClass(RequestUsernameReminder, [{
                key: "listen",
                value: function listen() {
                    var _this2 = this;
                    this.submitButton.addEventListener("click", function(ev) {
                        ev.preventDefault();
                        if (_this2.element.isValid()) {
                            _this2.submitForm();
                            _this2.submitButton.setAttribute("disabled", "disabled")
                        }
                    })
                }
            }, {
                key: "handleSuccess",
                value: function handleSuccess() {
                    this.element.classList.add("hide");
                    var successMessage = this.responseContainer.querySelector(".js-reminder-success-message");
                    successMessage.innerHTML = successMessage.innerHTML.replace("{{email}}", this.element.querySelector("#email").value);
                    this.responseContainer.querySelector(".js-reminder-success").classList.remove("hide");
                    var notifErrorBtn = document.querySelector(".notification--error button");
                    if (notifErrorBtn) {
                        notifErrorBtn.click()
                    }
                }
            }, {
                key: "handleErrors",
                value: function handleErrors() {
                    this.submitButton.innerHTML = this.submitText;
                    (0, _events.broadcast)("notification:error", undefined, this.defaultErrorMsg);
                    this.submitButton.removeAttribute("disabled")
                }
            }]);
            return RequestUsernameReminder
        }(_form2.default);
        exports.default = RequestUsernameReminder;
        module.exports = exports["default"]
    }, {
        "components/events": 2,
        "widgets/form": 420
    }],
    427: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
            return typeof obj
        } : function(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj
        };
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _memoizeFetch = require("helpers/memoize-fetch");
        var _memoizeFetch2 = _interopRequireDefault(_memoizeFetch);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var TargetedBonusRedirect = function() {
            function TargetedBonusRedirect(element) {
                var _this = this;
                _classCallCheck(this, TargetedBonusRedirect);
                this.bonusCodeList = element.dataset.bonusCodes.split(",");
                this.bonusIdList = element.dataset.bonusIds.split(",");
                this.urlList = element.dataset.urls.split(",");
                if (this.bonusCodeList.length !== this.urlList.length || this.bonusIdList.length !== this.urlList.length) return;
                (0, _memoizeFetch2.default)("/api/bonuses?take=1000&includeUnclaimable=true").then(function(response) {
                    _this.redirectIfEligible(response)
                })
            }
            _createClass(TargetedBonusRedirect, [{
                key: "redirectIfEligible",
                value: function redirectIfEligible(response) {
                    var _this2 = this;
                    var _loop = function _loop(i) {
                        var bonuses = response.filter(function(b) {
                            return b.promoCode.toLowerCase() === _this2.bonusCodeList[i].toLowerCase() || b.id.toString() === _this2.bonusIdList[i]
                        });
                        if (bonuses.length === 0) return "continue";
                        var url = _this2.urlList[i];
                        var currentUrl = (location.pathname + location.search).substr(1);
                        if (_this2.urlList[i].startsWith("~/")) {
                            url = _this2.urlList[i].substring(2)
                        } else if (_this2.urlList[i].startsWith("/")) {
                            url = _this2.urlList[i].substring(1)
                        }
                        if (url === "" || url === currentUrl) return {
                            v: void 0
                        };
                        url += url.indexOf("?") > -1 ? "&PromoCode=" + bonuses[0].promoCode : "?PromoCode=" + bonuses[0].promoCode;
                        _this2.showLoaderOverlay();
                        setTimeout(function() {
                            window.location.href = url
                        }, 3500);
                        return "break"
                    };
                    _loop2: for (var i = 0; i < this.urlList.length; i++) {
                        var _ret = _loop(i);
                        switch (_ret) {
                            case "continue":
                                continue;
                            case "break":
                                break _loop2;
                            default:
                                if ((typeof _ret === "undefined" ? "undefined" : _typeof(_ret)) === "object") return _ret.v
                        }
                    }
                }
            }, {
                key: "showLoaderOverlay",
                value: function showLoaderOverlay() {
                    setTimeout(function() {
                        return document.querySelector(".js-loading-overlay").classList.remove("hide")
                    }, 1750)
                }
            }]);
            return TargetedBonusRedirect
        }();
        exports.default = TargetedBonusRedirect;
        module.exports = exports["default"]
    }, {
        "helpers/memoize-fetch": 13
    }],
    428: [function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _data = require("widgets/data");
        var _data2 = _interopRequireDefault(_data);
        var _encode = require("helpers/encode");
        var _encode2 = _interopRequireDefault(_encode);
        var _serializeForm = require("helpers/serialize-form");
        var _serializeForm2 = _interopRequireDefault(_serializeForm);
        var _moment = require("moment");
        var _moment2 = _interopRequireDefault(_moment);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            }
        }

        function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i]
                }
                return arr2
            } else {
                return Array.from(arr)
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var TransactionHistory = function(_DataWidget) {
            _inherits(TransactionHistory, _DataWidget);

            function TransactionHistory(element) {
                _classCallCheck(this, TransactionHistory);
                var _this = _possibleConstructorReturn(this, (TransactionHistory.__proto__ || Object.getPrototypeOf(TransactionHistory)).call(this));
                _this.element = element;
                _this.filter = _this.element.querySelector(".js-filter");
                _this.filterSubmit = _this.filter.querySelector("#historyFilterSubmit");
                _this.activityType = _this.filter.querySelector("#activityType");
                _this.sortStartDate = _this.filter.querySelector("#sortStartDate");
                _this.sortEndDate = _this.filter.querySelector("#sortEndDate");
                _this.table = _this.element.querySelector("#transactionHistory");
                _this.tableBody = _this.element.querySelector("tbody");
                _this.itemTemplate = _this.tableBody.querySelector('[role="listitem"]');
                _this.itemTemplate.parentNode.removeChild(_this.itemTemplate).classList.remove("hide");
                _this.status = _this.tableBody.querySelector(".js-status");
                _this.statusText = _this.status.querySelector("td");
                _this.filterSummary = _this.element.querySelector("#summaryDate");
                _this.summaryTable = _this.element.querySelector("#transactionHistorySummary");
                _this.summaryTableBody = _this.summaryTable.querySelector("tbody");
                _this.summaryList = _this.summaryTable.querySelector('[role="list"]');
                _this.summaryTemplate = _this.summaryTable.querySelector('[role="listitem"]');
                _this.summaryTemplate.parentNode.removeChild(_this.summaryTemplate);
                _this.summaryStatus = _this.summaryTable.querySelector(".js-summary-status");
                _this.summaryStatusText = _this.summaryStatus.querySelector("td");
                _this.summaryInfo = _this.element.querySelector(".js-summary-info");
                _this.page = document.querySelector(".js-pagination");
                _this.pageList = _this.page.querySelector(".js-pagination-list");
                _this.pageEntries = _this.page.querySelector(".js-showing-page");
                _this.pageCurrent = 1;
                _this.pageSize = 1;
                _this.startDateEl = _this.element.querySelector("#sortStartDate");
                _this.endDateEl = _this.element.querySelector("#sortEndDate");
                _this.urlParams = {
                    skip: 0,
                    take: 10,
                    startDate: (0, _moment2.default)().subtract(30, "days").format("YYYY-MM-DD"),
                    endDate: (0, _moment2.default)().format("YYYY-MM-DD"),
                    category: "All",
                    type: ""
                };
                if (!zeus.core.isMobile) {
                    var datePickerOpts = {
                        format: "dd/mm/yyyy",
                        autoclose: true,
                        endDate: "0"
                    };
                    $("#sortStartDate").datepicker(datePickerOpts);
                    $("#sortEndDate").datepicker(datePickerOpts)
                }
                _this.filterSubmit.addEventListener("click", function(e) {
                    e.preventDefault();
                    _this.getTransactionHistory()
                });
                _this.filter.querySelector("#historyFilterReset").addEventListener("click", function(e) {
                    e.preventDefault();
                    _this.element.querySelector(".js-history-summary-date").classList.add("hide");
                    _this.element.querySelector(".js-history-start-date").classList.remove("hide");
                    _this.element.querySelector(".js-history-end-date").classList.remove("hide");
                    _this.activityType.value = "All";
                    var dateFormat = !zeus.core.isMobile ? "DD/MM/YYYY" : "YYYY-MM-DD";
                    var startDate = (0, _moment2.default)().subtract("30", "d").format(dateFormat).toString();
                    var endDate = (0, _moment2.default)().format(dateFormat).toString();
                    _this.startDateEl.value = startDate;
                    _this.endDateEl.value = endDate;
                    _this.getTransactionHistory()
                });
                _this.activityType.addEventListener("change", function(e) {
                    e.preventDefault();
                    if (_this.activityType.value === "NetDeposits") {
                        _this.element.querySelector(".js-history-summary-date").classList.remove("hide");
                        _this.element.querySelector(".js-history-start-date").classList.add("hide");
                        _this.element.querySelector(".js-history-end-date").classList.add("hide")
                    } else {
                        _this.element.querySelector(".js-history-summary-date").classList.add("hide");
                        _this.element.querySelector(".js-history-start-date").classList.remove("hide");
                        _this.element.querySelector(".js-history-end-date").classList.remove("hide")
                    }
                });
                _this.paginationReset();
                _this.updateTransactionHistory();
                return _this
            }
            _createClass(TransactionHistory, [{
                key: "getTransactionHistory",
                value: function getTransactionHistory() {
                    var filter = (0, _serializeForm2.default)(this.filter);
                    if (!zeus.core.isMobile) {
                        filter.startDate = (0, _moment2.default)(filter.startDate, "DD/MM/YYYY").format("YYYY-MM-DD");
                        filter.endDate = (0, _moment2.default)(filter.endDate, "DD/MM/YYYY").format("YYYY-MM-DD")
                    }
                    if (this.activityType.value === "NetDeposits") {
                        this.transactionSummary(this.filterSummary.value)
                    } else {
                        if (filter.category === "Deposit" || filter.category === "Withdrawal") {
                            filter.type = filter.category;
                            filter.category = "Banking"
                        } else {
                            filter.type = ""
                        }
                        this.filterSubmit.disabled = true;
                        this.paginationReset();
                        this.updateTransactionHistory(filter)
                    }
                }
            }, {
                key: "updateTransactionHistory",
                value: function updateTransactionHistory(updatedParams) {
                    var _this2 = this;
                    this.summaryTable.classList.add("hide");
                    this.summaryInfo.classList.add("hide");
                    this.table.classList.remove("hide");
                    this.page.classList.remove("hide");
                    var _arr = [].concat(_toConsumableArray(this.tableBody.querySelectorAll('[role="listitem"]')));
                    for (var _i = 0; _i < _arr.length; _i++) {
                        var row = _arr[_i];
                        row.parentNode.removeChild(row)
                    }
                    this.statusText.innerHTML = this.status.dataset.loading;
                    this.status.classList.remove("hide");
                    this.fetch("/api/transactionhistory?" + (0, _encode2.default)(Object.assign(this.urlParams, updatedParams))).then(function(response) {
                        if (response.items.length) {
                            var emptyRow = _this2.itemTemplate.cloneNode(true);
                            emptyRow.classList.add("hide");
                            _this2.tableBody.appendChild(emptyRow);
                            var _iteratorNormalCompletion = true;
                            var _didIteratorError = false;
                            var _iteratorError = undefined;
                            try {
                                for (var _iterator = response.items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                    var transaction = _step.value;
                                    var item = _this2.itemTemplate.cloneNode(true);
                                    for (var prop in transaction) {
                                        if (transaction.hasOwnProperty(prop)) {
                                            if (prop === "effects") {
                                                var effects = transaction[prop];
                                                var _iteratorNormalCompletion2 = true;
                                                var _didIteratorError2 = false;
                                                var _iteratorError2 = undefined;
                                                try {
                                                    for (var _iterator2 = effects[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                                        var effect = _step2.value;
                                                        var _loop = function _loop(effectProp) {
                                                            if (effect.hasOwnProperty(effectProp)) {
                                                                var data = item.querySelector('[data-prop="' + effectProp + '"]');
                                                                if (data) {
                                                                    if (effectProp === "wallet") {
                                                                        data.innerHTML = effects.map(function(e) {
                                                                            return e[effectProp]
                                                                        }).join("<br />")
                                                                    } else if (effectProp === "balance" || effectProp === "effect") {
                                                                        data.innerHTML = effects.map(function(e) {
                                                                            return "&pound;" + parseFloat(e[effectProp]).toFixed(2)
                                                                        }).join("<br />")
                                                                    }
                                                                }
                                                            }
                                                        };
                                                        for (var effectProp in effect) {
                                                            _loop(effectProp)
                                                        }
                                                        break
                                                    }
                                                } catch (err) {
                                                    _didIteratorError2 = true;
                                                    _iteratorError2 = err
                                                } finally {
                                                    try {
                                                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                                            _iterator2.return()
                                                        }
                                                    } finally {
                                                        if (_didIteratorError2) {
                                                            throw _iteratorError2
                                                        }
                                                    }
                                                }
                                            } else {
                                                var data = item.querySelector('[data-prop="' + prop + '"]');
                                                if (data) {
                                                    if (prop === "transactionDate") {
                                                        data.innerHTML = (0, _moment2.default)(transaction[prop]).format("DD/MM/YYYY HH:mm")
                                                    } else if (prop === "amount" || prop === "balance" || prop === "effect") {
                                                        data.innerHTML = "&pound;" + parseFloat(transaction[prop]).toFixed(2)
                                                    } else {
                                                        data.innerHTML = transaction[prop]
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _this2.tableBody.appendChild(item)
                                }
                            } catch (err) {
                                _didIteratorError = true;
                                _iteratorError = err
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion && _iterator.return) {
                                        _iterator.return()
                                    }
                                } finally {
                                    if (_didIteratorError) {
                                        throw _iteratorError
                                    }
                                }
                            }
                            _this2.status.classList.add("hide");
                            _this2.filterSubmit.disabled = false;
                            _this2.pagination(response)
                        } else {
                            _this2.statusText.innerHTML = "No account activity found";
                            _this2.filterSubmit.disabled = false;
                            _this2.paginationReset()
                        }
                    }).catch(function(err) {
                        if (err.response.status === 500) {
                            _this2.statusText.innerHTML = "An Error has occured please try again"
                        } else {
                            err.response.json().then(function(res) {
                                var _iteratorNormalCompletion3 = true;
                                var _didIteratorError3 = false;
                                var _iteratorError3 = undefined;
                                try {
                                    for (var _iterator3 = res.errors[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                                        var error = _step3.value;
                                        _this2.statusText.innerHTML = error.title
                                    }
                                } catch (err) {
                                    _didIteratorError3 = true;
                                    _iteratorError3 = err
                                } finally {
                                    try {
                                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                            _iterator3.return()
                                        }
                                    } finally {
                                        if (_didIteratorError3) {
                                            throw _iteratorError3
                                        }
                                    }
                                }
                            })
                        }
                        _this2.paginationReset();
                        _this2.filterSubmit.disabled = false;
                        _this2.status.classList.remove("hide")
                    })
                }
            }, {
                key: "transactionSummary",
                value: function transactionSummary(period) {
                    var _this3 = this;
                    this.summaryTable.classList.remove("hide");
                    this.summaryInfo.classList.remove("hide");
                    this.table.classList.add("hide");
                    this.page.classList.add("hide");
                    var _arr2 = [].concat(_toConsumableArray(this.summaryTableBody.querySelectorAll('[role="listitem"]')));
                    for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
                        var row = _arr2[_i2];
                        row.parentNode.removeChild(row)
                    }
                    this.fetch("/api/bankingsummary").then(function(response) {
                        var filtered = response.filter(function(_ref) {
                            var Period = _ref.Period;
                            return Period === period
                        });
                        _this3.filterSummary.value = period;
                        if (filtered.length) {
                            var _iteratorNormalCompletion4 = true;
                            var _didIteratorError4 = false;
                            var _iteratorError4 = undefined;
                            try {
                                for (var _iterator4 = filtered[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                                    var transaction = _step4.value;
                                    var item = _this3.summaryTemplate.cloneNode(true);
                                    for (var prop in transaction) {
                                        if (transaction.hasOwnProperty(prop)) {
                                            var data = item.querySelector('[data-prop="' + prop + '"]');
                                            if (data) {
                                                if (prop === "ActualTotalDeposits" || prop === "ActualTotalWithdrawals" || prop === "NetDeposits") {
                                                    data.innerHTML = "&pound;" + parseFloat(transaction[prop]).toFixed(2)
                                                } else {
                                                    data.innerHTML = transaction[prop]
                                                }
                                            }
                                        }
                                    }
                                    _this3.summaryList.appendChild(item)
                                }
                            } catch (err) {
                                _didIteratorError4 = true;
                                _iteratorError4 = err
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                                        _iterator4.return()
                                    }
                                } finally {
                                    if (_didIteratorError4) {
                                        throw _iteratorError4
                                    }
                                }
                            }
                            _this3.summaryStatus.classList.add("hide")
                        } else {
                            _this3.summaryStatus.classList.remove("hide");
                            _this3.summaryStatusText.innerHTML = "No account activity found"
                        }
                    }).catch(function(err) {
                        if (err.response.status === 500) {
                            _this3.summaryStatusText.innerHTML = "An Error has occured please try again"
                        } else {
                            err.response.json().then(function(res) {
                                var _iteratorNormalCompletion5 = true;
                                var _didIteratorError5 = false;
                                var _iteratorError5 = undefined;
                                try {
                                    for (var _iterator5 = res.errors[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                                        var error = _step5.value;
                                        _this3.summaryStatusText.innerHTML = error.title
                                    }
                                } catch (err) {
                                    _didIteratorError5 = true;
                                    _iteratorError5 = err
                                } finally {
                                    try {
                                        if (!_iteratorNormalCompletion5 && _iterator5.return) {
                                            _iterator5.return()
                                        }
                                    } finally {
                                        if (_didIteratorError5) {
                                            throw _iteratorError5
                                        }
                                    }
                                }
                            })
                        }
                        _this3.summaryStatus.classList.remove("hide")
                    })
                }
            }, {
                key: "pagination",
                value: function pagination(transactions) {
                    if (transactions.pageSize > 0) {
                        this.pageSize = transactions.totalPages;
                        this.pageEntries.innerHTML = this.paginationEntries(this.pageCurrent, this.pageSize, transactions.totalItems);
                        this.pageList.innerHTML = this.paginationRender();
                        this.paginationListener()
                    } else {
                        this.paginationReset()
                    }
                }
            }, {
                key: "paginationReset",
                value: function paginationReset() {
                    this.pageCurrent = 1;
                    this.pageSize = 1;
                    this.urlParams.skip = 0;
                    this.page.classList.add("hide");
                    this.pageList.innerHTML = ""
                }
            }, {
                key: "paginationEntries",
                value: function paginationEntries(currentPage, totalPages, totalItems) {
                    var currentIndex = "Showing Page " + currentPage + " of " + totalPages;
                    var entries = "(total " + totalItems + " entries)";
                    return currentIndex + " " + entries
                }
            }, {
                key: "paginationRender",
                value: function paginationRender() {
                    var pagination = "";
                    if (this.pageCurrent <= this.pageSize) {
                        var first = 1;
                        var current = this.pageCurrent;
                        var last = this.pageSize;
                        var prev = current - 1;
                        var next = current + 1;
                        if (current === 1) {
                            prev = current
                        }
                        if (current === this.pageSize) {
                            next = current
                        }
                        var firstPage = '<li><a href="#" data-page="' + first + '" class="' + this.pageDisable(first) + '">&#171;</a></li>';
                        var prevPage = '<li><a href="#" data-page="' + prev + '" class="' + this.pageDisable(prev) + '">&#8249;</a></li>';
                        var currentPage = "<li><span>" + current + " &#47; " + last + "</span></li>";
                        var nextPage = '<li><a href="#" data-page="' + next + '" class="' + this.pageDisable(next) + '">&#8250;</a></li>';
                        var lastPage = '<li><a href="#" data-page="' + last + '" class="' + this.pageDisable(last) + '">&#187;</a></li>';
                        this.page.classList.remove("hide");
                        pagination = firstPage + prevPage + currentPage + nextPage + lastPage
                    }
                    return pagination
                }
            }, {
                key: "pageDisable",
                value: function pageDisable(value) {
                    if (value === this.pageCurrent) return "disabled";
                    return ""
                }
            }, {
                key: "paginationListener",
                value: function paginationListener() {
                    var _this4 = this;
                    var pagedItems = this.pageList.querySelectorAll("li a");
                    var _iteratorNormalCompletion6 = true;
                    var _didIteratorError6 = false;
                    var _iteratorError6 = undefined;
                    try {
                        var _loop2 = function _loop2() {
                            var item = _step6.value;
                            item.addEventListener("click", function(e) {
                                e.preventDefault();
                                _this4.pageCurrent = parseInt(item.dataset.page, 10);
                                _this4.urlParams.skip = (_this4.pageCurrent - 1) * 10;
                                _this4.paginationEntries(_this4.pageCurrent);
                                _this4.updateTransactionHistory()
                            })
                        };
                        for (var _iterator6 = pagedItems[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                            _loop2()
                        }
                    } catch (err) {
                        _didIteratorError6 = true;
                        _iteratorError6 = err
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion6 && _iterator6.return) {
                                _iterator6.return()
                            }
                        } finally {
                            if (_didIteratorError6) {
                                throw _iteratorError6
                            }
                        }
                    }
                }
            }]);
            return TransactionHistory
        }(_data2.default);
        exports.default = TransactionHistory;
        module.exports = exports["default"]
    }, {
        "helpers/encode": 11,
        "helpers/serialize-form": 17,
        moment: 387,
        "widgets/data": 22
    }]
}, {}, [407]);
//# sourceMappingURL=scripts.js.map